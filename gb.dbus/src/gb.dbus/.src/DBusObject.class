' Gambas class file

Export

Static Public _ObjectCache As New Collection

Static Private $cType As Collection = [
  "b": "b", 
  "c": "y", 
  "h": "n",
  "i": "i",
  "l": "x",
  "p": "x",
  "g": "d",
  "f": "d",
  "d": "d",
  "s": "s",
  "v": "v",
  "DBusObject": "o",
  "Collection": "a{sv}",
  "Boolean[]": "ab",
  "Byte[]": "ay",
  "Short[]": "an",
  "Integer[]": "ai",
  "Long[]": "ax",
  "Pointer[]": "ax",
  "Single[]": "ad",
  "Float[]": "ad",
  "Date[]": "ad",
  "String[]": "as",
  "Variant[]": "av"]
  
Static Private $sName As String
Static Private $sInterface As String

Private $sPath As String
Private $aChildren As String[]
Private $hObserver As DBusObserver

Static Private Sub ConvType(sType As String) As String
  
  Return $cType[sType]
  
End

Public Sub _AddChild(sChild As String)
  
  If Not $aChildren Then $aChildren = New String[]
  $aChildren.Add(sChild)
  
End

Public Sub _GetPath() As String
  
  Return $sPath
  
End


Static Private Sub Normalize(sName As String) As String
  
  Dim sRes As String
  Dim iInd As Integer
  Dim sCar As String
  
  sRes = "."
  For iInd = 1 To Len(sName)
    sCar = Mid$(sName, iInd, 1)
    If IsLetter(sCar) Then
      sCar = LCase(sCar)
    Else If IsDigit(sCar) Then
    Else
      If Right(sRes) <> "." Then
        sCar = "."
      Else
        sCar = ""
      Endif
    Endif
    sRes &= sCar
  Next
  
  If Right(sRes) = "." Then sRes = Left(sRes, -1)
  
  Return sRes
  
End


Public Sub _Register(Connection As DBusConnection, Path As String)
  
  Dim hParent As DBusObject
  Dim sParent As String
  
  If Not $sName Then
    $sName = "org.gambas" & Normalize(Application.Name)
    Connection._RequestName($sName)
  Endif
  
  If Left(Path) <> "/" Then Path = "/" & Path
  
  If _ObjectCache.Exist(Path) Then Return
  
  $sPath = Path
  
  If Path <> "/" Then
    
    sParent = File.Dir(Path)
    hParent = _ObjectCache[sParent]
    If Not hParent Then
      hParent = New DBusObject
      hParent._Register(Connection, sParent)
    Endif
  
    hParent._AddChild(File.Name(Path))
    
  Endif
  
  $hObserver = New DBusObserver(Connection, DBus.Method, Path) As "DBusObserver"
  
End

Public Sub _Introspect() As String
  
  Dim sRes As String
  Dim sChild As String
  Dim sSymbol As String
  Dim hClass As Class
  Dim bHasProperty As Boolean
  Dim bHasMethod As Boolean
  Dim sType As String
  Dim sSign As String
  Dim sArg As String
  Dim sOne As String
  Dim iPos As Integer
  Dim iInd As Integer
  
  sRes &= "<!DOCTYPE node PUBLIC \"-//freedesktop//DTD D-BUS Object Introspection 1.0//EN\" \"http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd\">\n"
  sRes &= "<node>\n"
  
  sRes &= "  <interface name=\"org.freedesktop.Introspectable\">\n"
  sRes &= "    <method name=\"Introspect\">\n"
  sRes &= "      <arg name=\"xml_data\" type=\"s\" direction=\"out\"/>\n"
  sRes &= "    </method>\n"
  sRes &= "  </interface>\n"
  
  
  hClass = Object.Class(Me)
  
  For Each sSymbol In hClass.Symbols
    With hClass[sSymbol]
      If InStr(sSymbol, "_") Then Continue
      If .Static Then Continue
      If .Kind = Class.Property Then 
        bHasProperty = True
      Else If .Kind = Class.Method Then
        bHasMethod = True
      Endif
    End With
  Next
  
  If bHasProperty Then
    sRes &= "  <interface name=\"org.freedesktop.DBus.Properties\">\n"
    sRes &= "    <method name=\"Get\">\n"
    sRes &= "      <arg name=\"interface_name\" type=\"s\" direction=\"in\"/>\n"
    sRes &= "      <arg name=\"property_name\" type=\"s\" direction=\"in\"/>\n"
    sRes &= "      <arg name=\"value\" type=\"v\" direction=\"out\"/>\n"
    sRes &= "    </method>\n"
    sRes &= "    <method name=\"Set\">\n"
    sRes &= "      <arg name=\"interface_name\" type=\"s\" direction=\"in\"/>\n"
    sRes &= "      <arg name=\"property_name\" type=\"s\" direction=\"in\"/>\n"
    sRes &= "      <arg name=\"value\" type=\"v\" direction=\"in\"/>\n"
    sRes &= "    </method>\n"
    sRes &= "    <method name=\"GetAll\">\n"
    sRes &= "      <arg name=\"interface_name\" type=\"s\" direction=\"in\"/>\n"
    sRes &= "      <arg name=\"values\" type=\"a{sv}\" direction=\"out\"/>\n"
    sRes &= "    </method>\n"
    sRes &= "  </interface>\n"
  Endif
  
  If bHasMethod Then
    sRes &= "  <interface name=\"" & $sName & Normalize(hClass.Name) & "\">\n"
    For Each sSymbol In hClass.Symbols
      With hClass[sSymbol]
        If InStr(sSymbol, "_") Then Continue
        If .Static Then Continue

        sType = ""
        
        If .Type Then
          sType = ConvType(.Type)
          If Not sType Then Continue
        Endif
            
        Select Case .Kind

          Case Class.Method

            'Debug .Name;; .Type;; .Signature
            
            sArg = ""
            iInd = 0
              
            sSign = .Signature
            If sSign Then
              While sSign
                If IsLCase(Left(sSign)) Then
                  sOne = ConvType(Left(sSign))
                  sSign = Mid$(sSign, 2)
                Else
                  iPos = InStr(sSign, ";")
                  If iPos Then
                    sOne = Left(sSign, iPos - 1)
                    sSign = Mid$(sSign, iPos + 1)
                  Else
                    sOne = sSign
                    sSign = ""
                  Endif
                  sOne = ConvType(sOne)
                Endif
                If Not sOne Then
                  sArg = ""
                  Break
                Endif
                
                Inc iInd
                sArg &= "      <arg name=\"arg" & CStr(iInd) & "\" type=\"" & sOne & "\" direction=\"in\"/>\n"
                
              Wend
              
              If Not sArg Then Continue
            Endif
            
            sRes &= "    <method name=\"" & sSymbol & "\">\n"
            
            If sArg Then sRes &= sArg
            
            If sType Then
              sRes &= "      <arg name=\"value\" type=\"" & sType & "\" direction=\"out\"/>\n"
            Endif
            
            sRes &= "    </method>\n"
            
          Case Class.Property
            
            sRes &= "    <property name=\"" & sSymbol & "\" type=\"" & sType & "\" access=\"" & If(.ReadOnly, "read", "readwrite") & "\"/>\n"

        End Select
      End With
    Next
    sRes &= "  </interface>\n"
  Endif
  
  If $aChildren Then
    For Each sChild In $aChildren.Sort()
      sRes &= "  <node name=\"" & sChild & "\"/>\n"
    Next
  Endif
  
  sRes &= "</node>\n"
  
  Return sRes
  
End

Private Sub GetProperty()
  
  Dim sInterface As String
  Dim sProperty As String
  
  With $hObserver.Message
  
    sInterface = .Arguments[0]
    sProperty = .Arguments[1]
    
    If sInterface And If sInterface <> ($sName & Normalize(Object.Class(Me).Name)) Then Return
    If InStr(sProperty, "_") Then Return
    
    $hObserver.Reply("v", [Object.GetProperty(Me, sProperty)])
    
  End With
  
Catch
  
  $hObserver.Error(Error.Text)
  
End

Private Sub GetAllProperties()
  
  Dim cVal As New Collection
  Dim sInterface As String
  Dim hClass As Class
  Dim sSymbol As String
  
  With $hObserver.Message
  
    sInterface = .Arguments[0]
    
    If Not sInterface Or If sInterface = ($sName & Normalize(Object.Class(Me).Name)) Then
      
      hClass = Object.Class(Me)
      
      For Each sSymbol In hClass.Symbols
        With hClass[sSymbol]
          If InStr(sSymbol, "_") Then Continue
          If .Static Then Continue
          If .Kind = Class.Property Then 
            cVal[sSymbol] = Object.GetProperty(Me, sSymbol)
          Endif
        End With
      Next
      
    Endif
    
    $hObserver.Reply("a{sv}", [cVal])
    
  End With
  
Catch
  
  $hObserver.Error(Error.Text)
  
End

Private Sub SetProperty()
  
  Dim sInterface As String
  Dim sProperty As String
  Dim vValue As Variant
  
  With $hObserver.Message
  
    sInterface = .Arguments[0]
    sProperty = .Arguments[1]
    vValue = .Arguments[2]
    
    If sInterface And If sInterface <> ($sName & Normalize(Object.Class(Me).Name)) Then Return
    If InStr(sProperty, "_") Then Return
    
    Object.SetProperty(Me, sProperty, vValue)
    
  End With
  
Catch
  
  $hObserver.Error(Error.Text)
  
End


Public Sub DBusObserver_Message()
  
  Dim vVal As Variant
  Dim sMethod As String
  Dim sInterface As String
  
  sMethod = $hObserver.Message.Member
  sInterface = $hObserver.Message.Interface
  
  Debug sInterface;; sMethod
  
  If InStr(sMethod, "_") Then Return
  
  If sInterface = "org.freedesktop.DBus.Introspectable" Or If Not sInterface Then
    If sMethod = "Introspect" Then
      $hObserver.Reply("s", [_Introspect()])
      Return
    Endif
  Endif
  
  If sInterface = "org.freedesktop.DBus.Properties" Or If Not sInterface Then
    If sMethod = "Get" Then
      GetProperty()
      Return
    Else If sMethod = "Set" Then
      SetProperty()
      Return
    Else If sMethod = "GetAll" Then
      GetAllProperties()
      Return
    Endif
  Endif
  
  vVal = Object.Call(Me, sMethod, $hObserver.Message.Arguments)
  $hObserver.Reply(ConvType(Object.Class(Me)[sMethod].Type), [vVal])

Catch

  $hObserver.Error(Error.Text)
  
End
