' Gambas class file

Export

Static Private $cType As Collection = [
  "b": "Boolean", 
  "y": "Byte", 
  "n": "Short",
  "q": "Short",
  "i": "Integer",
  "u": "Integer",
  "h": "Integer",
  "x": "Long",
  "t": "Long",
  "d": "Float",
  "s": "String",
  "o": "String",
  "v": "Variant",
  "a{sv}": "Collection",
  "ab": "Boolean[]",
  "ay": "Byte[]",
  "an": "Short[]",
  "aq": "Short[]",
  "ai": "Integer[]",
  "au": "Integer[]",
  "ax": "Long[]",
  "at": "Long[]",
  "ad": "Float[]",
  "as": "String[]",
  "ao": "String[]",
  "av": "Variant[]",
  "aa{sv}": "Collection[]"]
  
Property Read Children As String[]
Property Read _Introspection As String

Private $hAppIndex As Integer
Private $sObjectPath As String
Private $sInterface As String
Private $sIntrospection As String
Private $cPos As Collection
Private $cSignature As Collection

Private Sub Introspect()

  Dim hIntr As CIntrospection
  Dim sName As String
  Dim iPos As Integer
  Dim iPos2 As Integer
  
  $sIntrospection = DBus._ApplicationCache[$hAppIndex]._Introspect($sObjectPath)
  If Not $sIntrospection Then Error.Raise("Unknown object")
  
  If $sInterface Then
    iPos = InStr($sIntrospection, "<interface name=\"" & $sInterface & "\">")
    If iPos = 0 Then Error.Raise("Unknown interface")
    iPos2 = InStr($sIntrospection, "</interface>", iPos)
    If iPos2 = 0 Then Error.Raise("Introspection error")
    $sIntrospection = Mid$($sIntrospection, iPos, iPos2 - iPos)
  Endif
  
  $cSignature = New Collection
  $cPos = New Collection
  $cPos.Default = 0
  
  hIntr = New CIntrospection($sIntrospection)
  While Not hIntr.MoveNext()
    
    If Not hIntr.Open Then Continue
    If hIntr.Level <> 2 Then Continue
    
    sName = hIntr.GetAttribute("name")
    If Not sName Then Continue
    
    $cPos[sName] = hIntr.Pos
    
  Wend

End

Public Sub _new((Application) As DBusApplication, ObjectPath As String, Optional Interface As String)
  
  $hAppIndex = Application.Index
  $sObjectPath = ObjectPath
  $sInterface = Interface
  
  Introspect()
  
End

Static Private Sub FormatType(sType As String) As String

  Dim sGambasType As String
  
  sGambasType = $cType[sType]
  
  If Not sGambasType Then
    
    If sType Begins "a{" Then
      If sType Like "a\\{[os]*}" Then
        sGambasType = "Collection"
      Endif
    Else If sType Begins "a" Then
      sType = Mid$(sType, 2)
      sGambasType = FormatType(sType) & "[]"
    Endif
    
  Endif
  
  If Not sGambasType Then sGambasType = "Variant"
  Return sGambasType
  
End


Public Sub _GetSignature(sSymbol As String, Optional bFormat As Boolean) As String
  
  Dim iPos, iStart, iEnd As Integer
  Dim sSignIn, sSignOut As String
  Dim sDir, sType As String
  Dim sAccess As String
  Dim iPos2 As Integer
  Dim bSignal As Boolean
  Dim sName As String
  Dim aSign As String[]
  Dim aArg As String[]
  Dim I As Integer
  Dim sArg As String
  Dim sComment As String
  Dim hIntr As CIntrospection
  
  sType = $cSignature[sSymbol]
  If sType Then Goto RETURN_SIGNATURE
  
  iStart = $cPos[sSymbol] 'InStr($sIntrospection, " name=\"" & sSymbol & "\"", 1, gb.IgnoreCase)
  If iStart = 0 Then Goto UNKNOWN_SYMBOL
  
  hIntr = New CIntrospection(Mid$($sIntrospection, iStart))
  
  If hIntr.MoveNext() Then Goto UNKNOWN_SYMBOL
  
  If hIntr.Node = "property" Then
  
    sType = hIntr.GetAttribute("type")
    If Not sType Then Goto MALFORMED_SIGNATURE
    sAccess = hIntr.GetAttribute("access")
    
    If sAccess = "read" Then
      sType &= ":r"
    Else If sAccess = "write" Then
      sType &= ":w"
    Else If sAccess = "readwrite" Then
      sType &= ":rw"
    Else
      Error.Raise("Malformed property")
    Endif
    
    sType = "p:" & sType
    
  Else If hIntr.Node = "method" Or If hIntr.Node = "signal" Then
    
    bSignal = hIntr.Node Begins "s"
    
    If Not hIntr.Close Then
    
      While Not hIntr.MoveNext()
      
        If hIntr.Node <> "arg" Then Break
        If hIntr.Close Then Continue
      
        sDir = hIntr.GetAttribute("direction")
        If Not sDir Then sDir = "in"
        
        sType = hIntr.GetAttribute("type")
        If Not sType Then Goto MALFORMED_SIGNATURE
          
        If sDir = "in" Then
          If bFormat Then 
            sName = hIntr.GetAttribute("name")
            If sSignIn Then sSignIn &= "|"
            sSignIn &= "'" & sName & "'"
          Endif
          sSignIn &= sType
        Else
          If bFormat Then
            If sSignOut Then sSignOut &= "|"
          Endif
          sSignOut &= sType
        Endif
          
      Wend 
      
    Endif
        
    sType = If(bSignal, "s:", "m:") & sSignIn & ":" & sSignOut
    
  Else
    
    Goto UNKNOWN_SYMBOL
    
  Endif
  
  $cSignature[sSymbol] = sType
  
RETURN_SIGNATURE:

  If bFormat Then
  
    aSign = Split(sType, ":")
    
    Select Case aSign[0]
      
      Case "p"
        
        sType = "Property "
        
        Select Case aSign[2]
          Case "r"
            sType &= "Read "
          Case "w"
            sType &= "Write "
        End Select
        
        sType &= sSymbol & " As " & FormatType(aSign[1])
        
        sType &= " ' " & aSign[1]
        
      Case "m", "s"
        
        If aSign[0] = "s" Then 
          sType = "Event"
        Else If aSign[2] Then
          sType = "Function"
        Else 
          sType = "Sub"
        Endif

        sType &= " " & sSymbol & "("
        
        aArg = Split(aSign[1], "|")
        For I = 0 To aArg.Max
          If I Then sType &= ", "
          sArg = aArg[I]
          If sArg Begins "'" Then
            sArg = Mid$(sArg, 2)
            iPos = InStr(sArg, "'")
            If iPos = 0 Then
              sType &= "_arg" & CStr(I + 1)
            Else
              sType &= Left(sArg, iPos - 1)
              sArg = Mid$(sArg, iPos + 1)
            Endif
          Else 
            sType &= "_arg" & CStr(I + 1)
          Endif
          sType &= " As " & FormatType(sArg)
        Next
        
        sType &= ")"

        If aSign[2] Then
          
          sType &= " As "
          
          aArg = Split(aSign[2], "|")
          
          If aArg.Count = 1 Then 
            sType &= FormatType(aArg[0])
          Else 
            sType &= "Variant[]"
          Endif
          
        Endif
        
        sComment = aSign[1]
        If aSign[2] Then sComment &= " -> " & aSign[2]
        
        If sComment Then
          
          Do
            iPos = InStr(sComment, "'")
            If iPos = 0 Then Break 
            iPos2 = InStr(sComment, "'", iPos + 1)
            If iPos2 = 0 Then iPos2 = Len(sComment)
            sComment = Left(sComment, iPos - 1) & Mid$(sComment, iPos2 + 1)
          Loop
        
          sType &= " ' " & sComment
        Endif
        
    End Select
    
  Endif 
  
  Return sType
  
UNKNOWN_SYMBOL:

  Error.Raise("Unknown symbol")
  
MALFORMED_SIGNATURE:

  Error.Raise("Malformed signature")
  
End

Public Sub _Invoke(sName As String, aArg As Variant[]) As Variant
  
  Dim aSign As String[]
  Dim hApp As DBusApplication
  Dim vVal As Variant
  Dim sSign As String
  Dim bProperty As Boolean
  Dim hVariant As DBusVariant
  
  hApp = DBus._ApplicationCache[$hAppIndex]
  
  sSign = _GetSignature(sName)
  bProperty = Left(sSign, 2) = "p:"
  sSign = Mid$(sSign, 3)
  
  aSign = Split(sSign, ":")
  
  If bProperty Then 'Error.Raise("Unknown property")
  
    If IsNull(aArg) Or If aArg.Count = 0 Then
      'Debug "read property " & sName
      If InStr(aSign[1], "r") = 0 Then Error.Raise("Write-only property")
      aArg = New Variant[2]
      aArg[0] = $sInterface
      aArg[1] = sName
      Return hApp.Connection._CallMethod(hApp.Name, $sObjectPath, "org.freedesktop.DBus.Properties", "Get", "ss", "v", aArg)
    Else
      'Debug "write property " & sName
      If InStr(aSign[1], "w") = 0 Then Error.Raise("Read-only property")
      vVal = aArg[0]
      aArg = New Variant[3]
      aArg[0] = $sInterface
      aArg[1] = sName
      hVariant = New DBusVariant
      hVariant.Value = vVal
      aArg[2] = hVariant
      hApp.Connection._CallMethod(hApp.Name, $sObjectPath, "org.freedesktop.DBus.Properties", "Set", "ssv", "", aArg)
    Endif
  
  Else
  
    'Print GetSignature(Param.Name)
    Return hApp.Connection._CallMethod(hApp.Name, $sObjectPath, $sInterface, sName, aSign[0], aSign[1], aArg)
    
  Endif
  
End

Public Sub _unknown(...) As Variant
  
  Dim aArg As Variant[]
  
  If Param.Count Then aArg = Param.All
  Return _Invoke(Param.Name, aArg)
  
End

Public Sub _property() As Boolean
  
  'Return True
  'Debug Param.Name;; GetSignature(Param.Name)
  Return _GetSignature(Param.Name) Begins "p:"
  
End


' Refresh introspection, because new objects may have appeared.

Private Function Children_Read() As String[]

  Introspect()
  Return _GetSymbols("node")

End

Private Function _Introspection_Read() As String

  Return $sIntrospection

End

Public Sub _GetSymbols(Optional Which As String) As String[]

  Dim hIntr As CIntrospection
  Dim aSym As New String[]
  Dim sName As String

  hIntr = New CIntrospection($sIntrospection)
  
  While Not hIntr.MoveNext()
    
    If Not hIntr.Open Then Continue
    If hIntr.Level <> 2 Then Continue
    If Which And If hIntr.Node <> Which Then Continue
    
    sName = hIntr.GetAttribute("name")
    If Not sName Then Continue
    If Not Which Then sName = Left(hIntr.Node) & ":" & sName
    aSym.Add(sName)
    
  Wend
  
  Return aSym

End
