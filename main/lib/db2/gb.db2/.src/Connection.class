' Gambas class file

Export

Property Type As String Use $sType
Property Host As String Use $sHost
Property Login, User As String Use $sUser
Property Password As String Use $sPassword
Property Name As String Use $Name
Property Port As String Use $sPort
Property Timeout As Integer Use $iTimeout

Property Read Charset As String
Property Read Version As Integer
Property Read FullVersion As String
Property Read Opened As Boolean
Property Read Error As Integer
Property IgnoreCharset As Boolean Use $bIgnoreCharset
Property Read Collations As String[]
Property Read Handle As Pointer Use $pHandle
Property Read LastInsertId As Long

Property Read Tables As _ConnectionTables

Private $hDriver As _DatabaseDriver
Private $sVersion As String
Private $hTables As _ConnectionTables
Private $iLimit As Integer
Private $iTrans As Integer

'   GB_DECLARE("_Connection", sizeof(CCONNECTION)),
' 
'   GB_METHOD("_new", NULL, Connection_new, NULL),
'   GB_METHOD("_free", NULL, Connection_free, NULL),
' 
'   GB_METHOD("Limit", "Connection", Connection_Limit, "(Limit)i"),
'   GB_METHOD("Exec", "Result", Connection_Exec, "(Request)s(Arguments)."),
'   GB_METHOD("Create", "Result", Connection_Create, "(Table)s[(Return)b(IfNotExist)b]"),
'   GB_METHOD("Find", "Result", Connection_Find, "(Table)s[(Request)s(Arguments).]"),
'   GB_METHOD("Edit", "Result", Connection_Edit, "(Table)s[(Request)s(Arguments).]"),
'   GB_METHOD("Delete", NULL, Connection_Delete, "(Table)s[(Request)s(Arguments).]"),
'   GB_METHOD("Subst", "s", Connection_Subst, "(Format)s(Arguments)."),
' 
'   GB_METHOD("Begin", NULL, Connection_Begin, NULL),
'   GB_METHOD("Commit", NULL, Connection_Commit, NULL),
'   GB_METHOD("Rollback", NULL, Connection_Rollback, NULL),
' 
'   GB_METHOD("Quote", "s", Connection_Quote, "(Name)s[(Table)b]"),
'   GB_METHOD("FormatBlob", "s", Connection_FormatBlob, "(Data)s"),
' 
'   GB_PROPERTY("Tables", ".Connection.Tables", Connection_Tables),
'   GB_PROPERTY("Databases", ".Connection.Databases", Connection_Databases),
'   GB_PROPERTY("Users", ".Connection.Users", Connection_Users),
'   //GB_PROPERTY("Views", ".ConnectionViews", CCONNECTION_views),
' 
'   GB_CONSTANT("_Properties", "s", "Type,Host,Login,Password,Name,Port"),
' 
'   GB_END_DECLARE

Public Sub _new()
  
  If Not DB.Current Then DB.Current = Me
  
End

Private Function Charset_Read() As String

  Return $hDriver.Charset

End

Private Function Version_Read() As Integer

  Return $hDriver.Version

End

Private Function FullVersion_Read() As String

  Return $hDriver.FullVersion

End

Private Function Opened_Read() As Boolean

  Return $hDriver

End

Private Function Error_Read() As Integer

  Return $hDriver.GetError()

End

Private Function Collations_Read() As String[]

  Return $hDriver.GetCollations()

End

Private Function LastInsertId_Read() As Long

  Return $hDriver.GetLastInsertId()

End

Public Sub Open()
  
  If $hDriver Then Error.Raise("Connection already opened")
  
  Try Component.Load("gb.db2." & LCase($sType))
  If Error Then Error.Raise("Unable to load database driver: " & Error.Text)
  
  $hDriver = Object.New("_DatabaseDriver_" & LCase($sType)) 
  Object.Attach($hDriver, Me, "DatabaseDriver")
  $pHandle = $hDriver.Open(Me.Host, Me.Port, Me.Name, Me.User, Me.Password)
  
  $sVersion = $hDriver.GetVersion()
  
  $iLimit = 0
  $iTrans = 0
  
End

Public Sub Close()
  
  If Not $hDriver Then Return
  $hDriver.Close()
  
End

Public Sub Subst(Format As String, ...) As String

  Dim I As Integer
  Dim aArg As String[]

  If Param.Count = 0 Then Return Format

  aArg = New String[Param.Count]
  For I = 0 To Param.Max
    aArg[I] = $hDriver.Format(Param[I])
  Next
  
  Return String.Subst(Format, aArg)
  
End

Private Sub GetQuery(sQuery As String) As String
  
  Dim sKeyword As String
  
  If $iLimit > 0 And If UCase(Left(sQuery, 7)) = "SELECT " Then
    
    sKeyword = $hDriver.Limit
    If Not sKeyword Then sKeyword = "LIMIT"
    
    Select Case $hDriver.LimitPos
      Case _DatabaseDriver.LIMIT_AT_BEGIN
        Return "SELECT " & sKeyword & " " & CStr($iLimit) & Mid$(sQuery, 7)
      Default
        Return sQuery & " " & sKeyword & " " & CStr($iLimit)
    End Select
    
  Else 
    
    Return sQuery
    
  Endif
  
End

Public Sub Exec(Request As String, ...) As Result
  
  Dim pHandle As Pointer
  Dim hResult As Result
  
  pHandle = $hDriver.Query(GetQuery(Me.Subst(Request, ...)))
  
  hResult = New Result
  hResult._Fill($hDriver, pHandle)
  Return hResult
  
End

Public Sub Quote(Name As String, Optional Table As Boolean) As String
  
  Dim sQuote As String = $hDriver.QuoteCharacter
  Dim iPos As Integer
  
  If Table Then
    
    If $hDriver.HasSchema Then iPos = InStr(Table, ".")
    If iPos Then Return sQuote & Left(Table, iPos - 1) & sQuote & "." & sQuote & Mid(Table, iPos + 1) & sQuote
    
  Endif
    
  Return sQuote & Name & sQuote
  
End

Private Function Tables_Read() As _ConnectionTables

  If Not $hTables Then 
    $hTables = New _ConnectionTables
    $hTables._Driver = $hDriver
    $hTables.Refresh()
  Endif 
  
  Return $hTables

End

Public Sub Create(Table As String, Optional {Return} As Boolean, IfNotExist As Boolean) As Result

  Dim hResult As Result
  
  If Not Table Then Error.Raise("Void table name")
  
  hResult = New Result
  hResult._Create($hDriver, Table, {Return}, IfNotExist)
  Return hResult
  
End

Public Sub Find(Table As String, Optional Request As String, ...) As Result
  
  Dim sReq As String = "SELECT * FROM " & Me.Quote(Table, True)
  
  If Request Then 
    sReq &= " "
    If UCase(Left(Request, 6)) <> "WHERE " And If UCase(Left(Request, 9)) <> "ORDER BY " Then sReq &= "WHERE "
    sReq &= Me.Subst(Request, ...)
  Endif
  
  Return Me.Exec(GetQuery(sReq))
  
End

Public Sub Edit(Table As String, Optional Request As String, ...) As Result
  
  Dim sReq As String = "SELECT * FROM " & Me.Quote(Table, True)
  Dim hResult As Result
  Dim pHandle As Pointer
  
  If Request Then 
    sReq &= " "
    If UCase(Left(Request, 6)) <> "WHERE " And If UCase(Left(Request, 9)) <> "ORDER BY " Then sReq &= "WHERE "
    sReq &= Me.Subst(Request, ...)
  Endif
  
  pHandle = $hDriver.Query(GetQuery(sReq))
  hResult = New Result
  hResult._Edit($hDriver, Table, pHandle)
  Return hResult

End

Public Sub Delete(Table As String, Optional Request As String, ...)
  
  Dim sReq As String = "DELETE * FROM " & Me.Quote(Table, True)
  
  If Request Then 
    sReq &= " "
    If UCase(Left(Request, 6)) <> "WHERE " And If UCase(Left(Request, 9)) <> "ORDER BY " Then sReq &= "WHERE "
    sReq &= Me.Subst(Request, ...)
  Endif
  
  $hDriver.Exec(GetQuery(sReq))

End

Public Sub Begin()
  
  If $iTrans = 0 Or If Not $hDriver.NoTransactionNest Then $hDriver.Begin()
  Inc $iTrans
  
End

Public Sub Commit()
  
  Dec $iTrans
  If $iTrans = 0 Or If Not $hDriver.NoTransactionNest Then $hDriver.Commit()
  
End

Public Sub Rollback()
  
  Dec $iTrans
  If $iTrans = 0 Or If Not $hDriver.NoTransactionNest Then $hDriver.Rollback()
  
End

Public Sub Limit((Limit) As Integer) As Connection
  
  $iLimit = Limit
  Return Me
  
End

' Private Sub Type_Write(Value As String)
'   
'   If $hDriver Then Error.Raise("Connection is opened")
'   $sType = Value
'   
' End
