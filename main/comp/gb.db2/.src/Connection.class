' Gambas class file

Export

Property Type As String Use $sType
Property Host As String Use $sHost
Property Login, User As String Use $sUser
Property Password As String Use $sPassword
Property Name As String Use $Name
Property Port As String Use $sPort
Property Timeout As Integer Use $iTimeout

Property Read Charset As String
Property Read Version As Integer
Property Read FullVersion As String
Property Read Opened As Boolean
Property Read Error As Integer
Property IgnoreCharset As Boolean Use $bIgnoreCharset
Property Read Collations As String[]
Property Read Handle As Pointer Use $pHandle
Property Read LastInsertId As Long

Property Read Tables As _ConnectionTables
Property Read Databases As _ConnectionDatabases
Property Read Users As _ConnectionUsers

Property Read Url As String
Property Read SQL As SQLRequest

'' Return or set the connection options.
''
'' These options are specific to the database type.

Property Options As Collection

Private Const TEMPLATE_MAGIC As String = "# Gambas Database Template File 3.0"
Private DEBUG_ME As Boolean

Private $hDriver As _DatabaseDriver
Private $hTables As _ConnectionTables
Private $iLimit As Integer
Private $iTrans As Integer
Private $hDatabases As _ConnectionDatabases
Private $hUsers As _ConnectionUsers
Private $hOptions As Collection

'   GB_DECLARE("_Connection", sizeof(CCONNECTION)),
' 
'   GB_METHOD("_new", NULL, Connection_new, NULL),
'   GB_METHOD("_free", NULL, Connection_free, NULL),
' 
'   GB_METHOD("Limit", "Connection", Connection_Limit, "(Limit)i"),
'   GB_METHOD("Exec", "Result", Connection_Exec, "(Request)s(Arguments)."),
'   GB_METHOD("Create", "Result", Connection_Create, "(Table)s[(Return)b(IfNotExist)b]"),
'   GB_METHOD("Find", "Result", Connection_Find, "(Table)s[(Request)s(Arguments).]"),
'   GB_METHOD("Edit", "Result", Connection_Edit, "(Table)s[(Request)s(Arguments).]"),
'   GB_METHOD("Delete", NULL, Connection_Delete, "(Table)s[(Request)s(Arguments).]"),
'   GB_METHOD("Subst", "s", Connection_Subst, "(Format)s(Arguments)."),
' 
'   GB_METHOD("Begin", NULL, Connection_Begin, NULL),
'   GB_METHOD("Commit", NULL, Connection_Commit, NULL),
'   GB_METHOD("Rollback", NULL, Connection_Rollback, NULL),
' 
'   GB_METHOD("Quote", "s", Connection_Quote, "(Name)s[(Table)b]"),
'   GB_METHOD("FormatBlob", "s", Connection_FormatBlob, "(Data)s"),
' 
'   GB_PROPERTY("Tables", ".Connection.Tables", Connection_Tables),
'   GB_PROPERTY("Databases", ".Connection.Databases", Connection_Databases),
'   GB_PROPERTY("Users", ".Connection.Users", Connection_Users),
'   //GB_PROPERTY("Views", ".ConnectionViews", CCONNECTION_views),
' 
'   GB_CONSTANT("_Properties", "s", "Type,Host,Login,Password,Name,Port"),
' 
'   GB_END_DECLARE

Public Sub _new(Optional DatabaseURL As String)
  
  Dim iPos As Integer
  Dim sIdent As String
  Dim hSave As Connection
  
  If Not DB.Current Then 
    hSave = DB.Current
    DB.Current = Me
  Endif
  
  If Not DatabaseURL Then Return
  
  ' <type>://<user>:<password>@<host>:<port>/<name>
  
  iPos = InStr(DatabaseURL, "://")
  If iPos = 0 Then Goto BAD_URL
  
  Me.Type = Left(DatabaseURL, iPos - 1)
  DatabaseURL = Mid$(DatabaseURL, iPos + 3)
  
  iPos = RInStr(DatabaseURL, "/")
  If iPos Then
    Me.Name = FromUrl(Mid$(DatabaseURL, iPos + 1))
    DatabaseURL = Left(DatabaseURL, iPos - 1)
  Endif
  
  iPos = InStr(DatabaseURL, "@")
  If iPos Then
    
    sIdent = Left(DatabaseURL, iPos - 1)
    DatabaseURL = Mid$(DatabaseURL, iPos + 1)
    
    iPos = InStr(sIdent, ":")
    If iPos Then
      Me.Password = FromUrl(Mid$(sIdent, iPos + 1))
      Me.User = FromUrl(Left$(sIdent, iPos - 1))
    Else
      Me.User = FromUrl(sIdent)
    Endif
    
  Endif
  
  iPos = InStr(DatabaseURL, ":")
  If iPos Then
    Me.Host = FromUrl(Left$(DatabaseURL, iPos - 1))
    Me.Port = FromUrl(Mid$(DatabaseURL, iPos + 1))
  Else
    Me.Host = FromUrl(DatabaseURL)
  Endif
  
  Return
  
BAD_URL:

  DB.Current = hSave
  Error.Raise("Malformed URL")
  
End

Public Sub _free()
  
  Close()
  
End

Private Function Charset_Read() As String

  CheckOpen()
  Return $hDriver.Charset

End

Private Function Version_Read() As Integer

  CheckOpen()
  Return $hDriver.Version

End

Private Function FullVersion_Read() As String

  CheckOpen()
  Return $hDriver.FullVersion

End

Private Function Opened_Read() As Boolean

  Return $hDriver

End

Private Function Error_Read() As Integer

  CheckOpen()
  Return $hDriver.GetError()

End

Private Function Collations_Read() As String[]

  CheckOpen()
  If $hDriver.NoCollation Then Return
  Return $hDriver.GetCollations()

End

Private Function LastInsertId_Read() As Long

  CheckOpen()
  Return $hDriver.GetLastInsertId()

End

Public Sub Open()
  
  Dim sType As String
  Dim hDriver As _DatabaseDriver
  
  If $hDriver Then Error.Raise("Connection already opened")
  
  sType = Trim($sType)
  If Not sType Then Error.Raise("Missing connection type")

  If sType = "sqlite" Then sType = "sqlite3"
  
  Try Component.Load("gb.db2." & LCase(sType))
  If Error Then Error.Raise("Unable to load database driver: " & Error.Text)
  
  hDriver = Object.New("_DatabaseDriver_" & LCase(sType)) 
  Object.Attach(hDriver, Me, "DatabaseDriver")
  
  $pHandle = hDriver.Open(Me)
  $hDriver = hDriver
  
  $iLimit = 0
  $iTrans = 0
  
End

Private Sub CheckOpen()
  
  If Not $hDriver Or If Not $pHandle Then Error.Raise("Connection is not opened")
  
End

Public Sub Close()
  
  If Not $hDriver Or If Not $pHandle Then Return
  $hDriver.Close()
  $hDriver = Null
  $pHandle = Null
  
End

Public Sub Subst(Format As String, ...) As String

  Dim I As Integer
  Dim aArg As String[]

  CheckOpen()
  
  If Param.Count = 0 Then Return Format

  aArg = New String[Param.Count]
  For I = 0 To Param.Max
    aArg[I] = $hDriver.Format(Param[I])
  Next
  
  Return Subst(Format, aArg)
  
End

Private Sub GetQuery(sQuery As String) As String
  
  Dim sKeyword As String
  
  If $iLimit > 0 And If UCase(Left(sQuery, 7)) = "SELECT " Then
    
    sKeyword = $hDriver.Limit
    If Not sKeyword Then sKeyword = "LIMIT"
    
    Select Case $hDriver.LimitPos
      Case _DatabaseDriver.LIMIT_AT_BEGIN
        Return "SELECT " & sKeyword & " " & CStr($iLimit) & Mid$(sQuery, 7)
      Default
        Return sQuery & " " & sKeyword & " " & CStr($iLimit)
    End Select
    
  Else 
    
    Return sQuery
    
  Endif
  
End

Public Sub Exec(Request As String, ...) As Result
  
  Dim pHandle As Pointer
  Dim hResult As Result
  
  CheckOpen()
  
  pHandle = $hDriver.Query(GetQuery(Me.Subst(Request, ...)))
  
  hResult = New Result
  hResult._Fill($hDriver, pHandle)
  Return hResult
  
End

Public Sub Quote(Name As String, Optional Table As Boolean) As String
  
  Dim sQuote As String
  Dim iPos As Integer
  
  CheckOpen()
  
  sQuote = $hDriver.QuoteCharacter
  
  If Table Then
    
    If $hDriver.HasSchema Then iPos = InStr(Name, ".")
    If iPos Then Return sQuote & Left(Name, iPos - 1) & sQuote & "." & sQuote & Mid(Name, iPos + 1) & sQuote
    
  Endif
    
  Return sQuote & Name & sQuote
  
End

Private Function Tables_Read() As _ConnectionTables

  CheckOpen()

  If Not $hTables Then 
    $hTables = New _ConnectionTables
    $hTables._Driver = $hDriver
    $hTables.Refresh()
  Endif 
  
  Return $hTables

End

Public Sub Create(Table As String, Optional {Return} As Boolean, IfNotExist As Boolean) As Result

  Dim hResult As Result
  
  CheckOpen()

  If Not Table Then Error.Raise("Void table name")
  
  hResult = New Result
  hResult._Create($hDriver, Table, {Return}, IfNotExist)
  Return hResult
  
End

Public Sub Find(Table As String, Optional Request As String, ...) As Result
  
  Dim sReq As String
  
  CheckOpen()

  sReq = "SELECT * FROM " & Me.Quote(Table, True)
  
  If Request Then 
    sReq &= " "
    If UCase(Left(Request, 6)) <> "WHERE " And If UCase(Left(Request, 9)) <> "ORDER BY " Then sReq &= "WHERE "
    sReq &= Me.Subst(Request, ...)
  Endif
  
  Return Me.Exec(GetQuery(sReq))
  
End

Public Sub Edit(Table As String, Optional Request As String, ...) As Result
  
  Dim hResult As Result
  Dim pHandle As Pointer
  Dim sReq As String
  
  CheckOpen()

  sReq = "SELECT * FROM " & Me.Quote(Table, True)
  
  If Request Then 
    sReq &= " "
    If UCase(Left(Request, 6)) <> "WHERE " And If UCase(Left(Request, 9)) <> "ORDER BY " Then sReq &= "WHERE "
    sReq &= Me.Subst(Request, ...)
  Endif
  
  pHandle = $hDriver.Query(GetQuery(sReq))
  hResult = New Result
  hResult._Edit($hDriver, Table, pHandle)
  Return hResult

End

Public Sub Delete(Table As String, Optional Request As String, ...)
  
  Dim sReq As String
  
  CheckOpen()

  sReq = "DELETE * FROM " & Me.Quote(Table, True)
  
  If Request Then 
    sReq &= " "
    If UCase(Left(Request, 6)) <> "WHERE " And If UCase(Left(Request, 9)) <> "ORDER BY " Then sReq &= "WHERE "
    sReq &= Me.Subst(Request, ...)
  Endif
  
  $hDriver.Exec(GetQuery(sReq))

End

Public Sub Begin()
  
  CheckOpen()
  If $iTrans = 0 Or If Not $hDriver.NoTransactionNest Then $hDriver.Begin()
  Inc $iTrans
  
End

Public Sub Commit()
  
  CheckOpen()
  Dec $iTrans
  If $iTrans = 0 Or If Not $hDriver.NoTransactionNest Then $hDriver.Commit()
  
End

Public Sub Rollback()
  
  CheckOpen()
  Dec $iTrans
  If $iTrans = 0 Or If Not $hDriver.NoTransactionNest Then $hDriver.Rollback()
  
End

Public Sub Limit((Limit) As Integer) As Connection
  
  $iLimit = Limit
  Return Me
  
End

' Private Sub Type_Write(Value As String)
'   
'   If $hDriver Then Error.Raise("Connection is opened")
'   $sType = Value
'   
' End

Private Function Databases_Read() As _ConnectionDatabases

  CheckOpen()

  If Not $hDatabases Then 
    $hDatabases = New _ConnectionDatabases
    $hDatabases._Driver = $hDriver
    $hDatabases.Refresh()
  Endif 
  
  Return $hDatabases

End

Private Function Users_Read() As _ConnectionUsers

  CheckOpen()
  
  If Not $hUsers Then 
    $hUsers = New _ConnectionUsers
    $hUsers._Driver = $hDriver
    $hUsers.Refresh()
  Endif 
  
  Return $hUsers
  
End

Private Function Options_Read() As Collection

  If Not $hOptions Then $hOptions = New Collection
  Return $hOptions

End

Private Sub Options_Write(Value As Collection)

  If Not Value Then
    $hOptions = Null
  Else
    $hOptions = Value.Copy()
  Endif

End

'--------------------------------------------

Private Function GetTempTableName() As String

  Dim iInd As Integer
  Dim sTemp As String

  For iInd = 0 To 99
    sTemp = "_gb_temp"
    If iInd Then sTemp = sTemp & "_" & iInd
    If Not Me.Tables.Exist(sTemp) Then Break
    Inc iInd
    sTemp = ""
  Next

  If Not sTemp Then Error.Raise("Cannot find a free temporary table name")

  Return sTemp

End

Private Sub Convert(vVal As Variant, iType As Integer) As Variant

  Select iType
    Case db.Float
      vVal = Val(vVal)
      If TypeOf(vVal) <= gb.Float Then Return vVal
    Case db.Date
      vVal = Val(vVal)
      If TypeOf(vVal) = gb.Date Then Return vVal
  End Select
  
  Error.Raise("Type mismatch")

End

Private Function CopyTable(sTable As String) As String

  Dim sTemp As String
  Dim iInd As Integer
  Dim sReq As String
  Dim hSrc As Table
  Dim hDst As Table
  Dim rSrc As Result
  Dim rDst As Result
  Dim hField As Field
  Dim sError As String
  Dim iMax As Integer

  sTemp = GetTempTableName()

  Select Case Me.Type

    Case "postgresql"
      sReq = "SELECT * INTO TABLE " & sTemp & " FROM \"" & sTable & "\""
      Me.Exec(sReq)

    Case "mysql"
      sReq = "CREATE TABLE " & sTemp & " SELECT * FROM `" & sTable & "`"
      Me.Exec(sReq)

    'CASE "sqlite"
    '  sReq = "INSERT INTO " & sTemp & " SELECT * FROM " & sTable

    Default

      hSrc = Me.Tables[sTable]
      hDst = Me.Tables.Add(sTemp, hSrc.Type)

      'IF NOT hSrc.PrimaryKey THEN Error.Raise("No primary key")

      For Each hField In hSrc.Fields
        With hField
          hDst.Fields.Add(.Name, .Type, .Length, .Default)
        End With
      Next
      
      iMax = hSrc.Fields.Count - 1

      hDst.PrimaryKey = hSrc.PrimaryKey

      hDst.Update

      Me.Begin

      rSrc = Me.Find(sTable)
      rDst = Me.Create(sTemp)
      
      For Each rSrc
        For iInd = 0 To iMax
          rDst[iInd] = rSrc[iInd]
        Next
        rDst.Update
      Next

      Me.Commit

  End Select

  Return sTemp

Catch

  sError = Error.Text

  Select Case Me.Type

    Case "postgresql"

    Case "mysql"
      Try Me.Rollback
      If Me.Tables.Exist(sTable) Then
         Try Me.Tables.Remove(sTemp)
      Else
         If Me.Tables.Exist(sTemp) Then
            sReq = "RENAME TABLE " & sTemp & " TO " & sTable
            Try Me.Exec(sReq)
         Else
            Error.Raise("Severe Error: Table has been lost!!")
         Endif
      Endif

    Default
      Try Me.Rollback
      If Me.Tables.Exist(sTable) Then
         Try Me.Tables.Remove(sTemp)
      Else
         If Me.Tables.Exist(sTable) Then
            Error.Raise("Severe Error: Table " & sTable & " has not been recreated. Data held in " & sTemp)
         Endif
      Endif

  End Select

  Error.Raise("Cannot copy table data: " & sError)

End

Private Sub ReadTemplate(hFile As File, Optional iLine As Integer) As Collection[]

  Dim cResult As New Collection[]
  
  Dim cTable As Collection
  Dim cField As Collection
  Dim cIndex As Collection
  Dim sLine As String
  Dim cCurrent As Collection
  Dim sErr As String
  Dim iPos As Integer
  
  For Each sLine In hFile.Lines
    
    Inc iLine
    sLine = Trim(sLine)
    If Not sLine Then Continue
    If sLine Begins "#" Then Continue
    
    If sLine = "}" Then
      If cIndex Then
        cTable["Indexes"].Add(cIndex)
        cIndex = Null
        cCurrent = cTable
      Else If cField Then
        cTable["Fields"].Add(cField)
        cField = Null
        cCurrent = cTable
      Else If cTable Then
        cResult.Add(cTable)
        cTable = Null
        cIndex = Null
        cField = Null
        cCurrent = Null
      Else
        sErr = "Unexpected '}'"
        Goto SYNTAX_ERROR
      Endif
      Continue
    Endif
    
    If cIndex Then
    Else If cField Then
    Else If cTable Then
      If sLine = "{ Index" Then
        cIndex = New Collection
        cCurrent = cIndex
        Continue
      Else If sLine = "{ Field" Then
        cField = New Collection
        cCurrent = cField
        Continue
      Endif
    Else
      If sLine <> "{ Table" Then
        sErr = "`{ Table` expected"
        Goto SYNTAX_ERROR
      Endif
      cTable = New Collection
      cTable["Fields"] = New Collection[]
      cTable["Indexes"] = New Collection[]
      cCurrent = cTable
      Continue
    Endif
    
    iPos = InStr(sLine, "=")
    If iPos <= 1 Then Goto SYNTAX_ERROR
    ' FIXME: Calling Eval() is not very secure!
    Try cCurrent[Trim(Left(sLine, iPos - 1))] = Eval(Trim(Mid$(sLine, iPos + 1)))
    If Error Then Goto SYNTAX_ERROR
    
  Next
  
  If cCurrent Then Goto SYNTAX_ERROR
  
  Return cResult
    
SYNTAX_ERROR:

  If Not sErr Then sErr = "`" & sLine & "`"
  Error.Raise("Syntax error in database template at line " & CStr(iLine) & ": " & sErr)
  
End

Private Sub IsSameTable(cTable As Collection, cTable2 As Collection) As Boolean

  Dim hFile As File
  Dim sTable As String
  Dim sTable2 As String

  hFile = Open String For Write
  
  Write #hFile, cTable As Collection
  sTable = Close #hFile
  
  hFile = Open String For Write
  Write #hFile, cTable2 As Collection
  sTable2 = Close #hFile
  
  Return sTable = sTable2
  
End

Public Sub ApplyTemplate(Template As String)
  
  Dim hFile As File
  Dim sLine As String
  Dim cTable As Collection
  Dim cField As Collection
  Dim cIndex As Collection
  Dim sTable As String
  Dim hTable As Table
  Dim iLength As Integer
  Dim sColl As String
  Dim aKey As String[]
  Dim sCopyTable As String
  Dim sName As String
  Dim rTemp As Result
  Dim rTable As Result
  Dim cTableOrg As Collection
  Dim aTables As Collection[]

  DEBUG_ME = Env["GB_DB_DEBUG_TEMPLATE"] = "1"
  
  If DEBUG_ME Then Error "gb.db: applying template to: "; Me.Url; "..."
  
  hFile = Open String Template
  
  Line Input #hFile, sLine
  If sLine <> "# Gambas Database Template File 3.0" Then Error.Raise("Bad database template format")
  
  aTables = ReadTemplate(hFile, 1)
  
  Close #hFile
  
  For Each cTable In aTables
  
    sTable = cTable["Name"]
    If Not sTable Then Continue
  
    If Me.Tables.Exist(sTable) Then 
      
      'If Not UpdateExistingTables Then Continue
      
      hFile = Open String For Write
      WriteTable(hFile, sTable)
      Seek #hFile, 0
      cTableOrg = ReadTemplate(hFile)[0]
      Close #hFile
      
      If IsSameTable(cTable, cTableOrg) Then 
        Continue
      Endif
      
      If DEBUG_ME Then Error "gb.db: updating table "; sTable
    
      sCopyTable = CopyTable(sTable)
      Try Me.Tables.Remove(sTable)
    
    Else
      
      If DEBUG_ME Then Error "gb.db: creating table "; sTable
      sCopyTable = ""

    Endif
    
    'Print "create table: "; sTable;; cTable["Type"];; cTable["Fields"].Count
    hTable = Me.Tables.Add(sTable, cTable["Type"])
    For Each cField In cTable["Fields"]
      iLength = 0
      Try iLength = cField["Length"]
      'Print "create field: "; cField["Name"];; cField["Type"];; iLength;; cField["Default"];; cField["Collation"]
      sColl = cField["Collation"]
      If sColl = "default" Then sColl = ""
      hTable.Fields.Add(cField["Name"], cField["Type"], iLength, cField["Default"], sColl)
    Next
    
    'Print "primary key: "; cTable["PrimaryKey"].Join(",")
    aKey = cTable["PrimaryKey"]
    If aKey.Count = 1 And If aKey[0] = "" Then aKey.Clear
    If aKey.Count Then hTable.PrimaryKey = cTable["PrimaryKey"]
    hTable.Update
    
    For Each cIndex In cTable["Indexes"]
      'Print "create index: "; cIndex["Name"];; cIndex["Fields"].Join(",");; cIndex["Unique"]
      hTable.Indexes.Add(cIndex["Name"], cIndex["Fields"], cIndex["Unique"])
    Next
    
    If sCopyTable Then
      
      rTemp = Me.Find(sCopyTable)
      If rTemp.Count Then
      
        If DEBUG_ME Then Error "gb.db: copying "; rTemp.Count; " records in the new table..."
      
        Me.Begin
        
        rTable = Me.Create(sTable)
         
        For Each rTemp
          
          For Each cField In cTable["Fields"]
            sName = cField["Name"]
            Try rTable[sName] = rTemp[sName]
            If Error Then 
              Try rTable[sName] = Convert(rTemp[sName], cField["Type"])
            Endif
          Next
          
          Try rTable.Update
          
        Next
        
        Try Me.Commit
        
      Endif
      
      Try Me.Tables.Remove(sCopyTable)
        
    Endif
    
  Next

End

Private Sub WriteTable(hFile As Stream, sTable As String) As String

  Dim hTable As Table
  Dim hField As Field
  Dim hIndex As Index
  Dim aKey As String[]

  hTable = Me.Tables[sTable]
  
  Print #hFile, "{ Table"
  Print #hFile, "  Name="; Quote(hTable.Name)
  If hTable.Type Then Print #hFile, "  Type="; Quote(hTable.Type)
  aKey = hTable.PrimaryKey
  If aKey.Count Then Print #hFile, "  PrimaryKey=[\""; aKey.Join("\",\""); "\"]"
  
  For Each hField In hTable.Fields
    
    Print #hFile, "  { Field"
    Print #hFile, "    Name="; Quote(hField.Name)
    Print #hFile, "    Type=";
    
    Select hField.Type
      Case db.Blob
        Print #hFile, "db.Blob"
      Case db.Boolean
        Print #hFile, "db.Boolean"
      Case db.Date
        Print #hFile, "db.Date"
      Case db.Float
        Print #hFile, "db.Float"
      Case db.Integer
        Print #hFile, "db.Integer"
      Case db.Long
        Print #hFile, "db.Long"
      Case db.Serial
        Print #hFile, "db.Serial"
      Case db.String
        Print #hFile, "db.String"
        If hField.Length Then Print #hFile, "    Length="; hField.Length
      Case Else
        Error.Raise("Unknown database field type")
    End Select
    
    If Not IsNull(hField.Default) Then
      Print #hFile, "    Default=";
      If hField.Type = db.String Then
        Print #hFile, Quote(hField.Default)
      Else If hField.Type = db.Boolean Then
        Print #hFile, If(hField.Default, "True", "False")
      Else If hField.Type = db.Date Then
        Print #hFile, "CDate(\""; CStr(hField.Default); "\")"
      Else
        Print #hFile, CStr(hField.Default)
      Endif
    Endif
    
    If hField.Collation Then
      Print #hFile, "    Collation="; Quote(hField.Collation)
    Endif
    
    Print #hFile, "  }"
    
  Next
  
  For Each hIndex In hTable.Indexes
    If hIndex.Primary Then Continue
    Print #hFile, "  { Index "
    Print #hFile, "    Name="; Quote(hIndex.Name)
    Print #hFile, "    Unique="; If(hIndex.Unique, "True", "False")
    Print #hFile, "    Fields=[\""; hIndex.Fields.Join("\",\""); "\"]"
    Print #hFile, "  }"
  Next
  
  Print #hFile, "}"

End

Public Sub GetTemplate() As String

  Dim hFile As File
  Dim aTable As String[]
  Dim hTable As Table
  Dim sTable As String
  Dim sTemplate As String

  hFile = Open String For Write
  
  aTable = New String[]
  For Each hTable In Me.Tables
    If hTable.System Then Continue
    'If sTable And If hTable.Name <> sTable Then Continue
    aTable.Add(hTable.Name)
  Next

  Print #hFile, TEMPLATE_MAGIC
  
  For Each sTable In aTable
    
    WriteTable(hFile, sTable)
    
  Next
  
  sTemplate = Close #hFile
  Return sTemplate
  
End

Public Sub Copy() As Connection

  Dim hConn As Connection
  
  hConn = New Connection
  hConn.Host = Me.Host
  hConn.IgnoreCharset = Me.IgnoreCharset
  hConn.Name = Me.Name
  hConn.Password = Me.Password
  hConn.Port = Me.Port
  hConn.Timeout = Me.Timeout
  hConn.Type = Me.Type
  hConn.User = Me.User

  Return hConn
  
End

Private Function SQL_Read() As SQLRequest

  Return New SQLRequest(Me)

End

Private Function Url_Read() As String

  Dim sUrl As String

  sUrl = Me.Type & "://"
  If Me.User Then sUrl &= Me.User & "@"
  sUrl &= Me.Host &/ Me.Name
  Return sUrl

End
