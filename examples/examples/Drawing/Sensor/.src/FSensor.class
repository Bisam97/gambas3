' Gambas class file

Private $hThermo As Image
Private $hRed As Image
Private $hOrange As Image
Private $eTime As Float
Private $iLoad As Long
Private $iTotal As Long
Private $hPicture As Picture

Private Function GetLoad() As Float

  Dim sRes As String
  Dim iPos As Integer
  Dim aRes As String[]
  Dim iTotal As Long
  Dim iLoad As Long
  Dim eLoad As Float

  'Do not work!
  'sRes = File.Load("/proc/stat")

  Exec ["cat", "/proc/stat"] To sRes
  iPos = InStr(sRes, "\n")
  If iPos Then sRes = Left$(sRes, iPos - 1)
  aRes = Split(sRes, " ", "", True)

  'PRINT aRes.Join(" ")

  iTotal = CLong(aRes[1]) + CLong(aRes[2]) + CLong(aRes[3]) + CLong(aRes[4])
  iLoad = CLong(aRes[4])

  If $iLoad Then
    Try eLoad = 1 - (iLoad - $iLoad) / (iTotal - $iTotal)
    'PRINT iLoad - $iLoad;; iTotal - $iTotal;; Format(eLoad, "#.##");; Format(eLoad * 100, "###")
  Endif

  $iLoad = iLoad
  $iTotal = iTotal

  Return eLoad

End

Private Function GetUsedValue(sRes As String) As Integer

  Return Val(Split(sRes, " ", "", True)[1])

End


Private Function GetUsed() As Integer

  Dim sRes As String
  Dim aRes As String[]
  Dim cVal As New Collection
  Dim sVal As String

  Exec ["cat", "/proc/meminfo"] To sRes
  For Each sVal In Split(sRes, "\n", "", True)
    aRes = Split(sVal, " ", "", True)
    'PRINT aRes.Join(" ")
    cVal[Left$(aRes[0], -1)] = CInt(aRes[1])
  Next

  Return cVal!MemTotal - cVal!MemFree - cVal!Buffers - cVal!Cached + cVal!SwapTotal - cVal!SwapFree - cVal!SwapCached

End


Private Function GetValue(sRes As String, sPat As String, Optional sStop As String = " ") As String

  Dim iPos As Integer

  iPos = InStr(sRes, sPat)
  If iPos = 0 Then Return

  sRes = LTrim(Mid$(sRes, iPos + Len(sPat)))
  iPos = InStr(sRes, sStop)
  If iPos Then sRes = Left$(sRes, iPos - 1)
  'IF Left$(sRes) = "+" THEN sRes = Mid$(sRes, 2)
  sRes = DConv(sRes)

  Return sRes

End


Private Sub DrawRelief(sVal As String, X As Integer, Y As Integer)

  Dim hPict As Picture
  Dim hImage As Image
  Dim hFont As Font = Draw.Font
  Dim I, J As Integer

  ' Creates a gray picture with a transparent mask

  'DEBUG "START"
  
  hPict = New Picture(Draw.TextWidth(sVal) + 2, Draw.TextHeight(sVal) + 2, True)
  hPict.Fill(Color.Gray)

  ' Draws the gray shadow in the picture. The transparent mask follows the drawn text.
  
  ' The gray background is needed, as the X11 anti-aliasing uses it (it ignores the
  ' picture mask that is managed by the library)

  Draw.Begin(hPict)
  ' Draw.FillStyle = Fill.Solid
  ' Draw.FillColor = Color.Green
  ' Draw.Rect(4, 4, 16, 16)
  Draw.Transparent = True
  Draw.ForeColor = Color.Gray
  Draw.Font = hFont
  For I = 0 To 2
    For J = 0 To 2
      Draw.Text(sVal, I, J)
    Next 
  Next 
  Draw.End

  ' Draws the shadow in the initial picture
  'Draw.Image(hPict.Image, X - 1, Y - 1)
  Draw.Picture(hPict, X - 1, Y - 1)
  
  ' Draws the normal text
  
  Draw.ForeColor = Color.White
  'Draw.Transparent = FALSE
  Draw.Text(sVal, X, Y)

  'DEBUG "END"

End


Public Sub Timer1_Timer()

  Dim sRes As String
  Dim sVal As String
  Dim iTempCPU As Integer
  Dim iTempMB As Integer
  Dim H, HR, HO As Integer
  Dim iPos As Integer
  Dim hImage As Image

  Exec ["sensors"] To sRes
  If Not sRes Then Return

  'Draw.Font.Bold = TRUE

  iTempCPU = Val(GetValue(sRes, "CPU Temp:", SConv("°")))
  iTempMB = Val(GetValue(sRes, "M/B Temp:", SConv("°")))
  sVal = "CPU: +" & iTempCPU & "°\n"
  sVal &= "M/B: +" & iTempMB & "°\n"
  sVal &= GetValue(sRes, "fan1:") & " RPM"


  '$hPicture = $hThermo.Copy()
  hImage = New Image(128, 128, True)
  hImage.Fill(Color.Transparent)
  
  hImage.Draw($hThermo, 0, 0)
  
  HO = Min(99, ((56 - iTempCPU) * 3))
  HR = Min(99, ((56 - iTempMB) * 3))

  For H = 99 To 0 Step -1
    If H < HO Then Break 
    If H >= HR Then
      hImage.Draw($hRed, 6, 6 + H)
    Else 
      hImage.Draw($hOrange, 6, 6 + H)
    Endif   
  Next
  
  $hPicture = hImage.Picture
  
  Draw.Begin($hPicture)
  
  DrawRelief(sVal, 24, 1)
  
  Draw.FillStyle = Fill.Solid
  Draw.LineStyle = Line.None
  
  'Draw.FillColor = Color.Orange
  'Draw.Rect(8, 11 + H, 9, 88 - H)
  
  'Draw.FillColor = Color.RGB(255, 51, 102)
  'Draw.Rect(8, 11 + H, 9, 88 - H)
  
  DrawRelief(Int(GetUsed() / 1024) & " M", 32, 96)
  
  Draw.Font.Size *= 2
  DrawRelief(Min(100, Int(GetLoad() * 100 + 0.5)) & "%", 32, 64)
  
  Draw.End

  If mnuPict.Checked Then 
    Me.Picture = $hPicture
  Endif
  If Application.Embedder = 0 Then Me.Lower

  'PRINT ME.X;; ME.Y;; ME.W;; ME.H

End

Public Sub Form_Open()

  $hThermo = Image.Load("thermo-void.png")
  $hRed = Image.Load("red.png")
  $hOrange = Image.Load("orange.png")

  If Application.Embedder = 0 Then
    Me.Move(Desktop.Width - Me.Width, 16)
    Settings.Read(Me)
  Endif
  Timer1_Timer

End

' PUBLIC SUB Form_KeyPress()
' 
'   IF Key.Code = Key.Esc THEN
'     ME.Close
'   ENDIF
' 
' END

Public Sub Form_DblClick()

  mnuTaskBar_Click

End

Public Sub Form_Menu()

  mnuPopup.Popup

End

Public Sub mnuAbout_Click()

  Message(("Get useful information about your CPU\nand your system!\n\n(c) Benoît Minisini 2005-2007"))

End


Public Sub mnuTaskBar_Click()

  mnuTaskBar.Checked = Me.SkipTaskbar
  Me.SkipTaskbar = Not Me.SkipTaskbar

End

Public Sub mnuMask_Click()

  Me.Mask = Not Me.Mask
  mnuMask.Checked = Me.Mask

End

Public Sub mnuPict_Click()

  mnuPict.Checked = Not mnuPict.Checked
  If mnuPict.Checked Then
    Me.Picture = $hPicture
  Else
    Me.Picture = Null
  Endif

End


Public Sub mnuQuit_Click()

  Me.Close

End

Public Sub Form_Close()

  'DEBUG ME.X
  Settings.Write(Me)

End
