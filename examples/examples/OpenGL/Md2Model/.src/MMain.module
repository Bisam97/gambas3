' Gambas module file

'This example shows how to use new experimental component gb.sge (Simple Game Engine)
'New class Md2Model alows to load and render quake md2 models.
'

' Gambas module file
Private screen As New Window(True) As "Screen"
Private frames As Integer
Private CTime As Single
Private hTimer As New Timer As "Timer1"
Private ogre As Md2Model
Private gun As Md2Model
Private interp As Float
Public f_no As Integer
Private texture As New Integer[2]




Public Sub Main()
' Standard OpenGL screen init
  With screen
    .Width = 640
    .Height = 480
   ' .Framerate = 50
    .Show()
  End With
  CTime = Timer()
  hTimer.Delay = 20
  hTimer.Enabled = True
  
End
Public Sub Screen_Open()
 
  init()
  Gl.ClearDepth(100.0)                'Enables Clearing Of The Depth Buffer
  gl.ClearColor(0.1, 0.1, 0.6, 0.0)   'This Will Clear The Background Color To Blue
  gl.DepthFunc(GL.LESS)            'The Type Of Depth Test To Do
  gl.Enable(GL.DEPTH_TEST)         'Enables Depth Testing
  gl.ShadeModel(GL.SMOOTH)         'Enables Smooth Color Shading
 
End

Public Sub Screen_resize()
Dim i As Integer

  Gl.Viewport(0, 0, Screen.Width, Screen.Height)
  Gl.MatrixMode(GL.PROJECTION)
  Gl.LoadIdentity()                     'Reset The Projection Matrix
  glu.Perspective(45.0, screen.Width / screen.Height, 0.1, 400.0)   'Calculate The Aspect Ratio Of The Window
  Gl.MatrixMode(GL.MODELVIEW)
End

Public Sub init()
Dim s As String
  gl.Enable(gl.TEXTURE_2D)                     ' Enable Texture Mapping
  texture = Gl.GenTextures(3)                  ' reserve memory for textures
  load_textures(0, "igdosh.png")                'Ogre body texture
  load_textures(1, "Weapon.png")                'Weapon texture

  ogre = Md2Model.Load("Ogros.md2")             'ogre model loading - it's static method use md2model.load(name)
  ogre.SetPosition(0, -10, -100)                  'Set position for model
  gun = Md2Model.Load("Weapon.md2")               
  gun.SetPosition(0, -10, -100)
  'That's it - model ready to be rendered frame count and looping in timer sub

End
 
 
Public Sub Screen_Draw()
Dim calc, i As Integer

  gl.Clear(GL.COLOR_BUFFER_BIT Or GL.DEPTH_BUFFER_BIT)    ' Clear The Screen And The Depth Buffer
  gl.LoadIdentity()  
  gl.Color3f(1, 1, 1)
  'Drawing model is as easy as this - frame number, interpolation between frames (0-1), texture identificator) 
  ogre.DrawInterFrame(f_no, interp, texture[0])                            
  gun.DrawInterFrame(f_no, interp, texture[1])              
  
  'Now some info on the screen - it slows down rendering by more than 50%!!!  Uncomment and see.
  
   'gl.Translatef(-3, 3, -8)
   'gl.Rotatef(180, 1, 0, 0) 
   'gl.Scalef(1 / 50, 1 / 50, 1 / 50)
   'Draw.Text(Screen.Framerate & " FPS, " & "Frame no " & f_no & " " & Trim(ogre.GetFrameName(f_no)), 0, 0) '" - 10,800 squares. SPACE - turn shader on/off", 0, 0)
    
  'You can use this code to get FPS printed in terminal 
  
  Inc (Frames)
  If (Timer() > CTime + 5) Then
    calc = Timer() - CTime
    Print CStr(Frames) & " frames in " & Format$(calc, "#.0") & " seconds = " & Format$((Frames / calc), "######.000") & " FPS"
    Frames = 0
    CTime = Timer()
  Endif

End

Public Sub Screen_keyPress()
Dim i, j As Integer

  If (key.code = key.F1) Then screen.FullScreen = Not screen.FullScreen
  If (key.Code = key.Esc) Then Screen.Close()
  If (Key.code = Key.Space) Then hTimer.Enabled = Not hTimer.Enabled 
  If (key.Text = "w") Then gl.PolygonMode(gl.FRONT_and_back, gl.line)
  If (key.Text = "f") Then gl.PolygonMode(gl.FRONT_and_back, gl.fill)
 
End

Public Sub Timer1_Timer()

  ' At every timer call we increase interpolation. It makes Frame number increase every 20 calls.
  ' You can control frame flow any way you want. The smaller iterp, the smoother movement.
   interp += 0.05
   If interp >= 1 Then 
     Inc f_no
     If f_no > ogre.GetFramesNo() Then f_no = 0  'use ogre.getframesno() to get number of frames in model animation 
     interp = 0
   Endif
   
End

' Just the subroutine to load textures for our models
Public Sub load_textures(no As Integer, name As String)

  Dim texture_image As Image
  Dim i As Integer

  texture_image = Image.Load(name)
  Gl.BindTexture(gl.TEXTURE_2D, texture[no])
  Gl.TexImage2D(texture_image)
  Glu.Build2DMipmaps(texture_image)
  Gl.Texparameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.linear_mipmap_linear)
  Gl.Texparameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR)

End

