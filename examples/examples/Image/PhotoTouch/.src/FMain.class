' Gambas class file

Private CACHE_ROOT As String = "~/.cache/gambas/PhotoTouch"
Private CACHE_DIR As String

Private $aPath As String[]
Private $sPath As String
Private $sDir As String
Private $iIndex As Integer
Private $hImage As Image
Private $hZoom As Image
Private $hTemp As Image
Private $fZoom As Float = 1
Private $sInfo As String
Private $sMode As String
Private $bModify As Boolean
Private $cButton As New Collection
Private $bFilm As Boolean = True
Private $bReloadFilm As Boolean

Private $MX As Integer
Private $MY As Integer

Private btnPrev As CButton
Private btnNext As CButton

Private Sub UpdateSaveIcon()
  
  $cButton["save"].Visible = Exist(CACHE_DIR &/ File.Name($sPath)) Or $bModify
  
End

Private Sub UpdateFilmMode()
  
  Dim sTag As String
  Dim hCtrl As Control
  
  btnPrev.Visible = Not $bFilm
  btnNext.Visible = Not $bFilm
  
  For Each hCtrl In $cButton
    If hCtrl.Tag = "quit" Then
      hCtrl.Visible = True
    Else If ["photo", "usb"].Exist(hCtrl.Tag) Then
      hCtrl.Visible = $bFilm
    Else
      hCtrl.Visible = Not $bFilm
    Endif
  Next
  
  If $bFilm Then
    'ivwImage.IconSize = 128
    panBrowser.Show
    svwImage.Hide
    FillImageBrowser
  Else
    panBrowser.Hide
    svwImage.Show
    Try $iIndex = CInt(ivwImage.Key)
    LoadImage
  Endif
  
End


Private Sub LoadImage(Optional bReset As Boolean) As Boolean

  Dim hImage As Image

  Inc Application.Busy
  
  Me.End
  SaveImage

  If Not bReset Then
    Try $sPath = CACHE_DIR &/ $aPath[$iIndex]
    If Exist($sPath) Then Try hImage = Image.Load($sPath)
  Endif
  
  If Not hImage Then
    Try $sPath = $sDir &/ $aPath[$iIndex]
    If $sPath Then Try hImage = Image.Load($sPath)
  Endif

  $sInfo = ""
  Try $sInfo = File.Name($sPath) & " - " & Format(Stat($sPath).LastModified, gb.LongDate)
  If hImage Then
    $hImage = hImage
    svwImage.ResizeContents($hImage.W, $hImage.H)
    svwImage.Show
    lblError.Hide
  Else 
    svwImage.Hide
    lblError.Show
    If $aPath.Count = 0 Then      
      lblError.Text = ("No image in directory")
      $sInfo = ""
    Else
      lblError.Text = ("Unable to load image")
      $sInfo = File.Name($sPath) & " -  " & Format(Stat($sPath).LastModified, gb.LongDate)
    Endif
  Endif
  
  $bModify = False
  SetZoom(0)
  UpdateSaveIcon
  dwgInfo.Refresh
  Me.Refresh
  
  Dec Application.Busy

End

Public Sub _new()
  
  Dim hCtrl As Control
  Dim sImg As String
  Dim hButton As CButton
  Dim hPanel As Panel
  Dim cTooltip As Collection

  Application.MainWindow = Me
  
  Try Mkdir File.Dir(File.Dir(CACHE_ROOT))
  Try Mkdir File.Dir(CACHE_ROOT)
  Try Mkdir CACHE_ROOT
  
  cTooltip = [
    "film": ("Browse photos"),
    "photo": ("Show photo"),
    "usb": ("Select photo directory"),
    "zoom-in": ("Zoom in"),
    "zoom-out": ("Zoom out"),
    "zoom-original": ("Zoom 100%"),
    "zoom-fit": ("Fit to window"),
    "hflip": ("Flip horizontally"),
    "vflip": ("Flip vertically"),
    "rotate-left": ("Rotate left"),
    "rotate-right": ("Rotate right"),
    "magic": ("Automatic correction"),
    "invert": ("Invert"),
    "blur": ("Blur"),
    "sharpen": ("Sharpen"),
    "normalize": ("Normalize"),
    "despeckle": ("Remove speckles"),
    "oil": ("Oil painting effect"),
    "scissors": ("Crop image"),
    "balance": ("Balance"),
    "resize": ("Resize"),
    "save": ("Save"),
    "undo": ("Undo all changes"),
    "quit": ("Quit")]
  
  For Each sImg In ["film", "photo", "usb", "-", "zoom-in", "zoom-out", "zoom-original", "zoom-fit", "-", "hflip", "vflip", "rotate-left", "rotate-right", "-", "magic", "invert", "blur", "sharpen", "normalize", "despeckle", "oil", "-", "scissors", "resize", "balance", "<->", "save", "undo", "quit"]
    If sImg = "<->" Then
      hPanel = New Panel(panToolbar)
      hPanel.Expand = True
      hPanel.Resize(8, 48)
    Else If sImg = "-" Then
      hPanel = New Panel(panToolbar)
      hPanel.Resize(8, 48)
    Else
      hButton = New CButton(panToolbar) As "Button"
      hButton.Resize(48, 48)
      hButton.Image = Image.Load(sImg & ".png")
      hButton.Tag = sImg
      hButton.Tooltip = cTooltip[sImg]
      $cButton[hButton.Tag] = hButton
    Endif
  Next
  
  btnPrev = New CButton(Me) As "Button"
  btnPrev.Resize(64, 64)
  btnPrev.Ignore = True
  btnPrev.Tag = "previous"
  btnPrev.Image = Image.Load("previous.png")

  btnNext = New CButton(Me) As "Button"
  btnNext.Resize(64, 64)
  btnNext.Ignore = True
  btnNext.Tag = "next"
  btnNext.Image = Image.Load("next.png")

  panToolbar.Raise

End


Public Sub svwImage_Draw()

  Dim X As Integer
  Dim Y As Integer
  Dim XR As Integer
  Dim YR As Integer
  Dim SX, SX2 As Integer
  Dim SY, SY2 As Integer
  Dim DX As Integer
  Dim DY As Integer
  Dim C As Integer
  Dim SW, SH As Integer
  Dim hZoom As Image
  Dim iZoom As Integer

  If Not $hImage Then Return

  If $fZoom > 1 Then

    iZoom = $fZoom

    Draw.LineStyle = Line.None
    Draw.FillStyle = Fill.Solid
  
    DX = Max(0, (Me.W - $hImage.W * iZoom) / 2)
    DY = Max(0, (Me.H - $hImage.H * iZoom) / 2)
  
    SX = (Draw.Clip.X - DX) \ iZoom
    SY = (Draw.Clip.Y - DY) \ iZoom
    SX2 = (Draw.Clip.X - DX + Draw.Clip.W - 1) \ iZoom
    SY2 = (Draw.Clip.Y - DY + Draw.Clip.H - 1) \ iZoom
  
    SX = Max(0, SX)
    SX2 = Min($hImage.Width - 1, SX2)
    SW = SX2 - SX + 1
  
    SY = Max(0, SY)
    SY2 = Min($hImage.Height - 1, SY2)
    SH = SY2 - SY + 1
  
    'If $fZoom > 5 Then
    '  Draw.LineStyle = Line.Solid
    '  Draw.Foreground = &H989898
    'Else
    '  Draw.LineStyle = Line.None
    'Endif
  
    Draw.Zoom($hImage, iZoom, SX * iZoom + DX, SY * iZoom + DY, SX + svwImage.ScrollX \ iZoom, SY + svwImage.ScrollY \ iZoom, SW, SH)
    
  Else If $fZoom = 1 Then
    
    If $hImage.W < Me.W Then 
      X = (Me.W - $hImage.W) / 2
    Else
      X = - svwImage.ScrollX
    Endif
    
    If $hImage.H < Me.H Then 
      Y = (Me.H - $hImage.H) / 2
    Else
      Y = - svwImage.ScrollY
    Endif
    
    Draw.Image($hImage, X, Y)

  Else
    
    If $hZoom.W < Me.W Then 
      X = (Me.W - $hZoom.W) / 2
    Else
      X = - svwImage.ScrollX
    Endif
    
    If $hZoom.H < Me.H Then 
      Y = (Me.H - $hZoom.H) / 2
    Else
      Y = - svwImage.ScrollY
    Endif
    
    Draw.Image($hZoom, X, Y)
    
  Endif
  
End

Public Sub Form_Resize()

  panToolbar.Move(0, 0, Me.W, 48 + Desktop.Scale * 2)
  panMargin.H = panToolbar.H 
  dwgInfo.Move(8, Me.H - dwgInfo.H, Me.W, dwgInfo.H)
  btnPrev.Move(8, (Me.H - btnPrev.H) / 2)
  btnNext.Move(Me.W - 8 - btnNext.W, (Me.H - btnNext.H) / 2)

End

Public Sub Button_Click()
  
  Action(Last.Tag)
  
End

Private Sub UpdateZoom()
  
  Dim X, Y As Float
  
  If Not $hImage Then Return
  
  If $fZoom < 1 Then
    $hZoom = $hImage.Stretch($hImage.W * $fZoom, $hImage.H * $fZoom)
  Else
    $hZoom = Null
  Endif
  
  X = (svwImage.ScrollX + svwImage.ClientW / 2) / svwImage.ScrollW
  Y = (svwImage.ScrollY + svwImage.ClientH / 2) / svwImage.ScrollH
  
  svwImage.ResizeContents($hImage.W * $fZoom, $hImage.H * $fZoom)
  svwImage.Scroll(X * svwImage.ScrollW - svwImage.ClientW / 2, Y * svwImage.ScrollH - svwImage.ClientH / 2)
  
  dwgInfo.Refresh
  Me.Refresh
  
End

Private Sub SetZoom(fZoom As Float)

  If Not $hImage Then Return
  
  If fZoom = 0 Then
    $fZoom = 0
    fZoom = Min(Me.W / $hImage.W, Me.H / $hImage.H)
    fZoom = Min(1, fZoom)
  Endif

  fZoom = Max(1 / 32, Min(32, fZoom))
  If fZoom = $fZoom Then Return
  If fZoom <> 1 Then
    If ($hImage.W * fZoom) < 96 Or If ($hImage.H * fZoom) < 96 Then Return
  Endif
  
  $fZoom = fZoom
  UpdateZoom

End

Public Sub SetMode(sMode As String)
  
  If $sMode Then
    $cButton[$sMode].Highlight = False
    Cancel
    Select Case $sMode
      Case "balance"
        FBrightness.Close
      Case "scissors"
        FScissors.Close
      Case "resize"
        FResize.Close
    End Select
  Endif
    
  If sMode = $sMode Then 
    $sMode = ""
    Return
  Endif
    
  If sMode Then 
  
    $cButton[sMode].Highlight = True

    Select Case sMode
      Case "balance"
        FBrightness.Show
      Case "scissors"
        FScissors.Show
      Case "resize"
        FResize.Show
    End Select
    
  Endif
    
  $sMode = sMode
  
End


Private Sub Action(sAction As String)
  
  Select Case sAction
    
    Case "film"
      Me.End
      SaveImage
      $bFilm = True
      UpdateFilmMode
    
    Case "photo"
      $bFilm = False
      UpdateFilmMode
    
    Case "previous"
      Dec $iIndex
      If $iIndex < 0 Then $iIndex = $aPath.Max
      LoadImage
    
    Case "next"
      Inc $iIndex
      If $iIndex > $aPath.Max Then $iIndex = 0
      LoadImage
    
    Case "zoom-in"
      SetZoom(2 ^ Int(Log2($fZoom)) * 2)
    
    Case "zoom-out"
      SetZoom(2 ^ Int(Log2($fZoom) - 0.001))
    
    Case "zoom-original"
      SetZoom(1)
      
    Case "zoom-fit"
      SetZoom(0)
      
    Case "quit"
      SetMode("")
      SaveImage
      Me.Close
      
    Case "balance", "scissors", "resize"
      If Not $hImage Then Return
      SetMode(sAction)
      
    Case "usb"
      SetMode("")
      Dialog.Title = ("Select photo directory")
      If Dialog.SelectDirectory() Then Return
      SetDir(Dialog.Path)
      
    Case "undo"
      SetMode("")
      LoadImage(True)
      RemoveImage
    
    Case Else
      
      If Not $hImage Then Return
      
      SetMode("")
      
      Select Case sAction
        Case "hflip"
          $hImage.Mirror(True, False)
        Case "vflip"
          $hImage.Mirror(False, True)
        Case "rotate-left"
          $hImage = $hImage.Rotate(Pi(0.5))
        Case "rotate-right"
          $hImage = $hImage.Rotate(Pi(-0.5))
        Case "oil"
          $hImage = ImageMagick("-paint 4") '$hImage.OilPaint()
        Case "magic"
          $hImage = ImageMagick("-auto-gamma -auto-level")
        Case "invert"
          $hImage.Invert()
        'Case "equalize"
        '  $hImage = ImageMagick("-equalize")
        Case "despeckle"
          $hImage = ImageMagick("-despeckle")
        Case "normalize"
          $hImage = ImageMagick("-normalize")
        Case "blur"
          $hImage = ImageMagick("-blur 8") '$hImage.OilPaint()
        Case "sharpen"
          $hImage = ImageMagick("-sharpen 8") '$hImage.OilPaint()
      
      End Select
      
      $bModify = True
      UpdateSaveIcon
      UpdateZoom
    
  End Select
  
End

Public Sub svwImage_MouseDown()

  $MX = Mouse.X + svwImage.ScrollX
  $MY = Mouse.Y + svwImage.ScrollY
  'Debug $MX;; $MY
  
End

Public Sub svwImage_MouseMove()
  
  If Mouse.Left Then 
    'Debug Mouse.X - $MX;; Mouse.Y - $MY
    svwImage.Scroll($MX - Mouse.X, $MY - Mouse.Y)
  Endif
  
End

Public Sub dwgInfo_Draw()
  
  Dim X, Y As Integer
  
   Paint.Font = Font["Bold,+3"]
  ' Paint.Brush = Paint.Color(Color.SetAlpha(Color.White, 128))
  ' For X = -2 To 2
  '   For Y = -2 To 2
  '     If X = 0 And If Y = 0 Then Continue
  '     Paint.Text($sInfo, 8 + X, 8 + Y, dwgInfo.W, dwgInfo.H, Align.Left)
  '   Next
  ' Next
  ' Paint.Fill
  Paint.LineWidth = 1
  Paint.Brush = Paint.Color(Color.SetAlpha(Color.White, 192))
  Paint.DrawText($sInfo & " - " & Format($fZoom, "0%"), 0, 0, dwgInfo.W, dwgInfo.H, Align.Left)
  
End

Public Sub Form_KeyPress()

  Select Case Key.Code
    
    Case Key.Esc
      Action("quit")
    
  End Select

End

Public Sub Begin()
  
  $hTemp = $hImage.Copy()
  
End

Public Sub End()
  
  $hTemp = Null
  UpdateZoom
  SetMode("")
  'SaveImage
  Me.Refresh
  
End

Public Sub Apply()
  
  $hTemp = $hImage
  {End}
  
End

Public Sub Cancel()
  
  If Not $hTemp Then Return
  $hImage = $hTemp.Copy()
  UpdateZoom
  Me.Refresh
  
End

Public Sub GetImage() As Image
  
  Return $hImage
  
End

Public Sub Balance(iBrightness As Integer, iContrast As Integer, iGamma As Integer)
  
  $hImage = $hTemp.Copy()
  $hImage.Balance((iBrightness - 50) / 50, (iContrast - 50) / 50, (iGamma - 50) / 50)
  $bModify = True
  UpdateZoom
  Me.Refresh
  
End

Public Sub Cut()
  
  Dim X, Y, W, H As Integer
  Dim hRect As Rect
  
  W = FScissors.W / $fZoom
  H = FScissors.H / $fZoom
  X = (svwImage.ScrollX + FScissors.X) / $fZoom
  Y = (svwImage.ScrollY + FScissors.Y) / $fZoom
  
  If $hImage.W * $fZoom <= Me.W Then X -= (Me.W / $fZoom - $hImage.W) / 2
  If $hImage.H * $fZoom <= Me.H Then Y -= (Me.H / $fZoom - $hImage.H) / 2
  
  hRect = Rect(X, Y, W, H)
  hRect = hRect.Intersection(Rect(0, 0, $hImage.W, $hImage.H))
  
  If Not hRect Then Return
  
  $hImage = $hImage.Copy(hRect.X, hRect.Y, hRect.W, hRect.H)
  $bModify = True
  $hTemp = $hImage
  Me.End
  SetZoom(0)
  
End

Public Sub Stretch(W As Integer, H As Integer)
  
  $hImage = $hImage.Stretch(W, H)
  $bModify = True
  $hTemp = $hImage
  Me.End
  SetZoom(0)
  
End


Public Sub Form_Activate()
  
  If $sDir = "" Then SetDir(Settings["Directory", User.Home])
  
End


Private Sub SetDir(sDir As String)

  Inc Application.Busy
    
  'Shell "cd " & Shell(CACHE_DIR) & "; rm -f *" Wait

  CACHE_DIR = CACHE_ROOT &/ Replace(sDir, "/", ":")
  
  $sDir = sDir
  Settings["Directory"] = $sDir
  $aPath = New String[]
  Try $aPath = Dir(sDir, "*.{jpg,JPG,jpeg,JPEG,png,PNG,bmp,BMP,gig,GIF}").Sort()
  $iIndex = 0
  $bReloadFilm = True
  UpdateFilmMode
  
  Dec Application.Busy
  
End

Private Sub SaveImage() As String
  
  If Not $hImage Then Return
  If Not $bModify Then Return
  
  Try Mkdir CACHE_DIR
  Try Kill CACHE_DIR &/ ".thumb." & File.Name($sPath)
  $bReloadFilm = True
  $hImage.Save(CACHE_DIR &/ File.Name($sPath), 80)
  $bModify = False
  UpdateSaveIcon
  Return CACHE_DIR &/ File.Name($sPath)
  
Catch
  
  Message.Error(Error.Text)
  
End

Private Sub RemoveImage()
  
  Kill CACHE_DIR &/ File.Name($sPath)
  Try Kill CACHE_DIR &/ ".thumb." & File.Name($sPath)
  $bReloadFilm = True
  If Dir(CACHE_DIR).Count = 0 Then Rmdir CACHE_DIR
  UpdateSaveIcon
  
Catch
  
End

Private Sub ImageMagick(sCommand As String) As Image
  
  Dim sPath, sPath2 As String
  Dim hImage As Image
  
  Inc Application.Busy
  
  sPath = File.SetExt(Temp$("image"), File.Ext($sPath))
  sPath2 = File.SetExt(Temp$("image2"), File.Ext($sPath))
  
  $hImage.Save(sPath, 100)
  
  Shell "convert " & Shell(sPath) & " " & sCommand & " " & Shell(sPath2) Wait
  hImage = Image.Load(sPath2)
  Kill sPath
  Kill sPath2
  
  Dec Application.Busy
  UpdateSaveIcon
  
  Return hImage
  
End

Private Sub GetThumb(sPath As String) As Image
  
  Dim sName As String
  Dim sThumb As String
  Dim hImage As Image
  
  sName = File.Name(sPath)
  
  If Exist(CACHE_DIR &/ sName) Then sPath = CACHE_DIR &/ sName
  
  sThumb = CACHE_DIR &/ ".thumb." & sName
  If Exist(sThumb) Then
    'If Stat(sThumb).LastModified >= Stat(sPath).LastModified Then
      hImage = Image.Load(sThumb)
    'Endif
  Endif
  
  If Not hImage Then
    hImage = Image.Load(sPath)
    If hImage.W > hImage.H Then
      hImage = hImage.Stretch(256, 256 * hImage.H / hImage.W)
    Else
      hImage = hImage.Stretch(256 * hImage.W / hImage.H, 256)
    Endif
    Try Kill sThumb
    hImage.Save(sThumb)
  Endif
  
  Return hImage
  
End

Private Sub FillImageBrowser()
  
  Dim I As Integer
  Dim hImage As Image
  
  If $bReloadFilm Then
  
    Inc Application.Busy
    
    Try Mkdir CACHE_DIR
    ivwImage.Clear
    ivwImage.GridSize = 280 \ Desktop.Scale
    For I = 0 To $aPath.Max
      Try hImage = GetThumb($sDir &/ $aPath[i])
      If Error Then
        Error Error.Where; ": "; Error.Text
        hImage = Picture["icon:/256/image"].Image
      Endif
      ivwImage.Add(I, File.Name($aPath[I]), hImage.Picture)
      Wait
    Next
  
    Dec Application.Busy
    $bReloadFilm = False
  
  Endif
  
  ivwImage[$iIndex].Selected = True
  ivwImage[$iIndex].EnsureVisible
  
End


Public Sub ivwImage_DblClick()

  $bFilm = False
  $iIndex = CInt(ivwImage.Key)
  UpdateFilmMode

End
