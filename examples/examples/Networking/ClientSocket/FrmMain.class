' Gambas class file

'********************************************
' THIS EXAMPLE SHOWS HOW TO USE THE 'Socket'
' CLASS FROM 'gb.net' COMPONENT
'
' (C) 2003-2004 Daniel Campos FernÃ¡ndez
' (danielcampos@netcourrier.com)
'********************************************
Private CurProtocol As Integer

Public Sub Form_Open()
  
  CurProtocol = 0

End

Public Sub MySock_Ready()
  '***********************************
  ' When connection proccess has finished
  ' successfully, "Connected" event will raise
  '***********************************
  Timer1.Enabled = False
  If CurProtocol = 1 Then
    Label3.Text = "Connected to path " & MySock.Path
  Else
    Label3.Text = "Connected to remote host " & MySock.Path
    Label3.Text = Label3.Text & " - Using local address : " & MySock.LocalHost & ":" & MySock.LocalPort
  End If
  Me.Enabled = True
  Set_Interface(True)
End

Public Sub MySock_Closed()
  '********************************************
  ' this event will raise when foreing host
  ' closes the socket by any reason
  '********************************************
  Label3.Caption = "Connection Closed by foreign host."
  Me.Enabled = True
  Set_Interface(False)
  
End

Public Sub MySock_Found()
  '********************************************
  ' this event will raise when foreing host
  ' name has been translated to IP
  '********************************************
  Label3.Caption = "Host Found. Connecting..."
  
End


Public Sub MySock_Read()
  '****************************************
  ' When some data arrives from the remote
  ' part of the socket, "DataAvailable" event
  ' is raised
  '****************************************
  Dim S As String
  If MySock.Status = Net.Connected Then
      Read #MySock, S, Lof(MySock)
      TextArea1.Text = TextArea1.Text & S
  End If
  
  
End

Public Sub MySock_Error()
  '**********************************
  ' this is the function to
  ' handle Errors when trying
  ' to read or write to the socket
  '**********************************
  Select Case MySock.Status
    Case Net.CannotCreateSocket
      label3.Text = "The system does not allow to create a socket"
    Case Net.HostNotFound
      label3.Text = "Host not Found"
    Case Net.ConnectionRefused
      label3.Text = "Unable to Connect. Connection Refused"
    Case Net.CannotRead
      label3.Text = "Error Reading Data"
    Case Net.CannotWrite
      label3.Text = "Error Writing Data"
  End Select
  Set_Interface(False)
End

Private Sub Set_Interface(bState As Boolean)
  '****************************************
  ' An auxiliar method to enable/disable
  ' controls in the formulary , when
  ' connection is stablished or closed
  '****************************************
  Button1.Enabled = Not bState
  TextBox1.Enabled = Not bState
  TextBox2.Enabled = Not bState
  CmbProtocol.Enabled = Not bState
  Label5.Enabled = Not bState
  Button2.Enabled = bState
  Timer1.Enabled = bState
  'TextArea1.Enabled=bState
  Button3.Enabled = bState
  TextArea2.Enabled = bState
  If bState = True Then TextArea1.Text = ""
  
End


Public Sub Button1_Click()
 
  '******************************************
  ' To connect to remote host we call to
  ' connectsocket method, passing Host Name
  ' and port as arguments
  '******************************************
  Dim RetVal As Integer
  Button1.Enabled = False
  Select Case CurProtocol
    Case 0 
      ' Stablishing a TCP connection.
      ' Here we use Host and
      ' Port properties, we could also
      ' do directly MySock.Connect(TextBox1.Text,VAL(TextBox2.Text))
      MySock.Host = TextBox1.Text
      MySock.Port = Val(TextBox2.Text)
      MySock.Connect()
    Case 1
      ' Stablishing a Local connection.
      ' Here we use Path and
      ' Port properties, we could also
      ' do directly MySock.Connect(TextBox1.Text,0)
      MySock.Path = TextBox1.Text
      MySock.Port = Net.Local
      MySock.Connect()
  End Select
  If MySock.Status > Net.Inactive Then 
    If CurProtocol = 0 Then
      '**************************
      ' TCP : connection in progress...
      '**************************
      Button2.Enabled = True
      'ME.Enabled=FALSE
      Label3.Text = "Looking up host name..."
      Timer1.Delay = 10000 ' we'll wait a maximun time of  10 seconds
      Timer1.Enabled = True
    End If
  End If
 
End

Public Sub Timer1_Timer()

  '***************************
  ' timeout trying to connect
  '***************************
  Me.Enabled = True
  Timer1.Enabled = False
  If MySock.Status <> Net.Connected Then
    Close MySock
    Set_Interface(False)
    Label3.Text = "Timeout trying to stablish connection"
  End If
End


Public Sub Button2_Click()
  
  '**********************************
  ' Here we close the connection
  ' to remote host
  '**********************************
  Close MySock
  Set_Interface(False)
  Label3.Text = "Connection closed by user"

End

Public Sub Button3_Click()
  '****************************************************
  ' Here we send data to the remote part of the socket.
  ' We have to be sure that connection is active 
  '****************************************************
  If MySock.Status = Net.Connected Then 
    Write #MySock, TextArea2.Text, Len(TextArea2.Text)
    TextArea2.Text = ""
  End If
  
End

Public Sub Form_Close()

  '*********************
  ' Close possible Stablished connections
  '*********************
  If MySock.Status > 0 Then Close #MySock

End

Public Sub CmbProtocol_Click()
  '**************************************************
  ' Here we select protocol to use : TCP,UDP or UNIX
  '**************************************************
  CurProtocol = CmbProtocol.Index
  If CurProtocol = 0 Then
      Label2.Visible = True
      TextBox2.Visible = True
      Label1.Text = "Host :"
  Else
      Label2.Visible = False
      TextBox2.Visible = False
      Label1.Text = "Path :"
  End If
End


