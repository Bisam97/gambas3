' Gambas class file

Export

Inherits _DatabaseDriver

Public Const QuoteCharacter As String = "`"

Private $pHandle As Pointer

Private Sub IsMariaDB() As Boolean
  
  Return InStr(Me.FullVersion, "mariadb", 1, gb.IgnoreCase) > 0 
  
End

Private Sub SearchResult((Result) As Pointer, Value As String) As Variant[]

  Dim I As Integer
  Dim vRow As Variant[]
  
  For I = 0 To GetResultCount(Result) - 1
    vRow = GetResultData(Result, I, True)
    If CStr(vRow[0]) = Value Then Return vRow
  Next
  
End

Private Sub SetCharacterSet()
  
  Dim pResult As Pointer
  Dim vRow As Variant[]
  Dim sCharset As String
  
  Me.Exec("SET NAMES 'utf8'")
  
  pResult = Query("SHOW VARIABLES LIKE 'character_set_client'")
  vRow = SearchResult(pResult, "character_set_client")
  FreeResult(pResult)
  
  If vRow Then
    sCharset = vRow[1]
    If LCase(sCharset) Begins "utf8" Then sCharset = "utf8"
    Me.Charset = sCharset
  Endif
  
End

Public Sub Open(Conn As Connection) As Pointer

  Dim pResult As Pointer
  Dim sVersion As String
  Dim I As Integer
  Dim iPos As Integer
  Dim aVersion As String[]
  
  $pHandle = _MySqlHelper.Open(Conn.Host, Conn.Port, Conn.Name, Conn.User, Conn.Password, Conn.Timeout, Conn.Options)
  
  pResult = Query("select version()")
  sVersion = GetResultData(pResult, 0, 0)[0]
  FreeResult(pResult)
  
  Me.FullVersion = sVersion

  For I = 1 To Len(sVersion)
    If IsDigit(Mid$(sVersion, I, 1)) Then
      sVersion = Mid$(sVersion, I)
      Break
    Endif
  Next
  
  iPos = InStr(sVersion, " ")
  If iPos > 0 Then sVersion = Left(sVersion, iPos - 1)

  aVersion = Split(sVersion, ".")
  Me.Version = CInt(aVersion[0]) * 10000 + CInt(aVersion[1]) * 100
  Try Me.Version += CInt(aVersion[2])

  If IsMariaDB() Then
    Me.NoReturning = Me.Version >= 100500
  Else
    Me.NoReturning = True
  Endif
  
  Me.InsertIfNotExist = _DatabaseDriver.IGNORE_INSERT
  
  SetCharacterSet()
  
  Return $pHandle
  
End

Public Sub Close()

  _MySqlHelper.Close($pHandle)
  
End

Public Sub Format(Value As Variant, Optional (Blob) As Boolean) As String
  
  Select Case TypeOf(Value)
    
    Case gb.Boolean
      
      Return If(Value, "'1'", "'0'")
    
    Case gb.String
      
      Return _MySqlHelper.QuoteString(Value)
    
    Case gb.Date
      
      Return Format(CDate(Value), "'yyyy-mm-dd hh:nn:ss.uuu'")
    
    Case Else
      
      Return Super.Format(Value)

  End Select
End

Public Sub GetError() As Integer
  
  Return _MySqlHelper.LastError
  
End

Public Sub Query(Request As String) As Pointer
  
  Return _MySqlHelper.Query($pHandle, Request)
  
End

Public Sub FreeResult((Result) As Pointer)

  _MySqlHelper.FreeResult(Result)
  
End

Public Sub GetResultCount((Result) As Pointer) As Integer
  
  Return _MySqlHelper.GetResultCount(Result)
  
End

Public Sub GetResultField((Result) As Pointer, Field As Integer, ByRef Name As String, ByRef Type As Integer, ByRef Length As Integer) As Boolean
  
  Name = _MySqlHelper.GetResultField(Result, Field)
  If Not Name Then Return True
  
  Type = _MySqlHelper.Type
  Length = _MySqlHelper.Length
  
End

Public Sub GetResultData((Result) As Pointer, Index As Integer, Next As Boolean) As Variant[]
  
  Return _MySqlHelper.GetResultData(Result, Index, Next, Me.Version)
  
End

Public Sub GetResultBlob((Result) As Pointer, Index As Integer, Field As Integer) As String 
  
  Return _MySqlHelper.GetResultBlob(Result, Index, Field)

End

Public Sub GetTables() As String[]

  Dim pResult As Pointer
  Dim I As Integer
  Dim aTables As String[]
  
  aTables = New String[]
  pResult = Query("SHOW TABLES")
  For I = 0 To GetResultCount(pResult) - 1
    aTables.Add(GetResultData(pResult, I, True)[0])
  Next
  FreeResult(pResult)
  Return aTables
  
End

Public Sub IsSystemTable((Table) As String) As Boolean

  Dim sDatabase As String

  sDatabase = Me.Connection.Name
  If Not sDatabase Or If IsSystemDatabase(sDatabase) Then Return True

End

Public Sub GetTableType(Table As String) As String

  Dim pResult As Pointer
  Dim vRow As Variant[]
  Dim sType As String
  
  pResult = Query(Subst("SHOW TABLE STATUS LIKE '&1'", Table))
  vRow = SearchResult(pResult, Table)
  If vRow Then
    sType = vRow[1]
    If Not sType Then sType = "VIEW"
  Endif
  FreeResult(pResult)
  
  Return sType
  
End

Public Sub SetTableType(Table As String, Type As String)
  
  Me.Exec("ALTER TABLE " & Me.Quote(Table, True) & " TYPE = " & Type)
  
End

Public Sub GetTableFields(Table As String) As String[]
  
  Dim I As Integer
  Dim aFields As String[]
  Dim pResult As Pointer
  
  pResult = Query("SHOW FULL COLUMNS FROM " & Me.Quote(Table, True))

  aFields = New String[]
  For I = 0 To GetResultCount(pResult) - 1
    aFields.Add(GetResultData(pResult, I, True)[0])
  Next

  FreeResult(pResult)
  Return aFields

End

Public Sub GetTableFieldInfo(Table As String, Field As String, ByRef Type As Integer, ByRef Length As Integer, ByRef {Default} As Variant, ByRef Collation As String)

  Dim pResult As Pointer
  Dim I As Integer

  pResult = Query("SHOW FULL COLUMNS FROM " & Me.Quote(Table))
  
  For I = 0 To GetResultCount(pResult) - 1
    If GetResultData(pResult, I, False)[0] = Field Then
      _MySqlHelper.GetFieldInfo(pResult, I, Me.Version)
      Type = _MySqlHelper.Type
      Length = _MySqlHelper.Length
      {Default} = _MySqlHelper.Default
      Collation = _MySqlHelper.Collation
      Break
    Endif
  Next

  FreeResult(pResult)
  
End

Public Sub GetTableIndexes(Table As String) As String[]

  Dim pResult As Pointer
  Dim aIndexes As String[]
  Dim I As Integer
  Dim vRow As Variant[]

  pResult = Query("SHOW INDEX FROM " & Me.Quote(Table, True))
  
  aIndexes = New String[]
  
  For I = 0 To GetResultCount(pResult) - 1
    vRow = GetResultData(pResult, I, True)
    If vRow[3] = 1 Then aIndexes.Add(vRow[2])
  Next
  
  FreeResult(pResult)
  Return aIndexes

End

Public Sub GetTableIndexInfo(Table As String, Index As String, ByRef Fields As String[], ByRef Unique As Boolean, ByRef Primary As Boolean)

  Dim pResult As Pointer
  Dim I, N As Integer
  Dim vRow As Variant[]

  pResult = Query("SHOW INDEX FROM " & Me.Quote(Table, True))
  
  N = GetResultCount(pResult)
  
  For I = 0 To N - 1
    vRow = GetResultData(pResult, I, True)
    
    If vRow[2] = Index Then 
      
      Unique = vRow[1] = 0
      Primary = vRow[2] = "PRIMARY"
  
      Fields = New String[]
      Do
        Fields.Add(vRow[4])
        Inc I
        If I >= N Then Break
        vRow = GetResultData(pResult, I, True)
        If vRow[2] <> Index Then Break
      Loop
      Break
  
    Endif
  Next
  
  FreeResult(pResult)

End

Public Sub GetTablePrimaryKey(Table As String) As String[]

  Dim bPrimary As Boolean
  Dim bUnique As Boolean
  Dim aFields As String[]
  
  GetTableIndexInfo(Table, "PRIMARY", ByRef aFields, ByRef bUnique, ByRef bPrimary)
  Return aFields
  
End

Public Sub GetCollations() As String[]

  Dim I As Integer
  Dim aCollations As String[]
  Dim pResult As Pointer
  
  pResult = Query("SHOW COLLATION LIKE '%'")
  
  aCollations = New String[]
  For I = 0 To GetResultCount(pResult) - 1
    aCollations.Add(GetResultData(pResult, I, True)[0])
  Next
  
  FreeResult(pResult)
  Return aCollations
  
End

Public Sub GetLastInsertId() As Long

  Dim pResult As Pointer
  Dim iLastInsertId As Long
  
  pResult = Query("SELECT last_insert_id()")
  iLastInsertId = GetResultData(pResult, 0, False)[0]
  FreeResult(pResult)
  Return iLastInsertId
  
End

Public Sub Begin()
  
  Me.Exec("START TRANSACTION")
  
End

Public Sub Commit()
  
  Me.Exec("COMMIT")
  
End

Public Sub Rollback()
  
  Me.Exec("ROLLBACK")
  
End

Public Sub GetDatabases() As String[]

  Dim pResult As Pointer
  Dim I As Integer
  Dim aDatabases As String[]
  
  pResult = Query("SHOW DATABASES")
  
  aDatabases = New String[]
  For I = 0 To GetResultCount(pResult) - 1
    aDatabases.Add(GetResultData(pResult, I, True)[0])
  Next
  
  FreeResult(pResult)
  Return aDatabases
  
End

Public Sub IsSystemDatabase(Database As String) As Boolean
  
  If Database = "mysql" Or If Database = "information_schema" Then Return True
  
End

Public Sub CreateDatabase(Database As String)
  
  Me.Exec("CREATE DATABASE " & Me.Quote(Database))
  
End

Public Sub DropDatabase(Database As String)
  
  Me.Exec("DROP DATABASE " & Me.Quote(Database))
  
End

Public Sub GetUsers() As String[]

  Dim aUsers As String[]
  Dim pResult As Pointer
  Dim I As Integer
  Dim vRow As Variant[]
  
  pResult = Query("SELECT user,host FROM mysql.user")
  
  aUsers = New String[]
  For I = 0 To GetResultCount(pResult) - 1
    vRow = GetResultData(pResult, I, True)
    aUsers.Add(vRow[0] & "@" & vRow[1])
  Next
  
  FreeResult(pResult)
  Return aUsers
  
End

Public Sub CreateUser((User) As String, Password As String, Admin As Boolean)
  
  Dim sReq As String

  If InStr(User, "@") = 0 Then User &= "@localhost"

  sReq = "GRANT"
  
  If Admin Then 
    sReq &= " ALL PRIVILEGES ON *.* TO"
  Else
    sReq &= " USAGE ON * TO"
  Endif
  
  sReq &= " " & User

  If Password Then sReq &= " IDENTIFIED BY " & Me.Format(Password)
  
  If Admin Then sReq &= " WITH GRANT OPTION"
  
  Me.Exec(sReq)

End

Private Sub GetUserHost(ByRef sUser As String, ByRef sHost As String)

  Dim iPos As Integer

  iPos = InStr(sUser, "@")
  If iPos Then 
    sHost = Mid$(sUser, iPos + 1)
    sUser = Left(sUser, iPos - 1)
  Else 
    sHost = "localhost"
  Endif

End


Public Sub DropUser((User) As String)

  Dim sHost As String
  
  GetUserHost(ByRef User, ByRef sHost)
  Me.Exec("DELETE FROM mysql.user WHERE user = " & Me.Format(User) & " AND host = " & Me.Format(sHost))
  
End

Public Sub GetUserInfo((User) As String, ByRef Password As String, ByRef Admin As Boolean)

  Dim pResult As Pointer
  Dim sHost As String
  Dim vRow As Variant[]
  
  GetUserHost(ByRef User, ByRef sHost)
  
  pResult = Query("SELECT create_priv,drop_priv,grant_priv,password FROM mysql.user where user = " & Me.Format(User) & " and host = " & Me.Format(sHost))
  
  If GetResultCount(pResult) = 1 Then
    vRow = GetResultData(pResult, 0, False)
    Admin = vRow[0] = "Y" Or vRow[1] = "Y"
    Password = vRow[3]
  Endif 
  
  FreeResult(pResult)
  
End

Public Sub SetUserPassword((User) As String, Password As String)
  
  If InStr(User, "@") = 0 Then User &= "@localhost"
  Me.Exec("SET PASSWORD FOR " & User & " = PASSWORD(" & Me.Format(Password) & ")")
  
End

Public Sub CreateTable(Table As String, Fields As Field[], Type As String, PrimaryKey As String[])

  Dim sReq As String
  Dim hField As Field
  Dim bComma As Boolean
  Dim sCollation As String
  Dim iPos As Integer
  Dim sField As String
  
  If Me.Version < 40100 And If Type = "MEMORY" Then Type = "HEAP"

  sReq = "CREATE TABLE " & Me.Quote(Table, True) & " ( "
  
  For Each hField In Fields
    
    If bComma Then
      sReq &= ", "
    Else
      bComma = True
    Endif
    
    sReq &= Me.Quote(hField.Name) & " "
    
    Select Case hField.Type
      Case db.Serial
        sReq &= "BIGINT UNSIGNED NOT NULL AUTO_INCREMENT"
      Case db.Blob
        sReq &= "LONGBLOB"
      Case db.Boolean
        sReq &= "BOOL"
      Case db.Integer
        sReq &= "INT"
      Case db.Long
        sReq &= "BIGINT"
      Case db.Float
        sReq &= "DOUBLE"
      Case db.Date
        sReq &= "DATETIME"
      Case db.String
        If hField.Length <= 0 Or If hField.Length > 65535 Then
        Else
          sReq &= "VARCHAR(" & CStr(hField.Length) & ")"
        Endif
        
      Case Else
        sReq &= "MEDIUMTEXT"
        
    End Select
    
    sCollation = hField.Collation
    If sCollation Then
      iPos = InStr(sCollation, "_")
      If iPos Then
        sReq &= " CHARACTER SET " & Left(sCollation, iPos - 1)
        sReq &= " COLLATE " & sCollation
      Endif
    Endif
    
    If Not IsNull(hField.Default) Then
      sReq &= " NOT NULL DEFAULT " & Me.Format(hField.Default)
    Else If PrimaryKey.Exist(hField.Name) Then
      sReq &= " NOT NULL"
    Endif
    
  Next

  If PrimaryKey.Count Then

    sReq &= ", PRIMARY KEY (" 

    bComma = False
    For Each sField In PrimaryKey
      If bComma Then 
        sReq &= ", "
      Else
        bComma = True
      Endif
      sReq &= Me.Quote(sField)
      
      For Each hField In Fields
        If hField.Name = sField And If hField.Type = db.String Then
          If hField.Length < 0 Or If hField.Length > 255 Then sReq &= "(255)"
        Endif
      Next
      
    Next
    
    sReq &= ")"
    
  Endif
  
  sReq &= ")"

  If Type Then 
    If Me.Version < 40018 Then
      sReq &= " TYPE = "
    Else
      sReq &= " ENGINE = "
    Endif
    sReq &= Type
  Endif

  Me.Exec(sReq)
  
End

Public Sub DropTable(Table As String)
  
  Me.Exec("DROP TABLE " & Me.Quote(Table, True))
  
End

Public Sub CreateIndex(Table As String, Index As String, Fields As String[], Unique As Boolean)
  
  Dim sReq As String

  sReq = "CREATE"
  If Unique Then sReq &= " UNIQUE"
  sReq &= " INDEX " & Me.Quote(Index) & " ON " & Me.Quote(Table, True) & " (" & Me.MakeFieldList(Fields) & ")"
  
  Me.Exec(sReq)

End

Public Sub DropIndex(Table As String, Index As String)
  
  Me.Exec("DROP INDEX " & Me.Quote(Index) & " ON TABLE " & Me.Quote(Table, True))
  
End
