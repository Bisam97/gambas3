' Gambas module file

Public Result As String

Private $cTool As New Collection

Private _NET_CLIENT_LIST As Integer

Public Sub RunXdgUtil(sProg As String, aArg As String[]) 
  
  Dim sCmd As String
  Dim sPath As String
  Dim sDir As String
  Dim aCmd As String[]
  
  sCmd = $cTool[sProg]
  
  If Not sCmd Then 
    Shell "which " & sProg & " 2>&1" To sCmd
    If Process.LastValue Then 
      sDir = Temp$("xdg-utils")
      sDir = File.Dir(sDir) &/ File.BaseName(sDir)
      Try Mkdir sDir
      sCmd = sDir &/ sProg
      Copy "xdg-utils-1.0.2/scripts" &/ sProg To sCmd
      Shell "chmod a+x " & Quote.Shell(sCmd) Wait
    Endif
    sCmd = Trim(sCmd)
    $cTool[sProg] = sCmd
  Endif
  
  aCmd = [sCmd]
  aCmd.Insert(aArg)
  Exec aCmd To Result 
  
  Select Case Process.LastValue  
    Case 1
      Error.Raise("Syntax error")
    Case 2
      Error.Raise("File does not exist")
    Case 3
      Error.Raise("A required tool could not be found")
    Case 4
      Error.Raise("The action has failed")
    Case 5
      Error.Raise("File access forbidden")
  End Select 
  
End

Private Function SearchPathConfig(sXdgConfigHome As String, sXdgConfigDirs As String) As String
  
  If Exist(sXdgConfigHome & "/user-dirs.dirs") Then ' Devrait exister
    Return sXdgConfigHome & "/user-dirs.dirs"
  Else If Exist(sXdgConfigDirs & "/user-dirs.defaults") Then ' Sinon l'un
    Return sXdgConfigDirs & "/user-dirs.defaults"
  Else If Exist(sXdgConfigDirs & "/user-dirs.dirs") Then ' Ou l'autre
    Return sXdgConfigDirs & "/user-dirs.dirs"
  Endif
  
End

Private Function SearchPathVariable(sFileConfig As String, sDirectory As String) As String

  Dim hFile As File
  Dim sLine As String
  Dim iPos As Integer
  Dim aLine As String[]
  
  hFile = Open sFileConfig For Input
  While Not Eof(hFile)
    Line Input #hFile, sLine
    sLine = Trim(sLine)
    If Not sLine Then Continue
    If Left(sLine) = "#" Then Continue
    If sLine Like (sDirectory & "*") Then Break
    sLine = ""
  Wend
  
  aLine = Scan(sLine, sDirectory & "=*")
  If aLine.Count Then
    sLine = aLine[0]
    If Left(sLine) = Chr$(34) Then sLine = Mid$(sLine, 2, -1)
    If sLine Like "$HOME/*" Then sLine = Replace(sLine, "$HOME", System.User.Home)
    Return sLine
  Endif

End

Public Sub GetDesktopPath() As String

  Dim hFile As File
  Dim sLine, sDir, sXdgConfigHome, sXdgConfigDirs, sFileConfig As String
  
  sXdgConfigHome = Application.Env["XDG_CONFIG_HOME"] ' $XDG_CONFIG_HOME définie ?
  If Not sXdgConfigHome Then sXdgConfigHome = User.Home & "/.config" ' Sinon val. par défaut
  
  sXdgConfigDirs = Application.Env["XDG_CONFIG_DIRS"] ' $XDG_CONFIG_DIRS définie ?
  If Not sXdgConfigDirs Then sXdgConfigDirs = "/etc/xdg" ' Sinon val. par défaut
  
  sFileConfig = SearchPathConfig(sXdgConfigHome, sXdgConfigDirs)
  sDir = SearchPathVariable(sFileConfig, "XDG_DESKTOP_DIR") 
  
  Return sDir
  
End


Public Sub Main()

  ' Dim hWindow As DesktopWindow
  ' 
  ' For Each hWindow In Desktop.Windows
  '   Print Hex$(hWindow.Id);; hWindow.VisibleName
  ' Next

  ' Dim iInd As Integer
  ' 
  ' For iInd = 0 To Desktop.Count - 1
  '   With Desktop[iInd]
  '     Print .Name;; .X;; .Y;; .Width;; .Height
  '   End With
  ' Next

  'Desktop.Passwords["Test"] = "barbapapa"
  'Print Desktop.Passwords["Test"] 
  
  Dim hDesktopWatcher As DesktopWatcher 
  
  hDesktopWatcher = New DesktopWatcher As "Desktop"
  
  Form2.Show
  
End



Public Sub Desktop_Change(Window As Integer, Atom As Integer)
  
  Debug Window;; _Desktop.GetAtomName(Atom)
  
  If Window = _Desktop.RootWindow And If Atom = _NET_CLIENT_LIST Then
  Endif
  
End

Public Sub Desktop_Window(Window As Integer, X As Integer, Y As Integer, W As Integer, H As Integer)
  
  Debug Window;; X;; Y;; W;; H
  
End

