' Gambas class file

Export

Property Read X As Integer
Property Read Y As Integer
Property Read Width As Integer
Property Read Height As Integer
Property Read Name As String
Property Read VisibleName As String
Property Desktop As Integer
'Property Read State As Integer[]
Property Read Id As Integer
Property Read Icon As Image

Property Minimized As Boolean
Property Maximized As Boolean
Property FullScreen As Boolean
Property SkipTaskbar As Boolean
Property Sticky As Boolean

Private $iId As Integer
Private $aDim As Integer[]
Private $sName As String

Public Sub _new(Window As Integer)
  
  $iId = Window
  
End

Public Sub Refresh()
  
  $aDim = Null
  
End

Private Sub GetDimensions()
  
  If Not $aDim Then $aDim = _Desktop.GetWindowGeometry($iId)
  
End


Private Function X_Read() As Integer

  GetDimensions
  Return $aDim[0]

End

Private Function Y_Read() As Integer

  GetDimensions
  Return $aDim[1]  

End

Private Function Width_Read() As Integer

  GetDimensions
  Return $aDim[2]

End

Private Function Height_Read() As Integer

  GetDimensions
  Return $aDim[3]  

End

Public Sub Close()
  
  _Desktop.SendClientMessageToRootWindow(Atom["_NET_CLOSE_WINDOW"], [_Desktop.CurrentTime, 2], $iId)
  
End

Public Sub Move(X As Integer, Y As Integer, Optional Width As Integer, Optional Height As Integer)
  
  If Width > 0 And Height > 0 Then
    _Desktop.SendClientMessageToRootWindow(Atom["_NET_MOVERESIZE_WINDOW"], [&X10111100000000, X, Y, Width, Height], $iId)
  Else
    _Desktop.SendClientMessageToRootWindow(Atom["_NET_MOVERESIZE_WINDOW"], [&X10001100000000, X, Y], $iId)
  Endif
  
End

Public Sub Resize(Width As Integer, Height As Integer)
  
  _Desktop.SendClientMessageToRootWindow(Atom["_NET_MOVERESIZE_WINDOW"], [&X10110000000000, Width, Height], $iId)
  
End

Private Function Name_Read() As String

  Try Return _Desktop.GetWindowProperty(Atom["_NET_WM_NAME"], $iId)[0]

End

Private Function VisibleName_Read() As String

  Dim sName As String

  Try sName = _Desktop.GetWindowProperty(Atom["_NET_WM_VISIBLE_NAME"], $iId)[0]
  If Not sName Then Return Name_Read()

End

Private Function Desktop_Read() As Integer

  Try Return _Desktop.GetWindowProperty(Atom["_NET_WM_DESKTOP"], $iId)[0]

End

Private Sub Desktop_Write(Value As Integer)

  _Desktop.SendClientMessageToRootWindow(Atom["_NET_WM_DESKTOP"], [Value, 2], $iId)

End

Private Function GetState() As String[]

  Return _Desktop.GetWindowProperty(Atom["_NET_WM_STATE"], $iId)

End

Private Sub SetState(State As String, Optional State2 As String)
  
  _Desktop.SendClientMessageToRootWindow(Atom["_NET_WM_STATE"], [Atom["_NET_WM_STATE_ADD"], Atom[State], Atom[State2], 2], $iId)
  
End

Private Sub ClearState(State As String, Optional State2 As String)
  
  _Desktop.SendClientMessageToRootWindow(Atom["_NET_WM_STATE"], [Atom["_NET_WM_STATE_REMOVE"], Atom[State], Atom[State2], 2], $iId)
  
End

Private Sub ToggleState(State As String, Optional State2 As String)
  
  _Desktop.SendClientMessageToRootWindow(Atom["_NET_WM_STATE"], [Atom["_NET_WM_STATE_TOGGLE"], Atom[State], Atom[State2], 2], $iId)
  
End

Private Function Id_Read() As Integer

  Return $iId  

End

Private Function Icon_Read() As Image

  Dim aIcon As Integer[]

  aIcon = _Desktop.GetWindowProperty(Atom["_NET_WM_ICON"], $iId)
  If aIcon Then Return _Desktop.MakeIcon(aIcon) 

End

Private Function Minimized_Read() As Boolean

  Dim aProp As Integer[]

  aProp = _Desktop.GetWindowProperty(Atom["WM_STATE"], $iId)
  If aProp And If aProp[0] = 3 Then Return True

End

Private Sub Minimized_Write(Value As Boolean)

  _Desktop.MinimizeWindow($iId, Value)

End

Private Function Maximized_Read() As Boolean

  Dim aState As String[] = GetState()

  If aState Then
    Return aState.Find("_NET_WM_STATE_MAXIMIZED_VERT") >= 0 And aState.Find("_NET_WM_STATE_MAXIMIZED_HORZ") >= 0
  Endif

End

Private Sub Maximized_Write(Value As Boolean)

  If Value Then
    SetState("_NET_WM_STATE_MAXIMIZED_VERT", "_NET_WM_STATE_MAXIMIZED_HORZ")
  Else
    ClearState("_NET_WM_STATE_MAXIMIZED_VERT", "_NET_WM_STATE_MAXIMIZED_HORZ")
  Endif
  
End

Private Function FullScreen_Read() As Boolean

  Dim aState As String[] = GetState()

  If aState Then
    Return aState.Find("_NET_WM_STATE_FULLSCREEN") >= 0 
  Endif

End

Private Sub FullScreen_Write(Value As Boolean)

  If Value Then
    SetState("_NET_WM_STATE_FULLSCREEN")
  Else
    ClearState("_NET_WM_STATE_FULLSCREEN")
  Endif

End

Private Function SkipTaskbar_Read() As Boolean

  Dim aState As String[] = GetState()

  If aState Then
    Return aState.Find("_NET_WM_STATE_SKIP_TASKBAR") >= 0 
  Endif  

End

Private Sub SkipTaskbar_Write(Value As Boolean)

  If Value Then
    SetState("_NET_WM_STATE_SKIP_TASKBAR")
  Else
    ClearState("_NET_WM_STATE_SKIP_TASKBAR")
  Endif

End

Private Function Sticky_Read() As Boolean

  Dim aState As String[] = GetState()

  If aState Then
    Return aState.Find("_NET_WM_STATE_STICKY") >= 0 
  Endif  

End

Private Sub Sticky_Write(Value As Boolean)

  If Value Then
    SetState("_NET_WM_STATE_STICKY")
  Else
    ClearState("_NET_WM_STATE_STICKY")
  Endif

End

Public Sub GetIcon(Width As Integer, Height As Integer) As Image
  
  Dim aIcon As Integer[]
  Dim hImage As Image

  aIcon = _Desktop.GetWindowProperty(Atom["_NET_WM_ICON"], $iId)
  If Not aIcon Then Return
  
  hImage = _Desktop.MakeIcon(aIcon, Width, Height)
  If hImage Then Return hImage.Stretch(Width, Height)
  
End
