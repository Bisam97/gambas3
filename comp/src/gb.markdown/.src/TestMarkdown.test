' Gambas test file

Public Sub Paragraph()

    Dim md, expect, got As String

    md = "blah" & gb.lf & gb.lf & "blub" & gb.lf & gb.lf & "dingdong"
    expect = "<p>blah</p>" & gb.lf & gb.Lf & "<p>blub</p>" & gb.lf & gb.Lf & "<p>dingdong</p>" & gb.Lf
    got = Markdown.ToHTML(md)
    Assert.StringEquals(got, expect, "Markdown paragraph")

End

Public Sub ParagraphTwo()

    Dim md, expect, got As String

    md = "blah" & gb.lf & gb.lf & "blub" & gb.lf & "dingdong"
    expect = "<p>blah</p>" & gb.lf & gb.Lf & "<p>blub" & gb.lf & "dingdong</p>" & gb.Lf
    got = Markdown.ToHTML(md)
    Assert.StringEquals(got, expect, "Markdown paragraph Two")
    'Assert.Note("I got:" & gb.lf & got)

End

Public Sub ParagraphThree()

    Dim md, expect, got As String

    md = "<strong>blah</strong>" & gb.lf & gb.lf & "blub"
    expect = "<p><strong>blah</strong></p>" & gb.lf & gb.Lf & "<p>blub</p>" & gb.Lf
    got = Markdown.ToHTML(md)
    Assert.StringEquals(got, expect, "Markdown paragraph Three")
    'Assert.Note("I got:" & gb.lf & got)

End

Public Sub Headline()

    Dim md, expect, got As String

    md = "# dingdong midhl endhl"
    expect = "<h1>dingdong midhl endhl</h1>" & gb.Lf
    got = Markdown.ToHTML(md)
    Assert.StringEquals(got, expect, "Markdown headline 1-1")
    'Assert.Note("I got:" & gb.lf & got)

    md = "# dingdong midhl endhl #"
    expect = "<h1>dingdong midhl endhl</h1>" & gb.Lf
    got = Markdown.ToHTML(md)
    Assert.StringEquals(got, expect, "Markdown headline 1-2 alternative")
    'Assert.Note("I got:" & gb.lf & got)

    md = "## dingdong midhl endhl"
    expect = "<h2>dingdong midhl endhl</h2>" & gb.Lf
    got = Markdown.ToHTML(md)
    Assert.StringEquals(got, expect, "Markdown headline 2")
    'Assert.Note("I got:" & gb.lf & got)

    md = "### dingdong midhl endhl"
    expect = "<h3>dingdong midhl endhl</h3>" & gb.Lf
    got = Markdown.ToHTML(md)
    Assert.StringEquals(got, expect, "Markdown headline 3")
    'Assert.Note("I got:" & gb.lf & got)

    md = "#### dingdong midhl endhl"
    expect = "<h4>dingdong midhl endhl</h4>" & gb.Lf
    got = Markdown.ToHTML(md)
    Assert.StringEquals(got, expect, "Markdown headline 4")
    'Assert.Note("I got:" & gb.lf & got)

    md = "##### dingdong midhl endhl"
    expect = "<h5>dingdong midhl endhl</h5>" & gb.Lf
    got = Markdown.ToHTML(md)
    Assert.StringEquals(got, expect, "Markdown headline 5")
    'Assert.Note("I got:" & gb.lf & got)

    md = "###### dingdong midhl endhl"
    expect = "<h6>dingdong midhl endhl</h6>" & gb.Lf
    got = Markdown.ToHTML(md)
    Assert.StringEquals(got, expect, "Markdown headline 6")
    'Assert.Note("I got:" & gb.lf & got)

End

Public Sub HeadlineThree()

    Dim md, got As String

    md = "#dingdong"
    Try got = Markdown.ToHTML(md)
    Assert.Error("Markdown headline error")
    'Assert.Note("I got:" & gb.lf & got)

End

Public Sub HlAndParagraph()

    Dim md, expect, got As String

    md = "# headline" & gb.lf & "blub"
    expect = "<h1>headline</h1>" & gb.lf & gb.lf & "<p>blub</p>" & gb.lf
    got = Markdown.ToHTML(md)
    Assert.StringEquals(got, expect, "Markdown headline and paragraph")

End

Public Sub HlAndLineAndParagraph()

    Dim md, expect, got As String

    md = "# headline" & gb.lf & "---" & gb.lf & "blub"
    expect = "<h1>headline</h1>" & gb.lf & gb.lf & "<hr>" & gb.lf & gb.lf & "<p>blub</p>" & gb.lf
    got = Markdown.ToHTML(md)
    Assert.StringEquals(got, expect, "Markdown headline and paragraph")
    ' Assert.Note("I got:" & gb.lf & got)

End

Public Sub HlAndList()

    Dim md, expect, got As String

    md = Subst("1. # Hund&11. # Katze&11. # Maus", gb.Lf)
    expect = Subst("<ol>&1<li>\n<h1>Hund</h1>&1</li>&1<li>&1<h1>Katze</h1>&1</li>&1<li>&1<h1>Maus</h1>&1</li>&1</ol>", gb.Lf)
    got = Markdown.ToHTML(md)
    Assert.StringEquals(got, expect, "Markdown headline and list")
    ' Assert.Note("I got:" & gb.lf & got)

End

Public Sub HtmlTagIntegrity()

    Dim md, expect, got As String

    md = "# headline" & gb.lf & gb.lf & "blub" & gb.lf & gb.lf &
        "<img src='test' blah='test' /> and some Text"

    expect = "<h1>headline</h1>" & gb.lf & gb.lf &
        "<p>blub</p>" & gb.lf & gb.lf &
        "<p><img src='test' blah='test' /> and some Text</p>" & gb.lf
    got = Markdown.ToHTML(md)
    Assert.StringEquals(got, expect, "Markdown TestHtmlTagIntegrity")
    'Assert.Note("I got:" & gb.lf & got)

End

Public Sub HtmlTagIntegrityTwo()

    Dim md, expect, got As String

    md = "<div>" & gb.lf &
        "test" & gb.lf &
        "anothersth" & gb.lf &
        "<small>anothersth and so on.</small>" & gb.lf &
        "</div>"

    expect = "<div>" & gb.lf &
        "<p>test" & gb.lf &
        "anothersth" & gb.lf &
        "<small>anothersth and so on.</small></p>" & gb.lf &
        "</div>"

    got = Markdown.ToHTML(md)
    Test.TODO("Test umschreiben, so macht er keinen Sinn")
    Assert.StringEquals(got, expect, "Markdown headline and paragraph")
    'Assert.Note("I got:" & gb.lf & got)

End

Public Sub UL()

    Dim md, expect, got As String

    md = "* One" & gb.lf &
        "* Two" & gb.Lf &
        "* Three"

    expect = "<ul>" & gb.Lf &
        "<li>One</li>" & gb.Lf &
        "<li>Two</li>" & gb.Lf &
        "<li>Three</li>" & gb.Lf &
        "</ul>"

    got = Markdown.ToHTML(md)
    Assert.StringEquals(got, expect, "Markdown UL")
    ' Assert.Note("I got:" & gb.lf & got)

End

Public Sub OL()

    Dim md, expect, got As String

    md = "1. One" & gb.lf &
        "1. Two" & gb.Lf &
        "1. Three"

    expect = "<ol>" & gb.Lf &
        "<li>One</li>" & gb.Lf &
        "<li>Two</li>" & gb.Lf &
        "<li>Three</li>" & gb.Lf &
        "</ol>"

    got = Markdown.ToHTML(md)
    Assert.StringEquals(got, expect, "Markdown OL")
    ' Assert.Note("I expected:" & gb.lf & expect)
    ' Assert.Note("I got:" & gb.lf & got)

End

Public Sub OLWithImage()

    Dim md, expect, got As String

    md = "1. One" & gb.lf &
        "1. <img src='test' title='test' />" & gb.Lf &
        "1. Three"

    expect = "<ol>" & gb.Lf &
        "<li>One</li>" & gb.Lf &
        "<li><img src='test' title='test' /></li>" & gb.Lf &
        "<li>Three</li>" & gb.Lf &
        "</ol>"

    got = Markdown.ToHTML(md)
    Assert.StringEquals(got, expect, "Markdown OL with image")
    ' Assert.Note("I expected:" & gb.lf & expect)
    'Assert.Note("I got:" & gb.lf & got)

End

Public Sub HtmlTags()

    Dim md, expect, got As String

    md = "<img src='test' " & gb.lf & "title='test' />"

    expect = "<p><img src='test' title='test' /></p>" & gb.lf

    got = Markdown.ToHTML(md)
    Assert.StringEquals(got, expect, "Markdown image")
    ' Assert.Note("I expected:" & gb.lf & expect)
    'Assert.Note("I got:" & gb.lf & got)

End

Public Sub Table()

    Dim md, expect, got As String

    md = "<table class='degtab wmax20em'>" & gb.Lf &
        "<tr>" & gb.Lf &
        "<th>" & gb.Lf &
        "Bis kg" &
        "</th>" & gb.Lf &
        "<th>" & gb.Lf &
        "Versandpreis" &
        "</th>" & gb.Lf &
        "</tr>" & gb.Lf &
        "<tr class='tabcol1'>" & gb.Lf &
        "<td>" & gb.Lf &
        "1,6 kg" &
        "</td>" & gb.Lf &
        "<td>" & gb.Lf &
        "4,50 €" &
        "</td>" & gb.Lf &
        "</tr>" & gb.Lf &
        "</table>"

    expect = "<table class='degtab wmax20em'>" & gb.Lf &
        "<tr>" & gb.Lf &
        "<th>" & gb.Lf &
        "Bis kg" &
        "</th>" & gb.Lf &
        "<th>" & gb.Lf &
        "Versandpreis" &
        "</th>" & gb.Lf &
        "</tr>" & gb.Lf &
        "<tr class='tabcol1'>" & gb.Lf &
        "<td>" & gb.Lf &
        "1,6 kg" &
        "</td>" & gb.Lf &
        "<td>" & gb.Lf &
        "4,50 €" &
        "</td>" & gb.Lf &
        "</tr>" & gb.Lf &
        "</table>"

    got = Markdown.ToHTML(md)
    Assert.StringEquals(got, expect, "Markdown preserve table")
    'Assert.Note(got)

End

Public Sub ParInTable()

    Dim md, expect, got As String

    md = "<table class='degtab wmax20em'>" & gb.Lf &
        "<tr>" & gb.Lf &
        "<th>" & gb.Lf &
        "<p>Bis kg</p>" &
        "</th>" & gb.Lf &
        "<th>" & gb.Lf &
        "Versandpreis" &
        "</th>" & gb.Lf &
        "</tr>" & gb.Lf &
        "<tr class='tabcol1'>" & gb.Lf &
        "<td>" & gb.Lf &
        "1,6 kg" &
        "</td>" & gb.Lf &
        "<td>" & gb.Lf &
        "4,50 €" &
        "</td>" & gb.Lf &
        "</tr>" & gb.Lf &
        "</table>"

    expect = "<table class='degtab wmax20em'>" & gb.Lf &
        "<tr>" & gb.Lf &
        "<th>" & gb.Lf &
        "<p>Bis kg</p>" &
        "</th>" & gb.Lf &
        "<th>" & gb.Lf &
        "Versandpreis" &
        "</th>" & gb.Lf &
        "</tr>" & gb.Lf &
        "<tr class='tabcol1'>" & gb.Lf &
        "<td>" & gb.Lf &
        "1,6 kg" &
        "</td>" & gb.Lf &
        "<td>" & gb.Lf &
        "4,50 €" &
        "</td>" & gb.Lf &
        "</tr>" & gb.Lf &
        "</table>"

    got = Markdown.ToHTML(md)
    Assert.StringEquals(got, expect, "Markdown preserve p in table")
    'Assert.Note(got)

End

Public Sub PreserverUL()

    Dim md, expect, got As String

    md = "<ul class='ulist'>" & gb.Lf &
        "  <li>Zum 15.12. in die Wintermischung 2</li> " & gb.Lf &
        "  <li>Zum 15.2. in die Fellwechselmischung Frühjahr</li> " & gb.Lf &
        "  <li>Zum 15.4. in die Sommermischung</li> " & gb.Lf &
        "  <li>Zum 15.8. in die Fellwechselmischung Herbst</li> " & gb.Lf &
        "  <li>Zum 15.10. in die Wintermischung 1</li> " & gb.Lf &
        "</ul>"

    expect = "<ul class='ulist'>" & gb.Lf &
        Trim("  <li>Zum 15.12. in die Wintermischung 2</li> ") & gb.Lf &
        Trim("  <li>Zum 15.2. in die Fellwechselmischung Frühjahr</li> ") & gb.Lf &
        Trim("  <li>Zum 15.4. in die Sommermischung</li> ") & gb.Lf &
        Trim("  <li>Zum 15.8. in die Fellwechselmischung Herbst</li> ") & gb.Lf &
        Trim("  <li>Zum 15.10. in die Wintermischung 1</li> ") & gb.Lf &
        "</ul>"

    got = Markdown.ToHTML(md)
    Assert.StringEquals(got, expect, "Markdown preserve ul")
    'Assert.Note(got)

End

Public Sub PreserverOL()

    Dim md, expect, got As String

    md = "<ol class='ulist'>" & gb.Lf &
        "  <li>Zum 15.12. in die Wintermischung 2</li> " & gb.Lf &
        "  <li>Zum 15.2. in die Fellwechselmischung Frühjahr</li> " & gb.Lf &
        "  <li>Zum 15.4. in die Sommermischung</li> " & gb.Lf &
        "  <li>Zum 15.8. in die Fellwechselmischung Herbst</li> " & gb.Lf &
        "  <li>Zum 15.10. in die Wintermischung 1</li> " & gb.Lf &
        "</ol>"

    expect = "<ol class='ulist'>" & gb.Lf &
        Trim("  <li>Zum 15.12. in die Wintermischung 2</li> ") & gb.Lf &
        Trim("  <li>Zum 15.2. in die Fellwechselmischung Frühjahr</li> ") & gb.Lf &
        Trim("  <li>Zum 15.4. in die Sommermischung</li> ") & gb.Lf &
        Trim("  <li>Zum 15.8. in die Fellwechselmischung Herbst</li> ") & gb.Lf &
        Trim("  <li>Zum 15.10. in die Wintermischung 1</li> ") & gb.Lf &
        "</ol>"

    got = Markdown.ToHTML(md)
    Assert.StringEquals(got, expect, "Markdown preserve ol")

End

Public Sub Strong()

    Dim md, expect, got As String

    md = "<strong>Das berühmte Deganius Kräuterabo</strong>" & gb.lf & gb.Lf & "Balb"
    expect = "<p><strong>Das berühmte Deganius Kräuterabo</strong></p>" & gb.lf & gb.Lf & "<p>Balb</p>" & gb.Lf
    got = Markdown.ToHTML(md)
    Assert.StringEquals(got, expect, "Markdown strong paragraph")

End

Public Sub TagsContainLF()

    Dim md, expect, got As String

    md = "### <a name='Woher_kommt_der_Name_Deganius'></a>Woher kommt der Name Deganius?" & gb.Lf & "" & gb.Lf & "Der Name stammt von einem Fjordie namens Degan und einer langen" & gb.Lf & "Nacht in einem Nürnberger Wirtshaus, der" & gb.Lf & "<a href='https://www.frankenstube.com/'" & gb.Lf & "class='external text'" & gb.Lf & "title='https://www.frankenstube.com/'" & gb.Lf & "rel='nofollow'>Frankenstube</a>." & gb.Lf & "Die Kneipe ist übrigens 'wärklich' zu empfehlen :-)))))"

    expect = "<h3><a name='Woher_kommt_der_Name_Deganius'></a>Woher kommt der Name Deganius?</h3>" & gb.Lf & gb.Lf & "<p>Der Name stammt von einem Fjordie namens Degan und einer langen" & gb.Lf & "Nacht in einem Nürnberger Wirtshaus, der" & gb.Lf & "<a href='https://www.frankenstube.com/' class='external text' title='https://www.frankenstube.com/' rel='nofollow'>Frankenstube</a>." & gb.Lf & "Die Kneipe ist übrigens 'wärklich' zu empfehlen :-)))))</p>" & gb.lf

    got = Markdown.ToHTML(md)

    Assert.StringEquals(got, expect, "Tags that contain LF")

    md = "{blah: blubbo\nbong}"
    expect = "<p>{blah: blubbo bong}</p>" & gb.lf

    got = Markdown.ToHTML(md)
    Assert.StringEquals(got, expect, "Curly braces that contain LF")

End

Public Sub OriginalMd()

    Dim md, expect, got As String
    'Print Markdown.ToHTML(File.Load("../Test/MdTest.md"))
    Test.TODO("Original Markdown test.")
    got = Markdown.ToHTML(File.Load("../Test/MdTest.md"))
    expect = File.Load("../Test/MdTest.html")
    Assert.Equals(got, expect)

End

Public Sub OriginalMdPart()

    'Print Markdown.ToHTML(File.Load("../Test/MdTest.md"))
    Dim md, expect, got As String
    got = Markdown.ToHTML(File.Load("../Test/MdTestPart1.md"))
    expect = File.Load("../Test/MdTestPart1.html")
    Assert.Equals(got, expect, "OriginalMd Part 1")
    
    got = Markdown.ToHTML(File.Load("../Test/MdTestPart2.md"))
    expect = File.Load("../Test/MdTestPart2.html")
    Assert.Equals(got, expect, "OriginalMd Part 2")
    
    got = Markdown.ToHTML(File.Load("../Test/MdTestPart3.md"))
    expect = File.Load("../Test/MdTestPart3.html")
    Test.TODO("OriginalMd Part 3")
    Assert.Equals(got, expect, "OriginalMd Part 3")

End

Public Sub Blockquote()

    Dim md, expect, got As String

    md = "Ihre Mailadresse sollte Ihren Namen mit enthalten, also " & gb.Lf &
        "> Vorname Nachname Ugugu" & gb.Lf &
        "Vermeiden Sie möglichst HTML (zum Beispiel das eigene Logo oder ein Hintergrundbild"

    expect = "<p>Ihre Mailadresse sollte Ihren Namen mit enthalten, also</p>" & gb.Lf &
        "<blockquote>" & gb.Lf &
        "<p>Vorname Nachname Ugugu</p>" & gb.Lf &
        "</blockquote>" & gb.Lf & gb.Lf &
        "<p>Vermeiden Sie möglichst HTML (zum Beispiel das eigene Logo oder ein Hintergrundbild</p>" & gb.lf

    Markdown.EnableCode(True)
    got = Markdown.ToHTML(md)
    Assert.Equals(got, expect)

End
