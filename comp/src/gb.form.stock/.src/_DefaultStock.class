' Gambas class file

Export

Class Image
Class SvgImage

Static Private $cSynonymous As New Collection
Static Private $cRightToLeft As Collection
Static Private $bDebug As Boolean
Static Private $aFlags As String[]

Static Public Sub _init()

  Dim hFile As File
  Dim sLine As String
  Dim iPos As Integer
  
  hFile = Open "links" For Input
  For Each sLine In hFile.Lines
    sLine = Trim(sLine)
    iPos = InStr(sLine, " -> ")
    If iPos < 2 Then Continue
    $cSynonymous[Trim(Left(sLine, iPos - 1))] = Trim(Mid$(sLine, iPos + 4))
  Next
  
  $bDebug = Env["GB_STOCK_DEBUG"] = "1"
  
End

Static Private Sub Stretch(hImage As Image, iSize As Integer) As Image
  
  If hImage.W = iSize And If hImage.H = iSize Then Return hImage
  Return hImage.Stretch(iSize, iSize)
  
End

Static Private Sub LoadRightToLeft()
  
  Dim sKey As String
  
  $cRightToLeft = New Collection
  For Each sKey In Split(File.Load("reverse"), "\n")
    sKey = Trim(sKey)
    If Not sKey Then Continue
    If sKey Begins ";" Then Continue
    $cRightToLeft[sKey] = True
  Next
  
End

Static Private Sub LoadIcon(sKey As String, iSize As Integer, sStock As String) As Image

  Dim sPath As String
  Dim hImage As Image
  Dim bMirror As Boolean
  
  sPath = sStock &/ CStr(iSize) &/ sKey
  If $bDebug And If iSize = 32 And If Not Exist(sPath & ".png") Then Error "gb.form.stock: unknown icon: " & sKey
  'If System.RightToLeft And If Exist(sPath & "-rtl.png") Then sPath &= "-rtl"
  If System.RightToLeft Then
    If Not $cRightToLeft Then LoadRightToLeft
    If $cRightToLeft.Exist(sKey) Then
      If Exist(sPath & "-rtl.png") Then 
        sPath &= "-rtl"
      Else
        bMirror = True
      Endif
    Endif
  Endif
  
  hImage = Image.Load(sPath & ".png")
  If bMirror Then hImage = hImage.Mirror(True, False)
  Return hImage
  
End

Static Public Sub LoadImage(sKey As String, iSize As Integer, Optional sStock As String) As Image

  Dim hImage As Image

  If $cSynonymous.Exist(sKey) Then sKey = $cSynonymous[sKey]
  If Not sStock Or If Not IsDir(sStock) Then sStock = "gambas"
  
  'If sKey = "tools" Then Debug sPath
  
  If iSize <= 32 Then
    Try hImage = LoadIcon(sKey, 32, sStock)
    If Not Error Then Goto RETURN_IMAGE
  Endif
  
  Try hImage = LoadIcon(sKey, 128, sStock)
  If Not Error Then Goto RETURN_IMAGE
  
  hImage = LoadIcon(sKey, 32, sStock)
  
RETURN_IMAGE:

  hImage = Stretch(hImage, iSize)
  If Application.DarkTheme And If hImage Then hImage = hImage.Invert(True) 'Color.Background, Color.Foreground)
  Return hImage
  
End

Static Public Sub LoadSvgImage(sKey As String, Optional sStock As String) As SvgImage

  Dim sPath As String
  
  If $cSynonymous.Exist(sKey) Then sKey = $cSynonymous[sKey]
  If Not sStock Or If Not IsDir(sStock) Then sStock = "gambas"
  sPath = sStock &/ "scalable" &/ sKey
  If System.RightToLeft And If Exist(sPath & "-rtl.svg") Then sPath &= "-rtl"
  'If sKey = "tools" Then Debug sPath
  Return SvgImage.Load(sPath & ".svg")
  
End

Static Public Sub InstallIconTheme()
  
  MakeIconTheme.Run()
  
End

Static Public Sub LoadFlag(sKey As String, iSize As Integer) As Image

  Dim hImage As Image
  Dim sPath As String

  sPath = "flag/256/" & sKey & ".png"
  If Not Exist(sPath) Then Error.Raise("Unknown flag")
  
  hImage = Image.Load(sPath)
  If iSize <> 256 Then hImage = hImage.Stretch(iSize, iSize)
  Return hImage
  
End

Static Public Sub GetFlags() As String[]

  Dim I As Integer
  
  If Not $aFlags Then
  
    $aFlags = Dir("flag/256", "*.png")
    For I = 0 To $aFlags.Max
      $aFlags[I] = File.BaseName($aFlags[I])
    Next
    $aFlags.ReadOnly = True
    
  Endif
  
  Return $aFlags
  
End
