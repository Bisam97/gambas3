' Gambas class file

''' Base class for a test harness. It collects statistics about the tests, inspired by perl's Test::Harness.

Export

Property Read Tests As TestStats[]
Property Read Current As TestStats
Property Read Finished As Boolean

Private $hProducer As Process
Private $hParser As TapParser
Private $aTests As New TestStats[]
Private $hCurrent As TestStats

Private Sub InitParser(sName As String)

    ' XXX: If a class inherits this, it can override/claim event handlers and our statistics aren't accurate.
    $hParser = New TapParser As "Parser"

    With $hCurrent = New TestStats
        .Name = sName
        .Plan = [1, 0]
        .Started = Now()
    End With

    $aTests.Push($hCurrent)

End

Private Sub AddLine(sLine As String)

    $hCurrent.Lines.Add(sLine)
    $hParser.ParseLine(sLine)

End

Private Sub FinishStats()

    With $hCurrent
        .Ended = Now()
        .ExitCode = 0
        If $hProducer Then .ExitCode = $hProducer.Value
        .Run = .Passed + .Failed + .Todo + .Skipped
        .Delta = .Planned - .Run
        .Success = .ExitCode = 0 And .Planned > 0 And .Run = .Planned And .Failed = 0
    End With

End

Public Sub Attach(Producer As Process, Name As String)

    $hProducer = Producer
    Object.Attach(Producer, Me, "TapStream")

    InitParser(Name)

End

Public Sub Wait()

    If $hProducer Then $hProducer.Wait()

End

Public Sub Read(Producer As Variant, Name As String)

    If Producer Is Process Then
        Me.Attach(Producer, Name)
        Me.Wait()
    Else If Producer Is Stream Then
        Dim hStream As Stream = Producer
        Dim sLine As String
        InitParser(Name)
        For Each sLine In hStream.Lines
            AddLine(sLine)
        Next
        FinishStats()
    Else
        Error.Raise(Subst$(("Can't handle TAP producer of class '&1'"), Object.Class(Producer).Name))
    Endif

End

Public Sub TapStream_Read()

    AddLine(Last.ReadLine())

End

Public Sub TapStream_Error(Message As String)

    AddLine(Message)

End

Public Sub TapStream_Kill()

    FinishStats()

End

Public Sub Parser_Version(Version As Integer)

    $hCurrent.Version = Version

End

Public Sub Parser_Plan(Start As Integer, {End} As Integer)

    $hCurrent.Plan = [Start, {End}]
    $hCurrent.Planned = 1 + {End} - Start

End

' FIXME: It is an error if the test IDs are not sequential, according to prove.
' TODO: Subtests as produced by TapPrinter are not supported yet.

Public Sub Parser_Assert(Ok As Boolean, Id As Long, Description As String, Directive As Integer, Comment As String)

    Dim hTest As New TestAssertion

    With hTest
        .Ok = Ok
        .Id = Id
        .Description = Description
        .Directive = Directive
        .Comment = Comment
    End With
    $hCurrent.Subtests.Push(hTest)

    With $hCurrent
        Select Case Directive
            Case TestAssertion.NONE
                If hTest.Success Then
                    Inc .Passed
                Else
                    Inc .Failed
                Endif

            Case TestAssertion.TODO
                Inc .Todo
                If hTest.Success Then Inc .Bonus

            Case TestAssertion.SKIP
                Inc .Skipped

        End Select
    End With

End

Public Sub Parser_BailOut(Comment As String)

    $hCurrent.BailedOut = True
    $hCurrent.BailMessage = Comment

End

' Diagnostic and Else messages are not handled here.

Private Function Tests_Read() As TestStats[]

    Return $aTests

End

Private Function Current_Read() As TestStats

    Return $hCurrent

End

Private Function Finished_Read() As Boolean

    If $hProducer Then Return $hProducer.State <> Process.Running
    Return True

End
