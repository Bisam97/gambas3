' Gambas module file

Export

'' Prints Message preceded by a hash (#) in each line as comment.

Public Sub Note(Message As String)

    PrintBody(Message)

End
'' Asserts that Value equals Expected

Public Sub Equals(Expected As Variant, Value As Variant, Optional Message As String) As Boolean

    Return Test(Value = Expected, Message)

End

'' Asserts that the expected Float value equals the actual Float value with delta precision.
'' Expected: the expected value
'' Value: the actual value
'' Delta: tolerated precision
'' Message: optional message describing the asserted condition

Public Sub EqualsFloat(Expected As Float, Value As Float, Delta As Float, Optional Message As String) As Boolean

    Return Test(Abs(Expected - Value) <= Delta, Message)

End

'' Asserts that the expected Long value equals the actual Long value

Public Sub EqualsLong(Expected As Long, Value As Long, Optional Message As String) As Boolean

    Return Test(Expected = Value, Message)

End

'' Asserts that the expected Integer value equals the actual Integer value

Public Sub EqualsInteger(Expected As Integer, Value As Integer, Optional Message As String) As Boolean

    ' There is no difference, long values are also stored in integer variables
    EqualsLong(Expected, Value, Message)

End

'' Asserts that the expected date equals the value

Public Sub EqualsDate(Expected As Date, Value As Date, Optional Message As String) As Boolean

    Return Test(Expected = Value, Message)

End

'' Asserts that the expected object equals the object in Value

Public Sub EqualsObject(Expected As Object, Value As Object, Optional Message As String) As Boolean

    Return Test(Expected = Value, Message)

End

'' Asserts that the expected string equals the string in Value

Public Sub EqualsString(Expected As String, Value As String, Optional Message As String) As Boolean

    Return Test(Expected = Value, Message)

End

'' Asserts that Expected <> Value

Public Sub NotEquals(Expected As Variant, Value As Variant, Optional Message As String) As Boolean

    Return Test(Value <> Expected, Message)

End

'' Asserts that Value = Null

Public Sub Null(Value As Variant, Optional Message As String) As Boolean

    Return Test(Value = Null, Message)

End

'' Asserts that Value <> Null

Public Sub NotNull(Value As Variant, Optional Message As String) As Boolean

    Return Test(Value <> Null, Message)

End

'' Asserts that Value = True

Public Sub True(Value As Boolean, Optional Message As String) As Boolean

    Return Test(Value = True, Message)

End

'' Asserts that Value = False

Public Sub False(Value As Boolean, Optional Message As String) As Boolean

    Return Test(Value = False, Message)

End

'' Asserts that an error happened. You have to create the error with Try. For example: Try(2/0)

Public Sub Error(Optional Message As String) As Boolean

    Dim Body As String

    If DetectError() <> 0 Then
        If Error.Text Then
            Body = gb.lf & "Error: " & Error.Text & gb.lf & "Where: " & Error.Where
            Body = Trim(Body)
            Message &= Body
        Endif
        
        Return Test(True, Message)
    Else
        Return Test(False, Message)
    Endif

End

'' Asserts that an error happened with Code number. You have to create the error with Try. For example: Try(2/0)

Public Sub ErrorWithCode(Code As Integer, Optional Message As String) As Boolean

    Dim ReceivedCode As Integer
    Dim Body, Errorbody As String

    ReceivedCode = DetectError()

    If Error.Text Then
        Errorbody = gb.lf & "Error: " & Error.Text & gb.lf & "Where: " & Error.Where
        Errorbody = Trim(Errorbody)
    Endif

    Error.Clear

    If ReceivedCode <> 0 Then
        If ReceivedCode = Code Then
            Body &= gb.lf & Errorbody
            Body = Trim(Body)
            Return Test(True, Message)
        Else
            Body = "Wrong error code, expected " & Code & ", but got " & ReceivedCode
            Body &= gb.lf & Errorbody
            Body = Trim(Body)
            Return Test(False, Message)
        Endif
    Else
        Return Test(False, Message)
    Endif

End

Private Function DetectError() As Integer

    Dim Errorcode As Integer

    'If Error Then
    Errorcode = Error.Code
    Error.Clear
    If Errorcode <> 0 Then
        Return Errorcode
    Endif
    'Endif

    Return 0

End

' ------------------------------------------------- End Of Assertions

Private Sub Test(Evaluated As Boolean, Message As String, Optional Body As String) As Boolean

    Inc Track.Counter
    Inc Track.MethodTestsCount
    Inc Track.ContainerTestsCount

    If Message = Null Then
        Message = Track.ContainerName & ":" & Track.TestName & " Assert " & Track.MethodTestsCount
    Endif

    If Error Then
        If Error.Code > 0
            Body = "Error found: " & Error.Text
            Track.NOKs.Add(Track.Counter)
            Error.Clear
            Print "not ok " & Track.Counter & " - " & Message
            Goto TheEnd
        Endif
    Endif

    If Evaluated = True Then
        Track.OKs.Add(Track.Counter)
        Print "ok " & Track.Counter & " - " & Message
    Else
        Track.NOKs.Add(Track.Counter)
        Print "not ok " & Track.Counter & " - " & Message
        If Body <> Null Then
            Body = "In " & Track.ContainerName & ":" & Track.TestName & gb.lf & Body
        Else
            Body = "In " & Track.ContainerName & ":" & Track.TestName & gb.lf
        Endif
    Endif

TheEnd:

    PrintBody(Body)
    Return Evaluated

End

Private Sub PrintBody(Body As String)

    Dim sLines As String[]
    Dim sLine As String

    sLines = Split(Trim(Body), "\n")

    For Each sLine In sLines
        Print "# " & sLine
    Next

End

