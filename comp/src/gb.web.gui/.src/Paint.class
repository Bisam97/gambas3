' Gambas class file

Export

Static Private $aStack As New PaintDriver[]

Static Property Read Device As WebControl
Static Property LineWidth As Float

Static Private $hCurrent As New PaintDriver

Static Public Sub Begin(Device As WebControl)

  Dim hDriver As PaintDriver
  
  Try hDriver = New ("PaintDriver_" & Object.Type(Device))
  If Error Then Error.Raise("Not a paintable device: " & Error.Text)
  
  $aStack.Push($hCurrent)
  $hCurrent = hDriver
  $hCurrent.Device = Device
  
  $hCurrent.Begin()
  
End

Static Public Sub End()
  
  If Not $hCurrent.Device Then Return
  
  $hCurrent.End()
  $hCurrent = $aStack.Pop()
  
End

Static Private Function Device_Read() As WebControl

  Return $hCurrent.Device

End

Static Public Sub Save()

  $hCurrent.Save()
  
End

Static Public Sub Restore()
  
  $hCurrent.Restore()
  
End

Static Public Sub Rectangle(X As Float, Y As Float, Width As Float, Height As Float)
  
  $hCurrent.Rectangle(X, Y, Width, Height)
  
End

Static Public Sub Fill(Optional Style As Variant, Optional Preserve As Boolean)
  
  $hCurrent.Fill(Style, Preserve)
  
End

Static Public Sub Stroke(Optional Style As Variant, Optional Preserve As Boolean)
  
  $hCurrent.Stroke(Style, Preserve)
  
End

Static Public Sub MoveTo(X As Float, Y As Float)
  
  $hCurrent.MoveTo(X, Y)
  
End

Static Public Sub LineTo(X As Integer, Y As Integer)
  
  $hCurrent.LineTo(X, Y)
  
End

Static Private Function LineWidth_Read() As Float

  Error.Raise("Write-only property")

End

Static Private Sub LineWidth_Write(Value As Float)

  $hCurrent.SetLineWidth(Value)

End

Static Public Sub Arc(XC As Float, YC As Float, Radius As Float, Optional Angle As Float, Length As Float)
  
  If IsMissing(Length) Then
    If IsMissing(Angle) Then
      $hCurrent.Arc(XC, YC, Radius)
    Else
      $hCurrent.Arc(XC, YC, Radius, Angle)
    Endif
  Else
    $hCurrent.Arc(XC, YC, Radius, Angle, Length)
  Endif
  
End

