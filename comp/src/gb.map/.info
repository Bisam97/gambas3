#Geo

C
MapPointToTile
M
Point
(hMapPoint)MapPoint;(Zoom)i
MapPointToPixel
M
Point
(hMapPoint)MapPoint;(Zoom)i
PixelToMapPoint
M
MapPoint
(hPoint)Point;(Zoom)i
PixelToTile
M
Point
(hPoint)Point;
SexToDec
M
f
(Value)s
'ex: 45°53'36" -> 45,893333
DecToSex
M
s
(Value)f(Type)i
'ex:45,893333 -> 45°53'36"
#Map

C
Top
p
i

Y
p
i

Left
p
i

X
p
i

Width
p
i

Height
p
i

Zoom
p
i

Center
p
MapPoint

PixelBox
r
Rect

Bounds
r
MapBounds

_ShowWithEffect
v
b

:Refresh
:


Refresh
m


tmrLoad_Timer
m


Resize
m

(iWidth)i(iHeight)i
AddTile
m
_MapTile
(Name)s(Pattern)s[(Args)Collection;(CacheName)s]
AddShape
m
_MapShape
(Name)s[(Shape)Shapes;]
_get
m
o
(Name)s
_next
m
o

Draw
m


Layer_Refresh
m


tmrDraw_Timer
m


#MapPoint

C
Lat
v
f

Lon
v
f

_new
m

[(Latitude)f(Longitude)f]
_Call
M
MapPoint
(Latitude)f(Longitude)f
Distance
m
f
(PointA)MapPoint;(PointB)MapPoint;
'Calculate geodesic distance (in m) between two points specified by latitude / longitude (in numeric degrees).
'from: Vincenty inverse formula - T Vincenty, "Direct and Inverse Solutions of Geodesics on the
'Ellipsoid with application of nested equations", Survey Review, vol XXII no 176, 1975
'[http://www.ngs.noaa.gov/PUBS_LIB/inverse.pdf]
'© 2002-2008 Chris Veness [http://www.movable-type.co.uk/scripts/latlong-vincenty.html]
From
M
MapPoint
(Point)MapPoint;(Bearing)f(Distance)f
'Calculate destination point given starting point lat / long (numeric degrees), 
'bearing (numeric degrees) & distance (in m).
'from: Vincenty direct formula - T Vincenty, "Direct and Inverse Solutions of Geodesics on the 
'Ellipsoid with application of nested equations", Survey Review, vol XXII no 176, 1975"
'[http://www.ngs.noaa.gov/PUBS_LIB/inverse.pdf]
'© 2002-2008 Chris Veness [http://www.movable-type.co.uk/scripts/latlong-vincenty-direct.html]
Bearing
M
f
(From)MapPoint;(To)MapPoint;
'Calculate the initial bearing (in degrees) that leads from one point to another point
'specified by latitude / longitude.
'
#MapView
UserControl
C
_Properties
C
s
*,Border{Border.*},AllowEffect=true,ShowControls=true
_Group
C
s
View
Lock
p
b

Border
p
i

Map
r
Map

AllowEffect
p
b

ShowControls
p
b

:Click
:


:Draw
:


_new
m


SetCenter
m

(hMapPoint)MapPoint;
View_Draw
m


Refresh
m


View_MouseWheel
m


_ZoomUp
m

(X)i(Y)i
_ZoomDown
m

(X)i(Y)i
Map_Refresh
m


View_MouseDown
m


View_MouseUp
m


View_MouseMove
m


View_Arrange
m


tmrZoom_Timer
m


tmrOnMove_Timer
m


#Shapes

C
Point
C
i
1
MultiPoint
C
i
8
Polyline
C
i
3
Polygon
C
i
5
Count
r
i

Max
r
i

AddMultiPoint
m

(Data)MapPoint[];[(Id)s]
AddPoint
m

(Data)MapPoint;[(Id)s]
AddPolyline
m

(Data)MapPoint[];[(Id)s]
GetCenter
M
MapPoint
(hPoints)MapPoint[];
AddPolygon
m

(Data)MapPoint[][];[(Id)s]
_get
m
_ShapeItem
(Index)i
#_ShapeItem

C
Box
v
RectF

Id
v
s

Type
v
i

Points
v
o

Center
v
MapPoint

Selected
v
b

Image
v
Image

Contains
m
b
(hMapPoint)MapPoint;
