' Gambas class file

Public Style As Integer = 1 'polyline or other
Public Points As New MapPoint[]
Public Bounds As New RectF

Public Function ToArray() As Variant[]
  
  Dim hVar As New Variant[]
  Dim i As Integer
  
  hVar.Add(Style)
  For i = 0 To Points.Max
    hVar.Add(Points[i].ToArray())
  Next
  
  Return hVar
  
End

 Public Function InShape(FP As MapPoint) As Boolean
  
  Return Me.Bounds.Contains(fp.x, fp.Y)
  
End

'   
'   ' / / wn_PnPoly(): winding number test For a point In a polygon
'   ' / / Input: P = a point,
'   ' / / V[] = vertex points Of a polygon V[n + 1] With V[n] = V[0]
'   ' / / Return: wn = the winding number( = 0 only If P Is Outside V[])
'   ' Int
'   ' wn_PnPoly(Point P, Point * V, Int n)
'   ' {
'   '     Int wn = 0; / / 
'   Dim wn As Integer ''the winding number counter
'   Dim i As Integer
'   Dim Fp2, Fp21 As FPoint
' 
'   ' Print "X=", FP.X
'   ' Print "Y=", FP.Y
'   
'   'Loop through all edges Of the polygon
'   '     For (Int i = 0; i < n; i + + ){   //
'   For i = 0 To Points.Max - 1  ' edge from V[i] to V[i+1]
'     'Print points[i].ToString()
'     'Print FP.ToString()
'     '         If (V[i].y <= P.y){         
'     Fp2 = Points[i]
'     Fp21 = Points[i + 1]
'     If Fp2.Y <= fp.Y Then ' start y <= P.y
'       If (fp21.y > FP.y) 'an upward crossing
'         If (isLeft(Fp2, fp21, FP) > 0) ' P Left Of edge
'           Inc wn 'have a valid up intersect
'         Endif
'       Endif
'     Else                       ' start y > P.y (no test needed)
'       If (fp21.y <= FP.y) ' a downward crossing
'         If (isLeft(Fp2, fp21, FP) < 0) 'P Right Of edge
'           Dec wn ' have a valid down intersect
'         Endif
'       Endif
'     Endif
'   Next
'   ' Print wn
'   Return wn < 0
'   
' End
' 
' ' / / Copyright 2001, softSurfer(www.softsurfer.com)
' ' / / This code may be freely used And modified For any purpose
' ' / / providing that this copyright notice Is Included With it.
' ' / / SoftSurfer makes no warranty For this code, And cannot be held
' ' / / liable For any real Or imagined damage resulting From its use.
' ' / / Users Of this code must verify correctness For their application.
' ' 
' ' / / a Point Is Defined by its coordinates {int x, y;}
' ' / /= == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == ==
' ' 
' ' / / isLeft(): tests If a point Is Left |On|Right of an infinite line.
' ' / / Input: three points P0, P1, And P2
' ' / / Return: > 0 For P2 Left Of the Line through P0 And P1
' ' / / = 0 For P2 on the Line
' ' / / < 0 For P2 Right Of the Line
' ' / / See: the January 2001 Algorithm "Area of 2D and 3D Triangles and Polygons"
' ' inline Int
' Private Function isLeft(P0 As FPoint, P1 As FPoint, P2 As FPoint) As Float
'   
'   Return ((P1.x - P0.x) * (P2.y - P0.y) - (P2.x - P0.x) * (P1.y - P0.y))
'   
' End
