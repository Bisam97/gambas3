' Gambas class file

Export
Property Height As Integer
Property Width As Integer
Property X, {Left} As Integer
Property Y, Top As Integer
Property Read BoxPixel As Rect
Property Read BoxMeter As RectF
Property Read _BoxPixelBefore As Rect
Property Read _BoxPixelAfter As Rect

Property Zoom As Integer
Property Center As MapPoint

Private $iHeight As Integer = 100 
Private $iWidth As Integer = 100
Private $iLeft As Integer
Private $iTop As Integer
Private $llCenter As New MapPoint
Private $iZoom As Integer = 1
Private $aLayers As New _MapLayer[]
Private $hPixelBox As New Rect
Private $hPixelBoxBefore As New Rect
Private $hPixelBoxAfter As New Rect

Private $hMeterBox As New RectF
Private $sLayers As New String[]

Private $sCopyright As String
Private $bZoomChange As Boolean
Private tmrTrigger As New Timer As "Trigger"
'Private $iRefreshPadding As Integer
Property Padding As Integer
Private $iPadding As Integer
Private $bOutPadding As Boolean
Private $OldPixelBox As Rect

Event Refresh

Public Sub _new()

  tmrTrigger.Delay = 1000
  RefreshBoxes
  
End

Public Sub Draw()
  
  Dim i As Integer
  Dim sCopyright As String
  Dim iTextWidth, iTextHeight As Integer
  tmrTrigger.Stop
  Draw.ClipRect = New Rect($iLeft, $iTop, $iWidth, $iHeight)
  Draw.Clip.Enabled = True
  
  For i = 0 To $aLayers.Max
    If $aLayers[i].Visible Then
      $aLayers[i]._Draw($bOutPadding Or $bZoomChange)
      sCopyright &/= $aLayers[i].Copyright
    Endif
  Next
  If sCopyright Then
  Paint.Brush = Paint.Color(Color.SetAlpha(Color.White, 150))
  Draw.Font.Grade = -2
  iTextHeight = Draw.TextHeight(sCopyright)
  iTextWidth = Draw.TextWidth(sCopyright)
  paint.Rectangle(Draw.Width - iTextWidth - 5, Draw.Height - iTextHeight - 2, iTextWidth + 6, iTextHeight + 4)
  Paint.Fill
  Draw.Text(sCopyright, Draw.Width - iTextWidth, Draw.Height - iTextHeight)
  Endif 
  Draw.Clip.Enabled = False
  $bOutPadding = False
  
  
  
  
  If $bZoomChange Then
  'tmrTrigger.Start
  $bZoomChange = False
  
  Endif
  
End

Public Sub Trigger_Timer()

  Dim i As Integer
  Print "trigger"
  For i = 0 To $aLayers.Max
    If $aLayers[i].Visible Then
      $aLayers[i]._Preload
    Endif
  Next
  tmrTrigger.Stop
  'Draw.Circle($iLeft + $hPixelBox.Width / 2, $iTop + $hPixelBox.Height / 2, 5)
  
End

Private Function Height_Read() As Integer
  
  Return $iHeight
  
End

Private Sub Height_Write(Value As Integer)
  
  $iHeight = value
  RefreshBoxes
  
End

Private Function Width_Read() As Integer
  
  Return $iWidth
  
End

Private Sub Width_Write(Value As Integer)
  
  $iWidth = Value
  RefreshBoxes
  
End

Private Function Y_Read() As Integer
  
  Return $iTop
  
End

Private Sub Y_Write(Value As Integer)
  
  $iTop = Value
  
End

Private Function X_Read() As Integer
  
  Return $iLeft
  
End

Private Sub X_Write(Value As Integer)
  
  $iLeft = Value
  
End

Private Function Zoom_Read() As Integer
  
  Return $iZoom
  
End

Private Sub Zoom_Write(Value As Integer)
  
  Dim o As _MapLayer
  
  $iZoom = Max(1, Min(Value, 19))
  
  For Each o In $aLayers
    Try o._ResetCache
  Next
  $bZoomChange = True
  RefreshBoxes
  
End

Private Function Center_Read() As MapPoint
  
  Return $llCenter
  
End

Private Sub Center_Write(Value As MapPoint)
  
  $llCenter = Value
  RefreshBoxes
  
End

Public Sub Resize(Width As Integer, Height As Integer)
  
  $iWidth = Width
  $iHeight = Height
  RefreshBoxes
  'Me.Draw
  
End

Public Sub Add(Layer As _MapLayer)
  
  If Not Layer Then Return
  $aLayers.Add(Layer)
  Object.Attach(Layer, Me, "Layer")
  
End

Private Function BoxPixel_Read() As Rect
  
  Return $hPixelBox
  
End

Private Sub RefreshBoxes()

  
  Dim fptPixel As Point
  Dim tmpPoint As PointF
  Dim ll As MapPoint
  
  fptPixel = Geo.MapPointToPixel($llCenter, $iZoom) 'Mercator.MetersToPixelsFP(Mercator.MapPointToMetersLL($llCenter), $iZoom)
  $hPixelBox.X = fptPixel.X - ($iWidth / 2) '- $iPadding
  $hPixelBox.Y = fptPixel.Y - ($iHeight / 2) '- $iPadding
  $hPixelBox.Right = fptPixel.X + ($iWidth / 2) '+ $iPadding
  $hPixelBox.Bottom = fptPixel.Y + ($iHeight / 2) '+ $iPadding
  
  If Not $OldPixelBox Then $OldPixelBox = $hPixelBox.Copy()
  
  If Abs($hPixelBox.X - $OldPixelBox.X) > $iPadding / 2 Then $bOutPadding = True
  If Abs($hPixelBox.Y - $OldPixelBox.Y) > $iPadding / 2 Then $bOutPadding = True
  If Abs($hPixelBox.Width - $OldPixelBox.Width) > $iPadding / 2 Then $bOutPadding = True
  If Abs($hPixelBox.Height - $OldPixelBox.Height) > $iPadding / 2 Then $bOutPadding = True
  If $bOutPadding Then $OldPixelBox = $hPixelBox.Copy()
  'If $bOutPadding Then Print "move"
  'BoxBefore
  If $iZoom - 1 >= 0 Then
    fptPixel = Geo.MapPointToPixel($llCenter, $iZoom - 1)
    $hPixelBoxBefore = New Rect(fptPixel.X - ($iWidth / 2), fptPixel.Y - ($iHeight / 2), fptPixel.X + ($iWidth / 2), fptPixel.Y + ($iHeight / 2))
  Else
    $hPixelBoxBefore = Null
  Endif
  'BoxAfter
  If $iZoom + 1 <= 19 Then 
    fptPixel = Geo.MapPointToPixel($llCenter, $iZoom + 1)
    $hPixelBoxAfter = New Rect(fptPixel.X - ($iWidth / 2), fptPixel.Y - ($iHeight / 2), fptPixel.X + ($iWidth / 2), fptPixel.Y + ($iHeight / 2))
  Else
    $hPixelBoxAfter = Null
  Endif
  
  ' With $hPixelBox
  '   Print .x, .Y, .Right, .Bottom
  ' End With
  ' tmpPoint = Mercator.PixelsToMeters($hPixelBox.X, $hPixelBox.Y, $iZoom)
  ' $hMeterBox.X = tmpPoint.X
  ' $hMeterBox.Y = tmpPoint.y
  ' 
  ' tmpPoint = Mercator.PixelsToMeters($hPixelBox.Right, $hPixelBox.Bottom, $iZoom)
  ' 
  ' $hMeterBox.Right = tmpPoint.X
  ' $hMeterBox.Bottom = tmpPoint.Y
  
End

Private Function BoxMeter_Read() As RectF
  
  Return $hMeterBox
  
End

Private Function _BoxPixelBefore_Read() As Rect
  Return $hPixelBoxBefore
End

Private Function _BoxPixelAfter_Read() As Rect
  Return $hPixelBoxAfter
End

Public Sub AddTile(Name As String, Pattern As String, Optional Args As Collection, Optional CacheName As String) As _MapTile
  
  Dim hLayer As New _MapTile(CacheName)
  
  hLayer.Name = Name
  hLayer.Pattern = Pattern
  hLayer.SetPattern(Pattern, Args)
  $aLayers.Add(hLayer)
  $sLayers.Add(Name)
  Object.Attach(hLayer, Me, "Layer")
  Return hLayer
  
End

Public Function AddShape(Name As String, Optional Shape As Shapes) As _MapShape
  
  Dim hLayer As New _MapShape(Shape)
  
  hLayer.Name = Name
  
  $aLayers.Add(hLayer)
  $sLayers.Add(Name)
  Object.Attach(hLayer, Me, "Layer")
  
End

Public Sub Layer_Refresh()
  
  Raise Refresh
  
End

Public Sub _get(Name As String) As _MapLayer
  
  Return $aLayers[$sLayers.Find(Name)]
  
End

Public Sub _next() As Object
  
  If IsNull(Enum.Index) Then Enum.Index = 0 Else Inc Enum.Index
  
  'Inc Enum.Index
  
  If Enum.Index > $sLayers.Max Then
    Enum.Stop
    Return
  Endif
  
  Return $aLayers[Enum.Index]
  
End




Private Function Padding_Read() As Integer

  Return $iPadding

End

Private Sub Padding_Write(Value As Integer)

  $iPadding = Value

End
