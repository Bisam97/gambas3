' Gambas class file

Inherits _MapLayer

Property Pattern As String
Property SubDomains As String[]

Private $aSubDomains As String[] = ["a", "b", "c"]
Private $sPattern As String
Private $colParam As New Collection
Private Cache As _MapTileCache
Private $aTiles As New _Tile[]
Event Refresh

Public Sub _new(Optional cachename As String)
  
  Cache = New _MapTileCache(cachename) As "Cache"
  Cache.SubDomains = $aSubDomains
  
End

Private Function Pattern_Read() As String
  
  Return $sPattern
  
End

Public Sub SetPattern(sPattern As String, Vars As Collection) As _MapTile
  
  If Vars Then $colParam = Vars 
  
  $sPattern = sPattern
  
  Cache.Url = MakeUrl(sPattern)
  
End

Private Sub Pattern_Write(Value As String)
  
  $sPattern = Value
  Cache.Url = Value
  $colParam.Clear
  
End

Private Function MakeUrl(sPattern As String) As String
  
  Dim sUrl As String = sPattern
  Dim s As String
  
  For Each s In $colParam
    surl = Replace(sUrl, "{" & $colParam.Key & "}", s)
  Next
  'Print sUrl
  Return surl
  
End

Private Function SubDomains_Read() As String[]
  
  Return $aSubDomains
  
End

Private Sub SubDomains_Write(Value As String[])
  
  $aSubDomains = Value
  Cache.SubDomains = Value
  
End

Public Sub Cache_FileLoaded()
  
  Raise Refresh
  
End

Public Sub _Draw(Optional bRefresh As Boolean = True)
  
  Dim iptMinTile, iptMaxTile As Point
  Dim tx, ty As Integer
  Dim iptGoogle As Point
  Dim hImage As Image
  Dim FileName As String
  Dim hMap As Map = Object.Parent(Me)
  Dim MapBox As Rect = hMap.BoxPixel
  'Dim aTiles As New _Tile[]
  Dim hTile As _Tile
  Dim hCenter As Point = MapBox.Center()
  Dim i As Integer
  Dim iPadding As Integer = hmap.Padding
  'Print bRefresh
  'If Not $sVersion Then TryToGetVersion
  'MapBox 
  If bRefresh Then 
    $aTiles.Clear
    iptMinTile = Geo.PixelToTile(Point(MapBox.X - iPadding, MapBox.Y - iPadding))
    iptMaxTile = Geo.PixelToTile(Point(MapBox.Right + iPadding, MapBox.Bottom + iPadding))
    'Print "start"
    
    For ty = iptMinTile.Y To iptMaxTile.Y
      For tx = iptMinTile.X To iptMaxTile.X
        hTile = New _Tile
        hTile.X = tx
        hTile.Y = ty
        hTile.PosX = tx * 256 
        hTile.PosY = ty * 256
        hTile.Distance = Sqr((hTile.PosX - hCenter.X) ^ 2 + (hTile.PosY - hCenter.Y) ^ 2)
        $aTiles.Add(hTile)
      Next
    Next
    $aTiles.Sort
  Endif
  For Each hTile In $aTiles
    himage = Null
    'FileName = Subst("&1-&2-&3.jpg", hMap.Zoom, hTile.X, hTile.Y)
    
    'iptGoogle = Mercator.GoogleTile(hTile.x, hTile.y, hmap.Zoom)
    
    If ty < 0 Then Continue
    'If tx < 0 Then Continue
    himage = Cache[hTile.x, hTile.y, hmap.Zoom]
    If hImage Then
      Paint.DrawImage(hImage, hTile.PosX - MapBox.x, hTile.PosY - MapBox.Y)
    Endif
    'Endif
  Next
  
End

Public Sub _ResetCache()
  
  Cache.ResetQueue
  
End

Public Sub _PreLoad()
  
  Dim hMap As Map = Object.Parent(Me)
  Dim MapBox As Rect
  Dim iptMinTile, iptMaxTile As Point
  Dim tx As Integer
  Dim ty As Integer
  
  MapBox = hmap._BoxPixelAfter
  If MapBox Then
    iptMinTile = Geo.PixelToTile(Point(MapBox.X, MapBox.Y))
    iptMaxTile = Geo.PixelToTile(Point(MapBox.Right, MapBox.Bottom))
    
    For ty = iptMinTile.Y To iptMaxTile.Y
      For tx = iptMinTile.X To iptMaxTile.X
        Cache.AddToPreload(ty, tx, hmap.Zoom + 1)
      Next
    Next
  Endif
  MapBox = hmap._BoxPixelBefore
  If MapBox Then
    iptMinTile = Geo.PixelToTile(Point(MapBox.X, MapBox.Y))
    iptMaxTile = Geo.PixelToTile(Point(MapBox.Right, MapBox.Bottom))
    
    For ty = iptMinTile.Y To iptMaxTile.Y
      For tx = iptMinTile.X To iptMaxTile.X
        Cache.AddToPreload(ty, tx, hmap.Zoom - 1)
      Next
    Next
  Endif

End

