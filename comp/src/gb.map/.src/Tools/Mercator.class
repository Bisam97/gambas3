' Gambas class file

Export
 Create Static
'    
'    TMS Global Mercator Profile
'    ---------------------------
'
'    Functions necessary for generation of tiles in Spherical Mercator projection,
'    EPSG:900913 (EPSG:gOOglE, Google Maps Global Mercator), EPSG:3785, OSGEO:41001.
'
'    Such tiles are compatible with Google Maps, Microsoft Virtual Earth, Yahoo Maps,
'    UK Ordnance Survey OpenSpace API, ...
'    and you can overlay them on top of base maps of those web mapping applications.
'
'    Pixel and tile coordinates are in TMS notation (origin [0,0] in bottom-left).
'
'    What coordinate conversions do we need for TMS Global Mercator tiles::
'
'         LatLon      <->       Meters      <->     Pixels    <->       Tile
'
'     WGS84 coordinates   Spherical Mercator  Pixels in pyramid  Tiles in pyramid
'         lat/lon            XY in metres     XY pixels Z zoom      XYZ from TMS
'        EPSG:4326           EPSG:900913
'         .----.              ---------               --                TMS
'        /      \     <->     |       |     <->     /----/    <->      Google
'        \      /             |       |           /--------/          QuadTree
'         -----               ---------         /------------/
'       KML, public         WebMapService         Web Clients      TileMapService
'
'    What is the coordinate extent of Earth in EPSG:900913?
'
'      [-20037508.342789244, -20037508.342789244, 20037508.342789244, 20037508.342789244]
'      Constant 20037508.342789244 comes from the circumference of the Earth in meters,
'      which is 40 thousand kilometers, the coordinate origin is in the middle of extent.
'      In fact you can calculate the constant as: 2 * PI * 6378137 / 2.0
'      $ echo 180 85 | gdaltransform -s_srs EPSG:4326 -t_srs EPSG:900913
'      Polar areas with abs(latitude) bigger then 85.05112878 are clipped off.
'
'    What are zoom level constants (pixels/meter) for pyramid with EPSG:900913?
'
'      whole region is on top of pyramid (zoom=0) covered by 256x256 pixels tile,
'      every lower zoom level resolution is always divided by two
'      initialResolution = 20037508.342789244 * 2 / 256 = 156543.03392804062
'
'    What is the difference between TMS and Google Maps/QuadTree tile name convention?
'
'      The tile raster itself is the same (equal extent, projection, pixel size),
'      there is just different identification of the same raster tile.
'      Tiles in TMS are counted from [0,0] in the bottom-left corner, id is XYZ.
'      Google placed the origin [0,0] to the top-left corner, reference is XYZ.
'      Microsoft is referencing tiles by a QuadTree name, defined on the website:
'      http://msdn2.microsoft.com/en-us/library/bb259689.aspx
'
'    The lat/lon coordinates are using WGS84 datum, yeh?
'
'      Yes, all lat/lon we are mentioning should use WGS84 Geodetic Datum.
'      Well, the web clients like Google Maps are projecting those coordinates by
'      Spherical Mercator, so in fact lat/lon coordinates on sphere are treated as if
'      the were on the WGS84 ellipsoid.
'
'      From MSDN documentation:
'      To simplify the calculations, we use the spherical form of projection, not
'      the ellipsoidal form. Since the projection is used only for map display,
'      and not for displaying numeric coordinates, we don't need the extra precision
'      of an ellipsoidal projection. The spherical projection causes approximately
'      0.33 percent scale distortion in the Y direction, which is not visually noticable.
'
'    How do I create a raster in EPSG:900913 and convert coordinates with PROJ.4?
'
'      You can use standard GIS tools like gdalwarp, cs2cs or gdaltransform.
'      All of the tools supports -t_srs 'epsg:900913'.
'
'      For other GIS programs check the exact definition of the projection:
'      More info at http://spatialreference.org/ref/user/google-projection/
'      The same projection is degined as EPSG:3785. WKT definition is in the official
'      EPSG database.
'
'      Proj4 Text:
'        +proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0
'        +k=1.0 +units=m +nadgrids=@null +no_defs
'
'      Human readable WKT format of EPGS:900913:
'         PROJCS["Google Maps Global Mercator",
'             GEOGCS["WGS 84",
'                 DATUM["WGS_1984",
'                     SPHEROID["WGS 84",6378137,298.2572235630016,
'                         AUTHORITY["EPSG","7030"]],
'                     AUTHORITY["EPSG","6326"]],
'                 PRIMEM["Greenwich",0],
'                 UNIT["degree",0.0174532925199433],
'                 AUTHORITY["EPSG","4326"]],
'             PROJECTION["Mercator_1SP"],
'             PARAMETER["central_meridian",0],
'             PARAMETER["scale_factor",1],
'             PARAMETER["false_easting",0],
'             PARAMETER["false_northing",0],
'             UNIT["metre",1,
'                 AUTHORITY["EPSG","9001"]]]

Private tilesize As Integer
Private initialResolution As Float 
Private OriginShift As Float ' 

''Initialize the TMS Global Mercator pyramid"

Public Sub _new(Optional itilesize As Integer = 256)

  tileSize = itileSize
  initialResolution = 2 * Pi * 6378137 / tileSize
  '#156543.03392804062 For tileSize 256 pixels
  originShift = 2 * Pi * 6378137 / 2.0
  '#20037508.342789244

  '$prjLatLon = New Proj("+proj=latlong +ellps=WGS84")
  '$prjMerca = New Proj("+init=epsg:3395")
  '$prjMerca = New Proj("+init=epsg:3785")
  '$prjMerca = New Proj("+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +no_defs")
End

''Converts given lat/lon in WGS84 Datum to XY in Spherical Mercator EPSG:900913"
Public Function MapPointToMeters(lat As Float, lon As Float) As FPoint

  Dim hPos As New FPoint

  hPos.x = lon * OriginShift / 180.0
  hPos.Y = - (Log(Tan((90 + lat) * Pi / 360.0)) / (Pi / 180.0)) * OriginShift / 180.0

  'hPos.Y = hPos.Y
  Return hPos

  'Return $prjLatLon.Transform($prjMerca, lat, lon)

End

''Converts given lat/lon in WGS84 Datum to XY in Spherical Mercator EPSG:900913"
''LatLon
Public Function MapPointToMetersLL(hMapPoint As MapPoint) As FPoint

  Return MapPointToMeters(hMapPoint.Lat, hMapPoint.Lon)

End

''Converts XY point from Spherical Mercator EPSG:900913 to lat/lon in WGS84 Datum"
''FPoint
Public Function MetersToMapPointFP(hPoint As FPoint) As MapPoint

  Return MetersToMapPoint(hPoint.X, hPoint.Y)

End

''Converts XY point from Spherical Mercator EPSG:900913 to lat/lon in WGS84 Datum"

Public Function MetersToMapPoint(mx As Float, my As Float) As MapPoint

  Dim LL As New MapPoint

  LL.Lon = (mx / originShift) * 180.0
  LL.Lat = (my / originShift) * 180.0

  LL.Lat = - (180 / Pi * (2 * ATan(Exp(ll.Lat * Pi / 180.0)) - Pi / 2.0))
  Return LL

End

''Converts pixel coordinates in given zoom level of pyramid to EPSG:900913
''FPoint
Public Function PixelsToMetersP(hPoint As Point, zoom As Integer) As FPoint

  Return PixelsToMeters(hPoint.X, hPoint.Y, zoom)

End

''Converts pixel coordinates in given zoom level of pyramid to EPSG:900913
Public Function PixelsToMeters(px As Integer, py As Integer, zoom As Integer) As FPoint

  Dim hPos As New FPoint
  Dim res As Float

  res = Me.Resolution(zoom)
  hPos.X = px * res - originShift
  hPos.Y = py * res - originShift
  Return hPos

End

''Converts EPSG:900913 to pyramid pixel coordinates in given zoom level
''FPoint
Public Function MetersToPixelsFP(hPoint As Fpoint, zoom As Integer) As Point

  Return MetersToPixels(hPoint.X, hPoint.Y, zoom)

End

''Converts EPSG:900913 to pyramid pixel coordinates in given zoom level
Public Function MetersToPixels(mx As Float, my As Float, zoom As Integer) As Point

  Dim res As Float
  Dim hPos As New Point

  res = Resolution(zoom)
  hPos.X = (mx + originShift) / res
  hPos.Y = (my + originShift) / res
  Return hPos

End
''Returns a tile covering region in given pixel coordinates
''FPoint

Public Function PixelsToTileP(hPoint As Point) As Point

  Return PixelsToTile(hPoint.x, hPoint.Y)

End

''Returns a tile covering region in given pixel coordinates
Public Function PixelsToTile(px As Float, py As Float) As Point

  Dim hPoint As New Point

  ' If px < 0 Or py < 0 Then
  '   Print
  ' Endif
  hPoint.X = Int(Ceil(px / tileSize) - 1)
  hPoint.Y = Int(Ceil(py / tileSize) - 1)
  Return hPoint

End

''Move the origin of pixel coordinates to top-left corner"
Public Function PixelsToRaster(px As Integer, py As Integer, zoom As Integer) As Point

  Dim hPoint As New Point
  Dim mapsize As Integer

  mapSize = Lsl(tileSize, zoom)
  hPoint.Y = mapsize - py
  hPoint.X = px

  Return hPoint

End
''Returns tile for given mercator coordinates"
''FPoint

Public Function MetersToTileFP(hPoint As FPoint, zoom As Integer) As Point

  Return MetersToTile(hPoint.x, hPoint.Y, zoom)

End

''Returns tile for given mercator coordinates"
Public Function MetersToTile(mx As Float, my As Float, zoom As Integer) As Point

  Dim hPoint As FPoint

  hPoint = MetersToPixels(mx, my, zoom)

  Return PixelsToTile(hPoint.x, hPoint.y)

End

''Returns bounds of the given tile in EPSG:900913 coordinates
Public Function TileBounds(tx As Integer, ty As Integer, zoom As Integer) As RectF

  Dim MinPos, MaxPos As FPoint
  Dim hBound As RectF

  MinPos = PixelsToMeters(tx * tileSize, ty * tileSize, zoom)
  MaxPos = PixelsToMeters((tx + 1) * tileSize, (ty + 1) * tileSize, zoom)
  hBound = New RectF(MinPos.x, MinPos.y, MaxPos.x, MaxPos.Y)
  Return hBound

End

''Returns bounds of the given tile in latutude/longitude using WGS84 datum"
Public Function TileMapPointBounds(tx As Integer, ty As Integer, zoom As Integer) As RectF

  Dim ibsTile As RectF
  Dim fbsMapPoint As RectF
  Dim fpMinMapPoint, fpMaxMapPoint As MapPoint

  ibsTile = TileBounds(tx, ty, zoom)

  fpMinMapPoint = MetersToMapPoint(ibsTile.X, ibsTile.Y)

  fpMaxMapPoint = MetersToMapPoint(ibsTile.Bottom, ibsTile.Bottom)

  fbsMapPoint = New RectF(fpMinMapPoint.Lat, fpMinMapPoint.Lon, fpMaxMapPoint.Lat, fpMaxMapPoint.Lon)
  Return fbsMapPoint

End

''Resolution (meters/pixel) for given zoom level (measured at Equator)
Public Function Resolution(zoom As Integer) As Float

  ' Return (2 * Pi * 6378137) / (self.tileSize * 2 * * zoom)
  Return initialResolution / (2 ^ zoom)

End

''Maximal scaledown zoom of the pyramid closest to the pixelSize.
Public Function ZoomForPixelSize(pixelSize As Integer) As Integer

  Dim i As Integer

  For i = 0 To 30
    If pixelSize > Resolution(i) Then
      Return IIf(i <> 0, i - 1, 0) 'We don 't want to scale up
    Endif
  Next

End

''Converts TMS tile coordinates to Google Tile coordinates
Public Function GoogleTile(tx As Integer, ty As Integer, zoom As Integer) As Point

  Dim hTile As Point

  'coordinate origin Is Moved From bottom - Left To top - Left corner Of the extent
  Return New Point(tx, (2 ^ zoom - 1) - ty)

End

''Converts TMS tile coordinates to Microsoft QuadTree
Public Function QuadTree(tx As Integer, ty As Integer, zoom As Integer) As String

  Dim quadKey As String
  Dim i, digit, mask As Integer

  ty = (2 ^ zoom - 1) - ty
  For i = zoom To 1 Step -1
    digit = 0
    mask = Lsl(1, (i - 1))
    If (tx And mask) <> 0 Then digit += 1
    If (ty And mask) <> 0 Then digit += 2
    quadKey &= Str(digit)
  Next
  Return quadKey

End

''Convert a value in sexagesimal degree to decimal
'' ex: 45°53'36" -> 45,893333
Public Function SexToDec(Value As String) As Float

  Dim fRet As Float
  Dim ars As String[]
  'Lat
  ars = Scan(Value, "*°*'*''*")
  fRet = Val(ars[0]) + Val(ars[1]) / 60 + Val(ars[2]) / 3600
  If ars.Count = 4 Then
    Select Case UCase(ars[3])
      Case "N", "E"
        Return fRet
      Case "S", "W", "O"
        Return - fRet
    End Select
  Endif
  Return fRet

End

''Convert from Decimal to Sexagesimal degrees
'' ex:45,893333 -> 45°53'36"
''Type 0=None 1=Lat 2=Lon
Public Function DecToSex(Value As Float, Type As Integer) As String

  Dim iDeg As Integer
  Dim iMin As Integer
  Dim fSec As Float
  Dim sRet As String

  Select Case Type
    Case 0

    Case 1
      sret = IIf(Value > 0, "N", "S")
    Case 2
      sret = IIf(Value > 0, "E", "W")
  End Select
  Value = Abs(Value)
  iDeg = Int(Value)
  fSec = Frac(Value) * 60
  iMin = Int(fSec)
  fSec = Frac(fSec) * 60

  sret = Subst("&1°&2'&3''", iDeg, iMin, Format(fSec, "0.##")) & sRet
  Return sret

End

' Private Sub Ceil(Value As Float) As Integer
' 
'   If Frac(Value) = 0 Then Return Value
' 
'   Return If(Value >= 0, Int(Value) + 1, Int(Value) - 1)
' 
' End
