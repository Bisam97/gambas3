' Gambas class file

Private $sCacheDir As String
Private $sDirBase As String = User.home &/ ".cache"
Private $aClient As New HttpClient[]
Private $sStack As New String[]
Private $bLoading As Boolean
Private downloadBuffer As String
Private hTimer As New Timer As "Timer"

Private $sCurFile As String
Property ClientCount As Integer

Public LastFile As String
Private $colImage As New Collection
Public ForceRefresh As Boolean
Static Public Debug As Boolean
Event FileLoaded()

Public Sub _new(Optional CacheDir As String)
  'si le dossier de cache n'est pas indiqué alors on utilise un dossier temporaire
  'il sera détruit a chaque redémarrage 
  
  Me.ClientCount = 2
  
  If Not CacheDir Then 
    $sDirBase = Temp()
  Else
    CacheDir = "gambas3/map" &/ CacheDir
  Endif
  
  If Not Exist($sDirBase &/ CacheDir) Then 
    CreateRecurssiveDir(CacheDir)
  Endif
  $sCacheDir = CacheDir
  
  hTimer.Delay = 50
  
End

Public Function _get(sFile As String, Optional Url As String) As Image
  
  Dim himg As Image

  If Not $colImage.Exist(sFile) Then
    If Not Exist($sDirBase &/ $sCacheDir &/ sFile) Then
      
      If IsLoading(sFile) Then Return Null
      If _Cache.Debug Then Debug "Not exit file : " & $sDirBase &/ $sCacheDir &/ sFile
      GetFromUrl(sFile, Url)
    Else
      If IsLoading(sFile) Then Return Null
      Try himg = Image.Load($sDirBase &/ $sCacheDir &/ sFile)
      If Error Then 
        'Defected file delete it
        DeleteFile(sFile)
        Return Null
      Endif
      $colImage[sFile] = himg
      Return himg
    Endif
  Else
    Return $colImage[sFile]
  Endif
  
End

Public Function Exist(Name As String) As Boolean
  
  Return Exist($sDirBase &/ $sCacheDir &/ Name)
  
End

Public Sub Refresh()
  
  $colImage.Clear
  
End

Public Function GetFromUrl(Name As String, Url As String)
  
  'If $sStack.Exist(Name) Then Return
  If _Cache.Debug Then Debug "Add to stack: " & Name
  $sStack.Push(Name)
  $sStack.Push(Url) 
  hTimer.Start
  
End

Public Sub _Client_Connect()
  
  Debug hClient.URL
  $bLoading = True
  
End

Public Sub _Client_Error()
  
  Debug hClient.Status & " downloading " & hClient.URL
  'Stop
  'Print hClient.ErrorText
  
  $aClient.Stop
  $bLoading = False 
  $sCurFile = Null
  If _Cache.Debug Then Debug "Error in file downloading : " & Last.tag

End

Public Sub _Client_Finished()
  
  'Dim hImage As Image
  
  If _Cache.Debug Then Debug "File downloaded succefully : " & Last.Tag
  Last.tag = ""
  
  $bLoading = False
  
  Raise FileLoaded
  
End

Public Sub Timer_Timer()

  Dim i As Integer
  i = GetFreeClient()
  If i > -1 Then 
    $aClient[i].URL = $sStack.Pop()
    $aClient[i].Tag = $sStack.Pop()
    $aClient[i].Get(Null, $sDirBase &/ $sCacheDir &/ $aClient[i].Tag)
  Endif
  
  If $sStack.Count = 0 Then hTimer.Stop
  
End

Private Function CreateRecurssiveDir(Path As String)
  
  Dim ars As String[]
  Dim sDir, s As String
  
  If Path = "" Then
    sDir = "/"
    Path = Right($sDirBase, -1)
  Else 
    sDir = $sDirBase
    
  Endif
  ars = Split(Path, "/")
  For Each s In ars
    sDir &/= s
    If Not Exist(sDir) Then
      Mkdir sDir
    Endif
    
  Next
  If _Cache.Debug Then Debug "Création du Dossier: " & sDir
Catch 
  Error "Warning: Can't create " & Path & " directory, only online work is possible"
  
End

Public Function GetFullPath(Name As String) As String
  
  Return $sDirBase &/ $sCacheDir &/ Name
  
End

Public Sub DeleteFile(Name As String)

  If Not Exist($sDirBase &/ $sCacheDir &/ Name) Then Return
  Try Kill $sDirBase &/ $sCacheDir &/ Name
  If Error Then 
    If _Cache.Debug Then Debug "I can't remove the file: " & Name
    
  Else
    If _Cache.Debug Then Debug "File: " & Name & " removed" 
  Endif
  
End

Public Sub ResetQueue()

  If _Cache.Debug Then Debug "RAZ Cache"
  hTimer.Stop
  $sStack.Clear
  $colImage.Clear
  
End

Private Function ClientCount_Read() As Integer
  
  Return $aClient.Count
  
End

Private Sub ClientCount_Write(Value As Integer)
  
  Dim i As Integer
  Dim Client As HttpClient
  'Value between 1 to 5
  Value = Min(4, Max(Value - 1, 0))
  $aClient.Resize(Value + 1)
  For i = 0 To Value
    Client = New HttpClient As "_Client"
    Client.Async = True
    $aClient[i] = Client
  Next
  
End

Private Function IsLoading(sFile As String) As Boolean
  
  Dim i As Integer
  If _Cache.Debug Then Debug "File inload : " & sFile
  For i = 0 To $aClient.Max
    If sFile = $aClient[i].Tag Then Return True
  Next
  Return $sStack.Exist(sFile)
End

Private Function GetFreeClient() As Integer
  
  Dim i As Integer
  
  For i = 0 To $aClient.Max
    If $aClient[i].Status = Net.Inactive Then Return i
  Next
  Return -1
End
