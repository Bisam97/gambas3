' Gambas class file

Export

Property Read Eof As Boolean
Property Fields As String[]
Property Read Line As Integer

Private $hFile As File
Private $aField As String[]
Private $sSeparator As String
Private $sEscape As String
Private $iLine As Integer

Static Private $bCreate As Boolean
Private $bWrite As Boolean

Static Public Sub Open(Path As String, Optional Separator As String = ",", Optional Escape As String = "\"") As CsvFile
  
  Return New CsvFile(Path, Separator, Escape)
  
End

Static Public Sub Create(Path As String, Optional Separator As String = ",", Optional Escape As String = "\"") As CsvFile

  $bCreate = True
  Return New CsvFile(Path, Separator, Escape)
  
End

Public Sub _new(Path As String, Optional Separator As String = ",", Optional Escape As String = "\"")
  
  Dim sLine As String
  Dim iInd As Integer
  Dim sField As String
  
  $sSeparator = Separator
  $sEscape = Escape
  
  If $bCreate Then
    $bCreate = False
    $bWrite = True
    $hFile = Open Path For Output Create
    Return
  Endif
  
  If File.IsRelative(Path) Then
    If Path Begins "./" Then 
      Path = "." & Path
    Else If Path Not Begins "../" Then
      Path = ".." &/ Path
    Endif
  Endif
  
  $hFile = Open Path For Input
  
  sLine = $hFile.ReadLine($sEscape)
  $aField = Split(sLine, $sSeparator, $sEscape)
  
  For iInd = 0 To $aField.Max
    sField = Trim($aField[iInd])
    sField = Replace(sField, String.Chr(160), " ")
    sField = Replace(sField, "\n", " ")
    sField = Replace(sField, "\t", " ")
    While InStr(sField, "  ")
      sField = Replace(sField, "  ", " ")
    Wend
    sField = String.LCase(sField)
    If Not sField Then sField = "#" & CStr(iInd)
    $aField[iInd] = sField
  Next
  
  $iLine = 1
  
End

Public Sub Read() As Collection
  
  Dim sLine As String
  Dim aLine As String[]
  Dim cCol As Collection
  Dim iInd As Integer
  
  If Eof($hFile) Then Return 
  
  cCol = New Collection(gb.IgnoreCase)
  
  Inc $iLine
  sLine = $hFile.ReadLine($sEscape)
  aLine = Split(sLine, $sSeparator, $sEscape)
  
  For iInd = 0 To Min($aField.Max, aLine.Max)
    cCol[$aField[iInd]] = Trim(Replace(aLine[iInd], String.Chr(160), " "))
  Next
  
  Return cCol
  
End

Private Function Eof_Read() As Boolean

  Return Eof($hFile)

End

Private Function Fields_Read() As String[]

  Return $aField.Copy()

End

Private Function Line_Read() As Integer

  Return $iLine

End

Private Sub Fields_Write(Value As String[])

  If Not $bWrite Then Error.Raise("Read-only property")
  If Not Value Or If Value.Count < 1 Then Error.Raise("Bad number of columns")
  $aField = Value.Copy()

End

Public Sub Close()
  
  Close #$hFile
  
End

Private Sub Print(sVal As String, Optional bNoSep As Boolean)
  
  If Not bNoSep Then Print #$hFile, ",";

  If InStr(sVal, $sSeparator) Or If InStr(sVal, "\n") Or If InStr(sVal, " ") Or If InStr(sVal, $sEscape) Then
    Print #$hFile, $sEscape; Replace(Replace(sVal, "\r", ""), $sEscape, $sEscape & $sEscape); $sEscape;
  Else
    Print #$hFile, sVal;
  Endif
  
End

Public Sub Write(Row As Variant)
  
  Dim I As Integer
  Dim cLine As Collection
  Dim aLine As String[]
  
  If $iLine = 0 Then
    Print($aField[0], True)
    For I = 1 To $aField.Max
      Print($aField[I])
    Next
    Print #$hFile
    Inc $iLine
  Endif
  
  Try cLine = Row
  If cLine Then
    Print(cLine[$aField[0]], True)
    For I = 1 To $aField.Max
      Print(cLine[$aField[I]])
    Next
  Else
    Try aLine = Row
    If aLine Then
      Print(aLine[0], True)
      For I = 1 To $aField.Max
        Print(aLine[I])
      Next
    Else
      Error.Raise("Type mismatch. Collection or Array expected")
    Endif
  Endif
  
  Print #$hFile
  Inc $iLine
  
End
