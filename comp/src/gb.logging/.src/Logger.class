' Gambas class file

Export
Create Static

Property Level As Integer
Property Format As String
Property Enabled As Boolean

Static Public Const DefaultFormat As String = "[$(now)] [$(levelname)] [$(callLocation)] $(message)"

Private $sFormat As String = ""
Private $iLevel As Integer
Private $sOutput As String
Private $sLogFile As Stream
Private $bEnabled As Boolean = True

Static Public Const Critical As Integer = 0
Static Public Const Error As Integer = 1
Static Public Const Warning As Integer = 2
Static Public Const Info As Integer = 3
Static Public Const Debug As Integer = 4

Static Public Const Stdout As String = ":stdout"

Public Sub _new(Optional iMinLevel As Integer, Optional sFormat As String, Optional sOutput As String)

  If iMinLevel Then $iLevel = iMinLevel Else $iLevel = Info

  If sFormat Then $sFormat = sFormat Else $sFormat = Logger.DefaultFormat

  If sOutput Then $sOutput = sOutput Else $sOutput = Stdout

End

Public Function Begin() As Boolean

  If $sOutput <> Stdout Then _OpenLog()

  Return True

End

Private Function Level_Read() As Integer

  Return $iLevel

End

Private Sub Level_Write(Value As Integer)

  If Value < 0 Or Value > Me.Debug Then Error.Raise("Invalid logging level")

  $iLevel = Value

End

Public Function isEnabledFor(iLevel As Integer) As Boolean

  Return (iLevel <= $iLevel)

End

Public Sub Log(sMessage As String, Optional iLevel As Integer = Info)

  If Not $bEnabled Or Not isEnabledFor(iLevel) Then Return

  sMessage = Formatter(sMessage, $sFormat, iLevel)

  _Write(sMessage)

End

Public Sub _call(sMessage As String, Optional iLevel As Integer = Info)

  Me.Log(sMessage, iLevel)

End

Private Function Format_Read() As String

  Return $sFormat

End

Private Sub Format_Write(Value As String)

  $sFormat = Value

End

Private Sub _Write(sLine As String)

  If $sOutput = ":stdout" Then
    Print sLine
  Else
    Print #$sLogFile, sLine
  Endif

End

Private Sub _OpenLog()

  If IsDir($sOutput) Then
    $sOutput = $sOutput &/ Application.Name & ".log"
  Endif

  If Not Access(File.Dir($sOutput), gb.Write) Then Error.Raise("Log file not writable")

  If Exist($sOutput) Then
    $sLogFile = Open $sOutput For Write Append
  Else
    $sLogFile = Open $sOutput For Write Create
  Endif

End

Private Function Enabled_Read() As Boolean

  Return $bEnabled

End

Private Sub Enabled_Write(Value As Boolean)

  $bEnabled = Value

End
