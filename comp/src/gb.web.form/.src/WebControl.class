' Gambas class file

Export
Create Private

Public Const _IsControl As Boolean = True
Public Const _Properties As String = "Width,Height,Visible=True,Enabled=True,Tag,Expand,Ignore,Background{Color},Foreground{Color}"
Public Const _Family As String = "WebForm"
Public Const _DefaultEvent As String = "Render"

Event Render

Property Read Id As Integer
Property Read Name As String
Property Tag As Variant
Property Parent As WebContainer
Property Expand As Boolean
Property Visible As Boolean
Property Read Style As WebControlStyle
Property Read Form As WebForm
Property Width, W As String
Property Height, H As String
Property Ignore As Boolean
Property Enabled As Boolean
Property Background As Integer
Property Foreground As Integer

Static Private $iLastId As Integer
Static Private $cFromId As New Collection

Static Private $aStyleSheet As String[]

Public _Refresh As Boolean

Private $iId As Integer
Private $iParentId As Integer
Private $sName As String
Private $vTag As Variant

Private $iStyleSheet As Integer
Private $hStyle As WebControlStyle

Private $bExpand As Boolean
Private $bIgnore As Boolean
Private $bDisabled As Boolean
Private $bHidden As Boolean
Private $iBackground As Integer = Color.Default
Private $iForeground As Integer = Color.Default

Public Sub _new(Optional Parent As WebContainer)
  
  If Not Parent And If Not Me Is WebForm Then Error.Raise("Null object")
  
  Inc $iLastId
  $iId = $iLastId
  
  If Me Is WebForm Then
    $sName = Object.Type(Me)
    Object.Attach(Me, Me, "WebForm")
  Else
    _SetName(Param.EventName)
  Endif
  
  $cFromId[$iId] = Me
  
  If Parent Then 
    If Parent._Container Then Parent = Parent._Container
    $iParentId = Parent.Id
    Parent._Add(Me)
  Endif
  
End

Public Sub _SetName(sName As String)
  
  Dim hForm As WebForm
  
  If Not sName Then sName = "$" & CStr($iId)
  hForm = Form_Read()
  If hForm Then 
    If $sName Then hForm._FromName[$sName] = Null
    hForm._FromName[sName] = $iId
  Endif
  $sName = sName
  
End

Private Function Id_Read() As Integer

  Return $iId

End

Static Public Sub FromId(Id As Integer) As WebControl
  
  Return $cFromId[Id]
  
End

Private Function Parent_Read() As WebContainer

  If $iParentId = 0 Then Return
  Return $cFromId[$iParentId]

End

Private Sub Parent_Write(Value As WebContainer)

  If Value = Me.Parent Then Return

  If Me Is WebForm Then Error.Raise("Read-only property")
  Me.Parent._Remove(Me)
  $iParentId = Value.Id
  Me.Parent._Add(Me)

End

Private Function Name_Read() As String

  Return $sName

End

Private Function Tag_Read() As Variant

  Return $vTag

End

Private Sub Tag_Write(Value As Variant)

  $vTag = Value
  _SetProperty("Tag", Value)

End

Public Sub _BeforeRender()
  
  Print "<div class=\"gw-"; LCase(Mid$(Object.Type(Me), 4)); "\" id=\""; $sName; "\"";
  Me._RenderStyleSheet()
  Print ">"
  
End

Public Sub _Render()
  
End

Public Sub _AfterRender()
  
  Raise Render
  Print "</div>"
  
End

Public Sub _RenderStyleSheet()
  
  Dim hParent As WebContainer
  
  _StartStyleSheet
  
  If $bIgnore Then
    
    _AddStyleSheet("position:absolute;")
    
  Else
  
    If $bExpand Then _AddStyleSheet("flex-grow:1;")
    
    hParent = Me.Parent
    If hParent Then
      Select Case hParent.Arrangement
        Case Arrange.Vertical
          _AddStyleSheet("display:block;")
          If Not hParent._IsFirstVisibleChild(Me) Then _AddStyleSheet("margin-top:0.5em;")
        Case Arrange.Horizontal
          '_AddStyleSheet("display: block;")
          If Not hParent._IsFirstVisibleChild(Me) Then _AddStyleSheet("margin-left:0.5em;")
        Case Arrange.Column, Arrange.Row
          _AddStyleSheet("display:inline-block;")
          _AddStyleSheet("margin-right:0.5em;margin-bottom:0.5em;")
      End Select
    Endif
    
  Endif
  
  If $iBackground <> Color.Default Then _AddStyleSheet("background-color:" & GetColor($iBackground) & ";")
  If $iForeground <> Color.Default Then _AddStyleSheet("color:" & GetColor($iForeground) & ";")
  
  If $hStyle And If Not $hStyle.IsVoid() Then $aStyleSheet.Insert($hStyle._GetStyleSheet())
  
  _EndStyleSheet
  
End

Public Sub _StartStyleSheet()
  
  Inc $iStyleSheet
  If $iStyleSheet = 1 Then $aStyleSheet = New String[]
  
End

Public Sub _AddStyleSheet(sStyle As String)
  
  $aStyleSheet.Add(sStyle)
  
End


Public Sub _EndStyleSheet()
  
  Dec $iStyleSheet
  If $iStyleSheet Then Return
  
  If $aStyleSheet.Count Then
    'Print "#"; Me.Name; " {"
    'Print "  "; $aStyleSheet.Join("\n  ")
    'Print "}"
    Print " style=\""; $aStyleSheet.Join(""); "\"";
    $aStyleSheet.Clear
  Endif
  
End



Private Function Expand_Read() As Boolean

  Return $bExpand

End

Private Sub Expand_Write(Value As Boolean)

  $bExpand = Value
  _SetProperty("Expand", Value)
  Me.Parent.Refresh

End

Private Function Style_Read() As WebControlStyle

  If Not $hStyle Then $hStyle = New WebControlStyle As "Style"
  Return $hStyle

End

Private Function Form_Read() As WebForm

  Try Return Object.Parent(Me)

End

Public Sub _SetProperty(sProp As String, vValue As Variant)

  Dim cProp As Collection
  Dim cForm As Collection
  Dim sForm As String

  If WebForm._InExec Then
    Refresh
    sForm = "#" & LCase(Form_Read().Name)
    cForm = Session[sForm]
    If Not cForm Then cForm = New Collection
    cProp = cForm[$sName]
    If Not cProp Then cProp = New Collection
    cProp[sProp] = vValue
    cForm[$sName] = cProp
    Session[sForm] = cForm
  Endif
  
End

Public Sub _InitSpecialProperty((sProp) As String, (vVal) As Variant)
  
End

Public Sub _InitProperties()

  Dim cProp As Collection
  Dim vVal As Variant
  Dim sProp As String
  
  If Not Session.Id Then Return
  
  Try cProp = Session["#" & LCase(Form_Read().Name)][$sName]
  If Not cProp Then Return
  
  Object.Lock(Me)
  For Each vVal In cProp
    sProp = cProp.Key
    'WebForm.Print("set " & sProp)
    If Left(sProp) = "#" Then
      If sProp = "#style" Then
        $hStyle = New WebControlStyle
        $hStyle._Style = vVal
      Else
        Me._InitSpecialProperty(sProp, vVal)
      Endif
    Else
      Try Object.SetProperty(Me, sProp, vVal)
    Endif
  Next
  Object.Unlock(Me)
  
End

Public Sub Style_Change()
  
  _SetProperty("#style", $hStyle._Style)
  
End

Private Sub IsHidden() As Boolean
  
  Dim hCtrl As WebControl
  
  hCtrl = Me
  While hCtrl
    If Not hCtrl.Visible Then Return True
    hCtrl = hCtrl.Parent
  Wend
  
End


Public Sub Refresh()
  
  If WebForm._DisableRefresh Then Return
  If IsHidden() Then Return
  If WebForm._InExec Then
    _Refresh = True
    Form_Read()._HasRefresh = True
  Endif
  
End

Public Sub _RefreshReply() As Boolean
  
  Dim hFile As File
  Dim sResult As String
  
  If _Refresh Then 
    
    Print "$("; JS(Me.Name); ").outerHTML =";
    
    hFile = Open String For Write
    Output To #hFile
    
    Me._BeforeRender()
    Me._Render()
    Me._AfterRender()
    
    sResult = Close #hFile
    Output To Default
    
    Print JS(sResult)
    
    Return True
    
  Endif
  
End

Public Sub _GetEventJS(sProp As String, sEvent As String, Optional sArg As String) As String
  
  Dim sStr As String
  
  If Not Object.CanRaise(Me, sEvent) Then Return
  
  sStr = " " & sProp & "=\"gw.raise(" & JS(Me.Form.Name) & "," 
  If Me Is WebForm Then
    sStr &= "null"
  Else
    sStr &= JS($sName)
  Endif
  sStr &= "," & JS(sEvent)
  If sArg Then sStr &= "," & sArg
  sStr &= ");\""
  
  Return sStr
  
End

Public Sub _GetUpdateJS(sEvent As String, sProp As String, sGetValue As String, Optional sMore As String) As String
  
  Dim sStr As String
  
  sStr = " " & sEvent & "=\"gw.update(" & JS(Me.Form.Name) & "," 
  If Me Is WebForm Then
    sStr &= "null"
  Else
    sStr &= JS($sName)
  Endif
  sStr &= "," & JS(sProp) & "," & sGetValue & ");"
  If sMore Then sStr &= sMore
  sStr &= "\""
  
  Return sStr
  
End

Public Sub _UpdateProperty((sProp) As String, (vValue) As Variant)
  
End

Private Function Width_Read() As String

  If $hStyle Then Return $hStyle["width"]

End

Private Sub Width_Write(Value As String)

  Style_Read()["width"] = Value

End

Private Function Height_Read() As String

  If $hStyle Then Return $hStyle["height"]

End

Private Sub Height_Write(Value As String)

  Style_Read()["height"] = Value

End

Private Function Visible_Read() As Boolean

  Return Not $bHidden
  
  ' If Not $hStyle Then Return True
  ' Return $hStyle["display"] <> "none"

End

Private Sub Visible_Write(Value As Boolean)

  $bHidden = Not Value
  _SetProperty("Visible", Value)
  Me.Parent.Refresh
  
  ' If Value Then
  '   If $hStyle Then Style_Read()["display"] = ""
  ' Else
  '   Style_Read()["display"] = "none"
  ' Endif

End

Private Function Ignore_Read() As Boolean

  Return $bIgnore

End

Private Sub Ignore_Write(Value As Boolean)

  $bIgnore = Value
  _SetProperty("Ignore", Value)
  Me.Parent.Refresh

End

Public Sub SetFocus()
  
  WebForm._AddReply("gw.setFocus(" & JS($sName) & ");")
  
End

Private Function Enabled_Read() As Boolean

  Return Not $bDisabled

End

Private Sub Enabled_Write(Value As Boolean)

  $bDisabled = Not Value
  Me._SetProperty("Enabled", Value)

End

Private Function Background_Read() As Integer

  Return $iBackground

End

Private Sub Background_Write(Value As Integer)

  $iBackground = Value
  Me._SetProperty("Background", Value)

End

Private Function Foreground_Read() As Integer

  Return $iForeground

End

Private Sub Foreground_Write(Value As Integer)

  $iForeground = Value
  Me._SetProperty("Foreground", Value)
  

End

Private Sub GetColor(iCol As Integer) As String

  Dim A As Integer
  Dim R As Integer
  Dim G As Integer
  Dim B As Integer

  A = Lsr(iCol, 24)
  R = Lsr(iCol, 16) And 255
  G = Lsr(iCol, 8) And 255
  B = iCol And 255
  
  If A Then
    Return "rgba(" & CStr(R) & "," & CStr(G) & "," & CStr(B) & "," & CStr(Round(A / 255, -2)) & ")"
  Else
    Return "#" & Hex$(R, 2) & Hex$(G, 2) & Hex$(B, 2)
  Endif

End
