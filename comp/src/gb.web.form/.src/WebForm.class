' Gambas class file

Export
Create Static

Inherits WebContainer

Public Const _IsForm As Boolean = True
Public Const _HiddenControls As String = "WebControl,WebForm,WebWindow,Timer"
Public Const _Properties As String = "*,Title,Resizable"
Public Const _DefaultEvent As String = "Open"

Static Public _InExec As Integer
Static Public _Current As WebForm

Static Private $aJavascript As New String[]

Event Open
Event Event

Property Title As String
Property Resizable As Boolean

Static Public _DisableRefresh As Integer

Public _Loaded As Boolean
Public _HasRefresh As Boolean
Public _Window As Integer

Private $sTitle As String
Private $bResizable As Boolean
Private $sX As String
Private $sY As String
Private $sWidth As String
Private $sHeight As String
'Private $bCentered As Boolean

Static Public Sub Main()

  Dim sPath As String
  Dim hClass As Class
  Dim hForm As WebForm
  Dim iPos As Integer
  Dim sClass As String
  Dim hStat As ClassStat
  
  sPath = Mid$(Request.Path, 2)
  
  If Not sPath Then
    
    hForm = Application.Startup.AutoCreate()
    
  Else If sPath Begins "style:" And sPath Ends ".css" Then
    
    RenderStyleSheet
    Return
    
  Else If sPath Begins "lib:" And sPath Ends ".js" Then
    
    RenderJavascript
    Return
    
  Else If Exist("../.public/" &/ sPath) Then
    
    Response.SendFile("../.public/" &/ sPath)
    Return
    
  Else
    
    iPos = InStr(sPath, "/")
    If iPos = 0 Then
      sClass = sPath
      sPath = ""
    Else
      sClass = Left(sPath, iPos - 1)
      sPath = Mid$(sPath, iPos + 1)
    Endif
    
    Try hStat = Class.Stat(sClass)
    If Not hStat Then Goto NOT_FOUND
    If LCase(hStat.Parent) <> "webform" Then Goto NOT_FOUND
    
    Try hClass = Class.Load(sClass)
    If Not hClass Then Goto NOT_FOUND
    
    hForm = hClass.AutoCreate()
    
  Endif
  
  _Current = hForm
  If sPath = "x" Then
    hForm._Exec(JSON.Decode(Request["c"]))
  Else
    hForm.Render
  Endif
  
  Return
  
NOT_FOUND:

  Response.Status = "404 NotFound"
  Response.Begin
  Print "<html><body><h1>404 NotFound</h1></body></html>"
  Response.End
  
End

Static Public Sub _AddJavascript(sStr As String)
  
  $aJavascript.Add(sStr)
  
End

Public Sub _load()
  
  Me._InitProperties
  _Loaded = True
  
End



Public Sub Render()
  
  Response.Buffered = True
  Response.Begin
  
  Header.Form = Me
  Header.__Render()
  'Print Header.ToString();
  Header.Form = Null
  
  Print "<body"; Me._GetEventJS("onload", "open"); ">"
  
  Print "<script type=\"text/javascript\" src=\""; Application.Root &/ "/lib:" & Application.Version & ".js"; "\"></script>"
  
  $aJavascript = New String[]
  
  ' If $aWindows Then
  '   Print "<div id=\""; Me.Name; "-windows\">"
  '   For Each sName In $aWindows
  '     hWindow = WebControl.FromId(_FromName[sName])
  '     hWindow._BeforeRender()
  '     hWindow._Render()
  '     hWindow._AfterRender()
  '   Next
  '   Print "</div>"
  ' Endif
  
  Print "<div id=\"gw-modal\"></div>"
  
  Me._BeforeRender()
  Me._Render()
  Me._AfterRender()
  
  Print "<script type=\"text/javascript\">"
  Print "gw.form = "; JS(Object.Type(Me)); ";"
  If $aJavascript Then 
    Print $aJavascript.Join("\n")
    $aJavascript.Clear
  Endif
  Print "</script>"
  
  Print "</body>"
  Print "</html>"
  
  Response.End
  
End

Static Private Sub RenderStyleSheet()
  
  Response.Buffered = True
  Response.ContentType = "text/css;charset=utf-8"
  Response.Begin
  
  Print File.Load("gw-style.css");
  
  If Exist("../style.css") Then Print File.Load("../style.css");
  
  Response.End
  
End

Static Private Sub RenderJavascript()
  
  Response.ContentType = "text/javascript;charset=utf-8"
  Response.Begin
  
  Print "$root = "; JS(Application.Root); ";"
  Print File.Load("lib.js")
  
  Response.End
  
End


Private Function Title_Read() As String

  Return $sTitle

End

Private Sub Title_Write(Value As String)

  $sTitle = Value
  Me._SetProperty("Title", Value)

End

Static Public Sub Print(Text As String)
  
  $aJavascript.Add("console.log(" & JS(Text) & ");")
  
End

Static Public Sub _AddReply(sStr As String)
  
  $aJavascript.Add(sStr)
  
End


Public Sub _Exec(aCmd As Variant[])
  
  Dim hCtrl As WebControl
  Dim iOldInExec As Integer = _InExec
  Dim sErr As String
  
  Inc _InExec
  
  Raise Event
  
  Select Case aCmd[0]
    
    Case "raise"
      
      If aCmd[1] Then
        hCtrl = WebControl.FromName(aCmd[1])
      Else
        hCtrl = Me
      Endif
      If Not hCtrl Then Return
      
      Object.Raise(hCtrl, aCmd[2], aCmd[3])
      
    Case "update"
      
      If aCmd[1] Then
        hCtrl = WebControl.FromName(aCmd[1])
        If Not hCtrl Then Return 'Error.Raise("Unknown control: " & aCmd[1] & " " & aCmd[2] & "\n" & WebControl._GetNames())
      Else
        hCtrl = Me
      Endif
      'Inc _DisableRefresh
      hCtrl._UpdateProperty(aCmd[2], aCmd[3])
      'Dec _DisableRefresh
      
    
  End Select
  
  _InExec = iOldInExec
  
  Response.Begin
  If _HasRefresh Then Me._RefreshReply()
  ' If $aWindows Then
  '   For Each sName In $aWindows
  '     hWindow = WebControl.FromId(_FromName[sName])
  '     hWindow._RefreshReply()
  '   Next
  ' Endif
  Print $aJavascript.Join("\n")
  $aJavascript.Clear
  Response.End
  
Catch
  
  sErr = Error.Text & "\n" & Error.Backtrace.Join(" ")
  _InExec = iOldInExec
  
  Response.Begin
  Print "console.log("; JS(sErr); ");"
  Print "console.log("; JS($aJavascript.Join("\n")); ");"
  Response.End
  
End

Public Sub Close()
  
  Dim bCancel As Boolean
  Dim hWindow As WebControl
  
  If Me._Window Then
  
    WebControl.FromId(Me._Window).Delete
    _AddReply("gw.window.refresh();")
  
  Else
    
    Me.Delete
    _AddReply("window.location.reload(true);")
    
  Endif
    
End

' Public Sub Open(Child As WebForm)
'   
'   Dim hWindow As WebWindow
'   
'   If $bOpened Then Return
'   
'   hWindow = New WebWindow(Me)
'   hWindow.Child = Child
'   Child._Window = hWindow.Id
'   
'   $bOpened = True
'   
' End

Public Sub Show()
  
  Dim hWindow As WebWindow
  
  If _Window Then Return
  
  hWindow = New WebWindow(WebForm._Current)
  hWindow.Child = Me
  hWindow.Resizable = $bResizable
  hWindow.Move($sX, $sY, $sWidth, $sHeight)
  
  _Window = hWindow.Id
  
End

Public Sub ShowModal()
  
  Dim hWindow As WebWindow
  
  If Not _Window Then Show()
  
  hWindow = WebControl.FromId(_Window)
  If hWindow Then hWindow.Modal = True
  
End


Public Sub Move(X As String, Y As String, Optional Width As String, Optional Height As String)
  
  Dim hWindow As WebWindow = WebControl.FromId(_Window)
  
  $sX = X
  $sY = Y
  If Not IsMissing(Width) Then $sWidth = Width
  If Not IsMissing(Height) Then $sHeight = Height
  '$bCentered = False
  
  If hWindow Then hWindow.Move(X, Y, Width, Height)
  
End

Public Sub Resize(Width As String, Height As String)
  
  Dim hWindow As WebWindow = WebControl.FromId(_Window)
  
  $sWidth = Width
  $sHeight = Height
  '$bCentered = False
  
  If hWindow Then hWindow.Resize(Width, Height)
  
End

Public Sub _UpdateProperty(sProp As String, vValue As Variant)
  
  Dim aWindows As String[]
  Dim sName As String
  
  If sProp = "#windows" Then
    aWindows = vValue
    Inc _DisableRefresh
    For Each sName In aWindows
      WebControl.FromName(sName).Raise()
    Next
    Dec _DisableRefresh
  Endif
  
End

Private Function Resizable_Read() As Boolean

  Return $bResizable

End

Private Sub Resizable_Write(Value As Boolean)

  Dim hWindow As WebWindow = WebControl.FromId(_Window)
  $bResizable = Value
  If hWindow Then hWindow.Resizable = Value

End

' Public Sub Center()
'   
'   Dim hWindow As WebWindow = WebControl.FromId(_Window)
'   
'   $bCentered = True
'   If hWindow Then hWindow.Centered = True
'   
' End
