' Gambas class file

Export
Inherits UserControl

Public Const _Properties As String = "*,Mode{Select.None;Single;Multiple}=None,Header{TableView.None;Horizontal;Vertical;Both}=Both,Grid,Highlight=True,Columns"
'Public Const _DrawWith As String = "GridView"

Event Activate

Property Mode As Integer 
Property Header As Integer
Property Grid As Boolean
Property Highlight As Boolean

'PROPERTY Connection AS Connection
'PROPERTY Table AS String
'PROPERTY Filter AS String
Property Columns As String[]
Property Read Current As Variant[]
Property Read Count As Integer
Property Read Index As Integer
Property Read View As TableView

'PRIVATE $hConn AS Connection
Private $hCtrl As TableView
'PRIVATE $sTable AS String
'PRIVATE $sFilter AS String
Private $hTable As DataTable
Private $bAllColumns As Boolean
Private $aColumns As String[]
Private $aType As DataField[]
Private $aColumnsIndex As Integer[]
Private $bCreate As Boolean
'Private $bRefreshColumn As Boolean
Private $bNoActivate As Boolean
Private $iHighlight As Integer
Private $bHighlight As Boolean

Private $hObserver As Observer
Private $iLastSize As Integer
Private $hTimer As Timer

Private $bTimer As Boolean
Private $bAdjust As Boolean
Private $aAdjust As New Integer[]

Public Sub _new()
  
  $hCtrl = New TableView(Me) As "TableView"
  $hTimer = New Timer As "TableView"
  $hCtrl.Header = TableView.Both
  $hCtrl.Grid = False
  $bAllColumns = True
  Create()
  Refresh
  
  $bHighlight = True
  $iHighlight = Color.LightBackground
  
End

Private Sub RefreshColumns()
  
  Dim iInd As Integer
  Dim sTable As String
  Dim aFields As String[]
  
  If Common.CheckDB() Then Return
  'If Not $bRefreshColumn Then Return
  
  '$bRefreshColumn = False
  
  sTable = $hTable.Name
  
  aFields = $hTable.GetFields()
  
  If $bAllColumns Then $aColumns = aFields

  $aColumnsIndex = New Integer[$aColumns.Count]
  $aType = New DataField[$aColumns.Count]
  For iInd = 0 To $aColumns.Max
    $aColumnsIndex[iInd] = aFields.Find($aColumns[iInd])
    $aType[iInd] = $hTable.GetFieldInfo($aColumns[iInd])
  Next
  
  'Object.Lock($hCtrl)
  $bNoActivate = True
  $hCtrl.Columns.Count = $aColumns.Count
  For iInd = 0 To $aColumns.Max
    With $hTable.GetFieldInfo($aColumns[iInd])
      $hCtrl.Columns[iInd].Text = .Name
      $hCtrl.Columns[iInd].Width = .GetWidth($hCtrl)
    End With
  Next
  '$hCtrl.AutoResize = False
  '$hCtrl.AutoResize = True
  $bNoActivate = False
  'Object.Unlock($hCtrl)
  
  If $bCreate Then Create()
  
End

Private Sub UpdateObserver()
  
  If Not $bAdjust Then Return
  $hObserver = New Observer($hTable) As "Table"
  
End


Private Sub Load()
  
  Dim hSrc As DataSource
  Dim hTable As DataTable
  Dim bReset As Boolean
  
  If Common.CheckDB() Then Return
  
  hSrc = Common.GetSource(Me)
  If hSrc Then
    hTable = hSrc._GetTable()
    If hTable <> $hTable Then
      $hTable = hTable
      bReset = True
      UpdateObserver
      $hCtrl.Rows.Count = 0
      $hCtrl.Columns.Count = 0
      If $hTable Then RefreshColumns
    Endif
  Endif

  If Not $hTable Then Return
  
  'Object.Lock($hCtrl)
  $bNoActivate = True
  $hCtrl.Rows.Count = $hTable.Count
  $bNoActivate = False
  'Object.Unlock($hCtrl)
  
  $hCtrl.Refresh

  If hSrc.Index < 0 Then 
    $bCreate = True
    $hCtrl.Rows.UnSelect
    If bReset Then $hCtrl.MoveTo(0, 0)
  Else
    $hCtrl.Row = hSrc.Index
    $hCtrl.Rows[$hCtrl.Row].Selected = True
  Endif

End


Public Sub Refresh()
  
  Load
  
End



' PRIVATE FUNCTION Table_Read() AS String
'   
'   RETURN $sTable
'   
' END
' 
' PRIVATE SUB Table_Write(sTable AS String)
' 
'   IF $sTable = sTable THEN RETURN  
'   $sTable = sTable
'   Load
'   
' END
' 
' PRIVATE FUNCTION Filter_Read() AS String
'   
'   RETURN $sFilter
'   
' END
' 
' PRIVATE SUB Filter_Write(sFilter AS String)
'   
'   IF $sFilter = sFilter THEN RETURN
'   $sFilter = sFilter
'   Load
'   
' END

Private Function Columns_Read() As String[]
  
  Return $aColumns.Copy()
  
End

Private Sub Columns_Write(aCol As String[])
  
  If Not aCol Then
    $aColumns = Null
    $bAllColumns = True
  Else
    $aColumns = aCol.Copy()
    $bAllColumns = $aColumns.Count = 0
  Endif

  RefreshColumns
  
End

Private Sub IsRowVisible(Row As Integer) As Boolean
  
  Dim Y As Integer 
  Dim H As Integer 
  Dim HH As Integer
  
  Y = $hCtrl.Rows[Row].Y
  H = $hCtrl.Rows[Row].H
  HH = $hCtrl.Columns.H
  
  Return (Y + H) >= HH And Y < ($hCtrl.ClientH + HH)

Catch
  
End

Private Sub EnsureRowVisible(Row As Integer)
  
  Dim Y As Integer 
  Dim H As Integer 
  Dim HH As Integer
  
  Y = $hCtrl.Rows[Row].Y
  H = $hCtrl.Rows[Row].H
  HH = $hCtrl.Columns.H
  
  If (Y + H) < HH Then
    $hCtrl.ScrollY -= HH - (Y + H)
  Else If (Y > ($hCtrl.ClientH + HH - H)) Then
    $hCtrl.ScrollY += Y - ($hCtrl.ClientH + HH - H)
  Endif
  
End



Public Sub TableView_Timer()
  
  Dim iRow As Integer
  Dim bVisible As Boolean
  
  $hTimer.Stop

  Try bVisible = IsRowVisible($hCtrl.Row)
  
  If bVisible Then
    $aAdjust.Push($hCtrl.Row)
  Endif
  
  $bAdjust = True
  While $aAdjust.Count
    iRow = $aAdjust.Pop()
    Try $hCtrl.Rows[iRow].H = -1
  Wend
  
  If bVisible Then EnsureRowVisible($hCtrl.Row)
  
  $bAdjust = False
  $bTimer = False
  
End

Public Sub TableView_Data(Row As Integer, Column As Integer)
  
  Dim iIndex As Integer
  Dim hField As DataField
  
  With $hCtrl.Data
    iIndex = $aColumnsIndex[Column]

    Select Case $aType[Column].Type
      Case db.Blob
        .Text = "BLOB"
        .Font.Bold = True
        If $bHighlight And If Row And 1 Then 
          .Background = Color.Mix($iHighlight, Color.LightGray)
        Else
          .Background = Color.Mix(Color.TextBackground, Color.LightGray)
        Endif
      Case db.String
        If DB.IgnoreCharset Then
          .Text = Left($hTable[Row][iIndex], 1024)
        Else
          Try .Text = Conv$(Left($hTable[Row][iIndex], 1024), DB.Charset, Desktop.Charset)
        Endif
        If $bHighlight And If Row And 1 Then .Background = $iHighlight
      Case Else
        Try .Text = Left(Str($hTable[Row][iIndex]), 1024)
        If $bHighlight And If Row And 1 Then .Background = $iHighlight
    End Select
    
    .Alignment = Align.TopNormal
    
  End With
  
  If Not $bAdjust Then
    If Not $aAdjust.Exist(Row) Then $aAdjust.Push(Row)
    If Not $bTimer Then 
      $bTimer = True
      $hTimer.Trigger
    Endif
  Endif
  
  Return
  
  $hCtrl.Data.Text = If(1, ("True"), ("False"))
  
Catch

  $hCtrl.Data.Text = "#ERROR#"
  
End

' PUBLIC SUB GridView_Click()
' 
'   GridView_Change
'     
' END


Public Sub TableView_Change()

  If $bNoActivate Then Return

  $bCreate = False
  $hCtrl.Rows[$hCtrl.Row].H = -1
  Raise Activate
  
End


Private Function Mode_Read() As Integer
  
  Return $hCtrl.Mode
  
End

Private Sub Mode_Write(iMode As Integer)
  
  $hCtrl.Mode = iMode
  
End

Private Function Header_Read() As Integer
  
  Return $hCtrl.Header
  
End

Private Sub Header_Write(iHeader As Integer)
  
  $hCtrl.Header = iHeader
  
End

' PRIVATE FUNCTION Connection_Read() AS Connection
' 
'   IF $hConn <> DB.Current THEN RETURN $hConn
'   
' END
' 
' PRIVATE SUB Connection_Write(hConn AS Connection)
'   
'   IF NOT hConn THEN hConn = DB.Current
'   
'   $hConn = hConn
'   Load
'   
' END
' 
Private Function Current_Read() As Variant[]
  
  Return $hTable.GetKeys($hCtrl.Row)
  
End

Public Sub MoveFirst()

  MoveTo(0)
  $bCreate = False
  
End

Public Sub MoveLast()
  
  MoveTo($hCtrl.Rows.Count - 1)
  $bCreate = False
  
End

Public Sub MoveNext()
  
  If $bCreate Then
    MoveFirst
    Return
  Endif
  If $hCtrl.Row >= ($hCtrl.Rows.Count - 1) Then Return
  If $hCtrl.Row < 0 Then Return
  Inc $hCtrl.Row
  $hCtrl.Rows[$hCtrl.Row].Selected = True
  
End

Public Sub MovePrevious()
  
  If $bCreate Then
    MoveFirst
    Return
  Endif
  If $hCtrl.Row <= 0 Then Return
  Dec $hCtrl.Row
  $hCtrl.Rows[$hCtrl.Row].Selected = True
  
End

Public Sub MoveTo(Index As Integer)
  
  If Index = $hCtrl.Row Then Return
  $hCtrl.Row = Index
  $hCtrl.Rows[$hCtrl.Row].Selected = True
  
End


Public Sub Create()
  
  $bCreate = True
  $hCtrl.Rows.UnSelect
  
End


Private Function Count_Read() As Integer
  
  Return $hCtrl.Rows.Count
  
End

Private Function Index_Read() As Integer

  If $bCreate Then
    Return -1
  Else  
    Return $hCtrl.Row
  Endif
  
End


Public Function Remove() As Boolean
  
  Create()  
  
End

Public Sub TableView_ColumnClick(Column As Integer)
  
  Dim hSrc As DataSource
  
  hSrc = Common.GetSource(Me)
  If Not hSrc Then Return
  
  If hSrc.Sort <> $aColumns[Column] Then
    hSrc.Sort = $aColumns[Column]
  Else
    hSrc.Sort = ""
  Endif
  
  $iLastSize = 0
  $hCtrl.Refresh

End

Private Function Grid_Read() As Boolean

  Return $hCtrl.Grid

End

Private Sub Grid_Write(Value As Boolean)

  $hCtrl.Grid = Value

End

Private Function Highlight_Read() As Boolean

  Return $bHighlight

End

Private Sub Highlight_Write(Value As Boolean)

  $bHighlight = Value

End

Private Function View_Read() As TableView

  Return $hCtrl

End
