' Gambas class file

Export
Inherits UserControl

Public Const _Properties As String = "*,Mode{Select.None;Single;Multiple}=None,Editable,Header{TableView.None;Horizontal;Vertical;Both}=Both,Grid,Highlight=True,Columns{Field[]},Border=True"
Public Const _DrawWith As String = "GridView"
Public Const _Group As String = "Data"

Event Activate

Property Mode As Integer 
Property Header As Integer
Property Grid As Boolean
Property Highlight As Boolean
Property Border As Boolean
Property Editable As Boolean

Property Columns As String[]
Property Current As Variant[]
Property Read Count As Integer
Property Read Index As Integer
Property Read View As TableView
Property Font As Font

'Public _DataComboView As DataComboView

Private Const NEW_RECORD As String = "*"

'PRIVATE $hConn AS Connection
Private $hCtrl As TableView
'PRIVATE $sTable AS String
'PRIVATE $sFilter AS String
Private $hTable As DataTable
Private $bAllColumns As Boolean
Private $aColumns As String[]
Private $aType As DataField[]
Private $aColumnsIndex As Integer[]
Private $bCreate As Boolean
'Private $bRefreshColumn As Boolean
Private $bNoActivate As Boolean
Private $iHighlight As Integer
Private $bHighlight As Boolean

Private $hObserver As Observer
Private $iLastSize As Integer
Private $hTimer As Timer
Private $hCreateTimer As Timer

Private $bTimer As Boolean
Private $bAdjust As Boolean
Private $aAdjust As New Integer[]

Private $sCharset As String

Private $hTextArea As TextArea
Private $bEditable As Boolean
Private $aNewRecord As Variant[]
Private $bNewRecordModified As Boolean
Private $iRowNewRecord As Integer = -1

Public Sub _new()
  
  $hCtrl = New TableView(Me) As "TableView"
  Me.Proxy = $hCtrl
  
  $hTimer = New Timer As "TableView"
  $hCreateTimer = New Timer As "CreateTimer"
  $hCtrl.Header = TableView.Both
  $hCtrl.Grid = False
  $bAllColumns = True
  Refresh
  Create()
  
  $bHighlight = True
  $iHighlight = Color.LightBackground
  
End

Private Sub GetSource() As DataSource
  
  Dim hSrc As DataSource
  
  hSrc = Common.GetSource(Me)
  If Not hSrc Then Return
  If hSrc._Check() Then Return
  Return hSrc
  
End


Private Sub RefreshColumns()
  
  Dim iInd As Integer
  Dim sTable As String
  Dim aFields As String[]
  Dim hSrc As DataSource
  
  hSrc = GetSource()
  If Not hSrc Then Return
  If Not $hTable Then Return
  
  sTable = $hTable.Name
  
  aFields = $hTable.GetFields()
  
  If $bAllColumns Then $aColumns = aFields

  $aColumnsIndex = New Integer[$aColumns.Count]
  $aType = New DataField[$aColumns.Count]
  For iInd = 0 To $aColumns.Max
    $aColumnsIndex[iInd] = aFields.Find($aColumns[iInd])
    $aType[iInd] = $hTable.GetFieldInfo($aColumns[iInd])
  Next
  
  'Object.Lock($hCtrl)
  $bNoActivate = True
  $hCtrl.Columns.Count = $aColumns.Count
  For iInd = 0 To $aColumns.Max
    With $hTable.GetFieldInfo($aColumns[iInd])
      $hCtrl.Columns[iInd].Text = .Name
      $hCtrl.Columns[iInd].Width = .GetWidth($hCtrl)
    End With
  Next
  '$hCtrl.AutoResize = False
  '$hCtrl.AutoResize = True
  $bNoActivate = False
  'Object.Unlock($hCtrl)
  
  If $bCreate Then UnSelect()
  
End

Private Sub UpdateObserver()
  
  If Not $bAdjust Then Return
  $hObserver = New Observer($hTable) As "Table"
  
End


Private Sub Load()
  
  Dim hSrc As DataSource
  Dim hTable As DataTable
  Dim bReset As Boolean
  
  hSrc = GetSource()
  If Not hSrc Then Return
  
  If hSrc._GetDB().IgnoreCharset
    $sCharset = ""
  Else
    $sCharset = hSrc._GetDB().Charset
  Endif
  
  If CanEdit() Then $hCtrl.Cancel
    
  'If hSrc Then
    hTable = hSrc._GetTable()
    If hTable <> $hTable Then
      $hTable = hTable
      bReset = True
      UpdateObserver
      $hCtrl.Rows.Count = 0
      $hCtrl.Columns.Count = 0
      If $hTable Then RefreshColumns
    Endif
  'Endif

  If Not $hTable Then Return
  
  'Object.Lock($hCtrl)
  $bNoActivate = True
  $hCtrl.Rows.Count = $hTable.Count
  $bNoActivate = False
  'Object.Unlock($hCtrl)
  
  $hCtrl.Refresh

  If hSrc.Index < 0 Then 
    $bCreate = True
    $hCtrl.Rows.UnselectAll
    If bReset Then 
      $bNoActivate = True
      $hCtrl.MoveTo(0, 0)
      $bNoActivate = False
    Endif
  Else
    $hCtrl.Row = hSrc.Index
    $hCtrl.Rows[$hCtrl.Row].Selected = True
  Endif
  
  Try $hCtrl.Rows[$iRowNewRecord].Text = $iRowNewRecord + 1
  $iRowNewRecord = -1
  If CanEdit() Then CreateNewRecord

  EnsureRowVisible($hCtrl.Row)

End


Public Sub Refresh()
  
  Load
  
End


Private Function Columns_Read() As String[]
  
  Return $aColumns.Copy()
  
End

Private Sub Columns_Write(aCol As String[])
  
  If Not aCol Then
    $aColumns = Null
    $bAllColumns = True
  Else
    $aColumns = aCol.Copy()
    $bAllColumns = $aColumns.Count = 0
  Endif

  RefreshColumns
  
End

Private Sub IsRowVisible(Row As Integer) As Boolean
  
  Dim Y As Integer 
  Dim H As Integer 
  Dim HH As Integer
  
  Y = $hCtrl.Rows[Row].Y - $hCtrl.ScrollY
  H = $hCtrl.Rows[Row].H
  HH = $hCtrl.Columns.H
  
  Return (Y + H) >= 0 And Y < $hCtrl.ClientHeight

Catch
  
End

Private Sub EnsureRowVisible(Row As Integer)
  
  Dim Y As Integer 
  Dim H As Integer 
  Dim HH As Integer
  
  If Row < 0 Or If Row >= $hCtrl.Rows.Count Then Return
  
  Y = $hCtrl.Rows[Row].Y
  H = $hCtrl.Rows[Row].H
  HH = $hCtrl.Columns.H
  
  If Y < $hCtrl.ScrollY Then
    $hCtrl.ScrollY = Y
  Else If (Y > ($hCtrl.ScrollY + $hCtrl.ClientH + HH - H)) Then
    $hCtrl.ScrollY += Y - ($hCtrl.ClientH + HH - H)
  Endif
  
  '$hCtrl[Row, $hCtrl.Column].EnsureVisible
  
End

Public Sub TableView_Scroll()
  
  Balloon.Hide($hCtrl)
  
End

Public Sub TableView_Timer()
  
  Dim iRow As Integer
  Dim iHeight As Integer
  Dim bVisible As Boolean
  
  $hTimer.Stop

  Try bVisible = IsRowVisible($hCtrl.Row)
  'Debug $hCtrl.Row;; bVisible
  
  If bVisible Then
    $aAdjust.Push($hCtrl.Row)
  Endif
  
  $bAdjust = True
  While $aAdjust.Count
    iRow = $aAdjust.Pop()
    ' TODO: gb.gtk does not auto adjusting row height => the timer is raised again and again!
    Try $hCtrl.Rows[iRow].H = -1
    If Not Error Then
      iHeight = Min(256, $hCtrl.Rows[iRow].H)
      $hCtrl.Rows[iRow].H = iHeight
    Endif
  Wend
  
  If bVisible Then EnsureRowVisible($hCtrl.Row)
  
  $bAdjust = False
  $bTimer = False
  
End

Public Sub TableView_Data(Row As Integer, Column As Integer)
  
  Dim iIndex As Integer
  Dim hField As DataField
  Dim sText As String
  
  'If Column = 0 And If Row = 0 Then
  '  Error System.Backtrace.Join("\n")
  '  Error "-------------------------------"
  'Endif
  
  With $hCtrl.Data
    .Padding = 1
    iIndex = $aColumnsIndex[Column]

    Select Case $aType[Column].Type
      Case db.Blob
        .Text = "BLOB"
        .Font.Bold = True
        If $bHighlight And If Row And 1 Then 
          .Background = Color.Merge($iHighlight, Color.LightGray)
        Else
          .Background = Color.Merge(Color.TextBackground, Color.LightGray)
        Endif
      Case db.String
        If Row = $iRowNewRecord Then
          sText = $aNewRecord[Column]
        Else
          sText = $hTable[Row][iIndex]
        Endif
        If Not $sCharset Then
          .Text = Left(sText, 1024)
        Else
          Try .Text = Conv$(Left(sText, 1024), $sCharset, Desktop.Charset)
        Endif
        If $bHighlight And If Row And 1 Then .Background = $iHighlight
      Case Else
        If Row = $iRowNewRecord Then
          sText = Str($aNewRecord[Column])
        Else
          sText = Str($hTable[Row][iIndex])
        Endif
        Try .Text = Left(sText, 1024)
        If $bHighlight And If Row And 1 Then .Background = $iHighlight
    End Select
    
    .Alignment = Align.TopNormal
    
  End With
  
  If Not $bAdjust Then
    If Not $aAdjust.Exist(Row) Then $aAdjust.Push(Row)
    If Not $bTimer Then 
      $bTimer = True
      $hTimer.Trigger
    Endif
  Endif
  
  Return
  
  $hCtrl.Data.Text = If(1, ("True"), ("False"))
  
Catch

  $hCtrl.Data.Background = Color.HSV(360, 128, 128)
  $hCtrl.Data.Text = "#ERROR# " & Error.Where & ": " & Error.Text
  
End

' PUBLIC SUB GridView_Click()
' 
'   GridView_Change
'     
' END

Private Sub CanEdit() As Boolean
  
  If Not $bEditable Then Return False
  If Not $hTable Then Return False
  Return True
  
End


Public Sub TableView_Click()
  
  Dim hField As DataField
  
  If $bNoActivate Then Return
  If $hCtrl.Rows.Count = 0 Then Return
  'If Not $bCreate Then Return  

  TableView_Change
  
  If CanEdit() Then 
    hField = $aType[$hCtrl.Column]
    
    ' Key fields must not be read-only during creation
    If hField.ReadOnly And If Not InNewRecord() Then Return
    
    Select Case hField.Type
      Case db.Blob, db.Serial
        Return
      Case db.Boolean
        If IsNull(hField.Default) Then
          $hCtrl.Edit(["", ("False"), ("True")], True)
        Else
          $hCtrl.Edit([("False"), ("True")], True)
        Endif
      Case db.String
        If hField.Length = 0 Then
          If Not $hTextArea Then 
            $hTextArea = New TextArea(Me.Window)
            $hTextArea.Ignore = True
            $hTextArea.Border = False
            $hTextArea.Hide
          Endif
          $hCtrl.EditWith($hTextArea)
        Else  
          $hCtrl.Edit
        Endif
      Case Else
        $hCtrl.Edit
    End Select
  End If
  
End 


Public Sub TableView_Change()

  If $bNoActivate Then Return

  'Balloon.Hide($hCtrl)

  $bCreate = False
  Try $hCtrl.Rows[$hCtrl.Row].H = -1
  Raise Activate
  
End

Private Sub Warning(sMsg As String, Optional bError As Boolean)
  
  Dim X, Y As Integer
  
  X = Me.Rows.Width - Me.ScrollX + Me.ClientX
  Y = Me.Columns.Height - Me.ScrollY + Me.ClientY
  
  With $hCtrl[$hCtrl.Row, $hCtrl.Column]
    If bError Then
      Balloon.Error(sMsg, $hCtrl, X + .X + .W \ 2, Y + .Y + .H \ 2) 
    Else
      Balloon.Warning(sMsg, $hCtrl, X + .X + .W \ 2, Y + .Y + .H \ 2) 
    Endif
  End With

Catch
  
  Error "gb.db.form: "; Me.Name; ": warning: "; Replace(sMsg, "\n", " ")
  
End


Public Sub TableView_Save(Row As Integer, Column As Integer, Value As String)
  
  Dim hSrc As DataSource
  Dim rData As Result
  Dim vVal As Variant
  Dim hField As DataField
  Dim bPrintError As Boolean
  
  If Not CanEdit() Then Return
  
  hSrc = GetSource()
  If Not hSrc Then Return
  
  If hSrc.MoveTo($hCtrl.Row) Then Return
  
  If $hCtrl.Row <> $iRowNewRecord Then
    rData = hSrc._EditCurrent()
    If Not rData.Available Then Return
  Endif
  
  hField = $aType[Column]
  
  Select Case hField.Type

    Case db.Integer
      If Trim(Value) Then vVal = CInt(Value)
    
    Case db.Long
      If Trim(Value) Then vVal = CLong(Value)
    
    Case db.Float
      If Trim(Value) Then vVal = CFloat(Val(Value))
    
    Case db.Date
      If Trim(Value) Then
        vVal = Val(Value)
        If TypeOf(vVal) <> gb.Date Then Error.Raise("Bad date")
      Endif
    
    Case db.Boolean
      If Value = ("False") Then
        vVal = False
      Else If Value = ("True") Then
        vVal = True
      Endif
        
    Case db.String
      vVal = Value
      
  End Select
  
  bPrintError = True
  
  If $hCtrl.Row = $iRowNewRecord Then
    $aNewRecord[Column] = vVal
    $bNewRecordModified = True
  Else
    rData[hField.Name] = vVal  
    hSrc._UpdateCurrent(rData)
  Endif

Catch

  If bPrintError Then
    Warning("<b>" & ("Unable to save value.") & "</b><p><font size=\"-1\">" & Error.Text & "</font>")
  Else
    Warning("<b>" & ("Incorrect value.") & "</b>")
  Endif
  Stop Event

End


Private Function Mode_Read() As Integer
  
  Return $hCtrl.Mode
  
End

Private Sub Mode_Write(iMode As Integer)
  
  $hCtrl.Mode = iMode
  
End

Private Function Header_Read() As Integer
  
  Return $hCtrl.Header
  
End

Private Sub Header_Write(iHeader As Integer)
  
  $hCtrl.Header = iHeader
  
End

Private Function Current_Read() As Variant[]
  
  Return $hTable.GetKeys($hCtrl.Row)
  
End


Private Sub Current_Write(Value As Variant[])

  $hCtrl.Row = $hTable.SetKeys(Value)

End

Public Sub MoveFirst()

  MoveTo(0)
  $bCreate = False
  
End

Public Sub MoveLast()
  
  MoveTo($hCtrl.Rows.Count - 1)
  $bCreate = False
  
End

Public Sub MoveNext()
  
  If $bCreate Then
    MoveFirst
    Return
  Endif
  If $hCtrl.Row >= ($hCtrl.Rows.Count - 1) Then Return
  If $hCtrl.Row < 0 Then Return
  Inc $hCtrl.Row
  $hCtrl.Rows[$hCtrl.Row].Selected = True
  
End

Public Sub MovePrevious()
  
  If $bCreate Then
    MoveFirst
    Return
  Endif
  If $hCtrl.Row <= 0 Then Return
  Dec $hCtrl.Row
  $hCtrl.Rows[$hCtrl.Row].Selected = True
  
End

Public Sub MoveTo(Index As Integer)
  
  'If Index = $hCtrl.Row Then Return
  $hCtrl.Row = Index
  $hCtrl.Rows[$hCtrl.Row].Selected = True
  
End

Private Sub HasNewRecord() As Boolean
  
  If Not $bEditable Then Return
  If $hCtrl.Rows.Count = 0 Then Return
  If $hCtrl.Rows[$hCtrl.Rows.Count - 1].Text <> NEW_RECORD Then Return
  Return True
  
End

Private Sub InNewRecord() As Boolean
  
  If Not $bEditable Then Return
  If Not HasNewRecord() Then Return
  Return $hCtrl.Row = ($hCtrl.Rows.Count - 1) 
  
End

Private Sub ShowNewRecord()
  
  If Not HasNewRecord() Then 
    $bNoActivate = True
    Inc $hCtrl.Rows.Count
    $bNoActivate = False
    $iRowNewRecord = $hCtrl.Rows.Count - 1
    $hCtrl.Rows[$iRowNewRecord].Text = NEW_RECORD
  'Else
  '  $hCtrl.Rows[$iRowNewRecord].Refresh
  Endif
  
End

Private Sub HideNewRecord()
  
  If Not HasNewRecord() Then Return
  Dec $hCtrl.Rows.Count
  
End

Private Sub CreateNewRecord()
  
  If Not $aType Then Return
  $aNewRecord = New Variant[$aType.Count]
  $bNewRecordModified = False
  ShowNewRecord
  
End

Private Sub SaveNewRecord(Optional bNoMessage As Boolean) As Boolean
  
  Dim hSrc As DataSource
  Dim rData As Result
  Dim hField As DataField
  Dim iInd As Integer
  
  If Not HasNewRecord() Then Return
  
  hSrc = GetSource()
  If Not hSrc Then Return
  
  If Not $bNewRecordModified Then Return
  
  rData = hSrc._CreateCurrent()
  
  For iInd = 0 To $aType.Max
    With $aType[iInd]
      If $aNewRecord[iInd] Then rData[.Name] = $aNewRecord[iInd]
    End With
  Next
  
  hSrc._UpdateCurrent(rData)
  
Catch

  If Not bNoMessage Then Warning("<b>" & ("Unable to save record.") & "</b><p><font size=\"-1\">" & Error.Text & "</font>", True) 
  Return True
  
End

Public Sub Save() As Boolean
  
  If Not CanEdit() Then Return
  If InNewRecord() Then
    Return SaveNewRecord()
  Else
    Return $hCtrl.Save()
  Endif
  
End


Private Sub UnSelect()
  
  $bCreate = True
  $hCtrl.Rows.UnselectAll
  
End

Public Sub CreateTimer_Timer()
  
  TableView_Click
  
End


Public Sub Create()
  
  If Not CanEdit() Then
    UnSelect
    Return
  Endif
    
  If $hCtrl.Save() Then Goto _EDIT
  
  If InNewRecord() Then
    $hCtrl.MoveTo($hCtrl.Rows.Count - 1, 0)
    If SaveNewRecord() Then Goto _EDIT
  Endif
    
  CreateNewRecord()
  $bCreate = False
  $hCtrl.MoveTo($hCtrl.Rows.Count - 1, 0)

_EDIT:

  Wait
  $hCreateTimer.Trigger
  
End

Public Sub TableView_Insert()
  
  If InNewRecord() Then
    If SaveNewRecord() Then Return
  Endif
  Create()
  
End


Private Function Count_Read() As Integer
  
  Return $hCtrl.Rows.Count
  
End

Private Function Index_Read() As Integer

  If $bCreate Then
    Return -1
  Else  
    Return $hCtrl.Row
  Endif
  
End


Public Function Remove() As Boolean
  
  Dim hSrc As DataSource
  Dim iRow As Integer
  Dim aDelete As Integer[]
  Dim bRollback As Boolean
  
  If CanEdit() Then
    
    If $hCtrl.Mode = Select.Single Then
    
      iRow = $hCtrl.Row
      If iRow = $iRowNewRecord Then 
        Create()
        Return
      Endif
  
      hSrc = GetSource()
      If Not hSrc Then Return
      If hSrc.MoveTo(iRow) Then Return
      
      ' Dec $hCtrl.Rows.Count
      ' If $iRowNewRecord >= 0 Then
      '   Dec $iRowNewRecord
      '   $hCtrl.Rows[$iRowNewRecord].Text = NEW_RECORD
      ' Endif
  
      hSrc.Remove()
      'hSrc.MoveTo(iRow)
      $hCtrl.Row = iRow
      
    Else If $hCtrl.Mode = Select.Multiple
    
      hSrc = GetSource()
      If Not hSrc Then Return

      aDelete = New Integer[]
      For iRow = 0 To $hCtrl.Rows.Count - 1
        If $hCtrl.Rows[iRow].Selected Then aDelete.Add(iRow)
      Next
      aDelete.Reverse
      
      hSrc._GetDB().Begin
      bRollback = True
      For Each iRow In aDelete
        hSrc.MoveTo(iRow)
        hSrc._DeleteCurrent()
      Next
      hSrc._GetDB().Commit
      hSrc.Create(True)
    
    Endif
    
  Endif
    
  UnSelect
  
Catch

  Warning("<b>" & ("Unable to delete record.") & "</b><p><font size=\"-1\">" & Error.Text & "</font>", True) 
  If bRollback Then hSrc._GetDB().Rollback
  Return True
  
End

Public Sub TableView_ColumnClick(Column As Integer)
  
  Dim hSrc As DataSource
  
  hSrc = GetSource()
  If Not hSrc Then Return
  
  If hSrc.Sort <> $aColumns[Column] Then
    hSrc.Sort = $aColumns[Column]
  Else
    hSrc.Sort = ""
  Endif
  
  $iLastSize = 0
  $hCtrl.Refresh

End

' Public Sub TableView_RowClick(Row As Integer)
'   
'   If Row = $iRowNewRecord And If InNewRecord() Then
'     SaveNewRecord
'   Endif
'   
' End


Private Function Grid_Read() As Boolean

  Return $hCtrl.Grid

End

Private Sub Grid_Write(Value As Boolean)

  $hCtrl.Grid = Value

End

Private Function Highlight_Read() As Boolean

  Return $bHighlight

End

Private Sub Highlight_Write(Value As Boolean)

  $bHighlight = Value

End

Private Function View_Read() As TableView

  Return $hCtrl

End

Public Sub _OnDatabaseChange()
  
  Refresh()
  
End

Private Function Border_Read() As Boolean

  Return $hCtrl.Border

End

Private Sub Border_Write(Value As Boolean)

  $hCtrl.Border = Value

End

Private Function Editable_Read() As Boolean

  Return $bEditable

End

Private Sub Editable_Write(Value As Boolean)

  If $bEditable = Value Then Return
  $bEditable = Value
  If Value Then 
    'CreateNewRecord
    Me.Create
  Else
    HideNewRecord
  Endif

End

Private Function Font_Read() As Font

  Return Super.Font

End

Private Sub Font_Write(Value As Font)

  Super.Font = Value
  $hCtrl.Font = Value

End
