' Gambas module file

'''
' Name: ModuleDatabase
' Author: John Rose
' eMail: john.aaron.rose@googlemail.com
' Version: 1.0
' Version Date: January 2012
' Version History:
'
'''
' Licence Information
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 2 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
'
' http://www.gnu.org/licenses/gpl.html
'
'''
' Description:
'
' Provides the interface to the JewishHeritage database.
'
'''
' Developed using Gambas2 Version
'
'  Version: 2.22
'
' Gambas Components Used:
'
' gb - Gambas internal native classes
' gb.db - Database access
' gb.db.form - Data bound controls
' gb.db. - More controls for graphical components
' gb.db.sqlite3 - SQLite 3 database driver
' gb.form - More controls for graphical components
' gb.gui - QT/GTK+ switcher component

' Look in the Project menu then Properties... and select
' the Components tab. Check that the listed components
' are in the project.
'
'''
' External Dependencies:
'
' The required type of database must exist.
'
'''
' Class Usage:
'
'   Open the JewishHeritage database. If the database or table does not
'   exist then it is created.
'
'   Use something like this for a SQLite3 database
'
'     ModuleDatabase.OpenDatabase("sqlite3", User.Home, Application.Name, "", "")
'
'   Use something like this for a MySQL database
'
'     ModuleDatabase.OpenDatabase("mysql", "localhost", Application.Name, "mysql", "password")
'
'   Use something like this for a PostgreSQL database
'
'     ModuleDatabase.OpenDatabase("postgresql", "localhost", Application.Name, "timothy", "password")
'
'   Call the Select() method to update items and then use ResultPictures to access the data.
'
'     ModuleDatabase.Select()
'     ModuleDatabase.ResultPictures.MoveTo(Row)
'
'   You can then use the Add(), Update() and Delete() methods to change the database.
'
'     ModuleDatabase.Add(Path) 
'     ModuleDatabase.Update(Row, NewDescription)
'     ModuleDatabase.Delete(Row)
'
'   Call the CloseDatabase method before you quit your application
'
'      ModuleDatabase.CloseDatabase()
'
'''

Public ResultCountry As Result
Public ResultCity As Result
Public ResultLocality As Result
Public ResultSite As Result

Public DatabaseConnection As New Connection

Private JHTable As Table

' Opens the JewishHeritage database. If the database or table does not
' exist then it is created.
Public Sub OpenDatabase(DBType As String, DBHost As String, DBName As String, UserName As String, UserPassword As String)
  Dim errorMessageHeader As String
  Dim sqlCreate As String
  ' If you want to see the commands sent to the
  ' database then uncomment this line
  ' DB.Debug = TRUE

  ' Open a connection (to the database server only)
  DatabaseConnection.Type = Lower(DBType)
  DatabaseConnection.Host = DBHost
  DatabaseConnection.Name = ""
  DatabaseConnection.Login = UserName
  DatabaseConnection.Password = UserPassword
  DatabaseConnection.Port = ""
  ' Open the connection
  Try DatabaseConnection.Open()
  If Error Then
    errorMessageHeader = "Could not open database connection " & DBHost
    Error.Raise(Error.Text)
  End If
  ' Check if the server connection has a database with the
  ' required database name.
  If Not DatabaseConnection.Databases.Exist(DBName) Then
    Print "Database not found. Creating new database"
    ' Create a new database
    DatabaseConnection.Databases.Add(DBName)
    ' This was needed with a SQLite database
    ' (but not with a MySQL database)
    Wait 1
  End If
  ' Close the server connection
  DatabaseConnection.Close()
  ' Open a connection to the database
  DatabaseConnection.Host = DBHost
  DatabaseConnection.Name = DBName
  Try DatabaseConnection.Open()
  If Error Then
    errorMessageHeader = "Could not open database " & DBName & " on " & DBHost
    Error.Raise(Error.Text)
  End If
  DatabaseConnection.Exec("PRAGMA foreign_keys = 1")
  ' Check if the database has a country table
  If Not DatabaseConnection.Tables.Exist("country") Then
    Print "Database country table not found. Creating new country table"
    ' Add a country table to the database
    DatabaseConnection.Begin
    sqlCreate = "Create Table country (_id Integer Primary Key AutoIncrement, " &
                                      "country Text Not Null);"
    DatabaseConnection.Exec(sqlCreate)
    DatabaseConnection.Commit
  End If
  ' Check if the database has a city table
    If Not DatabaseConnection.Tables.Exist("city") Then
    Print "Database city table not found. Creating new city table"
    ' Add a city table to the database
    DatabaseConnection.Begin
    sqlCreate = "Create Table city(_id Integer Primary Key AutoIncrement, " &
                                   "city Text Not Null, " &
                                   "country_id Integer, " &
                                   "Foreign Key(country_id) References country(_id) " &
                                   "On Delete Cascade " &
                                   "On Update Cascade);"
    DatabaseConnection.Exec(sqlCreate)
    DatabaseConnection.Commit
  End If
  ' Check if the database has a locality table
  If Not DatabaseConnection.Tables.Exist("locality") Then
    Print "Database locality table not found. Creating new locality table"
    ' Add a locality table to the database
    DatabaseConnection.Begin
    sqlCreate = "Create Table locality (_id Integer Primary Key AutoIncrement, " &
                                       "locality Text Not Null, " &
                                       "city_id Integer, " &
                                       "Foreign Key(city_id) References city(_id) " &
                                       "On Delete Cascade " &
                                       "On Update Cascade);"
    DatabaseConnection.Exec(sqlCreate)
    DatabaseConnection.Commit
  End If
  ' Check if the database has a site table
  If Not DatabaseConnection.Tables.Exist("site") Then
    Print "Database site table not found. Creating new site table"
    ' Add a site table to the database
    DatabaseConnection.Begin
    sqlCreate = "Create Table site(_id Integer Primary Key AutoIncrement, " &
                                  "site Text Not Null, " &
                                  "latitude Float, " &
                                  "longitude Float, " &
                                  "image Blob, " &
                                  "description Text, " &
                                  "locality_id Integer, " &
                                  "Foreign Key(locality_id) References locality(_id) " &
                                  "On Delete Cascade " &
                                  "On Update Cascade);"
     DatabaseConnection.Exec(sqlCreate)
     DatabaseConnection.Commit
  End If
Catch
  DatabaseConnection.Rollback
  If errorMessageHeader = "" Then
    errorMessageHeader = "Database connection error: " & DBName & " on " & DBHost
  End If
  Error.Raise("<b>" & errorMessageHeader & "</b><hr>Error:<br>" & DConv(Error.Text))
End

Public Sub SelectEachCountry()
  ResultCountry = DatabaseConnection.Edit("country")
Catch
  Error.Raise("<b>Select database country table records error</b><hr>Error:<br>" & DConv(Error.Text))
End

Public Sub SelectEachCityInCountry(CountryId As Integer)
  Dim criteria As String
  criteria = "country_id = &1"
  ResultCity = DatabaseConnection.Edit("city", criteria, CountryId)
Catch
  Error.Raise("<b>Select database city table records error</b><hr>Error:<br>" & DConv(Error.Text))
End

Public Sub SelectEachLocalityInCity(CityId As Integer)
  Dim criteria As String
  criteria = "city_id = &1"
  ResultLocality = DatabaseConnection.Edit("locality", criteria, CityId)
Catch
  Error.Raise("<b>Select database records locality table error</b><hr>Error:<br>" & DConv(Error.Text))
End

Public Sub SelectEachSiteInLocality(LocalityId As Integer)
  Dim criteria As String
  criteria = "locality_id = &1"
  ResultSite = DatabaseConnection.Edit("site", criteria, LocalityId)
Catch
  Error.Raise("<b>Select database site table records error</b><hr>Error:<br>" & DConv(Error.Text))
End

Public Sub UpdateCountry(CountryIndex As Integer, Country As String)
  DatabaseConnection.Begin()
  ResultCountry.MoveTo(CountryIndex)
  ResultCountry!country = Country
  ResultCountry.Update()
  DatabaseConnection.Commit()
Catch
  DatabaseConnection.Rollback()
  Error.Raise("<b>Update database country table record error</b><hr>Error:<br>" & DConv(Error.Text))
End

Public Sub UpdateCity(CityIndex As Integer, City As String)
  DatabaseConnection.Begin()
  ResultCity.MoveTo(CityIndex)
  ResultCity!city = City
  ResultCity.Update()
  DatabaseConnection.Commit()
Catch
  DatabaseConnection.Rollback()
  Error.Raise("<b>Update database city tablerecord error</b><hr>Error:<br>" & DConv(Error.Text))
End

Public Sub UpdateLocality(LocalityIndex As Integer, Locality As String)
  DatabaseConnection.Begin()
  ResultLocality.MoveTo(LocalityIndex)
  ResultLocality!locality = Locality
  ResultLocality.Update()
  DatabaseConnection.Commit()
Catch
  DatabaseConnection.Rollback()
  Error.Raise("<b>Update database locality table record error</b><hr>Error:<br>" & DConv(Error.Text))
End

Public Sub UpdateSite(SiteIndex As Integer, Site As String)
  DatabaseConnection.Begin()
  ResultSite.MoveTo(SiteIndex)
  ResultSite!site = Site
  ResultSite.Update()
  DatabaseConnection.Commit()
Catch
  DatabaseConnection.Rollback()
  Error.Raise("<b>Update database site table record error</b><hr>Error:<br>" & DConv(Error.Text))
End

Public Sub UpdateSiteDetails(SiteIndex As Integer, Latitude As Float, Longitude As Float, ImagePath As String, Description As String)
  DatabaseConnection.Begin()
  ResultSite.MoveTo(SiteIndex)
  ResultSite!latitude = Latitude
  ResultSite!longitude = Longitude
  ResultSite!image = File.Load(ImagePath)
  ResultSite!description = Description
  ResultSite.Update()
  DatabaseConnection.Commit()
Catch
  DatabaseConnection.Rollback()
  Error.Raise("<b>Update database site table record error</b><hr>Error:<br>" & DConv(Error.Text))
End

Public Sub DeleteCountry(Row As Integer)
  DatabaseConnection.Begin()
  ResultCountry.MoveTo(Row)
  ResultCountry.Delete()
  DatabaseConnection.Commit()
Catch
  DatabaseConnection.Rollback()
  Error.Raise("<b>Delete database country table record error</b><hr>Error:<br>" & DConv(Error.Text))
End

Public Sub DeleteCity(Row As Integer)
  DatabaseConnection.Begin()
  ResultCity.MoveTo(Row)
  ResultCity.Delete()
  DatabaseConnection.Commit()
Catch
  DatabaseConnection.Rollback()
  Error.Raise("<b>Delete database city table record error</b><hr>Error:<br>" & DConv(Error.Text))
End

Public Sub DeleteLocality(Row As Integer)
  DatabaseConnection.Begin()
  ResultLocality.MoveTo(Row)
  ResultLocality.Delete()
  DatabaseConnection.Commit()
Catch
  DatabaseConnection.Rollback()
  Error.Raise("<b>Delete database locality table record error</b><hr>Error:<br>" & DConv(Error.Text))
End

Public Sub DeleteSite(Row As Integer)
  DatabaseConnection.Begin()
  ResultSite.MoveTo(Row)
  ResultSite.Delete()
  DatabaseConnection.Commit()
Catch
  DatabaseConnection.Rollback()
  Error.Raise("<b>Delete database ste table record error</b><hr>Error:<br>" & DConv(Error.Text))
End

Public Sub CloseDatabase()
  Try databaseConnection.Close()
  If Error Then Print "Error closing database"
End

''' End of ModuleDatabase


