' Gambas class file

Export
' Create Static
Inherits TextHighlighter

Property Read Keywords As String[]

Static Private $hWordRegExp As RegExp
Static Private $sWordRegExp As String
Static Private $cRegExp As New Collection

Private $sText As String
Private $iPos As Integer
Private $bEof As Boolean

Private $bMatchLimit As Boolean
Private $sTextLimit As String

Private $aHighlight As Byte[]

Private Sub Init(sText As String)
  
  $sText = sText
  $iPos = 1
  $bEof = False
  $aHighlight = New Byte[]

  If Not $hWordRegExp Then
    $sWordRegExp = "[A-Za-z][A-Za-z0-9]*"
    $hWordRegExp = New RegExp
    $hWordRegExp.Compile("^" & $sWordRegExp & "(.*)")
  Endif
  
End

Private Sub Forward(iState As Byte, Optional N As Integer = 1)
  
  Dim iMax As Integer
  
  If $bEof Then Error.Raise("End of file")
  
  iMax = $aHighlight.Max
  If $aHighlight.Count And If $aHighlight[iMax - 1] = iState And If $aHighlight[iMax] <= (255 - N) Then
    $aHighlight[iMax] += N
  Else
    $aHighlight.Add(iState)
    $aHighlight.Add(N)
  Endif
  
  $iPos += N
  $bEof = $iPos > Len($sText)
  
End

Private Sub IgnoreSpaces() As Boolean
  
  Dim P As Integer
  
  P = $iPos
  If Not IsSpace(Mid$($sText, P, 1)) Then Return $bEof
  
  Inc P
  While IsSpace(Mid$($sText, P, 1))
    If $bEof Then Break
    Inc P
  Wend
  
  Forward(0, P - $iPos)
  
End

Private Sub GetWord() As String
  
  If $bEof Then Return
  $hWordRegExp.Exec(Mid$($sText, $iPos))
  If $hWordRegExp.Count < 1 Then Return
  Return Mid$($sText, $iPos, $hWordRegExp[1].Offset)
  
End

Private Sub Match(sPattern As String) As String

  Dim hRegExp As RegExp
  
  If $bEof Then Return
  
  hRegExp = $cRegExp[sPattern]
  If Not hRegExp Then
    hRegExp = New RegExp
    hRegExp.Compile("^" & sPattern & "(.*)")
    $cRegExp[sPattern] = hRegExp
  Endif
  
  If $iPos > Len($sText) Then Return
  hRegExp.Exec(Mid$($sText, $iPos))
  If hRegExp.Count < 1 Then Return
  Return Mid$($sText, $iPos, hRegExp[hRegExp.Count].Offset)
  
End

Private Sub Include(iHighlight As Byte, sHighlight As String, bMatch As Boolean, sLimit As String, aState As Byte[]) As Boolean

  Dim iSave As Byte
  Dim aHighlight As Byte[]
  Dim nState As Integer
  
  'Stop
  
  nState = aState.Count
  iSave = aState[0]
  aState.Remove(0)

  ' We enter a new imbricated state
  If aState.Count = 0 Then
    aState.Add(0)
    $aHighlight.Add(iHighlight)
    $aHighlight.Add(0)
  Endif
  
  aHighlight = TextHighlighter._Create(sHighlight)._Analyze($sText, aState, bMatch, sLimit, ByRef $iPos)
  $aHighlight.Insert(aHighlight)
  $bEof = $iPos > Len($sText)
  
  aState.Add(iSave, 0)
  
  If $bEof Then Return True
  
  ' We left the imbricated state
  $aHighlight.Add(0)
  $aHighlight.Add(0)
  
End

Public Sub _Analyze(Text As String, State As Byte[], Optional MatchLimit As Boolean, Limit As String, ByRef iPos As Integer) As Byte[]

  Init(Text)
  If iPos Then $iPos = iPos
  $bMatchLimit = MatchLimit
  $sTextLimit = Limit
  Try Compile(State)
  If Error And If Not $bEof Then
    Error Error.Where; ": "; Error.Text
    Error.Propagate()
  Endif
  
  If $sTextLimit Then iPos = $iPos
  
  Return $aHighlight

End

