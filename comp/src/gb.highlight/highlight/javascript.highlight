documentation:
  from /** to */
comment:
  from /* to */
  from //
string:
  from " to "
  from ' to '
  escape:
    match \\[fnrtv0'"\\]
    match \\c[A-Za-z]
    match \\x[0-9a-fA-F]{2}
    match \\u[0-9a-fA-F]{4}
    match \\u{[0-9a-fA-F]+}
sstring{String}:
  from ` to `
  escape:
    match \\[fnrtv0'"\\]
    match \\c[A-Za-z]
    match \\x[0-9a-fA-F]{2}
    match \\u[0-9a-fA-F]{4}
    match \\u{[0-9a-fA-F]+}
  subst{Preprocessor}:
    between { }
regexp{Datatype}:
  match /.*?/[a-z]*
  regexp.escape{Escape}:
    match \\.
number:
  match [+-]?[0-9.]*
  match 0x[0-9a-fA-F]*
keyword:
  word break case catch class const continue debugger default delete do else enum export extends finally for get if import in instanceof let new return set super switch throw try typeof var void while with yield
function:
  word function
constant:
  word false null this true undefined NaN Infinity
operator:
  symbol { } . >= + << ! = >>= ; == - >> ~ += >>>= ( , != * >>> && -= &= ) < === % & || *= |= [ > !== ++ | ? %= ^= -- ^ : <<= ] <= / /=
identifier:
  match [A-Za-z_$][A-Za-z_$0-9]*