' Gambas class file

Inherits TextHighlighter

'Public Const Name As String = "gambas"
'Public Const FullName As String = "Gambas"
'Public Const _Styles As String = "Keyword,Function,Operator,Symbol,Number,String,Breakpoint,Current,Datatype,Preprocessor,Escape,Label,Constant"

Class Highlight

Property Read Keywords As String[]

Static Private $aKeywords As String[]
Static Private $cState As New Collection

Static Public Sub _init()
  
  Dim sColor As String
  Dim I As Integer
  
  Component.Load("gb.eval")
  
  ' Follow the order of Highlight class constants
  For Each sColor In ["", "Normal", "Selection", "", "Highlight", "", "Added", "Removed", "Error", "Comment", "Documentation", "Keyword", "Function", "Operator", "Symbol", "Number", "String", "", "Current", "Datatype", "Preprocessor", "Escape", "Label", "Constant"]
    If sColor Then $cState[I] = TextHighlighterTheme._Register(sColor)
    Inc I
  Next
  
End

Private Sub Keywords_Read() As String[]
  
  If Not $aKeywords Then 
    $aKeywords = System.Keywords.Copy()
    $aKeywords.Insert(System.Subroutines)
  Endif
  
  Return $aKeywords
  
End

Private Sub IsProc() As Boolean

  Dim aSym As String[]
  Dim I As Integer
  Dim sSym As String

  aSym = Highlight.Symbols
  
  For I = 0 To aSym.Max
    sSym = aSym[I]
    If sSym == "PRIVATE" Or If sSym == "PUBLIC" Or If sSym == "STATIC" Or If sSym == "FAST" Then Continue
    If sSym == "SUB" Or If sSym == "PROCEDURE" Or If sSym == "FUNCTION" Then
      Return True
    Else
      Return False
    Endif
  Next

End

Public Sub _Analyze(Text As String, (State) As Byte[], Optional (MatchLimit) As Boolean, (Limit) As String, ByRef (Pos) As Integer) As Byte[]
  
  Dim aHighlight As New Byte[]
  Dim iState As Short
  Dim iTag As Short
  Dim iPos As Integer
  Dim I As Integer
  Dim iLen As Integer
  
  ' Gambas syntax implies that:
  ' - A line always starts at normal state.
  ' - 'Text' must be a whole line of code.
  
  Highlight.Analyze(Text, TextHighlighter.CanRewrite)
  
  'TextHighlighter.Limit = IsProc()
  'TextHighlighter.Comment = Left(LTrim(Text)) = "'"
  
  iPos = 0
  For I = 0 To Highlight.Symbols.Max
    
    If iPos < Highlight.Positions[I] Then 
      TextHighlighter._Add(aHighlight, 0, Highlight.Positions[I] - iPos)
      iPos = Highlight.Positions[I]
    Endif
    
    iLen = String.Len(Highlight.Symbols[I])
    TextHighlighter._Add($cState[Highlight.Types[I]], iLen)
    iPos += iLen
    
  Next

  If iPos < String.Len(Highlight.TextAfter) Then 
    TextHighlighter._Add(0, String.Len(Highlight.TextAfter) - iPos)
  Endif
  
  If TextHighlighter.CanRewrite Then TextHighlighter.TextAfter = Highlight.TextAfter

End

