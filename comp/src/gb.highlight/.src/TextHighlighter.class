' Gambas class file

Export 
Create Static

Static Public CanRewrite As Boolean

Public TextAfter As String
Public TextLengthBefore As Integer
Public Rewrite As Boolean

Property Read Name As String
Property Read Keywords As String[]

Static Public Sub _get(Name As String) As TextHighlighter

  Name = LCase(Name)
  Try Return Classes["_TextHighlighter_" & Name].AutoCreate()
  Return FromFile("./highlight" &/ Name & ".highlight")

End

Static Public Sub _Create(Name As String) As TextHighlighter
  
  _get(Name)
  Return Object.New("_TextHighlighter_" & Name)
  
End

Static Public Sub FromFile(Path As String, Optional Name As String) As TextHighlighter
  
  Dim hClass As Class
  
  If Not Name Then Name = String.LCase(File.BaseName(Path))
  
  If Path Not Begins "./" Then Path = ".." &/ Path
  CreateCustomHighlighter(Name, Path)
  hClass = Class.Load("_TextHighlighter_" & Name)
  Return hClass.AutoCreate()
  
Catch 
  
  Error.Raise("Cannot load highlighter '" & Name & "': " & Error.Where & ": " & Error.Text)
  
End

Public Sub _Analyze((Text) As String, (State) As Byte[], Optional (MatchLimit) As Boolean, (Limit) As String, ByRef (Pos) As Integer) As Byte[]

End

Public Sub Run(Text As String, State As Byte[]) As Byte[]
  
  If State.Count = 0 Then State.Add(0)
  If Not Text Then 
    If CanRewrite Then Me.TextAfter = ""
    Return New Byte[]
  Endif
  Return Me._Analyze(Text, State)
  
End

Static Private Sub CreateCustomHighlighter(sHighlight As String, sPath As String)
  
  Dim iLine As Integer
  Dim sLine As String

  Dim iIndent As Integer
  Dim iCurrentIndent As Integer
  
  Dim hDefault As CState
  Dim aState As New CState[]
  Dim hState As CState
  Dim hCurrent As CState
  Dim hOutput As File
  Dim sOutput As String
  Dim sDir As String
  Dim sProject As String
  Dim iPos As Integer
  Dim aLines As String[]
  Dim aInclude As String[]
  Dim I As Integer
  
  sDir = File.Dir(Temp$()) &/ "gb.highlight." & sHighlight
  Mkdir sDir
  Mkdir sDir &/ ".src"

  CState.Init(sPath)

  hDefault = New CState

  sOutput = sDir &/ ".src/_TextHighlighter_" & sHighlight & ".class"
  hOutput = Open sOutput For Create
  Output To hOutput

  aLines = Split(File.Load(sPath), "\n")
  
  Print File.Load("custom/CustomHighlighter.class")

  iCurrentIndent = 0
  iLine = 0
  
  While iLine < aLines.Count
    
    sLine = aLines[iLine]
    Inc iLine
    
    sLine = RTrim(sLine)
    If Not sLine Then Continue
    
    iIndent = Len(sLine)
    sLine = LTrim(sLine)
    iIndent -= Len(sLine)
    
    If sLine Begins "#" Then Continue
    
    If sLine Begins "@include " Then
      sLine = Trim(Mid$(sLine, 9))
      If Not sLine Then Error.Raise("Syntax error")
      aInclude = Split(File.Load(File.Dir(sPath) &/ sLine), "\n")
      For I = 0 To aInclude.Max
        aInclude[I] = Space$(iIndent) & aInclude[I]
      Next
      aLines.Insert(aInclude, iLine)
      Continue
    Endif
    
    If sLine Begins "$(" Then
      sLine = Mid$(sLine, 3)
      iPos = InStr(sLine, ")=")
      If iPos < 2 Then Error.Raise("Syntax error")
      CState.Define(Trim(Left(sLine, iPos - 1)), Trim(Mid$(sLine, iPos + 2)))
    Endif
    
    Do
    
      Try hCurrent = aState.Last
      If Error Then hCurrent = Null
      
      If Not hCurrent Then Break
        
      If iIndent > hCurrent.Indent Then Break
        
      aState.Pop()
      
    Loop
      
    If Not hCurrent Then
      
      If sLine Ends ":" Then
      
        hState = New CState(Left(sLine, -1))
        aState.Add(hState)
        hDefault.AddChild(hState)
        
      Endif 
      
      Continue

    Endif
      
    If sLine Ends ":" Then
      
      hState = New CState(Left(sLine, -1))
      hState.Indent = iIndent
      aState.Add(hState)
      
      hCurrent.AddChild(hState)

    Else 
      
      hCurrent.AddCommand(sLine)
      
    Endif
      
  Wend
  
  iLine = 0

  CState.Print()
  CState.Print("Private Sub Compile(aState as Byte[])")
  CState.Print()
  CState.Print("Dim sWord, sSymbol As String")
  CState.Print("Dim I As Integer")
  CState.Print()
  CState.Print("Goto INITIAL_STATE")
  CState.Print()
  hDefault.Compile()
  CState.Print()
  CState.PrintLabel("INITIAL_STATE", True)
  CState.Print()
  CState.Print("On aState[0] Goto " & CState.GetLabels().Join(", "))
  CState.Print()
  CState.Print("End")
  CState.Print()
  CState.Print("Private Sub Keywords_Read() As String[]")
  CState.Print("Static aKeywords As String[] = " & CState.GetKeywords())
  CState.Print("aKeywords.ReadOnly = True")
  CState.Print("Return aKeywords")
  CState.Print("End")
  
  ' CState.Print("Public Sub GetStateFromName(sName As String) As Integer")
  ' CState.Print()
  ' CState.Print("Static cName As Collection = " & CState.GetStateFromNames())
  ' CState.Print("Try Return cName[sName]")
  ' CState.Print()
  ' CState.Print("End")
  ' CState.Print()
  
  Output To Default
  hOutput.Close
  
  'Print File.Load(sOutput)
  
  sProject = File.Load("custom/project.template")
  sProject = Replace(sProject, "$(startup)", "_TextHighlighter_" & sHighlight)
  File.Save(sDir &/ ".project", sProject)
  
  Shell "cd " & Shell$(sDir) & " && gbc3 -agt 2>&1 && gba3" To sOutput
  sOutput = Trim(sOutput)
  If Process.LastValue And If sOutput Then Error.Raise(sOutput)

  Component.Load(sDir &/ "gb.highlight." & sHighlight & ".gambas")
  
' Catch
'   
'   If iLine Then
'     Error.Raise(Error.Text & " at line " & CStr(iLine))
'   Else 
'     Error.Propagate()
'   Endif
  
End 

Private Sub GetIncludeColor(iInclude As Integer) As Integer

  Dim iHue As Integer

  iHue = [60, 0, 210, 120, 30, 270][iInclude Mod 6]
  Return Color.HSV(iHue, 32, 255)

End


Public Sub ToHTML(Text As String, Optional Theme As TextHighlighterTheme) As String

  Dim aResult As New String[]
  Dim sLine As String
  Dim aHighlight As Byte[]
  Dim Y As Integer
  Dim I As Integer
  Dim sHTML As String
  Dim aText As String[]
  Dim iState As Short
  Dim hStyle As TextHighlighterStyle
  'Dim bAlt As Boolean
  Dim iLen As Integer
  Dim P As Integer
  Dim sLineHtml As String
  Dim iColor As Integer
  Dim sOldStyle As String
  Dim sStyle As String
  Dim aStyles As TextHighlighterStyle[]
  Dim aState As Byte[]
  Dim iLevel As Integer
  Dim iBg As Integer
  Dim aInclude As New Byte[]
  Dim iInclude As Byte

  If Not Theme Then Theme = New TextHighlighterTheme
  
  aStyles = Theme._GetStyles()
  
  aState = New Byte[]
  
  aText = Split(Text, "\n")
  
  iColor = 0
  
  For Y = 0 To aText.Max
    
    sLine = aText[Y] & "\n"
    aHighlight = Me.Run(sLine, aState)
    
    sLineHtml = ""
    P = 1
    
    For I = 0 To aHighlight.Max Step 2
      
      iState = aHighlight[I]
      iLen = aHighlight[I + 1]
      
      If iLen = 0 Then
        If iState Then
          aInclude.Push(iInclude)
          iInclude = iState
          Inc iLevel
        Else 
          iInclude = aInclude.Pop()
          Dec iLevel
        Endif
        iBg = GetIncludeColor(iInclude) 'Color.HSV(-1, 0, 255 - 8 * (iLevel * (iLevel + 1)))
        Continue
      Endif
      
      Try hStyle = aStyles[iState]
      If Error Then hStyle = aStyles[0]
      
      sHtml = Replace(Html(String.Mid$(sLine, P, iLen)), " ", "&nbsp;")
      sHtml = Replace(sHtml, "\t", "&nbsp;&nbsp;")
      P += iLen
      
      If hStyle.Bold Then sHtml = "<b>" & sHtml & "</b>"
      If hStyle.Underline Then 
        sHtml = "<u>" & sHtml & "</u>"
      Else If hStyle.Strikeout Then
        sHtml = "<s>" & sHtml & "</s>"
      Endif
      
      sStyle = ""
      If iLevel Then sStyle &= "background-color:" & Color.ToHTML(iBg) & ";"
      'If bAlt Then sStyle &= "background:#" & Hex$(aStyles[GetAlternate()].Color, 6) & ";"
      If hStyle.Color Then sStyle &= "color:" & Color.ToHTML(hStyle.Color) & ";"
      If hStyle.Dotted Then sStyle &= "text-decoration:underline dotted;"
      
      If sStyle <> sOldStyle Then
        If sOldStyle Then sLineHtml &= "</span>"
        If sStyle Then sHtml = "<span style=\"" & sStyle & "\">" & sHtml
        sOldStyle = sStyle
      Endif
      
      sLineHtml &= sHtml
      
    Next
    
    If P < String.Len(sLine) Then sLineHtml &= Html(String.Mid$(sLine, P))
    
    ' If TextHighlighter.Limit Then 
    '   If Y And If Not Trim(aResult[aResult.Max]) Then
    '     aResult.Add("<div style=\"height:1px;background:#808080;position:relative;top:-0.5em;\"></div>")
    '   Else
    '     aResult.Add("<div style=\"height:1px;background:#808080;\"></div>")
    '   Endif
    ' Endif
    
    aResult.Add(sLineHtml)
    
  Next
  
  Return "<tt><span style=\"color:#000000;\">" & aResult.Join("<br>\n") & "</span></tt>"
  
End


Private Function Keywords_Read() As String[]

End

Static Public Sub _Add(aHighlight As Byte[], iState As Byte, iCount As Integer)

  Dim iMax As Integer
  
  iMax = aHighlight.Max
  If aHighlight.Count And If aHighlight[iMax - 1] = iState And If aHighlight[iMax] Then 
    If aHighlight[iMax] <= (255 - iCount) Then
      aHighlight[iMax] += iCount
      Return
    Else 
      iCount -= 255 - aHighlight[iMax]
      aHighlight[iMax] = 255
    Endif
  Endif
  
  While iCount > 255
    aHighlight.Add(iState)
    aHighlight.Add(255)
    iCount -= 255
  Wend
  
  If iCount Then
    aHighlight.Add(iState)
    aHighlight.Add(iCount)
  Endif
  
End

Private Function Name_Read() As String

  Dim sClass As String
  Dim iPos As Integer

  sClass = Object.Type(Me)
  iPos = RInStr(sClass, "_")
  Try Return LCase(Mid$(sClass, iPos + 1))

End
