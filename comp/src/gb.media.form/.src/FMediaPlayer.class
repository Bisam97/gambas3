' Gambas class file

'Static Private $hLogo As Image

Property Volume As Float
Property Muted As Boolean
Property Read State As Integer

Private $hPlayer As MediaPlayer
Private $hImage As MediaControl

' Private $hPause1 As Panel
' Private $hPause2 As Panel
Private $iMute As Integer
'Private $bNoVideo As Boolean
Private $sName As String
Private $bMutedIcon As Boolean
Private $fStartupPos As Float
Private $bPlaying As Boolean

Private $aMessage As String[]
Private $fPos As Float
Private $fPosTime As Float

Private Sub GetParent() As MediaView

  Return Me.Parent

End

Private Sub MakeMediaPlayer()
  
  If $hPlayer Then Return
  
  $hPlayer = New MediaPlayer As "MediaPlayer"
  '$hFilter = New MediaFilter($hPlayer)

  If Desktop.Platform = "wayland" Then
    $hImage = New MediaControl($hPlayer, "waylandsink")  
  Else
    $hImage = New MediaControl($hPlayer, "xvimagesink")  
    $hImage["handle-events"] = False
  Endif

  $hPlayer.Video.Output = $hImage
  dwgVideo_Arrange

  '$hPlayer.Rate = -1
  
  ' $aVisualisation = New MediaControl[]
  ' AddVisualisation("", "")
  ' AddVisualisation("goom", "Goom")
  ' AddVisualisation("goom2k1", "Goom2")
  ' AddVisualisation("libvisual_bumpscope", "Bump")
  ' AddVisualisation("libvisual_corona", "Corona")
  ' AddVisualisation("libvisual_infinite", "Infinite")
  ' AddVisualisation("libvisual_jakdaw", "Jakdaw")
  ' AddVisualisation("libvisual_jess", "Jess")
  ' AddVisualisation("monoscope", "Mono")
  ' AddVisualisation("libvisual_oinksie", "Oinksie")
  ' AddVisualisation("libvisual_lv_analyzer", "Analyzer")
  ' AddVisualisation("libvisual_lv_scope", "Scope")
  ' AddVisualisation("spacescope", "Space")
  ' AddVisualisation("spectrascope", "Spectra")
  ' AddVisualisation("synaescope", "Synae")
  ' AddVisualisation("wavescope", "Wave")
  ' 
  ' $iVisualisation = 0
  ' UpdateVisualisation
  
End

' Private Sub ShowPause()
'   
'   If $hPause1 Then Return
'   Object.Lock(dwgVideo)
'   $hPause1 = New Panel(dwgVideo)
'   $hPause1.Background = Color.SetAlpha(Color.White, 128)
'   $hPause2 = New Panel(dwgVideo)
'   $hPause2.Background = $hPause1.Background
'   Object.Unlock(dwgVideo)
'   dwgVideo_Arrange
'   
' End

' Private Sub HidePause()
' 
'   If Not $hPause1 Then Return
'   Object.Lock(dwgVideo)
'   $hPause1.Delete
'   $hPause2.Delete
'   $hPause1 = Null
'   $hPause2 = Null
'   Object.Unlock(dwgVideo)
' 
' End


Public Sub SetUrl(sUrl As String)
  
  MakeMediaPlayer
  $sName = File.Name(sUrl)
  If sUrl Not Like "*://*" Then
    sUrl = Media.URL(sUrl)
  Else
    $sName = FromUrl$($sName)
  Endif
  $hPlayer.URL = sUrl
  
End

Public Sub SetNextUrl(sUrl As String)
  
  MakeMediaPlayer
  If sUrl Not Like "*://*" Then sUrl = Media.URL(sUrl)
  $hPlayer.NextURL = sUrl
  
End


Public Sub btnPlay_Click()

  Dim sErr As String
  
  If Not $hPlayer Then Return
  
  $aMessage = New String[]
  
  If $hPlayer.State <> Media.Playing Then 
    'timTime.Start
    dwgTime.Refresh
    sldVolume_Change
    '$hPlayer.Rate = -1
    $hPlayer.Play
    btnPlay.Picture = Picture["icon:/small/pause"]
    $bPlaying = True
    dwgVideo.Refresh

    timRefresh.Start
    'HidePause
  Else
    $hPlayer.Pause
    'timTime.Stop
    dwgTime.Refresh
    'ShowPause
    'timTime.Stop
    btnPlay.Picture = Picture["icon:/small/play"]
    timRefresh.Stop
  Endif
  
  $aMessage = Null
  
Catch 
  
  dwgVideo.Cached = False
  sErr = Error.Text
  If $hPlayer.State = Media.Playing Then
    $aMessage.Add(("*Unable to pause the media."))
  Else
    $aMessage.Add(("*Unable to play the media."))
  Endif
  dwgVideo.Refresh
  
End

Public Sub btnStop_Click()

  If Not $hPlayer Then Return
  If $hPlayer.State <> Media.Playing And If $hPlayer.State <> Media.Paused Then Return
  
  $aMessage = New String[]
  
  $hPlayer.Pause
  $hPlayer.Stop
  'timTime.Stop
  $bPlaying = False
  'HidePause
  dwgVideo.Cached = False
  dwgVideo.Refresh
  dwgTime.Refresh
  btnPlay.Picture = Picture["icon:/small/play"]
  timRefresh.Stop
  
  $aMessage = Null

Catch 
  
  $aMessage.Add(("*Unable to stop the media."))
  dwgVideo.Refresh
  
End

Public Sub GetShowControl() As Boolean
  
  Return panControl.Visible
  
End

Public Sub SetShowControl(bShow As Boolean)
  
  panControl.Visible = bShow
  dwgTime.Visible = bShow
  'panSpacer.Visible = bShow
  
End

Public Sub GetBorder() As Boolean
  
  Return panBorder.Border <> Border.None
  
End

Public Sub SetBorder(bBorder As Boolean) As Boolean
  
  If bBorder Then
    panBorder.Border = Border.Plain
    panBorder.Margin = True
  Else
    panBorder.Border = Border.None
    panBorder.Margin = False
  Endif
  
End

Public Sub dwgTime_Draw()

  Dim sText As String
  Dim fPos As Float
  Dim fLength As Float
  Dim DS As Integer
  Dim W As Integer
  Dim X As Integer
  Dim WE As Float
  
  'Paint.Brush = Paint.LinearGradient(0, 0, Paint.W, 0, [Color.SetAlpha(Color.Foreground, 240), Color.Transparent], [0, 1])
  'Paint.Rectangle(0, 0, Paint.W, Paint.H)
  'Paint.Fill
  
  DS = Desktop.Scale
  
  If Not $hPlayer Or If $hPlayer.State = Media.Null Or If $hPlayer.State = Media.Ready Then Return
  If dwgTime.H <= DS * 2 Then Return
  
  fPos = $fPos + Timer - $fPosTime
  fLength = $hPlayer.Duration
  
  W = Ceil(Paint.TextSize("00:00:00").W)
  X = Paint.W - W
  
  If fLength > 0 Then
    
    Paint.Background = Color.SetAlpha(Color.White, 64)

    sText = Format(CDate((fLength + 0.5) / 86400), "hh:nn:ss")
    Paint.DrawText(sText, X, 0, W, dwgTime.H, Align.Left)
    
    WE = DS * 0.75
    X -= DS + WE
    Paint.Ellipse(X, (dwgTime.H - WE) / 2, WE, WE)
    Paint.Fill
    
    X -= W + DS
    
  Endif
  
  If fPos = 0 Then
    sText = "00:00:00"
  Else
    sText = Format(CDate((fPos + 0.5) / 86400), "hh:nn:ss")
  Endif
  
  Paint.Background = Color.White
  Paint.DrawText(sText, X, 0, W, dwgTime.H, Align.Left)
  
  If fLength > 0 Then 
    
    Paint.Rectangle(0, DS, dwgTime.W * Min(1, fPos / fLength), dwgTime.H - DS * 2)
    Paint.Background = Color.SetAlpha(Color.White, 128)
    Paint.Fill
  
  Endif
  
End

Private Sub SetPos(fPos As Float)
  
  Dim fLength As Float
  
  If Not $hPlayer Then Return
  
  If $hPlayer.State = Media.Paused Or If $hPlayer.State = Media.Playing Then
    fLength = $hPlayer.Duration
    If fLength > 0 Then
      $hPlayer.Position = Max(0, Min(fLength, fPos * fLength))
      dwgTime.Refresh
    Endif
  Endif
  
End


Public Sub dwgTime_MouseDown()
  
  If Mouse.Left Then SetPos(Mouse.X / dwgTime.W)
  
End

Public Sub dwgTime_MouseMove()
  
  If Mouse.Left Then SetPos(Mouse.X / dwgTime.W)
  
End

Public Sub sldVolume_Change()

  sldVolume.Tooltip = CStr(sldVolume.Value) & "%"
  If Not $hPlayer Then Return
  $hPlayer.Audio.Volume = sldVolume.Value / 100
  
  If sldVolume.Value = 0 Then
    If Not $bMutedIcon Then
      btnVolume.Picture = Picture["icon:/small/muted"]
      $bMutedIcon = True
    Endif
  Else
    If $bMutedIcon Then
      btnVolume.Picture = Picture["icon:/small/volume"]
      $bMutedIcon = False
    Endif
  Endif

End

Public Sub btnVolume_Click()

  If sldVolume.Enabled Then
    $iMute = sldVolume.Value
    sldVolume.Value = 0
  Else
    sldVolume.Value = $iMute
  Endif
  sldVolume.Enabled = Not sldVolume.Enabled

End

' Public Sub GetShowVideo() As Boolean
'   
'   Return Not $bNoVideo
'   
' End
' 
' Public Sub SetShowVideo(Value As Boolean)
'   
'   $bNoVideo = Not Value
'   'panViewer.Background = If(Value, Color.Black, Color.Default)
'   'dwgVideo.Background = If(Value, Color.Black, Color.Default)
'   
' End


Public Sub dwgVideo_Draw()

  Dim sText As String
  Dim sMsg As String
  Dim sPrefix As String
  Dim sIcon As String
  Dim hPict As Picture
  Dim X, Y As Integer
  Dim DS As Integer
  Dim W As Integer
  Dim H As Integer
  
  DS = Desktop.Scale
  
  If $aMessage Then
    
    Y = DS
    Paint.Background = Color.White
    Paint.Font.Grade = 0
    
    For Each sMsg In $aMessage
      
      sPrefix = Left(sMsg)
      sMsg = Html(Mid$(sMsg, 2))
      
      Select Case sPrefix
        Case "!"
          sIcon = "warning"
        Case "*"
          sIcon = "error"
        Case Else 
          sIcon = "info"
      End Select
      
      hPict = Picture["icon:/medium/" & sIcon]
      
      X = DS
      Paint.DrawPicture(hPict, X, Y)
      X += hPict.W + DS
      W = Paint.W - X - DS
      H = Ceil(Paint.RichTextSize(sMsg, W).H)
      
      If (Y + H) >= (Paint.H - DS) Then Break
      
      Paint.DrawRichText(sMsg, X, Y, W, H)
      
      Y += Max(H, hPict.H) + DS
      
    Next
    
  Endif

  If $hPlayer And If Not $bPlaying Then
    'Paint.DrawPicture(Picture["icon:/64/audio"], dwgVideo.W \ 2 - 32, dwgVideo.H \ 2 - 32)
    Paint.Background = Color.White
    Paint.Font.Grade = 2
    sText = Html($sName)
    Paint.DrawRichTextShadow(sText, DS * 4, dwgVideo.H \ 2 - Desktop.Scale * 2, dwgVideo.W - DS * 8, DS * 4, Align.Center, 3, 1)
    Paint.DrawRichText(sText, DS * 4, dwgVideo.H \ 2 - Desktop.Scale * 2, dwgVideo.W - DS * 8, DS * 4, Align.Center)
  Endif
  
End

Public Sub Form_Close()

  Try $hPlayer.Close()
  $hPlayer = Null

End

Public Sub Play()
  
  If $hPlayer.State <> Media.Playing Then btnPlay_Click
  
End

Public Sub Pause()
  
  If $hPlayer.State = Media.Playing Then btnPlay_Click
  
End

Public Sub Stop()
  
  btnStop_Click
  
End

Public Sub panBorder_BeforeArrange()

  If panBorder.H < Desktop.Scale * 10 Then
    panVideo.Hide
    dwgTime.Parent.Expand = True
  Else
    panVideo.Show
    dwgTime.Parent.Expand = False
    dwgTime.Parent.H = Desktop.Scale * 3
  Endif

End

Public Sub GetDuration() As Float
  
  Return $hPlayer.Duration
  
End

Public Sub GetPosition() As Float
  
  Return $hPlayer.Position
  
End

Public Sub SetPosition(fPos As Float)

  Dim fLength As Float
  
  Try fLength = $hPlayer.Duration
  
  If fLength Then
    SetPos(fPos / fLength)
  Else
    $fStartupPos = fPos
  Endif
  
End

Public Sub dwgTime_MouseWheel()

  If Not $hPlayer Then Return
  If Mouse.Forward Then
    SetPosition(GetPosition() + 10)
  Else
    SetPosition(GetPosition() - 10)
  Endif

End

Public Sub dwgVideo_MouseWheel()

  dwgTime_MouseWheel

End

Public Sub MediaPlayer_End()
  
  Stop()
  
End

Public Sub MediaPlayer_Message((Source) As MediaControl, Type As Integer, (Message) As String)
  
  Dim sPrefix As String
  
  If Not $aMessage Then Return
  
  Select Case Type
    Case Media.Info
      sPrefix = "."
    Case Media.Warning
      sPrefix = "!"
    Case Media.Error
      sPrefix = "*"
  End Select
  
  $aMessage.Add(sPrefix & Message)
  dwgVideo.Refresh
  
End

Public Sub MediaPlayer_AboutToFinish()
  
  'Debug $hPlayer.Position;; $hPlayer.Duration
  GetParent()._AboutToFinish()
  
End

Public Sub MediaPlayer_Position()
  
  $fPos = $hPlayer.Position
  $fPosTime = Timer
  
End

Public Sub MediaPlayer_Duration()
  
  dwgTime.Refresh
  
End

Public Sub GetSpeed() As Float
  
  Return $hPlayer.Speed
  
End

Public Sub SetSpeed(fSpeed As Float)
  
  $hPlayer.Speed = fSpeed
  
End

' Public Sub panBorder_Arrange()
' 
'   timResize.Restart
' 
' End
' 
' Public Sub timResize_Timer()
'   
'   If $hPlayer And If $hPlayer.State <> Media.Playing Then $hPlayer.Pos = $hPlayer.Pos
'   timResize.Stop
'   
' End

Public Sub _new()

  Me.Proxy = dwgVideo
  SetBorder(True)

End

Private Function Volume_Read() As Float

  Return $hPlayer.Audio.Volume

End

Private Sub Volume_Write(Value As Float)

  Try sldVolume.Value = Value * 100

End

Private Function Muted_Read() As Boolean

  Return sldVolume.Enabled

End

Private Sub Muted_Write(Value As Boolean)

  If sldVolume.Enabled = Value Then Return
  btnVolume_Click

End

Private Function State_Read() As Integer

  If $hPlayer Then Return $hPlayer.State

End

Private Sub GetTopLevel(hCtrl As Control) As Window

  Dim hWindow As Window

  Do
    hWindow = hCtrl.Window
    If hWindow.TopLevel Then Return hWindow
    hCtrl = hWindow.Parent
  Loop

End

Public Sub dwgVideo_Arrange()

  Dim hWindow As Window
  
  If Not $hPlayer Then Return
  
  If Desktop.Platform = "wayland" Then
    hWindow = GetTopLevel(dwgVideo)
    $hPlayer.SetWindow(hWindow, dwgVideo.ScreenX, dwgVideo.ScreenY, dwgVideo.W, dwgVideo.H)
  Else
    $hPlayer.SetWindow(dwgVideo, 0, 0, dwgVideo.W, dwgVideo.H)
  Endif

End

Public Sub timRefresh_Timer()

  dwgTime.Refresh

End

