' Gambas class file

Export

Inherits UserControl

Public Const _Properties As String = "*,Border=True,ReadOnly,Size"
Public Const _DefaultEvent As String = "Click"
Public Const _DefaultSize As String = "36,4"
Public Const _Group As String = "Chooser"

Event Click
Event Activate

Property Border As Boolean
Property Colors As Integer[]
Property Index As Integer
Property Current As Integer
Property ReadOnly As Boolean

'' @{since 3.19}
''
'' Return or set the pixel size of a color button.
''
'' If the size is lower or equal than zero (the default value), a default size is used.

Property Size As Integer

Private mnuPopup As Menu
Private mnuRemove As Menu
Private mnuRemoveAll As Menu
Private mnuSort As Menu

Private $aColors As Integer[] = [Color.Blue, Color.Green, Color.Red, &H808080&, Color.Black, Color.White]

Private $hView As ScrollArea
Private $iIndex As Integer = -1
Private $iCurrent As Integer = -1
Private $bReadOnly As Boolean
Private $iLastIndex As Integer

Private $iRequestedSize As Integer
Private $iCount As Integer
Private $iSize As Integer
Private $bVertical As Boolean

Public Sub _new()
  
  $hView = New ScrollArea(Me) As "View"
  $hView.ScrollBar = Scroll.None
  $hView.Tracking = True
  $hView.Mouse = Mouse.Pointing
  View_Arrange
  'Me.Background = Color.TextBackground
  
End

Private Function Border_Read() As Boolean

  Return $hView.Border

End

Private Sub Border_Write(Value As Boolean)

  $hView.Border = If(Value, Border.Plain, Border.None)
  UpdateColors

End

Private Sub UpdateColors()

  Dim D As Integer

  D = GetPadding()

  If $iCount = 0 Or If $aColors.Count = 0 Then
    $hView.ResizeContents(1, 1)
  Else If $bVertical Then
    $hView.ResizeContents((($aColors.Count + $iCount - 1) \ $iCount) * $iSize + D, $iCount * $iSize + D)
  Else
    $hView.ResizeContents($iCount * $iSize + D, (($aColors.Count + $iCount - 1) \ $iCount) * $iSize + D)
  Endif

  $iIndex = -1
  $iLastIndex = -1
  View_MouseMove
  $hView.Refresh

End

Private Function Colors_Read() As Integer[]

  Return $aColors.Copy()

End

Private Sub Colors_Write(Value As Integer[])

  If Not Value Then
    $aColors.Clear
  Else
    $aColors = Value.Copy()
  Endif
  UpdateColors

End

Public Sub Clear()
  
  $aColors.Clear
  UpdateColors
  
End

Public Sub Add((Color) As Integer)

  Dim iPos As Integer
  
  Do
    iPos = $aColors.Find(Color)
    If iPos < 0 Then Break
    $aColors.Remove(iPos)
  Loop
  
  $aColors.Add(Color)
  If $aColors.Count > 32 Then $aColors.Remove(0, $aColors.Count - 32)
  
  UpdateColors
  
End

Public Sub AddFirst((Color) As Integer)

  Dim iPos As Integer
  
  Do
    iPos = $aColors.Find(Color)
    If iPos < 0 Then Break
    $aColors.Remove(iPos)
  Loop
  
  $aColors.Add(Color, 0)
  If $aColors.Count > 32 Then $aColors.Remove(32, $aColors.Count - 32)
  
  UpdateColors
  
End

Public Sub Exist((Color) As Integer) As Boolean
  
  Return $aColors.Exist(Color)
  
End

Private Sub GetPadding() As Integer

  Return Desktop.Scale

End


Public Sub View_Draw()

  Dim X, Y, W, H As Integer
  Dim I As Integer
  Dim iColor As Integer
  Dim iCurrent As Integer
  Dim D As Integer
  Dim XC As Integer
  Dim YC As Integer
  Dim WC As Integer
  Dim HC As Integer
  Dim DC As Integer
  
  'If Me.Background <> Color.Default Then Paint.FillRect(0, 0, Paint.W, Paint.H, Me.Background)
  
  If $iCount = 0 Then Return
  
  D = GetPadding()

  If $aColors.Count = 0 Then
    Paint.Background = Color.SetAlpha(Color.TextForeground, 192)
    Paint.Font.Grade = 5
    Paint.DrawRichText(("Last colors"), D, D, Paint.W - D * 2, Paint.H - D * 2, Align.Center)
    Return
  Endif
  
  Paint.LineWidth = 0.5
  Paint.LineJoin = Paint.LineJoinMiter
  Paint.LineCap = Paint.LineCapButt
  
  X = 0
  Y = 0
  W = $iSize
  H = $iSize
  
  X -= $hView.ScrollX
  Y -= $hView.ScrollY
  
  DC = D \ 16 + 1
  
  iCurrent = $iCurrent
  
  For I = 0 To $aColors.Max 
    iColor = $aColors[I]
    
    XC = X + D
    YC = Y + D
    WC = W - D
    HC = H - D
    
    Main.PaintColor(XC + DC + 1, YC + DC + 1, WC - DC * 2 - 2, HC - DC * 2 - 2, iColor)
    
    If I = iCurrent Or If I = $iIndex And Me.Enabled Then
      Paint.LineWidth = DC * 3
      Paint.Rectangle(XC + 0.5 - DC, YC + 0.5 - DC, WC - 1 + DC * 2, HC - 1 + DC * 2)
    Else
      Paint.LineWidth = DC
      Paint.Rectangle(XC + 0.5, YC + 0.5, WC - 1, HC - 1)
    Endif
    
    Paint.Background = If(I = iCurrent, Color.TextForeground, Color.LightForeground)
    Paint.Stroke
    
    If $bVertical Then
      Y += $iSize
      If (Y + H) >= $hView.ClientH Then
        Y = 0
        X += $iSize
      Endif
      If X >= Paint.W Then Break
    Else
      X += $iSize
      If (X + W) >= $hView.ClientW Then
        X = 0
        Y += $iSize
      Endif
      If Y >= Paint.H Then Break
    Endif
    
  Next

End

Public Sub View_MouseDown()

  'Debug Mouse.Left;; $iIndex
  If Not Me.Enabled Or If Not Mouse.Left Or If $iIndex < 0 Then Return
  
  SetCurrent($iIndex)
  
  Raise Click

End

Public Sub View_MouseMove()

  Dim I As Integer
  Dim sColor As String
  Dim Y As Integer
  Dim X As Integer
  Dim D As Integer
  
  'Debug
  
  If $iCount = 0 Then Return
  
  D = GetPadding()
  
  X = Mouse.ScreenX - $hView.ScreenX + $hView.ScrollX - D
  If X >= 0 Then X \= $iSize
  Y = Mouse.ScreenY - $hView.ScreenY + $hView.ScrollY - D
  If Y >= 0 Then Y \= $iSize
  
  If X >= 0 And If Y >= 0 Then
    If $bVertical Then
      If Y >= $iCount Then Return
      I = Y + X * $iCount
    Else
      If X >= $iCount Then Return
      I = X + Y * $iCount
    Endif
  Else
    I = -1
  Endif
  
  If I < 0 Or If I > $aColors.Max Then I = -1
  If I = $iIndex Then Return
  
  $iIndex = I
  $iLastIndex = $iIndex
  
  If I >= 0 Then
    sColor = Hex$($aColors[I], 8)
    If sColor Begins "00" Then sColor = Mid$(sColor, 3)
    $hView.Tooltip = "#" & sColor
  Else
    $hView.Tooltip = ""
  Endif
  
  $hView.Refresh

End

Public Sub View_Menu()
  
  If $bReadOnly Then Return
  
  If $iLastIndex < 0 Or If $iLastIndex >= $aColors.Count Then Return
  
  If Not mnuPopup Then
    
    mnuPopup = New Menu(Me.Window, True)
    
    mnuRemove = New Menu(mnuPopup) As "mnuRemove"
    mnuRemove.Text = ("Remove color")
    mnuRemove.Picture = Picture["icon:/small/delete"]
    
    mnuRemoveAll = New Menu(mnuPopup) As "mnuRemoveAll"
    mnuRemoveAll.Text = ("Remove all colors")
    mnuRemoveAll.Picture = Picture["icon:/small/clear"]
    
    mnuSort = New Menu(mnuPopup) As "mnuSort"
    mnuSort.Text = ("Sort colors")
    mnuSort.Picture = Picture["icon:/small/sort-ascent"]
    
  Endif
  
  mnuPopup.Popup
  
End


Public Sub View_DblClick()

  If Me.Enabled Then Raise Activate

End

Public Sub View_Leave()

  If $iIndex >= 0 Then
    $iIndex = -1
    'Debug -1
    $hView.Refresh
  Endif

End

Public Sub View_Scroll()

  View_MouseMove

End

Public Sub View_Arrange()

  Dim W As Integer
  Dim D As Integer = GetPadding()
  Dim iSize As Integer
  
  If $hView.ClientW <= D * 4 Or If $hView.ClientH <= D * 4 Then
    $iCount = 0
  Else
    $bVertical = $hView.ClientW >= $hView.ClientH
    W = Min($hView.ClientW, $hView.ClientH) - GetPadding()
    iSize = $iRequestedSize
    If iSize <= 0 Then iSize = Desktop.Scale * 6
    $iCount = Max(1, W \ iSize)
    $iSize = W \ $iCount
  Endif
  
  UpdateColors

End

Private Sub SetCurrent(iCurrent As Integer)

  Dim X As Integer
  Dim Y As Integer
  
  If $iCurrent = iCurrent Then Return
  $iCurrent = iCurrent
  If $iCurrent >= 0 And If $iCount Then
    If $bVertical Then
      X = ($iCurrent \ $iCount) * $iSize
      Y = ($iCurrent Mod $iCount) * $iSize
    Else
      Y = ($iCurrent \ $iCount) * $iSize
      X = ($iCurrent Mod $iCount) * $iSize
    Endif
    $hView.EnsureVisible(X, Y, $iSize, $iSize)
  Endif
  $hView.Refresh

End

Private Function Index_Read() As Integer

  Return $iCurrent

End

Private Sub Index_Write(Value As Integer)

  If Value < 0 Or If Value > $aColors.Max Then
    Value = -1
  Endif
  
  SetCurrent(Value)

End

Private Function Current_Read() As Integer

  If $iCurrent < 0 Then
    Return Color.Transparent
  Else
    Return $aColors[$iCurrent]
  Endif

End

Private Sub Current_Write(Value As Integer)

  SetCurrent($aColors.Find(Value))

End

Private Function ReadOnly_Read() As Boolean

  Return $bReadOnly

End

Private Sub ReadOnly_Write(Value As Boolean)

  $bReadOnly = Value
  $hView.Refresh

End

Public Sub mnuRemove_Click()
  
  If $iLastIndex >= 0 Then
    $aColors.Remove($iLastIndex)
    UpdateColors
  Endif
  
End

Public Sub mnuRemoveAll_Click()
  
  $aColors.Clear
  UpdateColors
  
End

Public Sub mnuSort_Click()

  Dim aSort As New String[]
  Dim iColor As Integer
  Dim sColor As String
  
  If $aColors.Count <= 1 Then Return
  
  For Each iColor In $aColors
    With Color[iColor]
      aSort.Add(Format(.Alpha, "000") & Format(.Hue, "000") & Format(.Saturation, "000") & Format(.Value, "000") & ":" & CStr(iColor))
    End With
  Next
  
  aSort.Sort(gb.Descent)
  $aColors.Clear
  For Each sColor In aSort
    $aColors.Add(CInt(Mid$(sColor, InStr(sColor, ":") + 1)))
  Next

  UpdateColors
  
End

Public Sub View_MouseWheel()
  
  Stop Event
  
End

Private Function Size_Read() As Integer

  Return $iRequestedSize

End

Private Sub Size_Write(Value As Integer)

  $iRequestedSize = Value
  View_Arrange

End
