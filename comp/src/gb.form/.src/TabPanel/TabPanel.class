' Gambas class file

Export
Inherits UserContainer

Public Const _Properties As String = "*,Border=True,Count{Range:1;256}=1,Index,Text,TextFont,Picture,Orientation{Align.Top;Bottom}=Top"
Public Const _Similar As String = "TabStrip"
Public Const _IsMultiContainer As Boolean = True
Public Const _DefaultEvent As String = "Click"

Event Click

Property Count As Integer
Property Index As Integer
Property Text As String
Property Picture As Picture
Property Font As Font
Property TextFont As Font
Property Border As Boolean
Property Orientation As Integer

Private $hTabBar As DrawingArea
Private $aCont As New _TabPanelContainer[]
Private $aButton As New _TabPanelButton[]
Private $iOrientation As Integer = Align.Top
Private $bBorder As Boolean = True

Private $iCurrent As Integer = -1
Private $hPanel As DrawingArea

Private Const MIN_WIDTH_PANEL As Integer = 20

Public Sub _new()

  $hTabBar = New DrawingArea(Me) As "TabBar"
  UpdateLayout

  $hPanel = New DrawingArea(Me) As "Panel"
  $hPanel.Expand = True
  $hPanel.Arrangement = Arrange.Fill
  $hPanel.Padding = 1

  Me.Count = 1
  Me.Arrangement = Arrange.None

End

Private Sub UpdateLayout()
  
  Dim hCtrl As _TabPanelButton
  
  Select Case $iOrientation
    Case Align.Top
      Me._Arrangement = Arrange.Vertical
      $hTabBar.Next = $hPanel
      $hTabBar.Height = $hTabBar.Font.Height + Desktop.Scale
      $hTabBar.Arrangement = Arrange.Horizontal
    Case Align.Bottom
      Me._Arrangement = Arrange.Vertical
      $hPanel.Next = $hTabBar
      $hTabBar.Height = $hTabBar.Font.Height + Desktop.Scale
      $hTabBar.Arrangement = Arrange.Horizontal
  End Select
  
  For Each hCtrl In $aButton
    hCtrl.Orientation = $iOrientation
  Next
  
End



Private Function Count_Read() As Integer

  Return $aCont.Count

End


Private Sub Count_Write(iCount As Integer)

  Dim iInd As Integer
  Dim hTab As _TabPanelContainer
  Dim hButton As _TabPanelButton
  Dim hCont As Container
  Dim sText As String
  Dim iCurrent As Integer

  If iCount < 1 Then Error.Raise("Bad argument")
  If iCount = $aCont.Count Then Return

  iCurrent = $iCurrent
    
  If iCount < $aCont.Count Then

    For iInd = $aCont.Max To iCount Step -1
      hTab = $aCont[iInd]
      If hTab.Children.Count Then Error.Raise("TabPanel container is not empty")
    Next

    For iInd = $aCont.Max To iCount Step -1
      $aCont[iInd].Delete
      $aButton[iInd].Delete
      If iInd <= iCurrent Then Dec iCurrent
    Next

    $aCont.Remove(iCount, -1)
    $aButton.Remove(iCount, -1)
    
  Else

    For iInd = $aCont.Count To iCount - 1
      hTab = New _TabPanelContainer($hPanel) As "_TabPanelContainer"
      $aCont.Add(hTab)
      hButton = New _TabPanelButton($hTabBar) As "_TabPanelButton"
      $aButton.Add(hButton)
      hButton.Orientation = $iOrientation
    Next
    'ME.Container = hCont

  Endif

  $iCurrent = -1
  If iCurrent < 0 Then iCurrent = $aCont.Max
  Try Index_Write(iCurrent)

End

Private Function Index_Read() As Integer

  Return $iCurrent

End

Private Sub Index_Write(iIndex As Integer)

  If iIndex < 0 Or iIndex >= $aCont.Count Then Error.Raise("Bad index")

  If iIndex = $iCurrent Then Return

  Me._Container = $aCont[iIndex]
  If $iCurrent >= 0 Then $aButton[$iCurrent].Selected = False
  $iCurrent = iIndex
  If $iCurrent >= 0 Then $aButton[$iCurrent].Selected = True

  UpdateContainer
  Raise Click

End

Private Sub UpdateContainer()

  Dim hTab As _TabPanelContainer
  Dim iInd As Integer
  Dim bCurrent As Boolean

  For iInd = 0 To $aCont.Max

    With $aCont[iInd]
      If iInd = $iCurrent Then
        .Ignore = False
        .Show
      Else
        .Hide
        .Ignore = True
        .Move(0, - .H)
      Endif
    End With

  Next

End

Private Function Text_Read() As String

  Return $aCont[$iCurrent].Text

End

Private Sub Text_Write(sText As String)

  $aCont[$iCurrent].Text = sText

End

Private Function Picture_Read() As Picture

  Return $aCont[$iCurrent].Picture

End

Private Sub Picture_Write(hPict As Picture)

  $aCont[$iCurrent].Picture = hPict

End

Public Function _get(Index As Integer) As _TabPanelContainer

  If Index < 0 Or Index >= $aCont.Count Then Error.Raise("Bad index")
  Return $aCont[Index]

End

Private Function Font_Read() As Font

  Return Super.Font

End

Private Sub Font_Write(hFont As Font)

  Super.Font = hFont
  UpdateLayout

End

Private Function Border_Read() As Boolean

  Return $bBorder

End

Private Sub Border_Write(bBorder As Boolean)

  $bBorder = bBorder
  $hPanel.Refresh

End

Private Function TextFont_Read() As Font

  Return $hTabBar.Font

End

Private Sub TextFont_Write(Value As Font)

  $hTabBar.Font = Value
  UpdateLayout
  
End

' Public Sub _GetIconView() As IconView
'   
'   Return $hIconView
'   
' End

Public Sub _GetIndex(hCont As Control) As Integer
 
  If hCont Is _TabPanelContainer Then Return $aCont.Find(hCont)
  If hCont Is _TabPanelButton Then Return $aButton.Find(hCont)
  Return -1

End

' Public Sub IconView_Select()
'   
'   If Not $hIconView.Key Then Return
'   Index_Write(CInt($hIconView.Key))
'   
' End

' Public Sub IconView_MouseWheel()
'   
'   If Mouse.Delta < 0 And If $iCurrent < $aCont.Max Then
'     Index_Write($iCurrent + 1)
'   Else If Mouse.Delta > 0 And If $iCurrent > 0 Then
'     Index_Write($iCurrent - 1)
'   Endif
'   
' End

Public Sub _GetButton(iIndex As Integer) As _TabPanelButton
  
  Return $aButton[iIndex]
  
End

Public Sub TabBar_Draw()
  
  Draw.Foreground = Color.LightForeground
  Select Case $iOrientation
    Case Align.Top
      Draw.Line($aButton[$aButton.Max].X + $aButton[$aButton.Max].W, $hTabBar.H - 1, $hTabBar.W - 1, $hTabBar.H - 1)
    Case Align.Bottom
      Draw.Line($aButton[$aButton.Max].X + $aButton[$aButton.Max].W, 0, $hTabBar.W - 1, 0)
  End Select
  
End

Public Sub Panel_Draw()
  
  If $bBorder Then
    Draw.Foreground = Color.LightForeground
    Select Case $iOrientation
      Case Align.Top
        Draw.Line(0, 0, 0, $hPanel.H - 1)
        Draw.Line(0, $hPanel.H - 1, $hPanel.W - 1, $hPanel.H - 1)
        Draw.Line($hPanel.W - 1, $hPanel.H - 1, $hPanel.W - 1, 0)
      Case Align.Bottom
        Draw.Line(0, $hPanel.H - 1, 0, 0)
        Draw.Line(0, 0, $hPanel.W - 1, 0)
        Draw.Line($hPanel.W - 1, 0, $hPanel.W - 1, $hPanel.H - 1)
    End Select
  Endif
  
End


Private Function Orientation_Read() As Integer

  Return $iOrientation

End

Private Sub Orientation_Write(Value As Integer)

  $iOrientation = Value
  UpdateLayout

End
