' Gambas class file

Export
Inherits UserContainer

Public Const _Properties As String = "*,Border=True,Count{Range:1;256}=1,Index,Text,TextFont,Picture,Orientation{Align.Top;Bottom}=Top,Closable,Highlight"
Public Const _Similar As String = "TabStrip"
Public Const _IsMultiContainer As Boolean = True
Public Const _DefaultEvent As String = "Click"

Event Click
Event Close(Index As Integer)

Property Count As Integer
Property Index As Integer
Property Text As String
Property Picture As Picture
Property Font As Font
Property TextFont As Font
Property Border As Boolean
Property Orientation As Integer
Property Highlight As Boolean
Property Closable As Boolean
Property Read Current As _TabPanelContainer

Private $hTabBar As DrawingArea
Private $hTabBarContainer As DrawingArea
'Private $hLeftArrow As DrawingArea
'Private $hRightArrow As DrawingArea
Private $X As Integer
Private $bArrow As Boolean

Private $aCont As New _TabPanelContainer[]
Private $aButton As New _TabPanelButton[]
Private $iOrientation As Integer = Align.Top
Private $bBorder As Boolean = True
Private $bHighlight As Boolean
Private $bClosable As Boolean
Private $iCurrent As Integer = -1
Private $hPanel As DrawingArea

Private Const ARROW_WIDTH As Integer = 12

Public Sub _new()

  $hTabBar = New DrawingArea(Me) As "TabBar"
  '$hTabBar.Arrangement = Arrange.Fill
  
  ' $hLeftArrow = New DrawingArea($hTabBar) As "Arrow"
  ' $hLeftArrow.Ignore = True
  ' $hLeftArrow.Hide
  ' 
  ' $hRightArrow = New DrawingArea($hTabBar) As "Arrow"
  ' $hRightArrow.Ignore = True
  ' $hRightArrow.Hide

  $hTabBarContainer = New DrawingArea($hTabBar) As "TabBarContainer"

  $hPanel = New DrawingArea(Me) As "Panel"
  $hPanel.Expand = True
  '$hPanel.Arrangement = Arrange.Fill
  '$hPanel.Padding = 1

  Me.Count = 1
  Me.Arrangement = Arrange.None
  
  UpdateLayout

End

Public Sub _EnsureCurrentVisible()
  
  Dim X, W, M As Integer
  
  If $iCurrent < 0 Or If $iCurrent > $aButton.Max Then Return
  If Not $aButton[$iCurrent].Visible Then Return
  
  If $iCurrent = 0 Then
    $X = 0
  Else
    With $aButton[$iCurrent]
      
      X = $hTabBarContainer.X + .X
      W = .W
      
      If X < 4 Then
        $X = $X - X + 4
      Else If X > ($hTabBar.W - W - ARROW_WIDTH) Then
        $X = $X - (X - ($hTabBar.W - W))
        'If $iCurrent < $aButton.Max Then 
        $X -= ARROW_WIDTH
      Endif
      
      M = .X + W - $hTabBar.W + ARROW_WIDTH
      'If $iCurrent < $aButton.Max Then M += ARROW_WIDTH
      $X = Max($X, - M)
      
    End With

  Endif
  
  $X = Min(0, $X)
  
  If $aButton.Count Then
    With $aButton[$aButton.Max]
      $bArrow = ($X + .X + .W) > $hTabBar.W
    End With
  Else
    $bArrow = False
  Endif
    
  W = Me.W - $X
  If $bArrow Then W -= ARROW_WIDTH
  $hTabBarContainer.Move($X, 0, W, $hTabBar.H)

End


Private Sub UpdateLayout()
  
  Dim hCtrl As _TabPanelButton
  
  Select Case $iOrientation
    Case Align.Top
      Me._Arrangement = Arrange.Vertical
      $hTabBar.Next = $hPanel
    Case Align.Bottom
      Me._Arrangement = Arrange.Vertical
      $hPanel.Next = $hTabBar
  End Select
  
  For Each hCtrl In $aButton
    hCtrl.Orientation = $iOrientation
    hCtrl.UpdateLayout
    hCtrl.Refresh
  Next
  
  $hTabBar.Height = $hTabBar.Font.Height + Desktop.Scale
  
  $hTabBarContainer.Arrangement = Arrange.Horizontal
  _EnsureCurrentVisible
  
End

Public Sub TabBar_Arrange()
  
  _EnsureCurrentVisible
  
End

Private Function Count_Read() As Integer

  Return $aCont.Count

End


Private Sub Count_Write(iCount As Integer)

  Dim iInd As Integer
  Dim hTab As _TabPanelContainer
  Dim hButton As _TabPanelButton
  Dim hCont As Container
  Dim sText As String
  Dim iCurrent As Integer

  If iCount < 1 Then Error.Raise("Bad argument")
  If iCount = $aCont.Count Then Return

  iCurrent = $iCurrent
    
  Object.Lock(Me)
  
  If iCount < $aCont.Count Then

    For iInd = $aCont.Max To iCount Step -1
      hTab = $aCont[iInd]
      If hTab.Children.Count Then Error.Raise("TabPanel container is not empty")
    Next

    For iInd = $aCont.Max To iCount Step -1
      $aCont[iInd]._Delete
      $aButton[iInd].Delete
      If iInd <= iCurrent Then Dec iCurrent
    Next

    $aCont.Remove(iCount, -1)
    $aButton.Remove(iCount, -1)
    
  Else

    For iInd = $aCont.Count To iCount - 1
      hTab = New _TabPanelContainer($hPanel) As "_TabPanelContainer"
      $aCont.Add(hTab)
      hButton = New _TabPanelButton($hTabBarContainer) As "_TabPanelButton"
      $aButton.Add(hButton)
      hButton.Orientation = $iOrientation
    Next
    'ME.Container = hCont

  Endif
  
  UpdateLayout

  $iCurrent = -1
  If iCurrent < 0 Then iCurrent = $aCont.Max
  
  Object.Unlock(Me)
  
  Try Index_Write(iCurrent)

End

Private Function Index_Read() As Integer

  Return $iCurrent

End

Private Sub Index_Write(iIndex As Integer)

  If iIndex < 0 Or iIndex >= $aCont.Count Then Error.Raise("Bad index")

  If iIndex = $iCurrent Then Return

  If $iCurrent >= 0 Then $aButton[$iCurrent].Selected = False
  $iCurrent = iIndex
  If $iCurrent >= 0 Then $aButton[$iCurrent].Selected = True

  UpdateContainer

  Me._Container = $aCont[$iCurrent]
  _EnsureCurrentVisible
  
  Raise Click

End

Private Sub UpdateCurrentContainer()
  
  If $iCurrent < 0 Then Return
  
  If $bBorder Then
    $aCont[$iCurrent].Move(1, 0, $hPanel.W - 2, $hPanel.H - 1)
  Else
    $aCont[$iCurrent].Move(0, 0, $hPanel.W, $hPanel.H)
  Endif
  
End


Private Sub UpdateContainer()

  Dim hTab As _TabPanelContainer
  Dim iInd As Integer
  Dim bCurrent As Boolean

  For iInd = 0 To $aCont.Max

    With $aCont[iInd]
      If iInd = $iCurrent Then
        UpdateCurrentContainer
        .Show
        '.Raise
      Else If .Visible Then
        .Hide
        '.Move(0, - $hPanel.H)
      Endif
    End With

  Next

End

Private Function Text_Read() As String

  Return $aCont[$iCurrent].Text

End

Private Sub Text_Write(sText As String)

  $aCont[$iCurrent].Text = sText

End

Private Function Picture_Read() As Picture

  Return $aCont[$iCurrent].Picture

End

Private Sub Picture_Write(hPict As Picture)

  $aCont[$iCurrent].Picture = hPict

End

Public Function _get(Index As Integer) As _TabPanelContainer

  If Index < 0 Or Index >= $aCont.Count Then Error.Raise("Bad index")
  Return $aCont[Index]

End

Private Function Font_Read() As Font

  Return Super.Font

End

Private Sub Font_Write(hFont As Font)

  Super.Font = hFont
  UpdateLayout

End

Private Function Border_Read() As Boolean

  Return $bBorder

End

Private Sub Border_Write(bBorder As Boolean)

  Dim hButton As _TabPanelButton

  $bBorder = bBorder
  '$hPanel.Padding = If(bBorder, 1, 0)
  $hPanel.Refresh
  
  For Each hButton In $aButton
    hButton.Refresh
  Next

End

Private Function TextFont_Read() As Font

  Return $hTabBar.Font

End

Private Sub TextFont_Write(Value As Font)

  $hTabBar.Font = Value
  UpdateLayout
  
End

' Public Sub _GetIconView() As IconView
'   
'   Return $hIconView
'   
' End

Public Sub _GetIndex(hCont As Control) As Integer
 
  If hCont Is _TabPanelContainer Then Return $aCont.Find(hCont)
  If hCont Is _TabPanelButton Then Return $aButton.Find(hCont)
  Return -1

End

' Public Sub IconView_Select()
'   
'   If Not $hIconView.Key Then Return
'   Index_Write(CInt($hIconView.Key))
'   
' End

' Public Sub IconView_MouseWheel()
'   
'   If Mouse.Delta < 0 And If $iCurrent < $aCont.Max Then
'     Index_Write($iCurrent + 1)
'   Else If Mouse.Delta > 0 And If $iCurrent > 0 Then
'     Index_Write($iCurrent - 1)
'   Endif
'   
' End

Public Sub _GetButton(iIndex As Integer) As _TabPanelButton
  
  Return $aButton[iIndex]
  
End

Public Sub TabBarContainer_Draw()
  
  Dim hLast As _TabPanelButton
  
  Try hLast = $aButton[GetLastIndex()]
  If Error Then Return
  
  Draw.Foreground = Color.LightForeground
  Select Case $iOrientation
    Case Align.Top
      Draw.Line(hLast.X + hLast.W, $hTabBarContainer.H - 1, $hTabBarContainer.W, $hTabBar.H - 1)
    Case Align.Bottom
      Draw.Line(hLast.X + hLast.W, 0, $hTabBarContainer.W, 0)
  End Select
  
End

Public Sub TabBar_Draw()
  
  Dim X As Integer
  
  If $bArrow Then

    X = $hTabBar.W - ARROW_WIDTH

    If $bHighlight Then
      Draw.FillRect(X, 0, ARROW_WIDTH, $hTabBar.H, _GetBackground())
    Endif
  
    Draw.Foreground = Color.LightForeground
    Draw.Style.Arrow($hTabBar.W - 8, 0, 8, $hTabBar.H, Align.Right)
    Select Case $iOrientation
      Case Align.Top
        Draw.Line(X, $hTabBarContainer.H - 1, $hTabBar.W - 1, $hTabBar.H - 1)
      Case Align.Bottom
        Draw.Line(X, 0, $hTabBar.W - 1, 0)
    End Select
  Endif
  
End

Public Sub TabBar_MouseDown()
  
  If Mouse.Left And If $bArrow And If Mouse.X >= ($hTabBar.W - 6) Then
    Try Inc Me.Index
  Endif
  
End

Public Sub TabBar_DblClick()
  
  If Mouse.Left And If $bArrow And If Mouse.X >= ($hTabBar.W - 6) Then
    Try Me.Index = Me.Count - 1
  Endif
  
End


Public Sub Panel_Draw()
  
  If $bBorder Then
    Draw.Foreground = Color.LightForeground
    Select Case $iOrientation
      Case Align.Top
        Draw.Line(0, 0, 0, $hPanel.H - 1)
        Draw.Line(0, $hPanel.H - 1, $hPanel.W - 1, $hPanel.H - 1)
        Draw.Line($hPanel.W - 1, $hPanel.H - 1, $hPanel.W - 1, 0)
      Case Align.Bottom
        Draw.Line(0, $hPanel.H - 1, 0, 0)
        Draw.Line(0, 0, $hPanel.W - 1, 0)
        Draw.Line($hPanel.W - 1, 0, $hPanel.W - 1, $hPanel.H - 1)
    End Select
  Endif
  
End

Public Sub Panel_Arrange()
  
  UpdateCurrentContainer
  
End



Private Function Orientation_Read() As Integer

  Return $iOrientation

End

Private Sub Orientation_Write(Value As Integer)

  $iOrientation = Value
  UpdateLayout

End

Private Function Current_Read() As _TabPanelContainer

  Try Return $aCont[$iCurrent]

End

Public Sub Remove(Index As Integer)
  
  Dim iCurrent As Integer
  Dim hTab As _TabPanelContainer
  
  If Index < 0 Or Index > $aCont.Max Then Error.Raise("Bad index")
  If $aCont.Count = 1 Then Return
  
  hTab = $aCont[Index]
  If hTab.Children.Count Then Error.Raise("TabPanel container is not empty")
  $aButton[Index].Delete
  $aButton.Remove(Index)
  $aCont.Remove(Index)
  If $iCurrent = Index Then
    $iCurrent = -1
    iCurrent = Min($aCont.Max, Index)
    Index_Write(iCurrent)
  Else If $iCurrent > Index Then
    Dec $iCurrent
  Endif
  UpdateLayout
  hTab._Delete()
  
End

Public Sub _SetVisible(Index As Integer, bVisible As Boolean)
  
  If Not bVisible And If Index = $iCurrent Then
    Try _MoveNext()
    If Error Then Try _MovePrevious()
  Endif
  $aButton[Index].Visible = bVisible
  UpdateLayout
  
End

Public Sub _IsVisible(Index As Integer) As Boolean
  
  Return $aButton[Index].Visible
  
End

Private Sub GetPreviousIndex(iIndex As Integer) As Integer
  
  Dim I As Integer
  
  For I = iIndex - 1 DownTo 0
    If $aButton[I].Visible Then Return I
  Next
  Return -1
  
End

Private Sub GetNextIndex(iIndex As Integer) As Integer
  
  Dim I As Integer
  
  For I = iIndex + 1 To $aButton.Max
    If $aButton[I].Visible Then Return I
  Next
  Return -1
  
End

Public Sub _GetFirstIndex() As Integer
  
  Return GetNextIndex(-1)
  
End

Private Sub GetLastIndex() As Integer
  
  Return GetPreviousIndex($aButton.Count)
  
End

Public Sub _MovePrevious()
  
  Me.Index = GetPreviousIndex($iCurrent)
  
End

Public Sub _MoveNext()
  
  Me.Index = GetNextIndex($iCurrent)
  
End


Private Function Highlight_Read() As Boolean

  Return $bHighlight

End

Private Sub Highlight_Write(Value As Boolean)

  $bHighlight = Value
  UpdateLayout

End

Private Function Closable_Read() As Boolean

  Return $bClosable

End

Private Sub Closable_Write(Value As Boolean)

  $bClosable = Value
  UpdateLayout

End

Public Sub _Close(Index As Integer)
  
  Raise Close(Index)
  
End

Public Sub _GetBackground() As Integer
  
  Return Color.Gradient(If(Me.Background = Color.Default, Color.Background, Me.Background), Color.LightForeground)  
  
End
