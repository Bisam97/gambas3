' Gambas class file

Inherits UserControl

Private $hDrawingArea As DrawingArea

Property Text As String
Property Selected As Boolean
Property Orientation As Integer
Property Picture As Picture
'Property Visible As Boolean

Private $sText As String
Private $bSelected As Boolean
Private $iOrientation As Integer = Align.Top
Private $hPicture As Picture
Private $bHidden As Boolean
Private btnClose As PictureBox

Private Const BUTTON_SIZE As Integer = 12

Public Sub _new()
  
  $hDrawingArea = New DrawingArea(Me) As "DrawingArea"
  $hDrawingArea.Mouse = Mouse.Pointing
  
End

Private Sub GetParent() As TabPanel
  
  Return Me.Parent.Parent.Parent
  
End

Private Sub GetIndex() As Integer
  
  Return GetParent()._GetIndex(Me)
  
End


Public Sub DrawingArea_Draw()
  
  Dim iFg, iBg As Integer
  Dim X, W As Integer
  Dim bBorder As Boolean
  Dim hTabPanel As TabPanel
  Dim bClosable As Boolean
  Dim bHighlight As Boolean
  Dim bFirst As Boolean
  Dim iIndex As Integer
  
  hTabPanel = GetParent()
  iIndex = GetIndex()
  bHighlight = hTabPanel.Highlight And Not $bSelected
  bClosable = hTabPanel.Closable
  
  If bHighlight Then
    Draw.FillRect(0, 0, Me.W, Me.H, hTabPanel._GetBackground())
  Endif
  
  iFg = Me.Foreground
  If iFg = Color.Default Then iFg = Color.Foreground
  
  Draw.Foreground = iFg
  If Not $bSelected And If $hDrawingArea.Hovered Then
    Draw.Foreground = Color.Gradient(iFg, Color.LightForeground)
  Endif
  
  X = 0
  W = Me.W
  
  If $hPicture Then
    X += $hPicture.W + 2
    W = Me.W - X
    Draw.Picture($hPicture, Desktop.Scale, (Me.H - $hPicture.H) / 2)
  Endif
  
  If bClosable Then W -= BUTTON_SIZE
  Draw.Text($sText, X, 0, W, Me.Height, Align.Center)
  Draw.Foreground = Color.LightForeground
  
  bBorder = hTabPanel.Border
  bFirst = iIndex = hTabPanel._GetFirstIndex()
  
  'If Not bHighlight Then
  
    Select Case $iOrientation
    
      Case Align.Top
        If $bSelected Then
          If Not bFirst Or If bBorder Or If System.RightToLeft Then Draw.Line(0, Me.H - 1, 0, 0)
          If Not bFirst Or If bBorder Or If Not System.RightToLeft Then Draw.Line(Me.W - 1, 0, Me.W - 1, Me.H - 1)
          If bBorder Then Draw.Line(0, 0, Me.W - 1, 0)
        Else
          Draw.Line(0, Me.H - 1, Me.W - 1, Me.H - 1)
        Endif
        
      Case Align.Bottom
        If $bSelected Then
          If Not bFirst Or If bBorder Or If System.RightToLeft Then Draw.Line(0, 0, 0, Me.H - 1)
          If Not bFirst Or If bBorder Or If Not System.RightToLeft Then Draw.Line(Me.W - 1, Me.H - 1, Me.W - 1, 0)
          If bBorder Then Draw.Line(0, Me.H - 1, Me.W - 1, Me.H - 1)
        Else
          Draw.Line(0, 0, Me.W - 1, 0)
        Endif
        
    End Select
    
  'Endif
  
End


Private Function Text_Read() As String

  Return $sText

End

Public Sub UpdateLayout()

  Dim S As Integer
  Dim bClosable As Boolean = GetParent().Closable

  Select Case $iOrientation
    Case Align.Left, Align.Right
      S = Me.Parent.Font.TextWidth($sText) + Desktop.Scale * 2
      If $hPicture Then S += $hPicture.W + 2
      If bClosable Then S += BUTTON_SIZE
      Me.H = S
    Case Else
      S = Me.Parent.Font.TextWidth($sText) + Desktop.Scale * 2
      If $hPicture Then S += $hPicture.W + 2
      If bClosable Then S += BUTTON_SIZE
      Me.W = S
  End Select
  
  GetParent().TabBar_Arrange

End

Private Sub Text_Write(Value As String)

  $sText = Value
  UpdateLayout
  $hDrawingArea.Refresh

End

Private Function Selected_Read() As Boolean

  Return $bSelected

End

Private Sub Selected_Write(Value As Boolean)

  $bSelected = Value
  $hDrawingArea.Mouse = If($bSelected, Mouse.Default, Mouse.Pointing)
  $hDrawingArea.Refresh

End

Private Function Orientation_Read() As Integer

  Return $iOrientation

End

Private Sub Orientation_Write(Value As Integer)

  $iOrientation = Value
  UpdateLayout

End

Public Sub DrawingArea_MouseDown()
  
  If $bSelected Then Return
  If Mouse.Left Then GetParent().Index = GetIndex()
  
End

Private Sub CreateButton()

  If btnClose Then Return
  btnClose = New PictureBox($hDrawingArea) As "btnClose"
  btnClose.Alignment = Align.Center
  btnClose.Picture = Picture["img/delete.png"]
  btnClose.Mouse = Mouse.Pointing
  btnClose.Hide

End

Public Sub DrawingArea_MouseWheel()
  
  If Mouse.Delta > 0 Then
    Try GetParent()._MovePrevious()
  Else
    Try GetParent()._MoveNext()
  Endif
  
End

Private Function Picture_Read() As Picture

  Return $hPicture

End

Private Sub Picture_Write(Value As Picture)

  $hPicture = Value
  UpdateLayout

End

Public Sub DrawingArea_Enter()
  
  Dim X As Integer
  
  $hDrawingArea.Tracking = True
  $hDrawingArea.Refresh
  
  If GetParent().Closable Then
    CreateButton
    X = $hDrawingArea.W - BUTTON_SIZE
    btnClose.Move(X, 0, BUTTON_SIZE, $hDrawingArea.H)
    btnClose.Show
  Endif
  
End

Public Sub DrawingArea_Leave()
  
  If btnClose Then
    Object.Lock($hDrawingArea)
    btnClose.Delete ' Can raise Leave again!
    btnClose = Null
    Object.Unlock($hDrawingArea)
  Endif
  
  $hDrawingArea.Tracking = False
  $hDrawingArea.Refresh
  
End

Public Sub btnClose_MouseUp()
  
  GetParent()._Close(GetIndex())
  
End

Public Sub btnClose_MouseWheel()
  
  DrawingArea_MouseWheel
  
End

Public Sub btnClose_Enter()
  
  btnClose.Picture = Picture["img/delete-h.png"]
  
End

Public Sub btnClose_Leave()
  
  btnClose.Picture = Picture["img/delete.png"]
  
End

' Private Function Visible_Read() As Boolean
' 
'   Return Not $bHidden
' 
' End
' 
' Private Sub Visible_Write(Value As Boolean)
' 
'   $bHidden = Not Value
'   Super.Visible = Value
' 
' End
