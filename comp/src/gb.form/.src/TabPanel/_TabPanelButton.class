' Gambas class file

Inherits UserControl

Private $hDrawingArea As DrawingArea

Property Text As String
Property Selected As Boolean
Property Orientation As Integer
Property Picture As Picture
'Property Visible As Boolean

Private $sText As String
Private $bSelected As Boolean
Private $iOrientation As Integer = Align.Top
Private $hPicture As Picture
Private $bShowClose As Boolean
Private $bInClose As Boolean

Private Const BUTTON_SIZE As Integer = 14

Public Sub _new()
  
  $hDrawingArea = New DrawingArea(Me) As "DrawingArea"
  $hDrawingArea.Mouse = Mouse.Pointing
  
End

Private Sub GetParent() As TabPanel
  
  Return Me.Parent.Parent.Parent
  
End

Private Sub GetIndex() As Integer
  
  Return GetParent()._GetIndex(Me)
  
End

Public Sub DrawingArea_Draw()
  
  Dim iFg As Integer
  Dim X, W As Integer
  Dim bBorder As Boolean
  Dim hTabPanel As TabPanel
  Dim bClosable As Boolean
  Dim bHighlight As Boolean
  Dim bFirst As Boolean
  Dim iIndex As Integer
  Dim hPict As Picture
  
  hTabPanel = GetParent()
  iIndex = GetIndex()
  bHighlight = hTabPanel.Highlight And Not $bSelected
  bClosable = hTabPanel.Closable
  
  If bHighlight Then
    Draw.FillRect(0, 0, Me.W, Me.H, hTabPanel._GetBackground())
  Endif
  
  iFg = Me.Foreground
  If iFg = Color.Default Then iFg = Color.Foreground
  
  Draw.Foreground = iFg
  If Not $bSelected And If $hDrawingArea.Hovered Then
    Draw.Foreground = Color.Gradient(iFg, Color.LightForeground)
  Endif
  
  X = 0
  W = Me.W
  
  If $hPicture Then
    X += $hPicture.W
    W = Me.W - X
    Draw.Picture($hPicture, 4, (Me.H - $hPicture.H) / 2)
  Endif
  
  If bClosable Then W -= BUTTON_SIZE
  Draw.Text($sText, X, 0, W, Me.Height, Align.Center)
  Draw.Foreground = Color.LightForeground
  
  bBorder = hTabPanel.Border
  bFirst = iIndex = hTabPanel._GetFirstIndex()
  
  Select Case $iOrientation
  
    Case Align.Top
      If $bSelected Then
        If Not bFirst Or If bBorder Or If System.RightToLeft Then Draw.Line(0, Me.H - 1, 0, 0)
        If Not bFirst Or If bBorder Or If Not System.RightToLeft Then Draw.Line(Me.W - 1, 0, Me.W - 1, Me.H - 1)
        If bBorder Then Draw.Line(0, 0, Me.W - 1, 0)
      Else
        Draw.Line(0, Me.H - 1, Me.W - 1, Me.H - 1)
      Endif
      
    Case Align.Bottom
      If $bSelected Then
        If Not bFirst Or If bBorder Or If System.RightToLeft Then Draw.Line(0, 0, 0, Me.H - 1)
        If Not bFirst Or If bBorder Or If Not System.RightToLeft Then Draw.Line(Me.W - 1, Me.H - 1, Me.W - 1, 0)
        If bBorder Then Draw.Line(0, Me.H - 1, Me.W - 1, Me.H - 1)
      Else
        Draw.Line(0, 0, Me.W - 1, 0)
      Endif
      
  End Select
  
  If $bShowClose Then
    hPict = Picture[If($bInClose, "img/delete-h.png", "img/delete.png")]
    Draw.Picture(hPict, Me.W - hPict.W - 2, (Me.H - hPict.H) \ 2)
  Endif
  
  If $bSelected And If Me.Parent.HasFocus Then
    Draw.Foreground = Color.LightBackground
    If hTabPanel.Border Then
      'Draw.Line(1, Draw.H - 1, 1, 1)
      'Draw.Line(1, 1, Draw.W - 2, 1)
      'Draw.Line(Draw.W - 2, 1, Draw.W - 2, Draw.H - 1)
      Draw.Rect(2, 2, Draw.W - 4, Draw.H - 2)
      'Draw.Rect(2, 2, Draw.W - 4, Draw.H - 4)
    Else If iIndex = 0 Then
      ' Draw.Line(0, Draw.H - 1, 0, 0)
      ' Draw.Line(0, 0, Draw.W - 2, 0)
      ' Draw.Line(Draw.W - 2, 0, Draw.W - 2, Draw.H - 1)
      Draw.Rect(1, 1, Draw.W - 3, Draw.H - 1)
    Else
      ' Draw.Line(1, Draw.H - 1, 1, 0)
      ' Draw.Line(1, 0, Draw.W - 2, 0)
      ' Draw.Line(Draw.W - 2, 1, Draw.W - 2, Draw.H - 1)
      'Draw.Rect(2, 1, Draw.W - 4, Draw.H - 3)
      Draw.Rect(2, 1, Draw.W - 4, Draw.H - 1)
    Endif
  Endif
  
End

Private Function Text_Read() As String

  Return $sText

End

Public Sub UpdateLayout()

  Dim S As Integer
  Dim bClosable As Boolean = GetParent().Closable

  Select Case $iOrientation
    Case Align.Left, Align.Right
      S = Me.Parent.Font.TextWidth($sText) + 16
      If $hPicture Then S += $hPicture.W '- 4
      If bClosable Then S += BUTTON_SIZE - 4
      Me.H = S
    Case Else
      S = Me.Parent.Font.TextWidth($sText) + 16
      If $hPicture Then S += $hPicture.W '- 4
      If bClosable Then S += BUTTON_SIZE - 4
      Me.W = S
  End Select
  
  GetParent().TabBar_Arrange

End

Private Sub Text_Write(Value As String)

  $sText = Value
  UpdateLayout
  $hDrawingArea.Refresh

End

Private Function Selected_Read() As Boolean

  Return $bSelected

End

Private Sub Selected_Write(Value As Boolean)

  $bSelected = Value
  SetMouse
  $hDrawingArea.Refresh

End

Private Function Orientation_Read() As Integer

  Return $iOrientation

End

Private Sub Orientation_Write(Value As Integer)

  $iOrientation = Value
  UpdateLayout

End

Public Sub DrawingArea_MouseDown()
  
  Dim hTabPanel As TabPanel
  If Mouse.Left Then 
    hTabPanel = GetParent()
    If $bInClose And If hTabPanel.Closable Then
      hTabPanel._Close(GetIndex())
    Else
      If $bSelected Then Return
      Me.Parent.SetFocus()
      hTabPanel.Index = GetIndex()
    Endif
  Endif
  
End

Public Sub DrawingArea_MouseWheel()
  
  If Mouse.Delta > 0 Then
    Try GetParent()._MovePrevious()
  Else
    Try GetParent()._MoveNext()
  Endif
  Me.Parent.SetFocus()
  
End

Private Function Picture_Read() As Picture

  Return $hPicture

End

Private Sub Picture_Write(Value As Picture)

  $hPicture = Value
  UpdateLayout
  $hDrawingArea.Refresh

End

Public Sub DrawingArea_Enter()
  
  'Debug ">";; Me.Text
  $hDrawingArea.Tracking = True
  $bShowClose = GetParent().Closable
  $hDrawingArea.Refresh
  
End

Private Sub SetMouse()
  
  $hDrawingArea.Mouse = If($bSelected And Not $bInClose, Mouse.Default, Mouse.Pointing)
  
End


Public Sub DrawingArea_Leave()
  
  'Debug "<";; Me.Text
  $bShowClose = False
  $bInClose = False
  SetMouse
  $hDrawingArea.Tracking = False
  $hDrawingArea.Refresh
  
End

Public Sub DrawingArea_MouseMove()
  
  Dim bInClose As Boolean
  
  bInClose = (Mouse.ScreenX - Me.ScreenX) > (Me.W - BUTTON_SIZE) 
  If bInClose <> $bInClose Then
    $bInClose = bInClose
    SetMouse
    $hDrawingArea.Refresh
  Endif
  
End
