' Gambas class file

Export
Inherits UserContainer

Public Const _Properties As String = "*,Count{Range:1;256}=1,Index,Text,TextFont,Picture,Animated,Border"
Public Const _Similar As String = "TabStrip"
Public Const _IsMultiContainer As Boolean = True
Public Const _DefaultText As String = "Toolbar &1"

Event Click

Property Count As Integer
Property Index As Integer
Property Text As String
Property Picture As Picture
Property Animated As Boolean
Property Font As Font
Property TextFont As Font
Property Border As Boolean

Private $hWatcher As Watcher
Private $aCont As New _ToolPanelContainer[]
Private $iCurrent As Integer
Private $bAnimate As Boolean
Private $hPanel As Panel
Private $hTimer As Timer
Private $aTargetY As Integer[]

Public Sub _new()

  $hPanel = New Panel(Me)
  $hWatcher = New Watcher($hPanel) As "ToolPanel"

  Me._Container = $hPanel
  Me.Count = 1
  Me.Index = 0

End

Private Function Count_Read() As Integer

  Return $aCont.Count

End

Private Sub Count_Write(iCount As Integer)

  Dim iInd As Integer
  Dim hToolbar As _ToolPanelContainer
  Dim hFont As Font

  If iCount < 1 Then Error.Raise("Bad argument")
  If iCount = $aCont.Count Then Return

  If iCount < $aCont.Count Then

    For iInd = $aCont.Max To iCount Step -1
      hToolbar = $aCont[iInd]
      If hToolbar._Container.Children.Count Then Error.Raise("ToolPanel container is not empty")
    Next

    For iInd = $aCont.Max To iCount Step -1
      $aCont[iInd].Delete
    Next

    $aCont.Remove(iCount, -1)
    Index_Write(Min($iCurrent, iCount - 1))

  Else

    'hCont = ME.Container
    'ME.Container = $hPanel
    Try hFont = $aCont[0].TextFont
    
    For iInd = $aCont.Count To iCount - 1
      hToolbar = New _ToolPanelContainer($hPanel) As "ToolPanelContainer"
      hToolbar.Width = Me.Width
      hToolbar.Text = Subst(_DefaultText, CInt(iInd + 1))
      hToolBar.Tag = iInd
      hToolBar.TextFont = hFont
      $aCont.Add(hToolbar)
    Next
    'ME.Container = hCont

    'ME.Index = iCount - 1
    Index_Write(iCount - 1)

  Endif

End

Private Function Index_Read() As Integer

  Return $iCurrent

End

Private Sub Index_Write(iIndex As Integer)

  If iIndex < 0 Or iIndex >= $aCont.Count Then Error.Raise("Bad index")

  Me._Container = $aCont[iIndex]
  $iCurrent = iIndex

  MoveToolbar(Me.Visible)

End

Private Sub MoveToolbar(Optional bAnim As Boolean)

  Dim hToolBar As _ToolPanelContainer
  Dim Y As Integer
  Dim YY As Integer
  Dim iInd As Integer
  Dim iRest As Integer
  Dim bCurrent As Boolean
  Dim BH As Integer

  If bAnim Then
    If Not $bAnimate Or If Not Application.Animations Or If Me.Design Then
      bAnim = False
    Endif
  Endif

  If bAnim Then
    $aTargetY = New Integer[$aCont.Count]
  Endif

  Y = $hPanel.ClientY
  For iInd = 0 To $aCont.Max

    hToolBar = $aCont[iInd]
    If Not hToolbar.Visible Then Continue 

    hToolBar._Container.Visible = True
    
    If iInd = $iCurrent Then
      BH = $aCont[0]._GetButtonHeight()
      YY = $hPanel.ClientY + Max($hPanel.ClientH, BH * $aCont.Count + BH + Desktop.Scale * 8)
      For iRest = iInd + 1 To $aCont.Max
        If Not $aCont[iRest].Visible Then Continue
        YY -= BH
      Next
    Else
      YY = Y + hToolbar._GetButtonHeight()
    Endif

    If bAnim Then
      $aTargetY[iInd] = Y
    Else
      hToolBar.Move($hPanel.ClientX, Y, $hPanel.ClientW, YY - Y)
    Endif

    Y = YY
    
  Next
  
  If bAnim Then
    If Not $hTimer Then
      $hTimer = New Timer As "Animate"
      $hTimer.Delay = 20
    Endif
    $hTimer.Restart
  Endif
  
  For iInd = 0 To $aCont.Max

    hToolBar = $aCont[iInd]
    bCurrent = iInd = $iCurrent
    hToolBar._Container.Visible = bCurrent

  Next
  
End

Public Sub Animate_Timer()

  Dim bAnim As Boolean
  Dim iInd As Integer
  Dim hToolBar As _ToolPanelContainer
  Dim Y As Integer
  Dim YY As Integer
  
  YY = $hPanel.ClientH
  For iInd = $aCont.Max DownTo 0

    hToolBar = $aCont[iInd]
    If Not hToolbar.Visible Then Continue 
  
    Y = hToolbar.Y
    If Y <> $aTargetY[iInd] Then
      bAnim = True
      Y += ($aTargetY[iInd] - Y + Sgn($aTargetY[iInd] - Y)) \ 2
      hToolBar.Move($hPanel.ClientX, Y, hToolbar.W, YY - Y)
    Endif
    
    YY = Y
    
  Next
  
  If Not bAnim Then Stop Event
    
End


Private Function Text_Read() As String

  Return $aCont[$iCurrent].Text

End

Private Sub Text_Write(sText As String)

  $aCont[$iCurrent].Text = sText

End

Private Function Picture_Read() As Picture

  Return $aCont[$iCurrent].Picture

End

Private Sub Picture_Write(hPict As Picture)

  $aCont[$iCurrent].Picture = hPict

End

Public Sub ToolPanelContainer__Change()

  Index_Write(Last.Tag)
  Raise Click

End

Public Sub ToolPanel_Resize()

  MoveToolbar

End

Private Function Animated_Read() As Boolean

  Return $bAnimate

End

Private Sub Animated_Write(bAnim As Boolean)

  $bAnimate = bAnim

End

Public Function _get(Index As Integer) As _ToolPanelContainer

  If Index < 0 Or Index >= $aCont.Count Then Error.Raise("Bad index")
  Return $aCont[Index]

End

Private Function Font_Read() As Font

  Return Super.Font

End

Private Sub Font_Write(hFont As Font)

  Dim hToolbar As _ToolPanelContainer

  Super.Font = hFont

  For Each hToolbar In $aCont
    hToolBar.Text = hToolBar.Text
  Next

  MoveToolBar(False)

End

Private Function Border_Read() As Boolean

  Return $hPanel.Border <> Border.None

End

Private Sub Border_Write(bBorder As Boolean)

  $hPanel.Border = If(bBorder, Border.Plain, Border.None)
  MoveToolbar(False)

End

Private Function TextFont_Read() As Font

  Dim hToolbar As _ToolPanelContainer = $aCont[0]

  Return hToolBar.GetTextFont()

End

Private Sub TextFont_Write(Value As Font)

  Dim hToolbar As _ToolPanelContainer

  For Each hToolbar In $aCont
    hToolBar.TextFont = Value
  Next

  MoveToolBar(False)
  
End

'' Return the index of the first panel having a specific title.
''
'' - ~Text~ : panel title to search for.
''
'' '-1' is returned if no panel is found.

Public Sub FindPanel(Text As String) As Integer

  Dim I As Integer
  Dim hCont As _ToolPanelContainer
  
  For I = 0 To $aCont.Max
    hCont = $aCont[I]
    If hCont.Text = Text Then Return I
  Next
  Return -1
  
End
