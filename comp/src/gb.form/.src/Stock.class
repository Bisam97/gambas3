' Gambas class file

Export

Static Property Read List As String[]

Static Private $bInit As Boolean
Static Private $aIconPath As String[]
Static Private $cIconMap As Collection
Static Private $aList As String[]
Static Private $aSizeDec As Integer[] = [256, 128, 64, 48, 32, 24, 22, 16]
Static Private $aSizeInc As Integer[] = [16, 22, 24, 32, 48, 64, 128, 256]

Class _DefaultStock

Static Private Sub SearchDesktop()
  
  Dim sOutput As String
  
  If Application.Theme Then Return
  
  If Application.Env["KDE_FULL_SESSION"] Then 
    If Application.Env["KDE_SESSION_VERSION"] = "4" Then
      Application.Theme = "kde4"
    Else
      Application.Theme = "kde"
    Endif
  Else If Application.Env["GNOME_DESKTOP_SESSION_ID"] Then 
    Application.Theme = "gnome"
  Else 
    Shell "xprop -root XFCE_DESKTOP_WINDOW" To sOutput
    If sOutput Then Application.Theme = "xfce"
  Endif
  
Catch
  
End

Static Private Sub LoadMap(sMap As String)
  
  Dim hFile As File
  Dim sLig As String
  Dim aMap As String[]
  Dim cMap As New Collection
  
  If $cIconMap.Exist(sMap) Then Return
  
  hFile = Open "map" &/ sMap & ".map"
  While Not Eof(hFile)
    Line Input #hFile, sLig
    sLig = Trim(sLig)
    If InStr("';#", Left(sLig)) Then Continue
    aMap = Scan(sLig, "* *")
    If aMap.Count >= 2 Then
      cMap[aMap[0]] = aMap[1]
    Endif
  Wend
  Close #hFile
  
  $cIconMap[sMap] = cMap
  
End

Static Private Sub AddPath(sMap As String, sPath As String)
  
  If Not Exist(sPath) Then Return 
  
  If sMap Then sPath = sMap & ":" & sPath
  If Not $aIconPath.Exist(sPath) Then $aIconPath.Add(sPath)
  
End

Static Private Sub InitTheme()
  
  Dim hFile As File
  Dim sLig As String
  Dim aMap As String[]
  Dim sStyle As String
  Dim sIconPath As String
  Dim sPath As String
  Dim cMap As Collection
  Dim sTheme As String
  
  $aIconPath = New String[]
  $cIconMap = New Collection
  
  SearchDesktop
  
  Select Case Application.Theme
      
    Case "gnome"
      
      Try Exec ["gconftool", "-g", "/desktop/gnome/interface/icon_theme"] To sTheme
      
      If sTheme Then 
        sTheme = Trim(sTheme)
        AddPath("gnome", "/usr/share/icons" &/ sTheme)
        GetAllThemePath(sTheme)
        'Print $aIconPath
        'AddPath("freedesktop", "/usr/share/icons" &/ sTheme)
        'AddPath("gnome", "/usr/X11R6/share/icons" &/ sTheme)
      Endif
      
      AddPath("gnome", "/usr/share/icons/hicolor")
      AddPath("gnome", "/usr/X11R6/share/icons/hicolor")
      AddPath("gnome", "/usr/share/icons/gnome")
      'AddPath("gnome", "/opt/gnome")
      'AddPath("gnome", "stock/gtk")
      'AddPath("", "stock/qt")     
      
    Case "kde"
      
      Try Exec ["kde-config", "--path", "icon"] To sIconPath
      If sIconPath Then 
        
        sIconPath = Trim(sIconPath)
        
        'sStyle = "kdeclassic"
        Try hFile = Open "~/.kde/share/config/kdeglobals"
        If Not Error Then
          While Not Eof(hFile)
            Line Input #hFile, sLig
            If sLig = "[Icons]" Then 
              While Not Eof(hFile)
                Line Input #hFile, sLig
                If Left(sLig) = "[" Then Break
                If sLig Begins "Theme=" Then 
                  sStyle = Mid$(sLig, 7)
                  Break
                Endif 
              Wend
              Break
            Endif 
          Wend
          Close #hFile
          
          If sStyle Then
            For Each sPath In Split(sIconPath, ":")
              AddPath("kde", sPath &/ sStyle)
              AddPath("gnome", sPath &/ sStyle)
            Next
          Endif 
          
        Endif
        
        For Each sPath In Split(sIconPath, ":")
          AddPath("kde", sPath &/ "crystalsvg") ' default theme hardcoded in KDE sources
        Next
        
        ' FOR EACH sPath IN Split(sIconPath, ":")
        '   AddPath("kde", sPath &/ "kdeclassic") ' default theme hardcoded in KDE sources
        ' NEXT
        
        'AddPath("", "stock/qt")
        
      Endif
      
    Case "kde4"
      
      Try Exec ["kde4-config", "--path", "icon"] To sIconPath
      If sIconPath Then 
        
        sIconPath = Trim(sIconPath)
        
        'sStyle = "kdeclassic"
        Try hFile = Open "~/.kde4/share/config/kdeglobals"
        If Not Error Then
          While Not Eof(hFile)
            Line Input #hFile, sLig
            If sLig = "[Icons]" Then 
              While Not Eof(hFile)
                Line Input #hFile, sLig
                If Left(sLig) = "[" Then Break
                If sLig Begins "Theme=" Then 
                  sStyle = Mid$(sLig, 7)
                  Break
                Endif 
              Wend
              Break
            Endif 
          Wend
          Close #hFile
          
          If sStyle Then
            For Each sPath In Split(sIconPath, ":")
              AddPath("kde4", sPath &/ sStyle)
              AddPath("gnome", sPath &/ sStyle)
            Next
          Endif 
          
        Endif
        
        For Each sPath In Split(sIconPath, ":")
          AddPath("kde4", sPath &/ "oxygen") ' default theme hardcoded in KDE sources
        Next
        
        AddPath("kde4", "/usr/share/icons/hicolor")
        ' FOR EACH sPath IN Split(sIconPath, ":")
        '   AddPath("kde", sPath &/ "kdeclassic") ' default theme hardcoded in KDE sources
        ' NEXT
        
        'AddPath("", "stock/qt")
        
      Endif
      
    Case "xfce"
      
      Try hFile = Open "~/.config/xfce4/mcs_settings/gtk.xml"
      If Not Error Then 
        While Not Eof(hFile)
          Line Input #hFile, sLig
          If sLig Like "*<option*name=\"Net/IconThemeName\"*" Then 
            Try sTheme = Trim(Scan(sLig, "*<option*value=\"*\"*")[2])
            Break
          Endif          
        Wend
        Close #hFile
      Endif
      
      If sTheme Then 
        AddPath("gnome", "/usr/share/icons" &/ sTheme)
        AddPath("gnome", "/usr/X11R6/share/icons" &/ sTheme)
      Endif 
      
      AddPath("gnome", "/usr/share/icons/gnome")
      
  End Select 
  
  'AddPath("", "stock/qt")
  'AddPath("", "stock/default")
  
  AddPath("", "stock")
  $aIconPath.Add("#")
  
  $bInit = True
  
End

Static Public Function GetSize(Size As String) As Integer
  
  Dim iSize As Integer
  
  Select Case Size
    Case "small"
      iSize = 16 'CInt(Desktop.Scale * 5 / 8 + 0.5) * 4
    Case "medium"
      iSize = 22 'CInt(Desktop.Scale * 5 / 8 * 1.5 + 0.5) * 4 
    Case "large"
      iSize = 32 'CInt(Desktop.Scale * 5 / 8 + 0.5) * 8
    Case "huge"
      iSize = 48 'CInt(Desktop.Scale * 5 / 8 * 1.5 + 0.5) * 8
    Case Else 
      Try iSize = CInt(Size)
  End Select
  
  Return iSize
  
End

Static Public Function _get(Key As String) As Picture
  
  Dim sPrefix As String
  Dim sPath As String
  Dim hPict As Picture
  Dim iPos As Integer
  Dim iSize As Integer
  Dim sSize As String
  Dim iTry As Integer
  Dim hImage As Image
  Dim sTemplate As String
  Dim sFile As String
  Dim sMap As String
  Dim sImagePath As String
  
  'IF Right(Key, 4) <> ".png" THEN Key &= ".png"
  
  If Not $bInit Then InitTheme
  
  iSize = 16
  iPos = InStr(Key, "/")
  If iPos Then 
    sSize = Left$(Key, iPos - 1)
    Key = Mid$(Key, iPos + 1)
    iSize = GetSize(sSize)
  Endif
  
  For Each sPath In $aIconPath
    
    If sPath = "#" Then
      
      If Not Stock.List.Exist(Key) Then Break
      'Debug "Using gb.form.stock component for icon '"; Key; "'"
      Component.Load("gb.form.stock")
      sFile = Key & ".png"
      
    Else
      
      iPos = InStr(sPath, ":")
      If iPos Then 
        sMap = Left$(sPath, iPos - 1)
        LoadMap(sMap)  
        sFile = $cIconMap[sMap][Key]
        If Not sFile Then sFile = Key & ".png"
        sPath = Mid$(sPath, iPos + 1)
      Else 
        sFile = Key & ".png"
      Endif
      
      If Not Exist(sPath) Then Continue
      
    Endif
    
    For Each sFile In Split(sFile, ";")
      
      If sPath = "#" Then
        sTemplate = "&1" &/ sFile
      Else If Left(sPath) = "/" Then   
        If sMap = "freedesktop" Then 
          sTemplate = sPath &/ File.Dir(sFile) &/ "&1" &/ File.BaseName(sFile) & ".svg"
        Else
          sTemplate = sPath &/ "&1x&1" &/ sFile
        Endif
      Else 
        sTemplate = sPath &/ "&1" &/ sFile
      Endif 
      
      sImagePath = Subst(sTemplate, iSize)
      
      If sMap = "freedesktop" Then 
        Try hPict = ImageFromSvg(sImagePath, iSize).Picture
      Else
        Try hPict = Picture[sImagePath]
      Endif
      If hPict Then Return hPict
      
      hImage = Null
      
      If Exist(sPath &/ "scalable") Then
        sImagePath = sPath &/ "scalable"
        If Not sMap = "freedesktop" Then sFile = Left(sFile, -4)
        Try hImage = ImageFromSvg(sImagePath &/ sFile & ".svg", iSize)
      Endif
      
      For Each iTry In $aSizeInc
        If iTry < iSize Then Continue
        If sPath = "#" Then                                       'load image from stock
        Try hImage = _DefaultStock.Load(Subst(sTemplate, iTry))
      Else
        If sMap = "freedesktop" Then 
          Try hImage = ImageFromSvg(Subst(sTemplate, iTry), iSize)
        Else
          Try hImage = Image.Load(Subst(sTemplate, iTry))
        Endif
      Endif
      If Not Error Then Break
    Next
    
    If Not hImage Then                                           'oups I don't find the picture (bad size)
    
    For Each iTry In $aSizeDec                                  'Try to see if yhis image exist in other size
      If iTry >= iSize Then Continue
      If sPath = "#" Then
        Try hImage = _DefaultStock.Load(Subst(sTemplate, iTry))
      Else
        If sMap = "freedesktop" Then 
          Try hImage = ImageFromSvg(Subst(sTemplate, iTry), iSize)
        Else
          Try hImage = Image.Load(Subst(sTemplate, iTry))
        Endif
      Endif
      If Not Error Then Break
    Next
    
  Endif
  
  If hImage Then  
    hPict = hImage.Stretch(iSize, iSize).Picture
    Picture[Subst(sTemplate, iSize)] = hPict
    Return hPict
  Endif
  
Next

Next

End

Static Private Function List_Read() As String[]
  
  If Not $aList Then 
    $aList = Split(File.Load("map/map"), "\n", "", True)
  Endif 
  
  Return $aList  
  
End

Static Private Sub GetAllThemePath(sTheme As String)
  
  Dim sLine As String
  
  AddPath("freedesktop", "/usr/share/icons" &/ sTheme)
  
  For Each sLine In Split(File.Load("/usr/share/icons" &/ sTheme &/ "index.theme"), "\n")
    
    If InStr(sLine, "Inherits") Then 
      For Each sTheme In Split(Scan(sLine, "*=*")[1])
        GetAllThemePath(sTheme)
      Next
      Break
    Endif
    
  Next
  
End

Static Private Function ImageFromSvg(Path As String, Size As Integer) As Image
  
  Dim hSvg As SvgImage
  Dim hImage As Image
  
  'Debug Path;; Size
  'If Not Exist(Path) Then Error.Raise("")
  hSvg = SvgImage.Load(Path)
  
  hImage = New Image(Size, Size, Color.Transparent)
  Paint.Begin(hImage)
  Paint.Scale(Size / hSvg.Width, Size / hSvg.Height)
  hSvg.Paint()
  Paint.End
  
  Return hImage
  
End
