' Gambas class file

Public DirView As DirView 
Public FileView As FileView

Event Change
Event {Select}
Event GetIcon(Path As String)
Event ShowHidden
Event Cancel
Event OK
'EVENT ShowHiddenChange

Private $bView As Boolean
Private $sActivate As String
Private $aFilter As String[]
Private $bFile As Boolean
Private $iMaxWidth As Integer
Private $hBookmarkList As CBookmarkList
Private $hCurrentBookmark As CBookmark
Private $bShowBookmark As Boolean
Private mnuEditBookmark As Menu
Private mnuShowHiddenFiles As Menu
Private mnuShowDetailed As Menu
Private $iIconSize As Integer
Private $hWatch As Watcher

Static Private $aHistory As New String[]
Static Private $aIconSize As Integer[] = [16, 22, 32, 48, 64, 96, 128, 192, 256]

Public Sub _new(Optional bFile As Boolean)

  DirView = dvwChoose
  FileView = fvwChoose
  
  $bShowBookmark = True
  $hBookmarkList = New CBookmarkList

  sldIconSize.Value = $aIconSize.Find(32)

  btnParent.Picture = Main.GetArrow(Align.Left, 16).Picture
  
  $hWatch = New Watcher(fvwChoose) As "FileView"

  FillMenu

  SetRoot()
  
  $bFile = bFile
  
  If Not bFile Then 
    UpdateFilterPanel
  Else
    btnView_Click
    btnView.Visible = False
    txtFile.Visible = True
    cmbFilter.Visible = True
    SetMulti(False)
    SetFont(Me.Font)
    SetFilter()
  Endif
  
  SetBookmark($hBookmarkList.FindBest(System.User.Home))
  
End


' Public Sub txtDir_Change()
' 
'   $sActivate = txtDir.Text
'   dvwChoose.Current = txtDir.Text
' 
' End

' Public Sub txtDir_Click()
' 
'   'cmbDir_Activate
' 
' End

Private Sub UpdateLabelDir()
  
  Dim sDir As String

  sDir = Mid$(dvwChoose.Current, Len(dvwChoose.Root) + 1)

  If Left(sDir) <> "/" Then sDir = "/" & sDir
  'If Left(sDir) = "/" Then sDir = Mid$(sDir, 2)
  sDir = Trim(Replace(sDir, "/", "  /  "))
  
  If sDir = "/" Then
    txtDir.Text = ""
    txtDir.Hide
    btnParent.Hide
  Else
    txtDir.Text = sDir
    txtDir.Show
    btnParent.Show
  Endif
  
End


Public Sub dvwChoose_Click()

  If panView.Visible Then 
    fvwChoose.Dir = dvwChoose.Current
    fvwChoose.Reload
  Endif

  UpdateLabelDir

  ' IF $sActivate THEN
  '   IF $sActivate = dvwChoose.Current THEN
  '     IF cmbDir.Find($sActivate) = 0 THEN cmbDir.Add($sActivate)
  '   ENDIF
  '   $sActivate = ""
  ' ENDIF

  If txtFile.Visible And If txtFile.ReadOnly Then
    txtFile.Text = ""
  Endif

  Raise Change

End


Public Sub Form_Open()

  'DirView = dvwChoose
  'FileView = fvwChoose

  UpdateLabelDir
  If $bFile Then txtFile.SetFocus
  Raise Change

End

Private Sub UpdateZoom()
  
  panIconSize.Visible = Not fvwChoose.ShowDetailed And $bView And fvwChoose.Visible
  
End


Public Sub btnView_Click()

  $bView = Not $bView
  panView.Visible = $bView
  mnuShowDetailed.Visible = $bView
  If $bView Then
    fvwChoose.Dir = dvwChoose.Current
    splChoose.Layout = [1, 2]
  Endif
  UpdateZoom

End

Public Sub mnuShowDetailed_Click()

  fvwChoose.ShowDetailed = Not fvwChoose.ShowDetailed
  mnuShowDetailed.Checked = fvwChoose.ShowDetailed
  UpdateZoom
  ' If fvwChoose.ShowDetailed Then
  '   btnDetailed.Picture = Picture["icon:/small/view-icon"]
  ' Else
  '   btnDetailed.Picture = Picture["icon:/small/view-detail"]
  ' Endif

End

Public Sub btnParent_Click()

  dvwChoose.Current = File.Dir(dvwChoose.Current)

End

' Private Sub AddToHistory(sDir As String)
'   
'   Dim iInd As Integer
'   
'   iInd = $aHistory.Find(sDir)
'   If iInd >= 0 Then $aHistory.Remove(iInd)
'   $aHistory.Add(sDir)
'   While $aHistory.Count > 16
'     $aHistory.Remove(0)
'   Wend
' 
'   Object.Lock(txtDir)
'   txtDir.List = $aHistory  
'   Object.Unlock(txtDir)
'   
' End

Private Sub UpdateBookmarkButton()
  
  If IsBookmarkVisible() Then
    btnBookmark.Text = $hCurrentBookmark.Name
    btnBookmark.Picture = Picture[$hCurrentBookmark.Icon]
    mnuEditBookmark.Enabled = $hBookmarkList.GetEditableCount() > 0
  Else
    btnBookmark.Text = File.Name(dvwChoose.Root)
    btnBookmark.Picture = dvwChoose.Picture 'Picture["icon:/small/directory"]
  Endif
  
End


Private Sub SetBookmark(hBookmark As CBookmark)
  
  If Not hBookmark Then Return
  
  $hCurrentBookmark = hBookmark
  
  SetRoot(hBookmark.Path)
  dvwChoose.Picture = Picture[hBookmark.Icon]
  UpdateBookmarkButton
  
End


Public Sub SetDir(sDir As String)

  If IsBookmarkVisible() Then
    SetBookmark($hBookmarkList.FindBest(sDir))
  Endif
    
  dvwChoose.Current = sDir

End

Public Function GetDir() As String

  Return dvwChoose.Current

End

Public Function GetShowDetailed() As Boolean

  Return fvwChoose.ShowDetailed

End

Public Sub SetShowDetailed(bShowDetailed As Boolean)

  If fvwChoose.ShowDetailed <> bShowDetailed Then mnuShowDetailed_Click

End

Public Function GetFileVisible() As Boolean

  Return panView.Visible

End

Public Sub SetFileVisible(bVisible As Boolean)

  If panView.Visible <> bVisible Then btnView_Click

End

Public Function GetShowHidden() As Boolean

  Return fvwChoose.ShowHidden

End


Public Sub mnuShowHiddenFiles_Click()

  fvwChoose.ShowHidden = Not fvwChoose.ShowHidden
  dvwChoose.ShowHidden = fvwChoose.ShowHidden
  mnuShowHiddenFiles.Checked = fvwChoose.ShowHidden
  Raise ShowHidden

End


Public Sub SetShowHidden(bShowHidden As Boolean)

  mnuShowHiddenFiles.Checked = bShowHidden
  mnuShowHiddenFiles_Click

  'IF fvwChoose.ShowHidden <> bShowHidden THEN btnShowHidden_Click

End

Public Function GetMulti() As Boolean

  Return fvwChoose.Mode = Select.Multiple

End

Public Sub SetMulti(bMulti As Boolean)

  fvwChoose.Mode = If(bMulti, Select.Multiple, Select.Single)

End

Public Function GetPath() As String

  Dim sPath As String
  'Dim sExt As String

  If GetMulti() Then Return

  If txtFile.Text Then 
    sPath = dvwChoose.Current &/ txtFile.Text
    ' If chkExt.Value Then 
    '   Try sExt = Scan(Split($aFilter[cmbFilter.Index], ";,", Chr$(34), True)[0], "\\*.*")[0]
    '   If sExt Then sPath = File.SetExt(sPath, sExt)
    ' Endif
    Return sPath
  Endif

End

Public Sub SetPath(sPath As String)
  
  If txtFile.ReadOnly Then
    SetDir(sPath)
  Else
    SetDir(File.Dir(sPath))
  Endif

  If GetMulti() Then Return 
  
  'DEBUG dvwChoose.Current;; File.Dir(sPath)
  'IF dvwChoose.Current = File.Dir(sPath) THEN
  fvwChoose.Current = File.Name(sPath)
  If txtFile.ReadOnly Then
    txtFile.Text = fvwChoose.Current
  Else 
    txtFile.Text = File.Name(sPath)
  Endif
  'ENDIF
  
End


Public Function GetPaths() As String[]

  Dim aPath As New String[]
  Dim sFile As String

  If GetMulti() Then

    For Each sFile In fvwChoose.Selection
      aPath.Add(dvwChoose.Current &/ sFile)
    Next

  Endif

  Return aPath

End


Public Sub fvwChoose_Select()

  'IF txtFile.Visible THEN 
  txtFile.Text = fvwChoose.Current
  If $bFile Then Raise Change
  
End

Public Sub SetShowDirectory(bShow As Boolean)

  fvwChoose.ShowDirectory = bShow

End

Public Function GetShowDirectory() As Boolean

  Return fvwChoose.ShowDirectory

End


Public Sub SetFont(hFont As Font)

  'fvwChoose.Font = hFont
 ' DEC fvwChoose.Font.Grade

End

Public Sub fvwChoose_Activate()

  If IsDir(dvwChoose.Current &/ fvwChoose.Current) Then
    dvwChoose.Current &/= fvwChoose.Current
  Else
    Raise {Select}
  Endif

End

Public Sub SetFilter(Optional aFilter As String[])

  Dim iInd As Integer

  cmbFilter.Clear
  $aFilter = New String[]

  If aFilter Then

    If aFilter.Count And 1 Then
      aFilter.Remove(aFilter.Max)
    Endif

    For iInd = 0 To aFilter.Max Step 2
      If aFilter[iInd] = "*" Then Continue 
      $aFilter.Add(aFilter[iInd])
      cmbFilter.Add(aFilter[iInd + 1] & " (" & aFilter[iInd] & ")")
    Next

  Endif

  $aFilter.Add("*")
  cmbFilter.Add(("All files (*)"))

  cmbFilter.Index = 0
  UpdateFilterPanel

End

Public Sub SetFilterIndex(iInd As Integer)
  
  If iInd < 0 Then iInd = cmbFilter.Count - 1
  Try cmbFilter.Index = iInd
  
End

Public Sub GetFilterIndex() As Integer
  
  Return cmbFilter.Index
  
End


Public Function GetFilter() As String[]

  Dim iInd As Integer
  Dim aFilter As New String[]

  For iInd = 0 To $aFilter.Max
    aFilter.Add($aFilter[iInd])
    aFilter.Add(cmbFilter[iInd].Text)
  Next

  Return aFilter

End


Public Sub cmbFilter_Click()

  fvwChoose.Filter = Split($aFilter[cmbFilter.Index], ";,", Chr$(34), True)

End

Public Sub dvwChoose_Activate()

  If Not $bFile Then Raise {Select}

End

Public Sub fvwChoose_Icon(Path As String)

  Raise GetIcon(Path)    

End

Public Sub dvwChoose_Icon(Path As String)

  Raise GetIcon(Path)    

End


Public Sub SetReadOnly(bReadOnly As Boolean)
  
  If Not $bFile Then Return 
  txtFile.ReadOnly = bReadOnly
  
End

Public Sub GetReadOnly() As Boolean
  
  If Not $bFile Then Return
  Return txtFile.ReadOnly
  
End

Public Sub SetPicture(hPict As Picture)

  dvwChoose.Picture = hPict
  If Not IsBookmarkVisible() Then UpdateBookmarkButton
  
End 

Public Sub GetPicture() As Picture
  
  Return dvwChoose.Picture
  
End

Public Sub txtFile_GotFocus()

  If Not txtFile.ReadOnly Then txtFile.SelectAll

End

Private Sub GetRealLink(sLink As String) As String
  
  If Left(sLink) <> "/" Then sLink = Mid$(sLink, 2)
  Return sLink  
  
End


Public Sub mnuBookmark_Click()

  Dim hMenu As Menu = Last
  Dim sLink As String = hMenu.Tag
  Dim hBookmark As CBookmark = $hBookmarkList.FindBookmark(sLink)

  SetBookmark(hBookmark)
  
End


Public Sub SetRoot(Optional sRoot As String)
  
  If sRoot = dvwChoose.Root Then Return
  dvwChoose.Root = sRoot
  btnBookmark.Tooltip = sRoot
  UpdateBookmarkButton
  
End

Public Sub GetRoot() As String
  
  Return dvwChoose.Root
  
End

Public Sub SetPrivateBookmarks(aBookmark As Collection[])
  
  $hBookmarkList.Private = aBookmark
  FillMenu
  
End

Public Sub GetPrivateBookmarks() As Collection[]
  
  Return $hBookmarkList.Private
  
End

Public Sub mnuAddBookmark_Click()

  Dim sLink As String = dvwChoose.Current
  
  If $hBookmarkList.FindBookmark(sLink) Then Return 
  
  Inc Application.Busy
  $hBookmarkList.AddBookmark(sLink)
  $hBookmarkList.Save
  FillMenu
  SetRoot(sLink)
  
Finally
  Dec Application.Busy

End

Public Sub mnuRemoveBookmark_Click()

  Inc Application.Busy
  $hBookmarkList.RemoveBookmark(dvwChoose.Root)
  $hBookmarkList.Save
  FillMenu
  SetDir(dvwChoose.Current)
  
Finally
  Dec Application.Busy

End

Public Sub GetSettings() As Variant[]
  
  If Not $bFile Then 
    Return [CVariant(dvwChoose.Root), dvwChoose.Current, $bView, splChoose.Layout, fvwChoose.ShowHidden, fvwChoose.Settings, fvwChoose.IconSize]
  Else
    Return [CVariant(dvwChoose.Root), dvwChoose.Current, fvwChoose.Current, $bView, splChoose.Layout, fvwChoose.ShowHidden, fvwChoose.Settings, GetFilterIndex(), fvwChoose.IconSize]
  Endif 

End

Public Sub SetSettings(aVar As Variant[])
  
  'Dim bBookmark As Boolean = True
  Dim iZoom As Integer = -1
  
  If Not $bFile Then 
  
    'Try bBookmark = aVar[6]
    Try SetRoot(aVar[0])
    Try SetDir(aVar[1])
    Try $bView = Not aVar[2]
    If Not Error Then btnView_Click
    splChoose.Layout = aVar[3]
    Try fvwChoose.ShowHidden = aVar[4]
    Try fvwChoose.Settings = aVar[5]
    Try iZoom = $aIconSize.Find(aVar[6])
    If iZoom >= 0 Then sldIconSize.Value = iZoom
    
  Else
  
    'Try bBookmark = aVar[8]
    Try SetRoot(aVar[0])
    Try SetDir(aVar[1])
    Try fvwChoose.Current = aVar[2]
    Try $bView = Not aVar[3]
    If Not Error Then btnView_Click
    Try splChoose.Layout = aVar[4]
    Try fvwChoose.ShowHidden = aVar[5]
    Try fvwChoose.Settings = aVar[6]
    Try SetFilterIndex(aVar[7])
    Try iZoom = $aIconSize.Find(aVar[8])
    If iZoom >= 0 Then sldIconSize.Value = iZoom
    
  Endif

  ShowBookmark($bShowBookmark)
  
End

Public Sub mnuCreateDirectory_Click()

  dvwChoose.NewFolder

End


Public Sub mnuRefresh_Click()

  dvwChoose.Reload
  fvwChoose.Reload
  
End

Public Sub splChoose_Resize()

  'DEBUG splChoose.Layout  

End

Public Sub SetSplitter(bOn As Boolean)
  
  btnView.Visible = bOn
  
End

Public Sub GetSplitter() As Boolean
  
  Return btnView.Visible
  
End

Public Sub Reload()
  
  mnuRefresh_Click
  
End

Public Sub SetDialogButtonVisible(bVisible As Boolean)
  
  panButton.Visible = bVisible
  UpdateFilterPanel
  
End

Public Sub IsDialogButtonVisible() As Boolean
  
  Return panButton.Visible 
  
End


' Public Sub ShowAutomaticExtension(bShow As Boolean)
'   
'   chkExt.Visible = bShow
'   
' End
' 
' Public Sub SetAutomaticExtension(bVal As Boolean)
'   
'   chkExt.Value = bVal
'   
' End

Public Sub btnOK_Click()

  Raise Select

End

Public Sub btnCancel_Click()

  Raise Cancel

End

Private Sub GetHeight(hCont As Container) As Integer
  
  Dim H As Integer
  Dim hChild As Control
  
  For Each hChild In hCont.Children
    If hChild.Visible Then H = Max(H, hChild.Y + hChild.H)
  Next
  
  Return H
  
End


Public Sub UpdateFilterPanel()

  Dim H As Integer

  Object.Lock(panFilter)
  
  cmbFilter.Enabled = cmbFilter.Count > 1
  cmbFilter.Visible = txtFile.Visible
  If Not cmbFilter.Enabled And If Not panButton.Visible Then cmbFilter.Hide

  If panButton.Visible Then
    panFilter.H = Max(panButton.H, GetHeight(panExtension))
    panFilter.Show
  Else
    H = GetHeight(panExtension)
    If H Then
      panFilter.H = H
      panFilter.Show
    Else
      panFilter.Hide
    Endif
  Endif
  
  Object.Unlock(panFilter)

End

Public Sub GetExtensionContainer() As Container
  
  Return panExtension
  
End

Public Sub panExtension_Arrange()

  UpdateFilterPanel

End

Private Sub AddBookmarkMenu(hBookmark As CBookmark)
  
  Dim hMenu As Menu
  
  hMenu = New Menu(mnuBookmark) As "mnuBookmark"
  hMenu.Tag = hBookmark.Link
  hMenu.Text = hBookmark.Name
  hMenu.Picture = Picture[hBookmark.Icon]
  
End


Private Sub FillMenu()
  
  Dim hBookmark As CBookmark
  
  Dim iInd As Integer
  Dim sLink As String
  Dim sName As String
  Dim sIcon As String
  Dim hSettings As Settings 
  Dim aBookmark As String[]
  Dim hMenu As Menu
  
  mnuBookmark.Children.Clear
  
  If IsBookmarkVisible() Then 
  
    For Each hBookmark In $hBookmarkList
      AddBookmarkMenu(hBookmark)
    Next
    
    hMenu = New Menu(mnuBookmark)
    
    hMenu = New Menu(mnuBookmark) As "mnuAddBookmark"
    hMenu.Text = ("&Bookmark current directory")
    hMenu.Picture = Picture["icon:/small/add"]
    
    'hMenu = New Menu(mnuBookmark) As "mnuRemoveBookmark"
    'hMenu.Text = ("&Remove bookmark")
    'hMenu.Picture = Picture["icon:/small/remove"]
    
    hMenu = New Menu(mnuBookmark) As "mnuEditBookmark"
    hMenu.Text = ("&Edit bookmarks...")
    hMenu.Picture = Picture["icon:/small/edit"]
    mnuEditBookmark = hMenu
    
    hMenu = New Menu(mnuBookmark)
    
  Endif
  
  hMenu = New Menu(mnuBookmark) As "mnuShowDetailed"
  hMenu.Text = ("Show &details")
  hMenu.Checked = fvwChoose.ShowDetailed
  hMenu.Visible = fvwChoose.Visible
  mnuShowDetailed = hMenu
    
  hMenu = New Menu(mnuBookmark) As "mnuShowHiddenFiles"
  hMenu.Text = ("Show &hidden files")
  hMenu.Checked = fvwChoose.ShowHidden
  hMenu.Visible = fvwChoose.Visible
  mnuShowHiddenFiles = hMenu
  
  hMenu = New Menu(mnuBookmark) As "mnuCreateDirectory"
  hMenu.Text = ("&Create directory")
  hMenu.Picture = Picture["icon:/small/new-dir"]
  
  hMenu = New Menu(mnuBookmark) As "mnuRefresh"
  hMenu.Text = ("&Refresh")
  hMenu.Picture = Picture["icon:/small/refresh"]
  
End

Public Sub IsBookmarkVisible() As Boolean
  
  Return $bShowBookmark 'btnBookmark.Enabled
  
End

Public Sub ShowBookmark(bShow As Boolean)
  
  'If $bShowBookmark = bShow Then Return
  $bShowBookmark = bShow
  FillMenu
  UpdateBookmarkButton
  
End

Public Sub mnuEditBookmark_Click()
  
  'If Not $hCurrentBookmark Then Return
  'If Not $hCurrentBookmark.IsEditable() Then Return
  FEditBookmark.Run($hBookmarkList)
  
  $hBookmarkList.Save
  FillMenu
  UpdateBookmarkButton
  
End

Public Sub btnBookmark_Click()

  SetDir($hCurrentBookmark.Path)

End

Public Sub dvwChoose_KeyPress()

  If dvwChoose.Renaming Then Return

  Select Case Key.Code
    Case Key.F5 
      mnuRefresh_Click
    Case Key.F4
      mnuShowHiddenFiles_Click
    Case Key.F6
      mnuShowDetailed_Click
    Case Key.BackSpace
      btnParent_Click
  End Select

End

Public Sub fvwChoose_KeyPress()

  dvwChoose_KeyPress

End

Public Sub dvwChoose_Menu()

  mnuBookmark.Popup

End

Public Sub fvwChoose_Menu()

  mnuBookmark.Popup

End

Public Sub sldIconSize_Change()

  fvwChoose.IconSize = $aIconSize[sldIconSize.Value]
  sldIconSize.Tooltip = fvwChoose.IconSize

End

Public Sub btnZoomOut_Click()

  Dec sldIconSize.Value

End

Public Sub btnZoomIn_Click()

  Inc sldIconSize.Value

End

Public Sub FileView_Show()
  
  FillMenu
  UpdateZoom
  
End

Public Sub FileView_Hide()
  
  FileView_Show
  
End
