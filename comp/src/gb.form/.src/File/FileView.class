' Gambas class file

Export
Inherits UserControl

Class Watch

Public Const _Properties As String = "*,Border=True,Style{FileView.Normal;Compact;Detailed}=Normal,Mode{Select.*}=Single,Dir,ShowHidden,ShowDirectory,ShowPreview"
Public Const _DefaultEvent As String = "Click"
Public Const _Group As String = "View"

Public Enum Normal, Compact, Detailed

Event {Select}
Event Click
Event Activate
Event Menu
Event Icon(Path As String)
Event Refresh
Event Rename(OldName As String, NewName As String)
Event Filter(Name As String, Info As Stat)

Property {Dir} As String
Property Current As String

'' Return the current selected path.
''
'' It's an equivalent of '[../dir] &/ [../current]'.
Property Read Path As String

'' Return the absolute paths of the selected elements
Property Read Paths As String[]

Property ShowHidden As Boolean
Property ShowDirectory As Boolean
Property Mode As Integer
Property ShowDetailed As Boolean
Property ShowPreview As Boolean
Property Style As Integer

Property Selection As String[]
Property Filter As String[]
Property Icon As Picture
Property IconSize As Integer
Property Border As Boolean
Property Settings As Variant[]
Property Read Count As Integer
Property Background As Integer
Property Foreground As Integer
Property Read Selected As Boolean

Property Read FileCount As Integer Use $nFile
Property Read DirCount As Integer Use $nDir
Property Read TotalSize As Long Use $iSize

'' Return or set the size limit in bytes of files that will be previewed.
''
'' - If 'MaxPreviewSize' is zero (the default), the size limit is 4Mb.
'' - If 'MaxPreviewSize' is negative, there is no size limit.

Property MaxPreviewSize As Integer Use $iMaxPreviewSize

'' Return or set the orientation of the icon view.
''
'' It can be one of the following value:
'' - [Arrange.Horizontal](/comp/gb.qt4/arrange/horizontal)
'' - [Arrange.Vertical](/comp/gb.qt4/arrange/vertical)
''
'' The default orientation is vertical.

Property Orientation As Integer

Static Private $cExt As New Collection(gb.IgnoreCase)

Private Const PREFIX_DIR As String = "0"
Private Const PREFIX_FILE As String = "1"

Private $sDir As String
Private $bShowHidden As Boolean
Private $bShowDir As Boolean
Private $bShowPreview As Boolean

Private $hIconView As IconView
Private $hInfoFont As Font

Private $hColumnView As ColumnView
Private $sSortDir As String
Private $iSort As Integer
Private $bAsc As Boolean = True

Private $hVoidView As TextLabel

Private $aFilter As String[]
Private $hPict As Picture
Private $hRefresh As Timer
Private $bRefreshTriggered As Boolean
Private $bDesktopIsLoaded As Boolean

Private $iIconSizeNormal As Integer
Private $iIconSizeCompact As Integer

Private $hPreview As CTaskPreview
Private $iPreviewMax As Integer
Private $iPreviewCount As Integer

Private $hEnsureVisible As Timer
Private $hWatch As Watch
Private $bWatch As Boolean
Private $bRefreshIcon As Boolean
Private $bRefreshAll As Boolean
Private $hWatcher As Watcher
Private $bVisible As Boolean
Private $bInvalidate As Boolean

Static Private $iIconExecSize As Integer
Static Private $hIconExec As Picture

Private picLock As PictureBox

Private $DX As Integer
Private $DY As Integer

Private $sHighlight As String
Private $hHighlightPicture As Picture

Private $hBorder As Panel
Private $hProgress As ProgressBar
Private $bRefreshPreview As Boolean

Static Public Sub _init()
  
  $cExt["html"] = "html"
  $cExt["htm"] = "html"
  $cExt["css"] = "css"
  $cExt["js"] = "js"
  $cExt["xml"] = "xml"
  
  $cExt["tar"] = "archive"
  $cExt["gz"] = "archive"
  $cExt["tgz"] = "archive"
  $cExt["bz2"] = "archive"
  $cExt["z"] = "archive"
  $cExt["zip"] = "archive"
  $cExt["xz"] = "archive"
  
  $cExt["txt"] = "text"
  $cExt["log"] = "text"
  $cExt["json"] = "text"
  
  $cExt["mp3"] = "audio"
  $cExt["aac"] = "audio"
  $cExt["ogg"] = "audio"
  $cExt["oga"] = "audio"
  $cExt["flac"] = "audio"
  $cExt["wav"] = "audio"
  
  $cExt["mpg"] = "video"
  $cExt["mpeg"] = "video"
  $cExt["avi"] = "video"
  $cExt["wmv"] = "video"
  $cExt["mov"] = "video"
  $cExt["mp4"] = "video"
  
  $cExt["gambas"] = "gambas"
  $cExt["gbs"] = "gambas"
  
  $cExt["c"] = "c"
  $cExt["cpp"] = "cpp"
  $cExt["h"] = "h"
  
  $cExt["deb"] = "package"
  $cExt["rpm"] = "package"
  
  $cExt["iso"] = "cdrom"
  
  $cExt["jpg"] = "image"
  $cExt["jpeg"] = "image"
  $cExt["png"] = "image"
  $cExt["gif"] = "image"
  $cExt["xpm"] = "image"
  $cExt["bmp"] = "image"
  $cExt["ico"] = "image"
  $cExt["xcf"] = "image"
  $cExt["svg"] = "image"
  $cExt["svgz"] = "image"
  $cExt["webp"] = "image"
  
  $cExt["pdf"] = "pdf"
  
  $cExt["ttf"] = "font"
  $cExt["otf"] = "font"
  $cExt["bdf"] = "font"

End

Static Public Sub _exit()
  
  Try DirCache.Exit
  
End

Public Sub _new()
  
  $bDesktopIsLoaded = Component.IsLoaded("gb.desktop")
  $bWatch = Component.IsLoaded("gb.inotify")
  $hWatcher = New Watcher(Me) As "Watcher"
  
  $iIconSizeCompact = 16
  $iIconSizeNormal = 64
  
  $hBorder = New Panel(Me)
  $hBorder.Arrangement = Arrange.Vertical
  $hBorder.Border = Border.Plain
  
  With $hIconView = New IconView($hBorder) As "View"
    .Sorted = True
    .IconLines = 3
    .Drop = True
    .Expand = True
    .Border = False
    '.Orientation = Arrange.Horizontal
  End With
  
  With $hColumnView = New ColumnView($hBorder) As "View"
    .Columns[0].Text = (("Name"))
    .AddColumn(("Size"),, Align.Right)
    .AddColumn(("Last modified"))
    .AddColumn(("Permissions"))
    .Visible = False
    .Sorted = True
    .Resizable = True
    .AutoResize = False
    .Drop = True
    .Expand = True
    .Border = False
    .Columns.Padding = Desktop.Scale
  End With
  
  $hProgress = New ProgressBar($hBorder)
  $hProgress.Ignore = True
  $hProgress.H = 1 + Desktop.Scale \ 4
  $hProgress.Border = False
  $hProgress.Label = False
  $hProgress.Hide
  
  $hVoidView = New TextLabel(Me) As "View"
  $hVoidView.Alignment = Align.Center
  $hVoidView.Text = ("This folder is empty.")
  $hVoidView.Font.Grade = 2
  $hVoidView.Foreground = Color.LightForeground
  $hVoidView.Visible = False
  $hVoidView.Ignore = True
  $hVoidView.AutoResize = True
  
  Me.Proxy = GetView()
  
  $hRefresh = New Timer As "Refresh"
  $hEnsureVisible = New Timer As "EnsureVisible"
  
  RefreshViewLater
  
End

Private Function CheckFilter(sFile As String) As Boolean
  
  Dim sFilter As String
  
  If Not $aFilter Then Return
  
  For Each sFilter In $aFilter
    If sFile Like sFilter Then Return
  Next
  
  Return True
  
End

Private Sub GetMimeIcon(sPath As String, iSize As Integer) As Picture
  
  Try Return DirCache[File.Dir(sPath)].GetMimeIcon(File.Name(sPath), iSize).Picture

End

Private Sub GetIcon(sPath As String, iSize As Integer) As Picture
  
  Dim sIcon As String
  Dim hPict As Picture
  
  $hPict = Null
  Try Raise Icon(sPath)
  If $hPict Then Return $hPict
  
  If IsDir(sPath) Then 
    hPict = DirView._GetIcon(sPath, iSize)
    If Not hPict Then hPict = Picture["icon:/" & CStr(iSize) &/ "directory"]
    Goto LOCK_ICON
  Endif
  
  'If $bShowPreview And If $cPreview.Exist(sPath) Then Return $cPreview[sPath].Picture
  
  ' If $bShowPreview And If $aImgExt.Exist(File.Ext(sPath), gb.IgnoreCase) < 0 Then
  '   If Stat(sPath).Size <= 65536 Then 
  '   
  '     Try hImage = Image.Load(sPath)
  '     If Not Error Then
  '       If Not (hImage.Width = iSize And hImage.Height = iSize) Then 
  '         If hImage.Width > hImage.Height Then 
  '           hImage = hImage.Stretch(iSize, (iSize * hImage.Height) \ hImage.Width)
  '         Else
  '           hImage = hImage.Stretch((iSize * hImage.Width) \ hImage.Height, iSize)
  '         Endif
  '       Endif
  '       
  '       hIcon = New Image(hImage.W + 4, hImage.H + 4, Color.Transparent)
  '       Paint.Begin(hIcon)
  '       Paint.AntiAlias = False
  '       Paint.LineWidth = 2
  '       Paint.Rectangle(0, 0, hIcon.W, hIcon.H)
  '       Paint.Background = Color.Merge(GetView().Background, Color.Gray)
  '       Paint.Stroke
  '       Paint.End
  '       hIcon.DrawImage(hImage, 2, 2)
  '       
  '       Return hIcon.Picture
  '     Else
  '       Return Picture["icon:/" & iSize & "/image"]  
  '     Endif
  '   
  '   Endif
  '   
  ' Endif

  If $bDesktopIsLoaded Then
    
    hPict = GetMimeIcon(sPath, iSize)
    If hPict Then Goto LOCK_ICON
    
  Endif
    
  Try sIcon = $cExt[File.Ext(sPath)]
  If sIcon Then 
    hPict = Picture["icon:/" & CStr(iSize) &/ sIcon]
    Goto LOCK_ICON
  Endif
    
  With DirCache[File.Dir(sPath)].GetInfo(File.Name(sPath))
    
    If InStr(.Perm[System.User.Name], "x") Then 
      If Not $hIconExec Or If $iIconExecSize <> iSize Then
        $iIconExecSize = iSize
        $hIconExec = Picture["icon:/" & CStr(iSize) &/ "exec"]
      Endif
      hPict = $hIconExec
    Endif
    
  End With
  
LOCK_ICON:

  If Not hPict Then hPict = Picture["icon:/" & CStr(iSize) &/ "file"]
  If Not Access(sPath, gb.Write) Then hPict = Main.AddEmblem(hPict, "lock")
  Return hPict
  
Catch
  
  Error "gb.form: unable to get icon for file: "; File.Name(sPath); ": "; Error.Text;; Error.Backtrace.Join(" ")
  
End

Private Sub GetIconSize() As Integer

  If $hColumnView.Visible Then
    Return Stock.GetSize("small")
  Else If $hIconView.Orientation = Arrange.Horizontal Then
    Return $iIconSizeCompact
  Else
    Return $iIconSizeNormal
  Endif

End

Private Sub GetCurrentDir() As String

  If $sDir Then
    Return $sDir
  Else
    Return User.Home
  Endif

End

Static Public Sub _GetHiddenColor() As Integer
  
  Return Color.Merge(Color.TextBackground, Color.TextForeground, 0.66)
  
End

Private Sub ShowLock()
  
  If Not picLock Then
    picLock = New PictureBox($hBorder)
    picLock.Picture = Picture["img/lock.png"]
    picLock.Ignore = True
    picLock.Mode = PictureBox.Cover
    picLock.ResizeScaled(8, 8)
  Endif
  
  picLock.Show
  picLock.Raise
  Watcher_Resize
  
End

Private Sub HideLock()
  
  If picLock Then picLock.Hide
  
End

Private Sub RefreshView()
  
  Dim sFile As String
  Dim sDir As String
  Dim hPictFile As Picture
  Dim hPictFolder As Picture
  Dim hPict As Picture
  Dim sPrefix As String
  Dim iSize As Integer
  Dim aSel As String[]
  Dim aDir As New String[]
  Dim I As Integer
  Dim sText As String
  Dim sRichText As String
  Dim hCache As DirCache
  Dim iHiddenFg As Integer
  Dim SX As Integer
  Dim SY As Integer
  Dim sKey As String
  Dim aPreview As New String[]
  Dim sExt As String
  Dim bVoid As Boolean
  Dim iSort As Integer
  Dim bSortAscent As Boolean
  Dim hInfo As Stat
  Dim bFilter As Boolean
  Dim bCancel As Boolean
  
  Inc Application.Busy
  
  $bRefreshTriggered = False
  bFilter = Object.CanRaise(Me, "Filter")
  
  $nFile = 0
  $nDir = 0
  $iSize = 0
  
  iHiddenFg = _GetHiddenColor()
  
  aSel = GetView().Selection
  
  iSize = GetIconSize()
  
  If $hColumnView.Visible Then
    
    SX = $hColumnView.ScrollX
    SY = $hColumnView.ScrollY
    If Not $bWatch Or If $bRefreshAll Then 
      $hColumnView.Clear
      $hColumnView._Begin()
    Endif
    iSort = $hColumnView.Columns.Sort
    bSortAscent = $hColumnView.Columns.Ascending
    $hColumnView.Sorted = False
    hPictFile = Picture["icon:/small/file"]
    hPictFolder = Picture["icon:/small/directory"]
    
  Else
    
    SX = $hIconView.ScrollX
    SY = $hIconView.ScrollY
    If Not $bWatch Or If $bRefreshAll Then $hIconView.Clear
    $hIconView._Begin
    hPictFile = Picture["icon:/" & CStr(iSize) & "/file"]
    hPictFolder = Picture["icon:/" & CStr(iSize) & "/directory"]
    $hInfoFont = $hIconView.Font.Copy()
    $hInfoFont.Size *= 0.7
    
  Endif
  
  sDir = GetCurrentDir()
  
  If $bWatch And If $bVisible Then
    If Not $hWatch Or If $hWatch.Path <> sDir Then 
      $hWatch = New Watch(sDir) As "Watch"
    Endif
  Endif
  
  hCache = DirCache[sDir]
  If $bInvalidate Then 
    hCache.Invalidate
    $bInvalidate = False
  Endif
  
  'Try aDir = Dir(sDir, "*").Sort()
  Try aDir = hCache.GetFiles()
  If Error Then
    
    ShowLock()
    
  Else
    
    HideLock()
  
    hCache.Lock
    For Each sFile In aDir
      If Not $bShowHidden And If Left(sFile) = "." Or Right(sFile) = "~" Then Continue
      'With Stat(sDir &/ sFile)
      hInfo = hCache.GetInfo(sFile)
      If bFilter Then
        bCancel = Raise Filter(sFile, hInfo)
        If bCancel Then Continue
      Endif
      With hInfo
        If hCache.IsDir(sFile) Then
          If Not $bShowDir Then Continue
          sPrefix = PREFIX_DIR
          Inc $nDir
        Else
          If CheckFilter(sFile) Then Continue
          sPrefix = PREFIX_FILE
          Inc $nFile
          $iSize += .Size
        Endif
        
        sKey = sPrefix & sFile
        
        hPict = GetIcon(sDir &/ sFile, iSize)
        If Not hPict Then 
          If hCache.IsDir(sFile) Then 
            hPict = hPictFolder
          Else 
            hPict = hPictFile
          Endif
        Endif
        
        sText = Replace(sFile, "\n", "")
        sRichText = ""
        
        If .Link Then
          sRichText = "<i>" & sText & "</i>"
        Endif
        If .Hidden Then
          sRichText = "<font color=\"#" & Hex$(iHiddenFg, 6) & "\">" & sText & "</font>"
        Endif
  
        If $hColumnView.Visible Then
          If Not $hColumnView.Exist(sKey) Then
            $hColumnView.Add(sKey, sText, hPict).Editable = Access(sDir, gb.Write)
            GoSub ADD_PREVIEW
          Else
            $hColumnView[sKey].Editable = Access(sDir, gb.Write)
            If $bRefreshIcon Then 
              $hColumnView[sKey].Picture = hPict
              GoSub ADD_PREVIEW
            Endif
          Endif
          
          With $hColumnView[sKey]
            .[1] = Main.FormatSize(hInfo.Size)
            .[2] = Str(hInfo.Time)
            .[3] = hInfo.Auth
            If sRichText Then .RichText = sRichText
          End With
        Else
          If Not $hIconView.Exist(sKey) Then
            $hIconView.Add(sKey, sText, hPict).Editable = Access(sDir, gb.Write)
            GoSub ADD_PREVIEW
          Else
            $hIconView[sKey].Editable = Access(sDir, gb.Write)
            If $bRefreshIcon Then 
              $hIconView[sKey].Picture = hPict
              GoSub ADD_PREVIEW
            Endif
          Endif
          If sRichText Then $hIconView[sKey].RichText = sRichText
        Endif
        
      End With
    Next
    bVoid = aDir.Count = 0
    
    hCache.Unlock
    
    If aPreview.Count Then StartPreview(aPreview)
  
  Endif
  
Finally
  
  $bRefreshIcon = False
  $bRefreshAll = False
  If $hColumnView.Visible Then 
    $hColumnView._End
    $hColumnView.Sorted = True
    $hColumnView.Columns.Sort = iSort
    $hColumnView.Columns.Ascending = bSortAscent
    For I = 1 To $hColumnView.Columns.Max
      $hColumnView.Columns[I].W = -1
    Next
    $hColumnView.Columns[0].W = -1
    $hColumnView.Columns[0].Width = Min(Desktop.Scale * 64, $hColumnView.Columns[0].Width)
  Else
    $hIconView._End
  Endif
  Try GetView().Scroll(SX, SY)
  Try GetView().Selection = aSel
  
  If bVoid Then
    $hVoidView.Show
    $hVoidView.Raise
  Else
    $hVoidView.Hide
  Endif
  
  Dec Application.Busy
  
  Raise Refresh
  
Catch 
  
  Error "gb.form: "; Error.Where; ": "; Error.Text 
  Return
  
ADD_PREVIEW:

  If Not $bShowPreview Then Return
  sExt = LCase(File.Ext(sFile))
  If Not sExt Then Return
  If $cExt[sExt] <> "image" Then Return
  aPreview.Add(sFile)
  Return
  
End

Private Sub StopPreview()
  
  If $hPreview Then $hPreview.Stop
  $hProgress.Hide
  
End

Private Sub StartPreview(aPreview As String[])

  StopPreview
  Component.Load("gb.hash")
  $hProgress.Show
  $iPreviewMax = aPreview.Count
  $iPreviewCount = 0
  $hPreview = New CTaskPreview(GetCurrentDir(), GetIconSize(), $iMaxPreviewSize, aPreview, File.Dir(Temp$())) As "TaskPreview"

End

Public Sub TaskPreview_Read(Data As String)
  
  Dim iPos As Integer
  Dim sPath As String
  Dim sPreview As String
  Dim sLine As String
  
  If Not $bShowPreview Then Return
  
  For Each sLine In Split(Data, "\n", "", True)
  
    If sLine = "." Then
      Try StopPreview
      Return
    Endif
    
    iPos = InStr(sLine, "\t")
    sPath = Left(sLine, iPos - 1)
    sPreview = Mid$(sLine, iPos + 1)
    
    If sPreview Then
      Try GetView()[PREFIX_FILE & sPath].Picture = Image.Load(sPreview).Picture
    Endif
    
    Inc $iPreviewCount
    $hProgress.Value = $iPreviewCount / $iPreviewMax
    
  Next
  
End

Public Sub TaskPreview_Kill()
  
  If $hPreview = Last Then $hPreview = Null
  
End

Private Sub RefreshViewLater(Optional bClear As Boolean)
  
  UpdateIconView
  
  If $bRefreshTriggered Then 
    If bClear Then $bRefreshAll = True
    Return
  Endif
  
  If $hRefresh.Enabled Then $hRefresh.Stop

  $bRefreshAll = bClear
  $bRefreshTriggered = True
  $hRefresh.Trigger
  
End

Public Sub _RefreshViewAfter()
  
  If $bRefreshTriggered Then Return
  If $hRefresh.Enabled Then Return
  
  $hRefresh.Delay = 100
  $hRefresh.Start
  
End


Public Sub Refresh_Timer()
  
  If Not $bRefreshTriggered And Not $hRefresh.Enabled Then Return
  RefreshView
  $hRefresh.Stop
  
End

Public Sub Reload()
  
  $bInvalidate = True
  RefreshViewLater(True)
  
End

Private Function Dir_Read() As String
  
  Return $sDir
  
End

Private Sub Dir_Write(sDir As String)
  
  $sDir = sDir
  RefreshViewLater(True)
  
End

Private Function ShowHidden_Read() As Boolean
  
  Return $bShowHidden
  
End

Private Sub ShowHidden_Write(bShowHidden As Boolean)
  
  If bShowHidden = $bShowHidden Then Return 
  $bShowHidden = bShowHidden
  RefreshViewLater(True)
  
End

Private Function ShowDirectory_Read() As Boolean
  
  Return $bShowDir
  
End

Private Sub ShowDirectory_Write(bShow As Boolean)
  
  If $bShowDir = bShow Then Return
  $bShowDir = bShow
  RefreshViewLater(True)
  
End

Private Function GetView() As Object
  
  If $hIconView.Visible Then
    Return $hIconView
  Else
    Return $hColumnView
  Endif
  
End

Private Function Current_Read() As String
  
  If GetView().Current.Selected Then Return Mid$(GetView().Current.Key, 2)
  
Catch
  
End

Private Sub EnsureRefresh()

  Refresh_Timer

End

Public Sub EnsureVisible_Timer()

  Dim hItem As Object

  hItem = GetView().Current
  If Not hItem Then Return

  With hItem
    If Not .Selected Then Return
    .EnsureVisible
  End With
  
End


Private Sub Current_Write(sFile As String)
  
  Dim sKey As String
  
  'Debug sFile
  
  If sFile = Current_Read() Then Return
  
  EnsureRefresh
  
  GetView().UnselectAll
  sKey = PREFIX_DIR & sFile
  If Not GetView().Exist(sKey) Then sKey = PREFIX_FILE & sFile
  If Not GetView().Exist(sKey) Then Return
  
  GetView()[sKey].Selected = True
  $hEnsureVisible.Trigger
  
End

' Private Function Font_Read() As Font
' 
'   Return Super.Font
' 
' End
' 
' Private Sub Font_Write(hFont As Font)
' 
'   Super.Font = hFont
'   RefreshGrid
' 
' End

Private Function ShowDetailed_Read() As Boolean
  
  Return $hColumnView.Visible
  
End

Private Sub ShowDetailed_Write(bDetailed As Boolean)
  
  Dim hOld As Control
  
  If bDetailed = ShowDetailed_Read() Then Return
  
  If bDetailed Then
    
    hOld = $hIconView
    $hColumnView.Show
    
  Else
    
    hOld = $hColumnView
    $hIconView.Show
    
  Endif
  
  hOld.Hide
  Me.Proxy = GetView()
  Me.Background = hOld.Background
  Me.Foreground = hOld.Foreground
  $bRefreshAll = True
  RefreshView
  TakeSelection
  
End

Public Sub View_Select()
  
  Raise {Select}
  
End

Public Sub View_Click()
  
  Raise Click
  
End

Public Sub View_Activate()
  
  Raise Activate
  
End

Public Sub View_Menu()
  
  If picLock And If picLock.Visible Then
    Stop Event 
    Return
  Endif
  
  Raise Menu
  
End

Public Sub View_BeforeSort()
  
  $sSortDir = GetCurrentDir()
  
  If $hColumnView.Visible Then
    $iSort = $hColumnView.Columns.Sort
    $bAsc = $hColumnView.Columns.Ascending
  Else 
    $hIconView.Ascending = $bAsc
  Endif
  
End

Public Sub View_Compare((Key) As String, OtherKey As String)
  
  Dim hStat As Stat
  Dim hStat2 As Stat
  Dim iComp As Integer
  
  iComp = Comp(Asc(Key), Asc(OtherKey))
  
  If iComp = 0 Then
    
    If $iSort Then
      hStat = DirCache[$sSortDir].GetInfo(Mid$(Key, 2))
      hStat2 = DirCache[$sSortDir].GetInfo(Mid$(OtherKey, 2))
    Endif
    
    Select $iSort
        
      Case 1
        iComp = Sgn(hStat.Size - hStat2.Size)
        
      Case 2
        iComp = Sgn(hStat.Time - hStat2.Time)
        
    End Select
    
    If iComp = 0 Then iComp = Comp(Mid$(Key, 2), Mid$(OtherKey, 2), gb.IgnoreCase + gb.Natural)
    
    'IF NOT $bAsc THEN iComp = (- iComp)
    
  Endif
  
  Last.Compare = iComp
  
Catch
  
End

Private Sub Mode_Write(iMode As Integer)
  
  $hIconView.Mode = iMode
  $hColumnView.Mode = iMode
  
End

Private Function Mode_Read() As Integer
  
  Return $hIconView.Mode
  
End

Private Function Selection_Read() As String[]
  
  Dim aSel As String[]
  Dim I As Integer
  
  EnsureRefresh
  aSel = GetView().Selection
  For I = 0 To aSel.Max
    aSel[I] = Mid$(aSel[I], 2)
  Next
  Return aSel
  
End

Private Sub Selection_Write(Value As String[])

  Dim hView As Object
  Dim sFile As String
  Dim hCache As DirCache
  
  If $hIconView.Mode = Select.None Then Return

  EnsureRefresh

  hCache = DirCache[GetCurrentDir()]
  
  hView = GetView()
  hView.UnselectAll
  For Each sFile In Value
    sFile = If(hCache.IsDir(sFile), PREFIX_DIR, PREFIX_FILE) & sFile
    Try hView[sFile].Selected = True
  Next

End

Private Sub TakeSelection()
  
  Dim hSrc As Object
  Dim hDst As Object
  
  If $hIconView.Mode = Select.None Then Return
  
  hSrc = $hIconView
  hDst = $hColumnView
  If $hIconView.Visible Then Swap hSrc, hDst
  
  If $hIconView.Mode = Select.Single Then
    If hSrc.Current And If hSrc.Current.Selected Then
      Object.Lock(hDst)
      hDst[hSrc.Key].Selected = True
      hDst[hSrc.Key].EnsureVisible
      Object.Unlock(hDst)
    Endif
    Return
  Endif
  
  hDst.UnselectAll
  hSrc.MoveFirst
  While hSrc.Available
    If hSrc.Item.Selected Then
      Object.Lock(hDst)
      hDst[hSrc.Item.Key].Selected = True
      Object.Unlock(hDst)
    Endif
    hSrc.MoveNext
  Wend
  
End

Private Function Filter_Read() As String[]
  
  Return $aFilter
  
End

Private Sub Filter_Write(aFilter As String[])
  
  If aFilter Then
    $aFilter = aFilter.Copy()
  Else 
    $aFilter = Null
  Endif 
  
  RefreshViewLater(True)
  
End

Private Function Icon_Read() As Picture
  
  Return $hPict  
  
End

Private Sub Icon_Write(Value As Picture)
  
  $hPict = Value
  
End

Private Function Border_Read() As Boolean
  
  Return $hBorder.Border
  
End

Private Sub Border_Write(Value As Boolean)
  
  $hBorder.Border = If(Value, Border.Plain, Border.None)
  
End

Private Function Settings_Read() As Variant[]
  
  Return [2, CVariant(Style_Read()), ShowHidden_Read(), $hColumnView.Settings, $iIconSizeNormal, ShowPreview_Read(), $iIconSizeCompact]
  
End

Private Sub Settings_Write(Value As Variant[])
  
  If IsNull(Value) Then Return
  
  If TypeOf(Value[0]) = gb.Integer Then
    If Value[0] = 1 Then
      Style_Write(If(Value[1], Detailed, Normal))
    Else 
      Style_Write(Value[1])
    Endif
    ShowHidden_Write(Value[2])
    $hColumnView.Settings = Value[3]
    $iIconSizeNormal = Value[4]
    If Value.Count >= 6 Then ShowPreview_Write(Value[5])
    If Value.Count >= 7 Then
      $iIconSizeCompact = Value[6]
    Else
      $iIconSizeCompact = $iIconSizeNormal
    Endif
    
    $bRefreshIcon = True
    RefreshViewLater
    
  Else
    ShowDetailed_Write(Value[0])
    ShowHidden_Write(Value[1])
    $hColumnView.Settings = Value[2]
  Endif
  
Catch
  
  Error "gb.form: "; Error.Where; ": "; Error.Text
  
End

Private Function Count_Read() As Integer
  
  If $hIconView.Visible Then 
    Return $hIconView.Count
  Else 
    Return $hColumnView.Count
  Endif    
  
End

' PUBLIC SUB View_MouseMove()
'   
'   IF $hIconView.Visible THEN RETURN 
'   
'   IF $hColumnView.Find(Mouse.X, Mouse.Y) THEN RETURN 
'   DEBUG $hColumnView.Item.Text
'   
' END

Private Function IconSize_Read() As Integer
  
  Return GetIconSize()
  
End

Private Sub IconSize_Write(Value As Integer)
  
  If $hColumnView.Visible Then Return
  If Value < 8 Or Value > 512 Then Return
  
  If $hIconView.Orientation = Arrange.Horizontal Then
    $iIconSizeCompact = Value
  Else 
    $iIconSizeNormal = Value
  Endif
  
  $bRefreshIcon = True
  RefreshViewLater
  
End

Public Sub SelectAll()
  
  If $hIconView.Mode <> Select.Multiple Then Return
  EnsureRefresh
  GetView().SelectAll()
  
End

Public Sub UnselectAll()
  
  If $hIconView.Mode <> Select.Multiple Then Return
  GetView().UnselectAll()
  
End

Private Function Background_Read() As Integer
  
  Return $hColumnView.Background
  
End

Private Sub Background_Write(Value As Integer)
  
  $hIconView.Background = Value
  $hColumnView.Background = Value
  
End

Private Function Foreground_Read() As Integer
  
  Return $hColumnView.Foreground
  
End

Private Sub Foreground_Write(Value As Integer)
  
  $hIconView.Foreground = Value
  $hColumnView.Foreground = Value

End

Private Function ShowPreview_Read() As Boolean

  Return $bShowPreview

End

Private Sub ShowPreview_Write(Value As Boolean)

  If $bShowPreview = Value Then Return
  $bShowPreview = Value
  $bRefreshIcon = True
  RefreshViewLater
  
End

Public Sub Rename()
  
  Dim hView As Object = GetView()
  Dim sPath As String
  
  Try sPath = hView.Current.Key
  If sPath Then
    hView[sPath].Rename
  Endif
  
End

Public Sub View_Rename()
  
  Dim hView As Object = GetView()
  Dim sKey As String = hView.Item.Key
  Dim sOldPath As String = GetCurrentDir() &/ Mid$(sKey, 2)
  Dim sNewName As String = hView.Item.Text
  Dim sMsg As String
  Dim bCancel As Boolean
  
  If sNewName = File.Name(sOldPath) Then Return 
  
  If Object.CanRaise(Me, "Rename") Then
    bCancel = Raise Rename(File.Name(Mid$(sKey, 2)), hView.Item.Text)
    If bCancel Then hView[sKey].Text = File.Name(sOldPath)
    Return
  Endif
  
  sMsg = Help.CheckFileName(sNewName)
  If sMsg Then
    Balloon.Warning(sMsg, hView, hView.Item.X + Min(32 + Desktop.Scale * 8, hView.Item.W) / 2, hView.Item.Y + hView.Item.H / 2)
    Stop Event
    Return
  Endif
  
  Move sOldPath To File.SetName(sOldPath, sNewName)
  
  'sParent = File.Dir(sKey)
  
  ' TODO: Optimization
  
  Object.Lock(hView)
  hView.Remove(sKey)
  Mid$(sKey, 2) = sNewName
  'AddDir(File.Dir(sKey), File.Name(sKey))
  RefreshView
  Object.Unlock(hView)
  
  Try hView.Key = sKey
  
Catch 
  
  hView[sKey].Text = File.Name(sOldPath)
  Message.Error(("Cannot rename file.") & "\n\n" & Error.Text)
  
End

Private Sub GetWatchKey() As String

  If Watch.IsDir Then
    Return PREFIX_DIR & Watch.Name
  Else
    Return PREFIX_FILE & Watch.Name
  Endif

End

Public Sub Watch_Create()

  DirCache[GetCurrentDir()].Invalidate
  RefreshViewLater
  
End

Public Sub Watch_Delete()
  
  DirCache[GetCurrentDir()].Invalidate
  Try GetView().Remove(GetWatchKey())
  If Not Error Then RefreshViewLater
  
End

Public Sub Watch_MoveFrom()
  
  DirCache[GetCurrentDir()].Invalidate
  Try GetView().Remove(GetWatchKey())
  If Not Error Then RefreshViewLater
  
End

Public Sub Watch_MoveTo()
  
  DirCache[GetCurrentDir()].Invalidate
  RefreshViewLater
  
End

Public Sub Watch_Stat()
  
  RefreshViewLater
  
End

Public Sub Watcher_Hide()

  'Debug  
  If $hPreview Then
    StopPreview
    $bRefreshPreview = True
  Endif
  $hWatch = Null
  $bVisible = False
  
End

Public Sub Watcher_Show()
  
  $bVisible = True
  RefreshViewLater($bRefreshPreview)
  $bRefreshPreview = False
  
End

Public Sub Watcher_Resize()
  
  $hVoidView.W = Desktop.Scale * 30
  $hVoidView.Move((Me.W - $hVoidView.W) \ 2, (Me.H - $hVoidView.H) \ 2)
  If picLock And If picLock.Visible Then
    picLock.Move((Me.W - picLock.W) \ 2, (Me.H - picLock.H) \ 2)
  Endif
  $hProgress.Move(0, Me.H - $hProgress.H, Me.W, $hProgress.H)
  
End


' Public Sub View_Draw(X As Integer, Y As Integer, Width As Integer, Height As Integer, (Key) As String, Optional (Column) As Integer)
' 
'   'Dim iSize As Long
'   'Dim hFont As Font
'   Dim H As Integer
'   Dim hStat As Stat
'   Dim dDate As Date
'   Dim sDate As String
'   Dim sAuth As String
' 
'   If Not $hIconView.Visible Then Return
' 
'   H = $hInfoFont.H
'   
'   If $iIconSize < (H * 5) Then Return
'   
'   Try hStat = DirCache[$sDir].GetInfo(Mid$(Key, 2))
'   'Try hStat = Stat($sDir &/ Mid$(Key, 2))
'   If Error Then Return
'   
'   Paint.Background = Color.Merge(Style.ForegroundOf(Last), Style.BackgroundOf(Last), 0.3)
'   
'   If Me.RightToLeft Then
'     Width = (Width - $iIconSize - H) \ 2
'   Else
'     X += (Width + $iIconSize + H) \ 2
'   Endif
'   'Paint.Save
'   Paint.Font = $hInfoFont
'   
'   Y += Desktop.Scale
'   Paint.DrawText(Main.FormatSize(hStat.Size), X, Y, Width, Height, Align.TopNormal)
'   
'   'If $iIconSize < (H * 5) Then Return
'   
'   dDate = hStat.LastModified
'   If Date(dDate) = Date(Now) Then
'     sDate = Format(dDate, gb.LongTime)
'   Else If Year(dDate) = Year(Now) Then
'     sDate = Format(dDate, "dd mmm")
'   Else If $iIconSize < (H * 6) Then
'     sDate = Format(dDate, "mmm yyyy")
'   Else
'     sDate = Format(dDate, gb.MediumDate)
'   Endif
'   
'   Y += H * 1.25
'   Paint.DrawText(sDate, X, Y, Width, Height, Align.TopNormal)
'   
'   If $iIconSize < (H * 6) Then Return
' 
'   sAuth = hStat.Auth
'   sAuth = Left(sAuth, 3) & " " & Mid$(sAuth, 4, 3) & " " & Mid$(sAuth, 7)
'   
'   Y += H * 1.25
'   Paint.DrawText(sAuth, X, Y, Width, Height, Align.TopNormal)
'   
' End

Private Function Path_Read() As String

  Dim sCurrent As String = Current_Read()
  If sCurrent Then Return $sDir &/ sCurrent

End

Public Sub _RefreshPicture()
  
  DirCache[GetCurrentDir()]._RefreshPicture()
  Reload
  
End

Private Function Selected_Read() As Boolean

  Return GetView().Selected

End

Private Sub GetSelection() As String[]

  Dim hView As Object = GetView()
  Dim aPaths As String[]
  Dim I As Integer
  
  aPaths = hView.Selection
  If Not aPaths Or If aPaths.Count = 0 Then Return
  
  For I = 0 To aPaths.Max
    aPaths[I] = GetCurrentDir() &/ Mid(aPaths[I], 2)
  Next
  
  Return aPaths

End

Public Sub View_MouseDrag()

  Dim hView As Object = GetView()
  Dim aPaths As String[] = GetSelection()
  If Not aPaths Then Return
  
  Try Drag.Icon = hView[hView.Selection[0]].Picture
  Drag(GetView(), aPaths, "text/uri-list")
  
End

Public Sub Copy()
  
  Dim aPaths As String[] = GetSelection()
  If Not aPaths Then Return
  Clipboard.Copy(aPaths, "text/uri-list")
  
End

Public Sub View_DragLeave()
  
  HighlightItem
  
End

Public Sub View_Drop()
  
  Raise Drop
  
End

Private Function Paths_Read() As String[]

  Dim aSel As String[]
  Dim I As Integer
  Dim sDir As String
  
  EnsureRefresh
  sDir = GetCurrentDir()
  aSel = GetView().Selection
  For I = 0 To aSel.Max
    aSel[I] = sDir &/ Mid$(aSel[I], 2)
  Next
  Return aSel
  
End

Public Sub View_DragMove()

  $DX = Drag.X
  $DY = Drag.Y
  
  CheckDragMove()
  
End

Private Sub HighlightItem(Optional sKey As String)

  Dim hView As Object
  Dim hImage As Image

  hView = GetView()
  
  If $sHighlight Then
    If $hHighlightPicture Then hView[$sHighlight].Picture = $hHighlightPicture
    $hHighlightPicture = Null
    $sHighlight = ""
  Endif
  
  If sKey Then
    $sHighlight = sKey
    $hHighlightPicture = hView[$sHighlight].Picture
    If $hHighlightPicture Then
      hImage = $hHighlightPicture.Image
      hImage.PaintRect(0, 0, hImage.W, hImage.H, Color.SetAlpha(Color.LightBackground, 192))
      hView[$sHighlight].Picture = hImage.Picture
    Endif
  Endif

End

Private Sub CheckDragMove()

  Dim hView As Object = GetView()
  
  Drag.Item = Null
  If hView.FindAt($DX, $DY) Then
    
    HighlightItem
    
  Else
  
    With hView.Item
      If IsDir(GetCurrentDir() &/ .Text) Then
        HighlightItem(.Key)
        Drag.Item = .Key
      Else 
        HighlightItem()
      Endif
    End With
    
  Endif
  
End

Public Sub View_Scroll()
  
  If Drag.Pending Then CheckDragMove()
  
End

Private Sub MaxPreviewSize_Write(Value As Integer)
  
  If $iMaxPreviewSize = Value Then Return
  $iMaxPreviewSize = Value
  If $bShowPreview Then Reload
  
End

Private Function Orientation_Read() As Integer

  Return $hIconView.Orientation

End

Private Sub Orientation_Write(Value As Integer)

  $hIconView.Orientation = Value

End

Private Function Style_Read() As Integer

  If $hColumnView.Visible Then
    Return Detailed
  Else If $hIconView.Orientation = Arrange.Horizontal Then
    Return Compact
  Else
    Return Normal
  Endif

End

Private Sub Style_Write(Value As Integer)

  Dim iIconSize As Integer
  
  If Value = Detailed Then
    ShowDetailed_Write(True)
  Else
    ShowDetailed_Write(False)
    iIconSize = GetIconSize()
    If Value = Compact Then
      $hIconView.Orientation = Arrange.Horizontal
    Else
      $hIconView.Orientation = Arrange.Vertical
    Endif 
    UpdateIconView
    If iIconSize <> GetIconSize() Then 
      $bRefreshIcon = True
      RefreshView
    Endif
  Endif

End

Private Sub UpdateIconView()

  If Not $hIconView.Visible Then Return

  If $hIconView.Orientation = Arrange.Horizontal Then
    $hIconView.IconLines = Max(1, GetIconSize() \ $hIconView.Font.Height)
  Else 
    $hIconView.IconLines = 3
  Endif

End

Public Sub UserControl_Font()
  
  UpdateIconView
  
End
