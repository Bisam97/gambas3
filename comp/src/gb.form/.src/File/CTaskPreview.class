' Gambas class file

Inherits Task

Class Hash
Class PdfDocument

Public Preview As String[]

Private $sDir As String
Private $iSize As Integer
Private $iMaxFileSize As Integer
Private $sCache As String
Private $sFFmpeg As String

Public Sub _new(sDir As String, iSize As Integer, iMaxFileSize As Integer, aPreview As String[], sTempDir As String)
  
  $sDir = sDir
  $iSize = iSize
  $iMaxFileSize = iMaxFileSize
  If $iMaxFileSize = 0 Then $iMaxFileSize = 4194304
  Preview = aPreview
  $sCache = sTempDir &/ "gb.form/thumbnails"
  Main.MkDir($sCache)
  
End

Private Sub IsTextFile(sPath As String) As Boolean

  Dim hFile As File
  Dim sStr As String
  Dim sCar As String
  Dim iCode As Integer
  Dim sTest As String

  Try hFile = Open sPath
  If Error Then Return
  
  sStr = Read #hFile, -256

  While sStr
    sCar = String.Left(sStr)
    sStr = Mid$(sStr, Len(sCar) + 1)
    If Not sCar Then Break
    If Len(sCar) = 1 Then
      iCode = Asc(sCar)
      If iCode = &HFE Then Return False
      If iCode = &HFF Then Return False
      If iCode < 32 And If iCode <> 10 And If iCode <> 13 And If iCode <> 9 Then Return False
    Else If sStr Then
      Try sTest = Conv(sCar, "UTF-8", "UCS-4LE")
      If Error Then Return False
    Endif
  Wend

  Return True

End

Private Sub PrintIcon(hImage As Image, sThumb As String, Optional bVideo As Boolean)

  Dim hIcon As Image
  Dim X As Integer
  Dim Y As Integer
  Dim W As Integer
  Dim I As Integer

  If hImage.W > hImage.H Then
    hImage = hImage.Stretch($iSize, ($iSize * hImage.H) \ hImage.W)
  Else
    hImage = hImage.Stretch(($iSize * hImage.W) \ hImage.H, $iSize)
  Endif
  
  X = ($iSize - hImage.W) \ 2
  Y = ($iSize - hImage.H) \ 2

  hIcon = New Image($iSize, $iSize)
  
  Paint.Begin(hIcon)
  Paint.DrawImage(hImage, X, Y)
  
  'hRect = Paint.StretchImage(hImage, 0, 0, $iSize, $iSize)
  
  If bVideo Then
    W = $iSize \ 16
    Paint.FillRect(X, Y, W, hImage.H, Color.SetAlpha(Color.Black, 128))
    Paint.FillRect(X + hImage.W - W, Y, W, hImage.H, Color.SetAlpha(Color.Black, 128))
    Paint.Background = Color.White
    Paint.Save()
    Paint.ClipRect = Rect(X, Y, hImage.W, hImage.H)
    For I = 0 To hImage.H Step W
      Paint.Ellipse(X + W \ 4, Y + I + W \ 4, W \ 2, W \ 2)
      Paint.Ellipse(X + hImage.W - W + W \ 4, Y + I + W \ 4, W \ 2, W \ 2)
      Paint.Fill()
    Next
    Paint.Restore()
  Endif
  
  Paint.Rectangle(X + 0.5, Y + 0.5, hImage.W - 1, hImage.H - 1)
  Paint.Background = Color.LightForeground
  Paint.Stroke
  Paint.End
  
  Try hIcon.Save(sThumb)
    
End

Private Sub PrintTextFile(sPath As String, sThumb As String)

  Dim hImage As Image
  Dim hFile As File
  Dim sLine As String
  Dim X, Y As Integer
  Dim fSize As Float

  If $iSize <= 16 Then Return

  hImage = New Image($iSize, $iSize, Color.TextBackground)
  
  hFile = Open sPath

  Paint.Begin(hImage)
  
  fSize = Min($iSize / 16, Desktop.Scale)
  
  X = CInt(fSize) + 1
  Y = X
  
  Paint.Save
  Paint.ClipRect = Rect(X, Y, hImage.W - X * 2, hImage.H - Y * 2)
  
  If fSize >= 4 Then
    
    Paint.Font = Font["monospace"]
    Paint.Font.Size = fSize
  
    While Not Eof(hFile)
      Line Input #hFile, sLine
      Paint.DrawText(sLine, X, Y + Paint.Font.Ascent)
      Y += Paint.Font.Height
      If Y > hImage.H Then Break
    Wend
    
  Else
    
    hFile = Open sPath
    While Not Eof(hFile)
      Line Input #hFile, sLine
      Paint.FillRect(X, Y, String.Len(sLine), 1, Color.LightForeground)
      Y += 2
      If Y > hImage.H Then Break
    Wend

  Endif

  Paint.Restore
    
  Paint.Rectangle(0.5, 0.5, hImage.W - 1, hImage.H - 1)
  Paint.Background = Color.LightForeground
  Paint.Stroke
  Paint.End

  Paint.End

  Close hFile
    
  Try hImage.Save(sThumb)
    
End

Private Sub PrintPdfFile(sPath As String, sThumb As String)

  Dim hPdf As PdfDocument
  Dim hPage As Image
  
  Try Component.Load("gb.poppler")
  If Error Then Return
  
  Try hPdf = New PdfDocument(sPath)
  If Error Then Return
  If hPdf.Count = 0 Then Return
  
  hPage = hPdf[0].Render()
  PrintIcon(hPage, sThumb)

End

Private Sub PrintVideoFile(sPath As String, sThumb As String)

  Dim sFile As String
  Dim hImage As Image
  
  If Not $sFFmpeg Then Return
  sFile = File.SetExt(Temp$("ffmpeg"), "png")
  Exec [$sFFmpeg, "-nostdin", "-hide_banner", "-loglevel", "error", "-i", sPath, "-frames:v", "1", "-y", "-t", "00:00:03", "-vf", "scale=" & CStr($iSize) & ":-1", sFile] Wait
  'Exec [$sFFmpeg, "-nostdin", "-hide_banner", "-i", sPath, "-frames:v", "1", "-y", "-t", "00:00:03", sFile] Wait
  Try hImage = Image.Load(sFile)
  Try Kill sFile
  If Error Then Return
  PrintIcon(hImage, sThumb, True)
  
End

Private Sub GetThumbnailPath(sPath As String) As String
  
  sPath &= "." & CStr(Stat(sPath).LastModified)
  Try Return $sCache &/ Hash.Sha256(sPath) & "." & CStr($iSize) & ".png"
  
End

Public Sub Main()

  Dim sFile As String
  Dim sExt As String
  Dim sPath As String
  Dim hImage As Image
  Dim hSvgImage As SvgImage
  Dim sThumb As String

  Application.Priority += 10
  
  $sFFmpeg = System.Find("ffmpeg")

  For Each sFile In Preview
    
    sPath = $sDir &/ sFile
    sExt = LCase(File.Ext(sFile))
    
    sThumb = GetThumbnailPath(sPath)
    If Exist(sThumb) Then
      Print sFile; "\t"; sThumb
      Continue
    Endif
    
    If Main.Ext[sExt] = "image" Then
      
      If $iMaxFileSize > 0 And If Stat(sPath).Size > $iMaxFileSize Then Goto NEXT_FILE
        
      If sExt = "svg" Or If sExt = "svgz" Then
        
        Try hSvgImage = SvgImage.Load(sPath)
        If Not Error Then
        
          If hSvgImage.Width > hSvgImage.Height Then 
            hSvgImage.Resize($iSize, $iSize * hSvgImage.Height / hSvgImage.Width)
          Else
            hSvgImage.Resize($iSize * hSvgImage.Width / hSvgImage.Height, $iSize)
          Endif
    
          hImage = New Image(hSvgImage.Width, hSvgImage.Height)
          Paint.Begin(hImage)
          hSvgImage.Paint()
          Paint.End
          
          PrintIcon(hImage, sThumb)
        
        Endif
      
      Else
      
        Try hImage = Image.Load(sPath)
        If Not Error Then PrintIcon(hImage, sThumb)
        
      Endif
    
    Else If sExt = "pdf" Then
      
      If $iMaxFileSize > 0 And If Stat(sPath).Size > $iMaxFileSize Then Goto NEXT_FILE
      Try PrintPdfFile(sPath, sThumb)
    
    Else If Main.Ext[sExt] = "video" Then
    
      Try PrintVideoFile(sPath, sThumb)
    
    Else If IsTextFile(sPath) Then
      
      Try PrintTextFile(sPath, sThumb)
        
    Endif
    
  NEXT_FILE:
    
    Print sFile; "\t";
    If Exist(sThumb) Then Print sThumb;
    Print
    
  Next
  
  Print "."
  
  Do
    Sleep 3600
  Loop
  
End
