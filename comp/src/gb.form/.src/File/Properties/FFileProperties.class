' Gambas class file

Class DesktopMime

Private $sPath As String

Private $iSize As Long
Private $hTask As Task
Private $sError As String

Public Sub Run(sPath As String) As Boolean
  
  SetPath(sPath)
  btnClose.Show
  tabInfo.Border = False
  Return Not FFileProperties.ShowModal()
  
End

Private Sub FormatPath(sPath As String) As String
  
  If sPath Begins System.User.Home & "/" Then   
    sPath = "~" &/ Mid$(sPath, Len(System.User.Home) + 2)
  Endif 
  
  Return sPath
  
End

Public Sub GetPath() As String
  
  Return $sPath
  
End

Public Sub SetPath(sPath As String)
  
  $sPath = sPath
  RefreshPath
  
End

Private Sub RefreshPath()
  
  Dim hParent As FileProperties = Me.Parent
  Dim hData As _FilePropertiesData
  
  Dim hMime As DesktopMime
  Dim hLabel As Label
  Dim W As Integer
  Dim sAuth As String

  If hParent Then hData = hParent._RaiseData()

  lblDir.Text = FormatPath(File.Dir($sPath))
  If String.Len(lblDir.Text) >= 32 Then lblDir.Tooltip = lblDir.Text
  
  With Stat($sPath)
    
    If hData Then
      
      lblType.Text = hData.Type
      picIcon.Picture = hData.Icon
      
    Else
    
      If .Link Then
        lblLabelType.Text = ("Symbolic link")
        lblType.Text = .Link
        lblType.Font.Italic = True
        hMime = DesktopMime.FromFile($sPath)
        Try picIcon.Picture = hMime.GetIcon(64).Picture
      Else If IsDir($sPath) Then
        picIcon.Picture = Picture["icon:/64/directory"]
        lblType.Text = ("Directory")
      Else
        hMime = DesktopMime.FromFile($sPath)
        lblType.Text = String.UCaseFirst(hMime.GetComment())
        Try picIcon.Picture = hMime.GetIcon(64).Picture
        If Error Then Error "gb.form: unable to find icon for mimetype: "; hMime.GenericIcon
      Endif
      
    Endif
    
    If IsDir($sPath) Then $hTask = New CTaskDirSize($sPath) As "Task"
    
    $iSize = .Size
    UpdateSize()
    
    lblLastModified.Text = Format(.LastModified, gb.GeneralDate)
    
    sAuth = .Auth
    'sAuth = Left$(sAuth, 3) & " " & Mid$(sAuth, 4, 3) & " " & Right$(sAuth, 3)
    lblAuth.Text = sAuth
    lblUser.Text = .User
    lblGroup.Text = .Group
    
  End With
  
  For Each hLabel In panProperty.Children
    If hLabel.Expand Then Continue
    hLabel.Foreground = Color.Merge(Color.Foreground, Color.LightForeground)
    W = Max(W, hLabel.Font.TextWidth(hLabel.Text))
  Next

  For Each hLabel In panProperty.Children
    If hLabel.Expand Then Continue
    hLabel.W = W + Desktop.Scale * 3
  Next
  
  lblName.Text = File.Name($sPath)
  If Me Is Window Then Me.Title = Subst(("&1 properties"), lblName.Text)

End

' Public Sub Form_Open()
' 
'   Me.Title = Subst(("&1 properties"), File.Name($sPath))
' 
' End

Public Sub btnOK_Click()

  Me.Close

End

Private Sub UpdateSize(Optional sDirSize As String)

  Dim sSize As String
  Dim aDirSize As String[]
  Dim nDir, nFile As Integer

  If sDirSize Then
    aDirSize = Split(sDirSize, " ")
    $iSize = CLong(aDirSize[0])
    Try nFile = CInt(aDirSize[1])
    Try nDir = CInt(aDirSize[2])
  Endif
  
  sSize = Main.GetFileSize($iSize)
  If $iSize >= 1000 Then sSize &= " (" & Subst(("&1 B"), Format($iSize, "#,###")) & ")"
  
  If sDirSize Then
    sSize &= "\n"
    If nFile = 0 Then
      sSize &= ("no file")
    Else If nFile = 1
      sSize &= ("one file")
    Else
      sSize &= Format(nFile, ",#") & " " & ("files")
    Endif
    sSize &= ", "
    If nDir = 0 Then
      sSize &= ("no directory")
    Else If nDir = 1
      sSize &= ("one directory")
    Else
      sSize &= Format(nDir, ",#") & " " & ("directories")
    Endif
    lblSize.H = Desktop.Scale * 6
  Endif
  
  lblSize.Text = sSize

End

Public Sub Form_Close()

  Try $hTask.Stop

End

Public Sub Task_Read(sData As String)

  UpdateSize(Trim(sData))
  lblSize.Foreground = Color.LightForeground
  
End

Private Sub ShowError()

  tabInfo[1].Visible = True
  txtError.Text = $sError

End

Public Sub Task_Error(Data As String)
  
  $sError &= Data
  ShowError
  
End


Public Sub Task_Kill()
  
  Try UpdateSize(Last.Value)
  If Error Then $sError &= Error.Text
  lblSize.Foreground = Color.Default
  
  If $sError Then ShowError
  
End

Public Sub Add(hPanel As Control, sTitle As String)

  Dim I As Integer = tabInfo.Index
  Dim N As Integer = tabInfo.Count
  
  Inc tabInfo.Count
  tabInfo[N].Text = sTitle
  tabInfo.Index = N
  hPanel.Reparent(tabInfo)
  HPanel.Expand = True
  hPanel.Show
  tabInfo.Index = I

End

Public Sub Form_Arrange()

  If btnClose.Visible Then btnClose.Move(Me.ClientW - btnClose.W - Desktop.Scale, Me.ClientH - btnClose.H - Desktop.Scale)

End

Public Sub btnClose_Click()

  Me.Close

End

Public Sub GetBorder() As Boolean
  
  Return tabInfo.Border
  
End

Public Sub SetBorder(bBorder As Boolean)
  
  tabInfo.Border = bBorder
  
End


Public Sub _new()

  panIcon.H = 64 + Desktop.Scale * 2
  picIcon.Resize(64, 64)
  tabInfo[1].Visible = False
  
End

