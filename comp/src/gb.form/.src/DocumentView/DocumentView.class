' Gambas class file

Export
Inherits UserControl

Property DocWidth As Integer
Property DocHeight As Integer
Property Count As Integer
Property Read Max As Integer
Property Read Layout As _DocumentLayout
Property Zoom, Scale As Float
Private $hView As ScrollArea
Private $iDocWidth As Integer = 210
Private $iDocHeight As Integer = 297
Private $hLayout As New _DocumentLayout

'Info du layout
Private $iFirstVisibleLine As Integer
Private $iFirstVisibleDocument As Integer
Private $iLastVisibleDocument As Integer
Private $iLastVisibleLine As Integer


Private $iCount As Integer = 40


Private $fScaledDocWidth As Float  ''Largeur reelle du doc a l'affichage (zoom)
Private $fScaledDocHeight As Float ''Hauteur reelle du doc a l'affichage (zoom)
Private $fScaledSpace As Float     '' Taille reelle de l'espacement a l'affichage(zoom)
Private $fMaxPageHeight As Float ''Hauteur du plus grand doc
Private $fMaxPageWidth As Float  ''Largeur du plus grand doc
Private $iSpace As Integer = 20    ''Taille de l'espacement
Private $iNbreLines As Integer     ''Nombre de ligne totale
Private $tmrLoad As New Timer As "tmrLoad"
Private $aImageToLoad As New Integer[]
Private $aImageLoaded As New Integer[]
Private $iNbreDocByLine As Integer

Private $fZoom As Float = 0.2

Event Layout(Page As Integer)
Event Draw(Page As Integer)

Public Sub _new()
  
  $hView = New ScrollArea(Me) As "View"
  $hView.Background = Color.DarkGray
  
End

Public Sub tmrLoad_Timer()
  Dim hImg As Image
  Dim iPage As Integer
  iPage = $aImageToLoad.pop()
  Raise Layout(iPage)
  hImg = New Image($iDocWidth, $iDocHeight, Color.White)
  Draw.Begin(hImg)
    Raise Draw(iPage)
  Draw.End
End

Public Sub View_Draw()

  Dim i, j, k As Integer
  Dim iDocX, iDocY As Integer
  Dim fShad As Float = $fScaledSpace / 4
  

  
  k = $iFirstVisibleDocument
  For i = $iFirstVisibleLine To $iLastVisibleLine
    For j = 0 To $iNbreDocByLine - 1
      'Define the doc position
      iDocX = $fScaledSpace + j * ($fScaledDocWidth + $fScaledSpace) - $hView.ScrollX
      iDocY = $fScaledSpace + i * ($fScaledDocHeight + $fScaledSpace) - $hView.ScrollY
      
      'Draw the doc
      Paint.Rectangle(iDocX + fShad, iDocY + fShad, $fScaledDocWidth, $fScaledDocHeight)
      Paint.Brush = Paint.Color(Color.SetAlpha(Color.Black, 125))
      Paint.Fill
      Paint.Rectangle(iDocX, iDocY, $fScaledDocWidth, $fScaledDocHeight)
      Paint.Brush = Paint.Color(Color.White)
      Paint.Fill(True)
      Paint.Brush = Paint.Color(Color.Black)
      Paint.Stroke
      Paint.Font.Grade = 20 * $fzoom
      Paint.Text(k, iDocX, iDocY, $fScaledDocWidth, $fScaledDocHeight, Align.Center)
      Paint.Fill
      
      Inc k
      If k > $iCount Then Break
    Next
    If k > $iCount Then Break
  Next

End

Private Sub DoLayout()
  
  
  
  
  'Found the maxPage Size
  $fScaledSpace = $iSpace * $fzoom
  $fScaledDocHeight = $iDocHeight * $fzoom
  $fScaledDocWidth = $iDocWidth * $fzoom
  $fMaxPageWidth = $fScaledDocWidth
  $fMaxPageHeight = $fScaledDocHeight

  'Calculate the Max doc per line (mini 1 doc)
  $iNbreDocByLine = Max(($hView.ClientW - $fScaledSpace) / ($fMaxPageWidth + $fScaledSpace), 1)
  Debug "Nombre de doc par lignes : " & $iNbreDocByLine
  
  'Calculate the full Layout height
  $iNbreLines = Ceil($iCount / $iNbreDocByLine)
  Debug "Nombre de lignes : " & $iNbreLines
  
  'Calculate the first visible line
  $iFirstVisibleLine = Floor($hView.ScrollY / ($fMaxPageHeight + $iSpace))
  $iFirstVisibleDocument = $iFirstVisibleLine * $iNbreDocByLine + 1
  Debug "Premier doc visible : " & $iFirstVisibleDocument
  'Calculate how many doc are visibles
  $iLastVisibleLine = Ceil(($hView.ScrollY + $hView.ClientH) / ($fMaxPageHeight + $fScaledSpace)) 
  $iLastVisibleDocument = Min($iLastVisibleLine * $iNbreDocByLine, $iCount)
  Debug "Dernier doc : " & $iLastVisibleDocument
  
  'Setup the virtual space
  $hView.ResizeContents($hView.ClientW, $fScaledSpace + ($fMaxPageHeight + $fScaledSpace) * $iNbreLines)
  
  'Setup the ImageToLoad array
  
  
End

Private Function DocWidth_Read() As Integer
  
  Return $iDocWidth
  
End

Private Sub DocWidth_Write(Value As Integer)
  
  $iDocWidth = value
  
End

Private Function DocHeight_Read() As Integer
  
  Return $iDocHeight
  
End

Private Sub DocHeight_Write(Value As Integer)
  
  $iDocHeight = Value
  
End

Private Function Count_Read() As Integer
  
  Return $iCount
  
End

Private Sub Count_Write(Value As Integer)
  
  $iCount = Value
  
End

Private Function Max_Read() As Integer
  
  Return $iCount - 1
  
End

Private Function Layout_Read() As _DocumentLayout
  
  Return $hLayout
  
End

Public Sub View_Arrange()
  
  DoLayout
  
End

Public Sub View_Scroll()
  
  DoLayout
  
End



Private Function Zoom_Read() As Float

  Return $fzoom

End

Private Sub Zoom_Write(Value As Float)
  'entre 0.1 et 2
  $fzoom = Min(Max(Value, 0.1), 2)
  DoLayout
  $hView.Refresh
End
