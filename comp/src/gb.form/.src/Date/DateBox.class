' Gambas class file

Export
Inherits UserControl

Public Const _Properties As String = "*,Value,ReadOnly,Border=True,ShowTime"
'Public Const _DefaultEvent As String = "Click"
Public Const _DefaultSize As String = "24,4"
Public Const _Similar As String = "TextBox"

Property Value As Date
Property ReadOnly As Boolean
Property Border As Boolean
Property ShowTime As Boolean

Private $hButtonBox As ButtonBox
Private $hPopup As Window
Private $hChooser As DateChooser
Private $bShowTime As Boolean

Private Sub GetDateFormat() As String
  
  Dim sFormat As String
  
  sFormat = Format(Date(3333, 11, 22), gb.ShortDate)
  sFormat = Replace(sFormat, "3333", "yyyy")
  sFormat = Replace(sFormat, "22", "dd")
  sFormat = Replace(sFormat, "11", "mm")

  If $bShowTime Then 
    sFormat &= " " & Format(Time(11, 22, 33), gb.ShortTime)
    sFormat = Replace(sFormat, "11", "hh")
    sFormat = Replace(sFormat, "22", "nn")
    sFormat = Replace(sFormat, "33", "ss")
  Endif
  
  Return sFormat
  
End

Private Sub UpdateMask()
  
  Dim sMask As String
  Dim vVal As Date
  
  vVal = Value_Read()
  
  sMask = Format(Date(1111, 11, 11), gb.ShortDate)
  If $bShowTime Then sMask &= " " & Format(Time(11, 11, 11), gb.ShortTime)
  
  $hButtonBox.Editor.Mask = Replace(sMask, "1", "0")
  
  Value_Write(vVal)
  
End


Public Sub _new()
  
  Dim hPanel As Panel
  
  $hButtonBox = New ButtonBox(Me) As "ButtonBox"
  $hButtonBox.Picture = Picture["icon:/small/calendar"]
  $hButtonBox.Alignment = Align.Right
  
  $hPopup = New Window As "PopupWindow"
  $hPopup.Persistent = True
  $hPopup.Arrangement = Arrange.Fill
  
  hPanel = New Panel($hPopup)
  hPanel.Arrangement = Arrange.Horizontal
  hPanel.Border = Border.Plain
  
  $hChooser = New DateChooser(hPanel) As "DateChooser"
  $hChooser.Expand = True
  
  Me.Proxy = $hButtonBox
  
  UpdateMask
  Value_Write(Null)
  
End

Private Function Value_Read() As Date

  Dim vVal As Variant = Val($hButtonBox.Text)
  
  If vVal And If TypeOf(vVal) = gb.Date Then Return vVal

End

Private Sub Value_Write(Value As Date)

  If IsNull(Value) Then Value = Now
  $hButtonBox.Text = Format(Value, GetDateFormat())

End

Public Sub ButtonBox_Click()
  
  Dim X, Y, iPad As Integer
  Dim dDate As Date
  
  If $bShowTime Then
    $hPopup.Resize(Desktop.Scale * 48, ((Desktop.Scale * 24) \ 12) * 12 + 2)
  Else
    $hPopup.Resize(Desktop.Scale * 32, Desktop.Scale * 24)
  Endif
  $hChooser.ShowTime = $bShowTime

  iPad = If($hButtonBox.Border, 3, 0)
  X = $hButtonBox.ScreenX + $hButtonBox.W - $hPopup.W - iPad
  Y = $hButtonBox.ScreenY + $hButtonBox.H - iPad
  
  If (Y + $hPopup.H) > Desktop.H Then
    Y = $hButtonBox.ScreenY - $hPopup.H
  Endif
  
  dDate = Me.Value
  If dDate Then $hChooser.Value = dDate
  $hPopup.ShowPopup(X, Y)
  '$hPopup.ShowModal
  
End

Public Sub ButtonBox_KeyPress()
  
  If Key.Code = Key.Space Then
    ButtonBox_Click
    Stop Event
  Endif
  
End


Public Sub PopupWindow_Open()
  
  $hChooser.SetFocus
  
End


Private Function ReadOnly_Read() As Boolean

  Return $hButtonBox.ReadOnly

End

Private Sub ReadOnly_Write(Value As Boolean)

  $hButtonBox.ReadOnly = Value

End

Private Function Border_Read() As Boolean

  Return $hButtonBox.Border

End

Private Sub Border_Write(Value As Boolean)

  $hButtonBox.Border = Value

End

Public Sub DateChooser_Activate()
  
  Me.Value = $hChooser.Value
  $hPopup.Close
  
End

Public Sub DateChooser_Cancel()
  
  $hPopup.Close
  
End

Private Function ShowTime_Read() As Boolean

  Return $bShowTime

End

Private Sub ShowTime_Write(Value As Boolean)

  $bShowTime = Value
  UpdateMask

End
