' Gambas class file

Export

Inherits UserControl

Public Const _Properties As String = "*,Mode{Select.*}=Single,Border=True,ScrollBar{Scroll.*}=Both"
Public Const _Group As String = "View"

Property Mode As Integer
Property Border As Boolean
Property ScrollBar As Integer

Property Read Count As Integer
Property Read Current As _IconViewItem

Event Select
Event Activate 
Event Click 
Event Rename 
Event Cancel
Event Compare(Key As String, OtherKey As String)

Private $iMode As Integer = Select.Single
Private $hView As ScrollArea
'Private $hObserver As Observer

Private $cItems As New Collection
Private $aItems As New _IconViewItem[]
Private $cSelection As New Collection

Private $iMinGridWidth As Integer = 160
Private $iGridWidth As Integer
Private $iGridHeight As Integer = 120

Private $nColumn As Integer

Private $iHoverPos As Integer = -1
Private $iCurrent As Integer = -1

Public Sub _new()
  
  $hView = New ScrollArea(Me) As "ScrollArea"
  '$hView.Painted = True
  $hView.Focus = True
  $hView.NoBackground = True
  '$hView.Scrollbar = Scroll.Vertical
  $hView.Tracking = True
  
  Me.Proxy = $hView
  
  '$hObserver = New Observer(Me) As "ScrollArea"
  
End

Public Sub _get(Key As String) As _IconViewItem
  
  Return $cItems[Key]
  
End

Public Sub Clear()
  
  $cItems.Clear
  $aItems.Clear
  ScrollArea_Arrange
  
End

Public Sub _FindItem(hItem As _IconViewItem) As Integer
  
  Return $aItems.Find(hItem)
  
End


Public Function Add(Key As String, Text As String, Optional {Picture} As Picture, Optional After As String) As _IconViewItem
  
  Dim hItem As _IconViewItem = New _IconViewItem As "IconViewItem"
  Dim hAfter As _IconViewItem
  Dim iPos As Integer
  
  If Not Key Then Error.Raise("Void key")
  If $cItems.Exist(Key) Then Error.Raise("Key already used")
  
  If After Then
    hAfter = $cItems[Key]
    If Not hAfter Then Error.Raise("After item does not exist")
  Endif
  
  hItem._Key = Key
  hItem.Text = Text
  hItem.Picture = {Picture}
  
  $cItems[Key] = hItem
  
  If hAfter Then
    iPos = $aItems.Find(hAfter)
    $aItems.Add(hItem, iPos + 1)
  Else
    $aItems.Add(hItem)
  Endif
  
  ScrollArea_Arrange
  Return hItem
  
End

Public Sub Remove(Key As String)
  
  Dim hItem As _IconViewItem
  Dim iPos As Integer
  
  hItem = $cItems[Key]
  If Not hItem Then Return
  
  iPos = $aItems.Find(hItem)
  $aItems.Remove(iPos)
  $cItems.Remove(Key)
  
  ScrollArea_Arrange
  
End

Private Sub GetIconIndexFromPos(X As Integer, Y As Integer, Optional bIgnoreOutside As Boolean) As Integer

  Dim iPos As Integer
  
  iPos = X \ $iGridWidth
  If iPos >= $nColumn Then 
    If Not bIgnoreOutside Then Return -1
    iPos = $nColumn - 1
  Endif
  
  iPos += (Y \ $iGridHeight) * $nColumn
  If iPos >= $aItems.Count Then 
    If Not bIgnoreOutside Then Return -1
    iPos = $aItems.Max
  Endif
  
  Return iPos
  
End

Public Sub _GetIconGeometry(iPos As Integer, hRect As Rect)
  
  Dim iCol, iRow As Integer
  
  iRow = iPos \ $nColumn
  iCol = iPos - iRow * $nColumn
  
  hRect.X = iCol * $iGridWidth
  hRect.Y = iRow * $iGridHeight
  hRect.W = $iGridWidth
  hRect.H = $iGridHeight
  
End

Public Sub ScrollArea_Draw()
  
  Dim X, Y, W, H As Integer
  Dim hItem As _IconViewItem
  Dim iPos, iLast, iCol, nCol As Integer
  Dim hRect As New Rect
  Dim hClip As Rect
  
  With Draw.Clip
    X = .X
    Y = .Y
    W = .Width
    H = .Height
  End With
  
  Draw.FillRect(X, Y, W, H, Color.TextBackground)
  'Draw.Translate(- $hView.ScrollX, - $hView.ScrollY)
  
  X += $hView.ScrollX
  Y += $hView.ScrollY
  
  iPos = GetIconIndexFromPos(X, Y)
  nCol = GetIconIndexFromPos(X + W - 1, Y, True) - iPos + 1
  iLast = GetIconIndexFromPos(X + W - 1, Y + H - 1, True)
  iCol = 0
  
  X -= $hView.ScrollX
  Y -= $hView.ScrollY
  
  
  'Debug "<<<"
  
  While iPos <= iLast
    
    If iPos >= 0 And If iPos < $aItems.Count Then
      
      hItem = $aItems[iPos]
      _GetIconGeometry(iPos, hRect)
      hRect.Translate(- $hView.ScrollX, - $hView.ScrollY)
      'Debug iPos
      hClip = New Rect(X, Y, W, H)
      hClip = hClip.Intersection(hRect)
      If hClip Then
        hItem._Draw(hRect, hClip, False, iPos = $iHoverPos) ' _HaveFocus, $iMouseOver = k And Me.Tracking)
      Endif
      
    Endif
    
    Inc iCol
    Inc iPos
    If iCol > nCol Then
      iPos += $nColumn - nCol
      iCol = 0
      'Debug "---"
    Endif
    
  Wend
  
  Draw.Clip(X, Y, W, H)
  
  'Debug ">>>"
  
End

Public Sub ScrollArea_Arrange()
  
  Dim W As Integer = $hView.ClientWidth
  Dim nRow As Integer
  
  $nColumn = Max(1, W \ $iMinGridWidth)
  $iGridWidth = Max(1, W \ $nColumn)
  
  nRow = ($aItems.Count + $nColumn - 1) \ $nColumn
  
  $hView.ResizeContents(Max(W, $nColumn * $iGridWidth), nRow * $iGridHeight)
  $hView.Refresh
  
End

Public Sub ScrollArea_Scroll()
  
  SetHoverItem(GetIconIndexFromPos(Mouse.ScreenX - $hView.ScreenX - $hView.ClientX + $hView.ScrollX, Mouse.ScreenY - $hView.ScreenY - $hView.ClientY + $hView.ScrollY))
  
End


Private Function Count_Read() As Integer

  Return $aItems.Count

End

Private Sub RefreshItem(iPos As Integer)
  
  Dim hRect As New Rect
  
  _GetIconGeometry(iPos, hRect)
  hRect.Translate(- $hView.ScrollX, - $hView.ScrollY)
  $hView.Refresh(hRect.X, hRect.Y, hRect.W, hRect.H)
  
End

Private Sub SetHoverItem(iPos As Integer)
  
  If iPos = $iHoverPos Then Return
  
  Swap iPos, $iHoverPos
  
  $hView.Refresh
  
End


Public Sub ScrollArea_MouseMove()
  
  SetHoverItem(GetIconIndexFromPos(Mouse.X + $hView.ScrollX, Mouse.Y + $hView.ScrollY))
  
End

Public Sub ScrollArea_Leave()
  
  SetHoverItem(-1)
  
End

Public Sub _EnsureVisible(iPos As Integer)
  
  Dim hRect As New Rect
  Dim X, Y, W, H As Integer
  Dim PW, PH, CX, CY, CW, CH As Integer
  
  _GetIconGeometry(iPos, hRect)
  
  W = (hRect.W + 1) / 2
  H = (hRect.H + 1) / 2
  X = hRect.X + W
  Y = hRect.Y + H

  PW = $hView.ClientW
  PH = $hView.ClientH

  CX = - $hView.ScrollX
  CY = - $hView.ScrollY
  CW = $hView.ScrollWidth
  CH = $hView.ScrollHeight

  If PW < (W * 2) Then W = PW / 2
  If PH < (H * 2) Then H = PH / 2

  If CW <= PW Then
    W = 0
    CX = 0
  Endif
  
  If CH <= PH Then
    H = 0
    CY = 0
  Endif

  If X < (- CX + W) Then
    CX = - X + W
  Else If X >= (- CX + PW - W) Then
    CX = - X + PW - W
  Endif
  
  If Y < (- CY + H) Then
    CY = - Y + H
  Else If Y >= (- CY + PH - H) Then
    CY = - Y + PH - H
  Endif

  If CX > 0
    CX = 0
  Else If CX < (PW - CW) And If CW > PW Then
    CX = PW - CW
  Endif

  If CY > 0 Then
    CY = 0
  Else If CY < (PH - CH) And If CH > PH Then
    CY = PH - CH
  Endif

  $hView.Scroll(- CX, - CY)
  
End


Private Sub SetCurrentItem(iCurrent As Integer, Optional bIgnoreOutside As Boolean)
  
  If iCurrent = $iCurrent Then Return
  
  If iCurrent < 0 Or If iCurrent > $aItems.Max Then
    iCurrent = -1
    If bIgnoreOutside Then Return
  Endif
  
  Try $aItems[$iCurrent].Selected = False
  If iCurrent >= 0 Then
    $aItems[iCurrent].Selected = True
    $iCurrent = iCurrent
  Endif
  
  If $iCurrent >= 0 Then _EnsureVisible($iCurrent)
  
End


Private Function Current_Read() As _IconViewItem
  
  Try Return $aItems[$iCurrent]
  
End

Public Sub SelectAll()
  
  Dim hItem As _IconViewItem
  
  For Each hItem In $aItems
    hItem.Selected = True
  Next
  
End

Public Sub UnselectAll()
  
  Dim hItem As _IconViewItem
  
  For Each hItem In $cSelection
    hItem.Selected = False
  Next
  SetCurrentItem(-1)
  
End

Private Function Mode_Read() As Integer

  Return $iMode

End

Private Sub Mode_Write(Value As Integer)

  Dim iCurrent As Integer

  If $iMode = Value Then Return

  Select Case Value
    Case Select.None
      UnselectAll
    Case Select.Single
      iCurrent = $iCurrent
      UnselectAll
      SetCurrentItem($iCurrent)
    Case Select.Multiple
    Case Else
      Return
  End Select
  
  $iMode = Value

End

Public Sub ScrollArea_KeyPress()

  If $iMode = Select.None Then
    
  Else
  
    Select Key.Code
      
      Case Key.Left
        SetCurrentItem($iCurrent - 1, True)
        
      Case Key.Right
        SetCurrentItem($iCurrent + 1, True)
        
      Case Key.Up
        SetCurrentItem($iCurrent - $nColumn, True)
      
      Case Key.Down
        If $iCurrent < 0 Then
          SetCurrentItem(0)
        Else
          SetCurrentItem($iCurrent + $nColumn, True)
        Endif
        
      Case Key.Home
        SetCurrentItem(0)
        
      Case Key.End
        SetCurrentItem($aItems.Max)
        
    End Select
    
  Endif
  
End

Public Sub _SelectItem(hItem As _IconViewItem, bSelected As Boolean)
  
  If bSelected Then
    $cSelection[hItem.Key] = True
  Else
    $cSelection.Remove(hItem.Key)
  Endif
  
End

Private Function Border_Read() As Boolean

  Return $hView.Border

End

Private Sub Border_Write(Value As Boolean)

  $hView.Border = Value

End

Private Function ScrollBar_Read() As Integer

  Return $hView.Scrollbar

End

Private Sub ScrollBar_Write(Value As Integer)

  $hView.ScrollBar = Value

End
