' Gambas class file

Export

Property Read Key As String
Property {Picture} As Picture
Property Text As String
Property Selected As Boolean
Property Editable As Boolean

Property Read X As Integer
Property Read Y As Integer
Property Read W As Integer
Property Read H As Integer
Property Read Width As Integer
Property Read Height As Integer

Public _Key As String
Private $sText As String
Private $hPicture As Picture
Private $bSelected As Boolean
Private $bEditable As Boolean
Private $bEllipsized As Boolean

Event _Foo

Public Sub _new()
  
  $bEditable = GetIconView().Editable
  
End


Private Sub GetIconView() As IconView
  
  Return Object.Parent(Me)
  
End

Private Sub RefreshView()
  
  GetIconView()._RefreshItem(Me)
  
End

Private Function Key_Read() As String

  Return _Key

End

Private Function Picture_Read() As Picture

  Return $hPicture

End

Private Sub Picture_Write(Value As Picture)

  If $hPicture = Value Then Return
  $hPicture = Value
  GetIconView()._UpdateIconSize($hPicture)
  RefreshView

End

Private Function Text_Read() As String

  Return $sText

End

Private Sub Text_Write(Value As String)

  If $sText = Value Then Return
  $sText = Value
  GetIconView()._SortIsDirty
  RefreshView
  
End

' Public Sub _Draw2(X As Integer, Y As Integer, Width As Integer, Height As Integer, bFocus As Boolean, bHover As Boolean)
'   
'   Dim iBackColor As Integer
'   Dim hBackImage As Image
'   Dim hParent As IconView
'   Dim ix, iy As Integer
'   
'   If _IconViewItem._hBackPicture.Width <> Width Then 
'     _IconViewItem._hBackPicture = DrawBackGround(Width, Height, Color.SelectedBackground)
'     _IconViewItem._hBackPictureNoFocus = DrawBackGround(Width, Height, Color.Gray)
'     _IconViewItem._hBackPictureMouseOver = DrawBackGround(Width, Height, Color.Lighter(Color.SelectedBackground))
'     _IconViewItem._hBackPictureSelOver = DrawBackGround(Width, Height, Color.Darker(Color.SelectedBackground))
'   Endif
'   
'   If bHover Then
'     hBackImage = IIf(Me.Selected, _hBackPictureSelOver, _hBackPictureMouseOver)
'     iBackColor = Color.Transparent
'     
'   Else
'     
'     If bFocus
'       hBackImage = _hBackPicture
'       iBackColor = Color.SelectedBackground
'     Else
'       hBackImage = _hBackPictureNoFocus
'       iBackColor = Color.Gray
'     Endif
'     
'   Endif
'   
'   Draw.Font = _Font
'   ix = X + (Width - $hPicture.w) / 2
'   iy = Y + (Height - ($hPicture.Height + Draw.TextHeight($sText) + 5)) / 2
' 
'   
'   If Me.Selected Or bHover Then
'     Draw.Foreground = Color.Lighter(iBackColor)
'     Draw.FillColor = iBackColor
'     Draw.FillStyle = Fill.Solid
'     Draw.Image(hBackImage, X, Y)
'     'Draw.Rect(X, Y, Width, Height)
'     Draw.Picture($hPicture.Image.Colorize(iBackColor).Picture, iX, iY)
'     
'     'Draw.Rect($iX + ($hPicture.Width - Draw.TextWidth($sText)) / 2 - 4, $iY + $hPicture.Height + 5, Draw.TextWidth($sText) + 8, Draw.TextHeight($sText))
'     Draw.Foreground = IIf(bFocus, Color.SelectedForeground, Color.TextForeground)
'   Else
'     Draw.Picture($hPicture, iX, iY)
'     Draw.Foreground = Color.TextForeground
'     
'   Endif
'   Me._TextX = ix + ($hPicture.Width - Draw.TextWidth($sText)) / 2
'   Me._TextY = Y + (Height - (Draw.TextHeight($sText) + 5))
'   Me._TextWidth = Draw.TextWidth($sText) + 8
'   Me._TextHeight = Draw.TextHeight($sText)
'     
'     Draw.Text($sText, iX + ($hPicture.Width - Draw.TextWidth($sText)) / 2, iY + $hPicture.Height + 5)
' 
' '  Prend le rectangle comme zone 
'   $ix = X
'   $iy = Y
'   $iWidth = Width
'   $iheight = Height
'   
' End

Private Sub PaintRoundedRect(X As Integer, Y As Integer, W As Integer, H As Integer, R As Float)
  
  Dim fArcToBezier As Float = 0.55228475
  Dim fRadiusX, fRadiusY, c1, c2 As Float
  
  fRadiusX = R
  fRadiusY = R
  
  If fRadiusX > W - fRadiusX Then fRadiusX = W / 2
  If fRadiusY > H - fRadiusY Then fRadiusY = H / 2
  
  '#approximate(quite Close )the arc using a bezier curve
  c1 = fArcToBezier * fRadiusX
  c2 = fArcToBezier * fRadiusY
  
  Paint.newpath()
  Paint.moveto(x + fRadiusX, y)
  Paint.RelLineTo(w - 2 * fRadiusX, 0.0)
  Paint.RelCurveTo(c1, 0.0, fRadiusX, c2, fRadiusX, fRadiusY)
  Paint.RelLineTo(0, h - 2 * fRadiusY)
  Paint.RelCurveTo(0.0, c2, c1 - fRadiusX, fRadiusY, - fRadiusX, fRadiusY)
  Paint.RelLineTo(- w + 2 * fRadiusX, 0)
  Paint.RelCurveTo(- c1, 0, - fRadiusX, - c2, - fRadiusX, - fRadiusY)
  Paint.RelLineTo(0, - h + 2 * fRadiusY)
  Paint.RelCurveTo(0.0, - c2, fRadiusX - c1, - fRadiusY, fRadiusX, - fRadiusY)
  Paint.closepath()
  
End

Public Sub _GetTextRect(hRect As Rect, bHorizontal As Boolean) As Rect
  
  Dim hText As Rect
  Dim X, Y, W, H As Integer
  
  hRect.Adjust(8)
  
  If bHorizontal Then
    
    X = hRect.X
    If $hPicture Then X += $hPicture.W + 4
    
    W = hRect.W - (X - hRect.X)
    H = GetIconView().Font.RichTextHeight(Html($sText), W - 4) + 4
    
    hText = New Rect(X, hRect.Y, W, H)
    hText.Y -= (H - hRect.H) \ 2
    
  Else
  
    Y = hRect.Y
    If $hPicture Then Y += $hPicture.H + 4
    
    H = GetIconView().Font.RichTextHeight(Html($sText), hRect.W - 4) + 4
    
    hText = New Rect(hRect.X, Y, hRect.W, H)
    
  Endif
  
  Return hText
  
End

Public Sub _Draw(hRect As Rect, hClip As Rect, hIconView As IconView, bHorizontal As Boolean, bFocus As Boolean, bHover As Boolean)
  
  Dim X, Y, W, H, HT, PW, PH As Integer
  Dim iColor As Integer
  Dim bFrame As Boolean
  Dim sText As String
  Dim bSelected As Boolean
  
  hRect.Adjust(4)
  
  If Not hIconView.Picture Then
    bFrame = True
  Endif
  
  If $hPicture Then
    PW = $hPicture.W
    PH = $hPicture.H
  Endif
  
  iColor = Color.TextBackground
  If $bSelected Then iColor = Color.SelectedBackground
  If bHover Then iColor = Color.Merge(iColor, Color.LightBackground)
  bSelected = $bSelected Or bHover

  ' If bHover And Not $bSelected Then
  '   Paint.Begin(Draw.Device)
  '   Paint.ClipRect = hClip
  '   'Paint.Rectangle(hClip.X, hClip.Y, hClip.Width, hClip.Height)
  '   'Paint.Clip()
  '   PaintRoundedRect(hRect.X, hRect.Y, hRect.W, hRect.H, 7)
  '   Paint.Brush = Paint.Color(iColor)
  '   Paint.Fill
  '   'Paint.Rectangle(hRect.X, hRect.Y, hRect.W, hRect.H)
  '   'Paint.Brush = Paint.Color(Color.Black)
  '   'Paint.Stroke
  '   Paint.End
  '   bFrame = True
  ' Else If $bSelected Then
  '   bSelected = True
  '   iColor = Color.SelectedBackground
  '   If bHover Then iColor = Color.Merge(iColor, Color.LightBackground)
  ' Endif

  hClip = hClip.Intersection(hRect)
  If IsNull(hClip) Then Return
  hRect.Adjust(4)
  
  If bHorizontal Then
  
    X = hRect.X
    W = hRect.W
    
    If bSelected Then
      Paint.Begin(Draw.Device)
      Paint.ClipRect = hClip
      Paint.Brush = Paint.Color(iColor)
      ' If $hPicture Then
      '   If System.RightToLeft Then
      '   Else
      '     PaintRoundedRect(hRect.X - 4, hRect.Y + (hRect.H - PH) / 2 - 4, PW + 8, PH + 8, 7)
      '     Paint.Fill
      '   Endif
      ' Endif
      ' If $sText Then
      '   H = hIconView.Font.RichTextHeight($sText, W - PW - 4)
      '   If H < (hClip.H - 12) Then
      '     PaintRoundedRect(hRect.X, hRect.Y - 4 + (hRect.H - H) \ 2, hRect.W + 4, H + 12, 7)
      '   Else
      '     PaintRoundedRect(hRect.X, hClip.Y, hRect.W + 4, hClip.H, 7)
      '   Endif
      '   Paint.Fill
      ' Endif
      PaintRoundedRect(hClip.X, hClip.Y, hClip.W, hClip.H, 7)
      Paint.Fill
      Paint.End
    Endif

    Draw.ClipRect = hClip
  
    If System.RightToLeft Then
      
      If $hPicture Then
        Draw.Picture($hPicture, hRect.X + hRect.W - PW, hRect.Y + (hRect.H - PH) / 2)
        W -= PW + 4
      Endif

    Else
  
      If $hPicture Then
        Draw.Picture($hPicture, hRect.X, hRect.Y + (hRect.H - PH) / 2)
        X += PW + 4
        W -= PW + 4
      Endif
      
    Endif
      
    If $sText Then
      Draw.Font = hIconView.Font
      If Not bFrame Then
        Draw.Foreground = If($bSelected, Color.SelectedBackground, Color.TextBackground)
        Draw.RichText($sText, X + 1, hRect.Y + 1, W, hRect.H, Align.Left)
      Endif
      Draw.Foreground = If($bSelected, Color.SelectedForeground, Color.TextForeground)
      Draw.RichText($sText, X, hRect.Y, W, hRect.H, Align.Left)
    Endif
  
  Else
  
    Y = hRect.Y
    If $hPicture Then Y += $hPicture.H + 4
    
    If $sText Then
      sText = $sText
      H = Draw.Font.RichTextHeight(sText, hRect.W)
      HT = hRect.H - (Y - hRect.Y)
      If H > HT Then 
        sText = Ellipsize(sText, Draw.Font, hRect.W, HT)
        $bEllipsized = True
      Else
        $bEllipsized = False
      Endif
    Endif
    
    If bSelected Then
      Paint.Begin(Draw.Device)
      Paint.ClipRect = hClip
      Paint.Brush = Paint.Color(iColor)
      If $hPicture Then
        PaintRoundedRect(hRect.X + (hRect.W - PW) / 2 - 4, hRect.Y - 4, PW + 8, PH + 8, 7)
        Paint.Fill
      Endif
      If $sText Then
        PaintRoundedRect(hRect.X - 4, Y - 6, hRect.W + 8, hIconView.Font.RichTextHeight(sText, hRect.W) + 10, 7)
        Paint.Fill
      Endif
      Paint.End
    Endif

    Draw.ClipRect = hClip
  
    If $hPicture Then
      Draw.Picture($hPicture, hRect.X + (hRect.W - PW) / 2, hRect.Y)
    Endif
    
    If $sText Then
      'Draw.Clip(hRect.X, Y, hRect.W, hRect.H - Y)
      Draw.Font = hIconView.Font
      
      If Not bFrame Then
        Draw.Foreground = If($bSelected, Color.SelectedBackground, Color.TextBackground)
        Draw.RichText(sText, hRect.X + 1, Y + 1, hRect.W, HT, Align.Top)
      Endif
      Draw.Foreground = If($bSelected, Color.SelectedForeground, Color.TextForeground)
      Draw.RichText(sText, hRect.X, Y, hRect.W, HT, Align.Top)
      'Draw.Clip.Enabled = False
    Endif
    
  Endif
  
End


Private Function Selected_Read() As Boolean

  Return $bSelected

End

Private Sub Selected_Write(Value As Boolean)

  If $bSelected = Value Then Return
  
  $bSelected = Value
  GetIconView()._SelectItem(Me, Value)
  RefreshView

End

Public Sub EnsureVisible()
  
  Dim hParent As IconView = GetIconView()
  
  hParent._EnsureVisible(hParent._FindItem(Me))
  
End

Public Sub _Inside(hRect As Rect, X As Integer, Y As Integer) As Boolean
  
  hRect.Adjust(4)
  Return hRect.Contains(X, Y)
  
End

Public Sub _compare(hItem As _IconViewItem) As Integer
  
  Dim hParent As IconView = GetIconView()
  
  If Not hParent._CompareItem(_Key, hItem.Key) Then 
    Return hParent.Compare
  Else
    Return Comp($sText, hItem.Text, gb.Natural + gb.IgnoreCase)
  Endif
  
End

Private Function Editable_Read() As Boolean

  Return $bEditable

End

Private Sub Editable_Write(Value As Boolean)

  $bEditable = Value

End

Public Sub Rename()
  
  If Not $bEditable Then Return
  GetIconView()._RenameItem(Me)
  
End

Private Sub GetGeometry() As Rect
  
  Dim hParent As IconView = GetIconView()
  Dim hRect As New Rect
  hParent._GetItemGeometry(Me, hRect)
  Return hRect
  
End


Private Function X_Read() As Integer

  Return GetGeometry().X

End

Private Function Y_Read() As Integer

  Return GetGeometry().Y

End

Private Function W_Read() As Integer

  Return GetGeometry().Width

End

Private Function H_Read() As Integer

  Return GetGeometry().Height

End

Private Function Width_Read() As Integer

  Return GetGeometry().Width

End

Private Function Height_Read() As Integer

  Return GetGeometry().Height

End

Public Sub MoveAfter(Optional Key As String)
  
  Dim hParent As IconView = GetIconView()
  Dim iPos As Integer 
  
  If Not Key Then 
    MoveFirst()
    Return
  Endif
  
  iPos = hParent._FindItem(hParent[Key])
  If iPos < 0 Then Error.Raise(Subst("Unknown item: '&1'", Key))
  
  hParent._MoveItem(Me, iPos + 1)
  
End

Public Sub MoveBefore(Optional Key As String)
  
  Dim hParent As IconView = GetIconView()
  Dim iPos As Integer 
  
  If Not Key Then 
    MoveLast()
    Return
  Endif
  
  iPos = hParent._FindItem(hParent[Key])
  If iPos < 0 Then Error.Raise(Subst("Unknown item: '&1'", Key))
  
  hParent._MoveItem(Me, iPos)
  
End

Public Sub MoveFirst()
  
  Dim hParent As IconView = GetIconView()
  hParent._MoveItem(Me, 0)
  
End

Public Sub MoveLast()
  
  Dim hParent As IconView = GetIconView()
  hParent._MoveItem(Me, hParent.Count - 1)
  
End

Private Sub Ellipsize(sText As String, hFont As Font, W As Integer, H As Integer) As String
  
  Dim sCar As String = "…"
  Dim iPos As Integer
  
  If Not sText Then Return
  
  For iPos = 1 To Len(sText)
    If hFont.RichTextHeight(Left(sText, iPos) & sCar, W) > H Then Break
  Next
  
  Return Left(sText, iPos - 1) & sCar
  
End

Public Sub _IsEllipsized() As Boolean
  
  Return $bEllipsized
  
End
