' Gambas class file

Property Read Key As String
Property {Picture} As Picture
Property Text As String
Property Selected As Boolean

Public _Key As String
Private $sText As String
Private $hPicture As Picture
Private $bSelected As Boolean

Event _Foo

Private Sub GetIconView() As MyIconView
  
  Return Object.Parent(Me)
  
End

Private Sub RefreshView()
  
  GetIconView().Refresh
  
End



Private Function Key_Read() As String

  Return _Key

End

Private Function Picture_Read() As Picture

  Return $hPicture

End

Private Sub Picture_Write(Value As Picture)

  $hPicture = Value
  RefreshView

End

Private Function Text_Read() As String

  Return $sText

End

Private Sub Text_Write(Value As String)

  $sText = Value
  RefreshView
  
End

' Public Sub _Draw2(X As Integer, Y As Integer, Width As Integer, Height As Integer, bFocus As Boolean, bHover As Boolean)
'   
'   Dim iBackColor As Integer
'   Dim hBackImage As Image
'   Dim hParent As MyIconView
'   Dim ix, iy As Integer
'   
'   If _IconViewItem._hBackPicture.Width <> Width Then 
'     _IconViewItem._hBackPicture = DrawBackGround(Width, Height, Color.SelectedBackground)
'     _IconViewItem._hBackPictureNoFocus = DrawBackGround(Width, Height, Color.Gray)
'     _IconViewItem._hBackPictureMouseOver = DrawBackGround(Width, Height, Color.Lighter(Color.SelectedBackground))
'     _IconViewItem._hBackPictureSelOver = DrawBackGround(Width, Height, Color.Darker(Color.SelectedBackground))
'   Endif
'   
'   If bHover Then
'     hBackImage = IIf(Me.Selected, _hBackPictureSelOver, _hBackPictureMouseOver)
'     iBackColor = Color.Transparent
'     
'   Else
'     
'     If bFocus
'       hBackImage = _hBackPicture
'       iBackColor = Color.SelectedBackground
'     Else
'       hBackImage = _hBackPictureNoFocus
'       iBackColor = Color.Gray
'     Endif
'     
'   Endif
'   
'   Draw.Font = _Font
'   ix = X + (Width - $hPicture.w) / 2
'   iy = Y + (Height - ($hPicture.Height + Draw.TextHeight($sText) + 5)) / 2
' 
'   
'   If Me.Selected Or bHover Then
'     Draw.Foreground = Color.Lighter(iBackColor)
'     Draw.FillColor = iBackColor
'     Draw.FillStyle = Fill.Solid
'     Draw.Image(hBackImage, X, Y)
'     'Draw.Rect(X, Y, Width, Height)
'     Draw.Picture($hPicture.Image.Colorize(iBackColor).Picture, iX, iY)
'     
'     'Draw.Rect($iX + ($hPicture.Width - Draw.TextWidth($sText)) / 2 - 4, $iY + $hPicture.Height + 5, Draw.TextWidth($sText) + 8, Draw.TextHeight($sText))
'     Draw.Foreground = IIf(bFocus, Color.SelectedForeground, Color.TextForeground)
'   Else
'     Draw.Picture($hPicture, iX, iY)
'     Draw.Foreground = Color.TextForeground
'     
'   Endif
'   Me._TextX = ix + ($hPicture.Width - Draw.TextWidth($sText)) / 2
'   Me._TextY = Y + (Height - (Draw.TextHeight($sText) + 5))
'   Me._TextWidth = Draw.TextWidth($sText) + 8
'   Me._TextHeight = Draw.TextHeight($sText)
'     
'     Draw.Text($sText, iX + ($hPicture.Width - Draw.TextWidth($sText)) / 2, iY + $hPicture.Height + 5)
' 
' '  Prend le rectangle comme zone 
'   $ix = X
'   $iy = Y
'   $iWidth = Width
'   $iheight = Height
'   
' End

Private Sub PaintRoundedRect(X As Integer, Y As Integer, W As Integer, H As Integer, R As Float)
  
  Dim fArcToBezier As Float = 0.55228475
  Dim fRadiusX, fRadiusY, c1, c2 As Float
  
  fRadiusX = R
  fRadiusY = R
  
  If fRadiusX > W - fRadiusX Then fRadiusX = W / 2
  If fRadiusY > H - fRadiusY Then fRadiusY = H / 2
  
  '#approximate(quite Close )the arc using a bezier curve
  c1 = fArcToBezier * fRadiusX
  c2 = fArcToBezier * fRadiusY
  
  Paint.newpath()
  Paint.moveto(x + fRadiusX, y)
  Paint.RelLineTo(w - 2 * fRadiusX, 0.0)
  Paint.RelCurveTo(c1, 0.0, fRadiusX, c2, fRadiusX, fRadiusY)
  Paint.RelLineTo(0, h - 2 * fRadiusY)
  Paint.RelCurveTo(0.0, c2, c1 - fRadiusX, fRadiusY, - fRadiusX, fRadiusY)
  Paint.RelLineTo(- w + 2 * fRadiusX, 0)
  Paint.RelCurveTo(- c1, 0, - fRadiusX, - c2, - fRadiusX, - fRadiusY)
  Paint.RelLineTo(0, - h + 2 * fRadiusY)
  Paint.RelCurveTo(0.0, - c2, fRadiusX - c1, - fRadiusY, fRadiusX, - fRadiusY)
  Paint.closepath()
  
End

Public Sub _Draw(hRect As Rect, hClip As Rect, bFocus As Boolean, bHover As Boolean)
  
  Dim Y As Integer
  Dim iColor As Integer
  
  hRect.Adjust(4)
  
  If bHover Or If $bSelected Then
    Paint.Begin(Draw.Device)
    Paint.Rectangle(hClip.X, hClip.Y, hClip.Width, hClip.Height)
    Paint.Clip()
    PaintRoundedRect(hRect.X, hRect.Y, hRect.W, hRect.H, 15)
    iColor = Color.TextBackground
    If $bSelected Then iColor = Color.SelectedBackground
    If bHover Then iColor = Color.Merge(iColor, Color.LightBackground)
    Paint.Brush = Paint.Color(iColor)
    Paint.Fill
    Paint.End
    'Draw.Foreground = Color.TextForeground
  Endif

  hRect.Adjust(4)
  hClip = hClip.Intersection(hRect)
  If IsNull(hClip) Then Return
  
  Draw.Clip(hClip.X, hClip.Y, hClip.Width, hClip.Height)
  
  Y = hRect.Y
  
  If $hPicture Then
    Draw.Picture($hPicture, hRect.X + (hRect.W - $hPicture.W) / 2, hRect.Y)
    Y += $hPicture.H + 4
  Endif
  
  If $sText Then
    'Draw.Clip(hRect.X, Y, hRect.W, hRect.H - Y)
    Draw.Foreground = If($bSelected, Color.SelectedForeground, Color.TextForeground)
    Draw.RichText($sText, hRect.X, Y, hRect.W, hRect.H - Y, Align.Top)
    'Draw.Clip.Enabled = False
  Endif
  
End


Private Function Selected_Read() As Boolean

  Return $bSelected

End

Private Sub Selected_Write(Value As Boolean)

  $bSelected = Value
  GetIconView()._SelectItem(Me, Value)
  RefreshView

End

Public Sub EnsureVisible()
  
  Dim hParent As MyIconView = GetIconView()
  
  hParent._EnsureVisible(hParent._FindItem(Me))
  
End
