' Gambas class file

Export

Inherits UserControl

Public Const _Properties As String = "*,Mode{Select.None;Single;Multiple}=None,Grid=True,Header{GridView.None;Horizontal;Vertical;Both}=None,ScrollBar{Scroll.*}=Both,Border=True,AutoResize=True,Resizable=True"
Public Const _Group As String = "View"
Public Const _DefaultEvent As String = "Click"

Public Enum None, Horizontal, Vertical, Both

Property Read Rows As _GridView_Rows
Property Read Columns As _GridView_Columns
Property Border As Boolean
Property Grid As Boolean
Property Mode As Integer
Property Read Data As _GridView_Data
Property Row As Integer
Property Column As Integer
Property Resizable As Boolean
Property Scrollbar As Integer
Property AutoResize As Boolean
Property Header As Integer

Property ScrollX As Integer
Property ScrollY As Integer
Property Read ScrollW, ScrollWidth As Integer
Property Read ScrollH, ScrollHeight As Integer

Property Read ClientX As Integer
Property Read ClientY As Integer
Property Read ClientW, ClientWidth As Integer
Property Read ClientH, ClientHeight As Integer

Event Data(Row As Integer, Column As Integer)
Event Change
Event Select
Event Click
Event Activate
Event Scroll
Event ColumnClick(Column As Integer)
Event RowClick(Row As Integer)
Event ColumnResize(Column As Integer)
Event RowResize(Row As Integer)

Private $hView As ScrollArea
Private $bGrid As Boolean
Private $iMode As Integer
Private $iHeader As Integer

Private $iRow As Integer
Private $iCol As Integer

Private $hRows As _GridView_Rows
Private $hColumns As _GridView_Columns

Private $iFirstRow As Integer
Private $aRowY As New Integer[]

Private $cCells As New Collection
Private $hData As _GridView_Data

Private $bResize As Boolean
Private $iRowResize As Integer = -1
Private $iColResize As Integer = -1
Private $iDimResize As Integer
Private $MX As Integer
Private $MY As Integer
Private $SX As Integer
Private $SY As Integer
Private $hTimerScroll As Timer
Private $bInCell As Boolean

Public Sub _new()
  
  $hRows = New _GridView_Rows As "Rows"
  $hColumns = New _GridView_Columns As "Columns"
  
  $hView = New ScrollArea(Me) As "ScrollArea"
  $hView.Background = Color.TextBackground
  $hView.Focus = True
  $hView.Tracking = True
  $hView.ScrollBar = Scroll.Both
  
  $bGrid = True
  $iRow = -1
  $iCol = 0
  
  Me.Proxy = $hView
  
End

Private Sub GetCellKey(iRow As Integer, iCol As Integer) As String
  
  If iRow >= iCol Then
    Return CLong(iRow) * iRow + iCol * 2
  Else
    Return CLong(iCol) * iCol + iRow * 2 + 1
  Endif
  
End


Private Function Rows_Read() As _GridView_Rows

  Return $hRows

End

Private Function Columns_Read() As _GridView_Columns

  Return $hColumns

End

Public Sub _IsRowSelected(iRow As Integer) As Boolean
  
  Select Case $iMode
    Case Select.None
      Return
    Case Select.Single
      Return iRow = $iRow
    Case Select.Multiple
      Return $hRows._IsSelected(iRow)
  End Select
  
End


Private Sub DrawCell(X As Integer, Y As Integer, W As Integer, H As Integer, iRow As Integer, iCol As Integer, hData As _GridView_Data)

  Dim hRect As Rect = Rect(X, Y, W, H)

  With hData

    If .Background <> Color.Default Then
      Draw.FillRect(X, Y, W, H, .Background)
    Endif
    
    If .Padding Then
      X += .Padding
      Y += .Padding
      W -= .Padding * 2
      H -= .Padding * 2
    Endif
    
    If W > 0 And If H > 0 Then
  
      If .Foreground = Color.Default Then
        Draw.Foreground = Me.Foreground
      Else
        Draw.Foreground = .Foreground
      Endif
      
      Draw.Text(.Text, X, Y, W, H, .Alignment)
      
    Endif
    
  End With
  
  If $bGrid Then
    Draw.Foreground = Color.Merge(Color.LightForeground, $hView.Background)
    Draw.Line(hRect.X + hRect.W - 1, hRect.Y, hRect.X + hRect.W - 1, hRect.Y + hRect.H - 1)
    Draw.Line(hRect.X, hRect.Y + hRect.H - 1, hRect.X + hRect.W - 1, hRect.Y + hRect.H - 1)
  Endif

End

Public Sub ScrollArea_Draw()
  
  Dim I, J As Integer
  Dim XX, YY, X, Y, W, H As Integer
  Dim iRow, iRow2, iCol, iCol2 As Integer
  Dim hClip As Rect
  Dim hRect As Rect
  Dim hData As _GridView_Data
  Dim F As Integer = GetFrameWidth()
  Dim iGrid As Integer
  
  If $hColumns.Count = 0 Then Return
  
  iCol = $hColumns._FindColumnFromPos($hView.ScrollX)
  iRow = $hRows._FindRowFromPos($hView.ScrollY)
  iCol2 = -1
  iRow2 = -1
  XX = $hRows.Width - $hView.ScrollX + $hColumns[iCol].X + F
  YY = $hColumns.Height - $hView.ScrollY + $hRows._GetRowY(iRow) + F
  
  
  iGrid = Color.Merge(Color.LightForeground, $hView.Background)
  
  hClip = Draw.ClipRect
  
  ' Vertical header
  
  H = $hColumns.Height + F
  If $iHeader And Vertical Then Draw.FillRect(0, 0, Draw.W, H, Color.ButtonBackground)
  X = XX
  For I = 0 To $hColumns.Count - 1
    If X > $hView.ClientW Then Break
    iCol2 = I
    With $hColumns[I]
      If $iHeader And Vertical Then
        Draw.FillRect(X - 1, F, 1, H - F, iGrid)
        Draw.ClipRect = hClip.Intersection(Rect(X, F, .Width, H - F))
        Draw.Text(.Text, X + 2, F, .Width - 2, H - F, Align.Center)
      Endif
      X += .Width
    End With
  Next

  If $iHeader And Vertical Then 
    Draw.ClipRect = hClip
    Draw.FillRect(X - 1, F, 1, H - F, iGrid)
  Endif
    
  ' Horizontal header

  $iFirstRow = iRow
  $aRowY.Clear

  W = $hRows.Width + F
  If $iHeader And Horizontal Then Draw.FillRect(0, 0, W, Draw.H, Color.ButtonBackground)
  Y = YY
  For I = iRow To $hRows.Count - 1
    If Y > $hView.ClientH Then Break
    $aRowY.Add(Y - F)
    iRow2 = I
    'Draw.Style.Separator(F, Y, W - F, 2)
    H = $hRows._GetRowHeight(I)

    If $iHeader And Horizontal Then
      Draw.FillRect(F, Y - 1, W - F, 1, iGrid)
      Draw.ClipRect = hClip.Intersection(Rect(F, Y, W - F, H))
      If I = $iRow Then Draw.Font.Bold = True
      Draw.Text($hRows._GetRowText(I), F, Y + 2, W - F, H - 2, Align.Center)
      If I = $iRow Then Draw.Font.Bold = False
    Endif
    
    'Draw.Style.Handle(W - 2, Y, 2, H, True)
    Y += H
  Next

  $aRowY.Add(Y - F)
  If $iHeader And Horizontal Then 
    Draw.ClipRect = hClip
    Draw.FillRect(F, Y - 1, W - F, 1, iGrid)
  Endif

  ' Top-left frame
  
  If $iHeader = Both Then Draw.FillRect(0, 0, $hRows.Width + F, $hColumns.Height + F, Color.ButtonBackground)
  
  ' Header limits
  
  If $iHeader And Vertical Then Draw.FillRect(0, $hColumns.Height + F - 1, $hView.ClientW, 1, iGrid)
  If $iHeader And Horizontal Then Draw.FillRect($hRows.Width + F - 1, 0, 1, $hView.ClientH, iGrid)
  
  ' Cells
  
  hRect = New Rect($hView.ClientX, $hView.ClientY, $hView.ClientW, $hView.ClientH)
  hRect.Adjust(F)
  hRect.Adjust($hRows.Width, $hColumns.Height, 0, 0)
  hClip = hRect.Intersection(Draw.ClipRect)
  
  If Not hClip Then Return
  
  Draw.ClipRect = hClip
  
  Y = YY
  
  For I = iRow To iRow2

    H = $aRowY[I - iRow + 1] + F - Y
    X = XX
    
    For J = iCol To iCol2
      
      hData = _GetCellData(I, J)
      
      W = $hColumns[J].Width
      
      Draw.ClipRect = hClip.Intersection(Rect(X, Y, W, H))
      DrawCell(X, Y, W, H, I, J, hData)
      If $iMode And If I = $iRow And If J = $iCol Then
        Paint.Begin(Draw.Device)
        Paint.ClipRect = hClip
        Paint.Brush = Paint.Color(Color.SetAlpha(Color.SelectedBackground, 192))
        Paint.Rectangle(X, Y, W, H)
        Paint.Stroke
        Paint.End
      Endif
      
      X += W
      
    Next
    
    Y += H
    
  Next
  $hData = Null

  ' Row selection

  If $iMode Then

    Y = YY
    X = XX
    
    Paint.Begin(Draw.Device)
    Paint.ClipRect = hClip
    Paint.Brush = Paint.Color(Color.SetAlpha(Color.SelectedBackground, 192))
    
    For I = iRow To iRow2
  
      H = $aRowY[I - iRow + 1] + F - Y
      
      If _IsRowSelected(I) Then
        Paint.Rectangle(X, Y, $hColumns._GetWidth(), H)
        Paint.Fill
      Endif
      
      Y += H
      
    Next
    
    Paint.End
    
  Endif

End

Private Function Border_Read() As Boolean

  Return $hView.Border

End

Private Sub Border_Write(Value As Boolean)

  $hView.Border = Value

End

Private Sub GetFrameWidth() As Integer
  
  If $hView.Border Then Return Style.FrameWidth
  
End


Public Sub _ResizeContents()
  
  Dim F As Integer = GetFrameWidth()
  
  $hView.ResizeContents($hColumns._GetWidth() + $hRows.Width + F * 2, $hRows._GetHeight() + $hColumns.Height + F * 2)
  
End

Private Function Grid_Read() As Boolean

  Return $bGrid

End

Private Sub Grid_Write(Value As Boolean)

  $bGrid = Value
  $hView.Refresh

End

Private Function Mode_Read() As Integer

  Return $iMode

End

Private Sub Mode_Write(Value As Integer)

  Select Case Value
    Case Select.None, Select.Multiple, Select.Single
      $iMode = Value
  End Select

End

Public Sub ScrollArea_MouseMove()
  
  Dim I, MX, MY, X, Y, iRow, iCol As Integer
  Dim iMouse As Integer
  Dim F As Integer = GetFrameWidth()
  
  MX = Mouse.X - F
  MY = Mouse.Y - F
  
  $bInCell = False
  
  If $bResize Then
    If $iRowResize >= 0 Then
      $hRows._SetRowHeight($iRowResize, $iDimResize + Mouse.Y - $MY)
    Else If $iColResize >= 0 Then
      $hColumns[$iColResize].Width = $iDimResize + Mouse.X - $MX
    Endif
    Return
  Endif
  
  iMouse = Mouse.Default
  
  $iRowResize = -1
  $iColResize = -1
  
  If MX < $hRows.Width Then
    
    If $hRows.Resizable Then
      For I = 0 To $aRowY.Max
        If MY >= ($aRowY[I] - 1) And If MY <= ($aRowY[I] + 2) Then
          If I + $iFirstRow Then
            iMouse = Mouse.SizeV
            $iRowResize = I + $iFirstRow - 1
            $iDimResize = $hRows._GetRowHeight($iRowResize)
          Endif
          Break
        Endif
      Next
    Endif
    
  Else If MY < $hColumns.Height Then
    
    If $hColumns.Resizable Then
      X = MX + $hView.ScrollX - $hRows.Width
      For I = 1 To $hColumns.Count - 1
        With $hColumns[I]
          If X >= (.X - 1) And If X <= (.X + 2) Then
            iMouse = Mouse.SizeH
            $iColResize = I - 1
            $iDimResize = $hColumns[$iColResize].Width
            Break
          Endif
        End With
      Next
      If iCol < 0 And If X >= ($hColumns._GetWidth() - 1) And If X <= ($hColumns._GetWidth() + 2) Then
        iMouse = Mouse.SizeH
        $iColResize = $hColumns.Count - 1
        $iDimResize = $hColumns[$iColResize].Width
      Endif
    Endif
    
  Endif
    
  If Not Mouse.Left And If $hView.Mouse <> iMouse Then $hView.Mouse = iMouse
  
  If $iRowResize >= 0 Or If $iColResize >= 0 Then Return
  
  iRow = -1
  iCol = -1
  
  If Mouse.Left Then
    
    X = MX
    Y = MY
    $SX = X
    $SY = Y
  
    If Y >= $hColumns.Height Then
      For I = 1 To $aRowY.Max
        If Y < $aRowY[I] Then
          iRow = I + $iFirstRow - 1
          Break
        Endif
      Next
      If iRow < 0 Then iRow = $hRows._FindRowFromPos(Y - $hColumns.Height + $hView.ScrollY)
    Endif
    
    If X >= $hRows.W Then
      X += $hView.ScrollX - $hRows.Width
      iCol = $hColumns._FindColumnFromPos(X)
    Endif
    
  Endif
  
  If iRow >= 0 Then

    If Not $hTimerScroll Then
      $hTimerScroll = New Timer As "TimerScroll"
      $hTimerScroll.Delay = 50
      $hTimerScroll.Start
    Endif
    
    MoveTo(iRow, iCol)
    If iCol >= 0 Then $bInCell = True

    If $iMode = Select.Multiple Then
      If Mouse.Control Then
        If $hRows._IsSelected(iRow) Then
          $hRows.UnSelect(iRow, 1)
        Else
          $hRows.Select(iRow, 1)
        Endif
      Else
        $hRows._GetSel().UnSelectAll
        $hRows.Select(iRow, 1)
      Endif
    Endif

  Endif
    
End

Public Sub TimerScroll_Timer()
  
  Dim X As Integer = $SX - $hRows.W + $hView.ScrollX
  Dim Y As Integer = $SY - $hColumns.Height + $hView.ScrollY
  Dim iCol As Integer
  Dim iRow As Integer 
  
  If $SX < $hRows.W Then
    iCol = -1
  Else
    iCol = $hColumns._FindColumnFromPos(X)
    If iCol < 0 Then iCol = $hColumns.Count - 1
  Endif
  
  If Y < 0 Then
    iRow = 0
  Else
    iRow = $hRows._FindRowFromPos(Y)
    If iRow < 0 Then iRow = $hRows.Count - 1
  Endif
  
  MoveTo(iRow, iCol)
  
End


Public Sub ScrollArea_MouseDown()
  
  Dim I As Integer
  Dim F As Integer = GetFrameWidth()
  
  $MX = Mouse.X - F
  $MY = Mouse.Y - F
  
  ScrollArea_MouseMove

  If $iRowResize >= 0 Or If $iColResize >= 0 Then
    $bResize = True
  Else If $bInCell Then
    Raise Click
  Else If Mouse.X < $hRows.Width And If Mouse.Y > $hColumns.H Then
    I = $hRows._FindRowFromPos(Mouse.Y - $hColumns.Height + $hView.ScrollY)
    If I >= 0 Then Raise RowClick(I)
  Else If Mouse.Y < $hColumns.Height And If Mouse.X > $hRows.W Then
    I = $hColumns._FindColumnFromPos(Mouse.X - $hRows.Width + $hView.ScrollX)
    If I >= 0 Then Raise ColumnClick(I)
  Endif
  
End

Public Sub ScrollArea_MouseUp()
  
  $bResize = False
  If $hTimerScroll Then
    $hTimerScroll.Stop
    $hTimerScroll = Null
  Endif
  
End

Public Sub ScrollArea_DblClick()
  
  If $bInCell Then Raise Activate
  
End


Private Function Data_Read() As _GridView_Data

  Return $hData

End

Public Sub _GetCellData(iRow As Integer, iColumn As Integer, Optional bCreate As Boolean) As _GridView_Data

  Dim hData As _GridView_Data

  hData = $cCells[GetCellKey(iRow, iColumn)]
  If Not hData Then
    If bCreate Then
      hData = New _GridView_Data
      $cCells[GetCellKey(iRow, iColumn)] = hData
    Else
      $hData = New _GridView_Data
      Raise Data(iRow, iColumn)
      hData = $hData
    Endif
  Endif
  
  Return hData
  
End


Public Sub _get(Row As Integer, Column As Integer) As _GridView_Cell
  
  Dim hCell As New _GridView_Cell
  hCell._Row = Row
  hCell._Column = Column
  hCell._View = Me
  Return hCell
  
End

Public Sub MoveTo(Row As Integer, Column As Integer)
  
  If Column < 0 Then Column = $iCol
  
  If Row < 0 Then
    If $iRow < 0 Then Return
    Row = -1
  Else If Row = $iRow And If Column = $iCol Then
    Return
  Else If Row >= $hRows.Count Or If Column < 0 Or If Column >= $hColumns.Count Then
    Return
  Endif
  
  $iRow = Row
  $iCol = Column
  
  If $iRow >= 0 And If $iCol < 0 Then $iCol = 0
  
  If $iRow >= 0 And If $iCol >= 0 Then _EnsureVisible($iRow, $iCol)
  $hView.Refresh

  Raise Change  
  If $iMode = Select.Single Then Raise Select
  
End

Private Function Row_Read() As Integer

  Return $iRow

End

Private Sub Row_Write(Value As Integer)

  MoveTo(Value, $iCol)

End

Private Function Column_Read() As Integer

  If $iRow < 0 Then Return -1
  Return $iCol

End

Private Sub Column_Write(Value As Integer)

  MoveTo($iRow, Value)

End


Private Sub EnsureRowVisible(iRow As Integer)
  
  'Debug iRow; ": "; $hView.ScrollX, $hRows._GetRowY(iRow), $hView.ClientW, $hRows._GetRowHeight(iRow)
  Dim F As Integer = GetFrameWidth()
  
  $hView.EnsureVisible($hView.ScrollX - F, $hRows._GetRowY(iRow) - F, $hView.ClientW + F * 2, $hRows._GetRowHeight(iRow) + $hColumns.Height + F * 2)
  
End

Public Sub _EnsureVisible(iRow As Integer, iCol As Integer)
  
  Dim F As Integer '= GetFrameWidth()

  With $hColumns[iCol]
    $hView.EnsureVisible(.X + F, $hRows._GetRowY(iRow) + F, .Width + $hRows.Width, $hRows._GetRowHeight(iRow) + $hColumns.Height)
  End With
  
End


Public Sub _SelectRow(iRow As Integer, bSelect As Boolean)
  
  If $iMode = Select.Single Then
    If bSelect Then
      If $iRow <> iRow Then
        Row_Write(iRow)
      Endif
    Else If $iRow >= 0 Then
      Row_Write(-1)
    Endif
  Endif
  
End

Public Sub Clear()
  
  $cCells.Clear
  $iRow = -1
  $iCol = 0
  $hView.Refresh
  
End

Public Sub _ClearCell(iRow As Integer, iCol As Integer)
  
  $cCells.Remove(GetCellKey(iRow, iCol))
  
End

Private Function Resizable_Read() As Boolean

  Return $hColumns.Resizable

End

Private Sub Resizable_Write(Value As Boolean)

  $hColumns.Resizable = Value

End

Private Function ScrollX_Read() As Integer

  Return $hView.ScrollX

End

Private Sub ScrollX_Write(Value As Integer)

  $hView.ScrollX = Value

End

Private Function ScrollY_Read() As Integer

  Return $hView.ScrollY

End

Private Sub ScrollY_Write(Value As Integer)

  $hView.ScrollY = Value

End


Private Function ScrollW_Read() As Integer

  Return $hView.ScrollW

End

Private Function ScrollH_Read() As Integer

  Return $hView.ScrollH

End

Private Function ClientX_Read() As Integer

  Return $hView.ClientX

End

Private Function ClientY_Read() As Integer

  Return $hView.ClientY

End

Private Function ClientW_Read() As Integer

  Return $hView.ClientW

End

Private Function ClientH_Read() As Integer

  Return $hView.ClientH

End

Public Sub ScrollArea_Scroll()
  
  Raise scroll
  
End

Public Sub _RaiseSelect()
  
  $hView.Refresh
  Raise Select
  
End

Public Sub Select(Optional Start As Integer = 0, Optional Length As Integer = -1)
  
  $hRows.Select(Start, Length)
  
End

Public Sub SelectAll()
  
  $hRows.SelectAll
  
End

Public Sub UnSelectAll()
  
  $hRows.UnSelectAll
  
End

Private Function Scrollbar_Read() As Integer

  Return $hView.ScrollBar

End

Private Sub Scrollbar_Write(Value As Integer)

  $hView.ScrollBar = Value

End

Private Function AutoResize_Read() As Boolean

  

End

Private Sub AutoResize_Write(Value As Boolean)

  

End

Private Function Header_Read() As Integer

  Return $iHeader

End

Private Sub Header_Write(Value As Integer)

  $iHeader = Value

End
