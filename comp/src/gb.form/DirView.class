' Gambas class file

Export
Inherits UserControl

Public Const _Properties As String = "*,Border=True,Root,Picture,ShowHidden"
Public Const _DefaultEvent As String = "Click"

Event {Select}
Event Click
Event Activate
Event Menu
Event Icon(Path As String)

Property Root As String
Property Current As String
Property ShowHidden As Boolean
Property Picture As Picture
Property Border As Boolean
Property Icon As Picture

Private $sRoot As String
Private $hTreeView As TreeView
Private $bShowHidden As Boolean
Private $hRootPict As Picture
Private $hPict As Picture
Private $bDeleteOnCancel As Boolean
Private $bNoExpand As Boolean
Private $bNoEvent As Boolean

Public Sub _new()

  $hTreeView = New TreeView(Me) As "TreeView"
  $hTreeView.Editable = True
  ClearView

End


Private Function GetRoot() As String

  If Trim($sRoot) Then Return $sRoot
  Return User.Home

End



Private Sub ClearView()

  Dim sRoot As String = GetRoot()

  $bNoEvent = True
  $hTreeView.Clear
  AddDir(File.Dir(sRoot), File.Name(sRoot), True)
  '$hTreeView.Add(sRoot, sRoot, $hRootPict)
  '$hTreeView.Add(sRoot & "/", "",, sRoot)

  'IF NOT $hRootPict THEN Picture_Write(Picture["icon:/small/directory"]) 'open

  $hTreeView.MoveFirst
  $hTreeView.Item.Expanded = True
  TreeView_Expand
  $bNoEvent = False

End


Private Function Root_Read() As String

  Return $sRoot

End

Private Sub Root_Write(sRoot As String)

  If sRoot = $sRoot Then Return
  $sRoot = sRoot
  RefreshView
  Raise Click

End

Private Sub AddDir(sDir As String, sFile As String, Optional bIgnoreHidden As Boolean)
  
  Dim sParent As String
  Dim hPict As Picture
  Dim bNoEdit As Boolean
  Dim sAfter As String
  
  If Not $bShowHidden And If Left(sFile) = "." And If Not bIgnoreHidden Then Return
  
  sParent = sDir
  If GetRoot() = (sDir &/ sFile) Then 
    sParent = ""
    hPict = $hRootPict
    If Not hPict Then hPict = Picture["icon:/small/directory"]
    bNoEdit = True
  Else 
    hPict = GetIcon(sDir &/ sFile)
  Endif
  
  sAfter = FindAfter($hTreeView, sFile, sParent)
  
  With $hTreeView.Add(sDir &/ sFile, sFile, hPict, sParent)
    .Editable = Not bNoEdit
    'DEBUG sFile; " -> "; sAfter
    .MoveAfter(sAfter)
  End With
  
  $hTreeView.Add(sDir &/ sFile & "/", "",, sDir &/ sFile).Expanded = False
  
End

Public Sub TreeView_Expand()

  Dim sFile As String
  Dim sDir As String
  Dim sDelete As String

  $hTreeView.Item.Selected = True
  sDir = $hTreeView.Item.Key
  If sDir = GetRoot() Then
    $hTreeView.Item.Picture = $hRootPict
  Else
    $hTreeView.Item.Picture = GetIcon($hTreeView.Item.key) 'open
  Endif

  If $hTreeView.MoveChild() Then Return
  If $hTreeView.Item.Text Then Return
  sDelete = $hTreeView.Item.Key
  
  Inc Application.Busy

  $hTreeView[sDelete].Delete

  For Each sFile In Dir(sDir, "*", gb.Directory).Sort()
    AddDir(sDir, sFile)
  Next

  If $hTreeView[sDir].Children = 0 Then
    $hTreeView[sDir].Picture = GetIcon(sDir)
  Else
    '$hTreeView[sDir].Expanded = TRUE
  Endif

Finally

  Dec Application.Busy

Catch

  Debug Error.Where; ": "; Error.Text 
  
End

Public Sub TreeView_Collapse()

  '$hTreeView.Item.Selected = TRUE
  'IF $hTreeView.Item.Key = GetRoot() THEN RETURN
 ' $hTreeView.Item.Picture = GetIcon(

  $bNoExpand = True
  Last.Item.Selected = True
  $bNoExpand = False

End

Public Sub TreeView_Select()

  If Not $bNoExpand Then
    Last.Item.Expanded = True
  Endif
  If $bNoEvent Then Return 
  Raise {Select}
  Raise Click

End

Public Sub TreeView_Activate()

  Raise Activate

End

Public Sub TreeView_Click()

  If $bNoEvent Then Return
  Raise Click

End


Public Sub TreeView_Menu()

  Raise Menu

End


Private Function Current_Read() As String

  Try Return $hTreeView.Current.Key

End

Private Sub MoveToLastChild()

  $hTreeView.MoveChild
  Repeat
  Until $hTreeView.MoveNext()
  $hTreeView.MoveBack
  $hTreeView.Item.EnsureVisible

Catch

End


Private Sub Current_Write(sDir As String)

  Dim sElt As String
  Dim sSubDir As String

  sDir = Trim(sDir)
  'IF Right(sDir) = "/" THEN sDir = Left(sDir, - 1)
  If sDir = Current_Read() Then Return

  'ClearView

  $bNoEvent = True
  sSubDir = "/"
  For Each sElt In Split(File.Dir(sDir), "/", "", True)
    sSubDir &/= sElt
    Try $hTreeView[sSubDir].Expanded = True
  Next
  $bNoEvent = False

  Try $hTreeView[sDir].Selected = True
  If Not Error Then
    $hTreeView.MoveTo(sDir)
    $hTreeView.Item.Expanded = True
    MoveToLastChild
    'TRY $hTreeView.MoveNext
    'TRY $hTreeView.Item.EnsureVisible
  Endif
  Try $hTreeView.Current.EnsureVisible
  Raise Click
  
  'RAISE Refresh

End


Private Sub RefreshView()

  Dim sDir As String

  sDir = Current_Read()
  ClearView
  Current_Write(sDir)  

End


Private Function ShowHidden_Read() As Boolean

  Return $bShowHidden

End

Private Sub ShowHidden_Write(bShowHidden As Boolean)

  If bShowHidden <> $bShowHidden Then
    $bShowHidden = bShowHidden
    RefreshView
  Endif

End

Private Function Picture_Read() As Picture

  Dim hPict As Picture

  hPict = $hTreeView[GetRoot()].Picture
  If hPict <> Picture["icon:/small/directory"] Then Return hPict 'open

End

Private Sub Picture_Write(hPict As Picture)

  If hPict Then
    $hRootPict = hPict
  Else
    $hRootPict = Picture["icon:/small/directory"] 'open
  Endif

  $hTreeView[GetRoot()].Picture = $hRootPict

End


Private Sub Border_Write(bBorder As Boolean)

  $hTreeView.Border = bBorder

End

Private Function Border_Read() As Boolean

  Return $hTreeView.Border

End

Private Function GetIcon(sPath As String) As picture

  If sPath = GetRoot() Then Return $hRootPict  
  $hPict = Null
  Raise Icon(sPath)
  If $hPict Then Return $hPict
  Return Picture["icon:/small/directory"]
  
End


Private Function Icon_Read() As Picture

  Return $hPict

End

Private Sub Icon_Write(Value As Picture)

  If Value.Height <> 16 Then 
    Value = Value.Image.Stretch(Value.Width * 16 / Value.Height, 16).Picture
  Endif
  $hPict = Value

End

Public Sub TreeView_Rename()
  
  Dim sKey As String = $hTreeView.Item.Key
  Dim sParent As String
  Dim sNewName As String = $hTreeView.Item.Text
  Dim sMsg As String
  
  If $hTreeView.MoveParent() Then Return
  $hTreeView.MoveBack()
  
  If sNewName = File.Name(sKey) Then Return 
  
  sMsg = Help.CheckFileName(sNewName)
  If sMsg Then
    Balloon.Warning(sMsg, $hTreeView, $hTreeView.Item.X + Min(32 + Desktop.Scale * 8, $hTreeView.Item.W) / 2, $hTreeView.Item.Y + $hTreeView.Item.H / 2)
    Return
  Endif
  
  Move sKey To File.SetName(sKey, sNewName)
  
  sParent = File.Dir(sKey)
  
  ' TODO: Optimization
  
  Object.Lock($hTreeView)
  $hTreeView.Remove(sKey)
  sKey = File.SetName(sKey, sNewName)
  AddDir(File.Dir(sKey), File.Name(sKey))
  Object.Unlock($hTreeView)
  
  $hTreeView[sKey].Selected = True
  
  $bDeleteOnCancel = False
  
Catch 
  
  $hTreeView[sKey].Text = File.Name(sKey)
  Message.Error(("Cannot rename directory.") & "\n\n" & Error.Text)
  
End

Public Sub TreeView_Cancel()
  
  If Not $bDeleteOnCancel Then Return
  
  Try Rmdir $hTreeView.Item.Key
  $hTreeView.Item.Delete

  $bDeleteOnCancel = False
  
End


Public Sub NewFolder()
  
  Dim sDir As String
  Dim iInd As Integer
  
  sDir = ("New folder")
  iInd = 1
  
  Do
    If Not Exist(Current_Read() &/ sDir) Then Break
    Inc iInd
    sDir = ("New folder") & " (" & CStr(iInd) & ")"
  Loop  
  
  Mkdir Current_Read() &/ sDir
  AddDir(Current_Read(), sDir)
  $bDeleteOnCancel = True
  $hTreeView[Current_Read() &/ sDir].Rename
  
Catch

  Message.Error(("Cannot create directory.") & "\n\n" & Error.Text)
  
End

Private Sub FindAfter(hView As TreeView, sText As String, Optional sParent As String) As String
  
  Dim sAfter As String
  Dim iConv As Integer
  
  With hView
    If sParent Then
      .MoveTo(sParent)
      .MoveChild
    Else 
      .MoveFirst
    Endif
    While .Available
      If Comp(.Item.Text, sText, gb.Text + gb.Language) > 0 Then Break
      If iConv > 0 Then Break
      sAfter = .Item.Key
      .MoveNext
    Wend
  End With

  Return sAfter
  
End

Public Sub Reload()
  
  RefreshView
  
End
