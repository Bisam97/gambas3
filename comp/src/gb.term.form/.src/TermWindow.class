' Gambas class file

Create Static
Export
Inherits TermContainer
Class Rect
Property Text, Title As String
Private $sText As String

Property Maximized As Boolean
Property Read Active As Boolean
Property Resizable As Boolean

Private $rectOldPos As Rect

Private $bMaximized As Boolean
Private $iInMove As Integer
Private $tmrMove As Timer
Private $iTmpCol As Integer
Private $iTmpRow As Integer
Private $bResizable As Boolean = True


Public Sub _new()

  Me.Visible = False

End

Static Public Sub Main()

  Dim hObject As Object

  hObject = Application.Startup.AutoCreate()
  'If Not hObject Is Report Then Return
  'FPreview.Run(hObject)
  TermWindows._Render

End

Public Sub _Render()

  Dim i As Integer
  Dim hAttr As New Attr
  Dim iAttr As Integer
  Dim b As Boolean = Me._NeedRender

  Super._Render
  If Not b Then Return

  hAttr.Background = IIf(Me.Active, TermColor.Red, TermColor.Magenta)
  hAttr.Foreground = TermColor.White
  hAttr.Bold = True
  iAttr = hAttr.GetInteger()

  For i = 0 To Me.Width - 1 '- 2
    Me._Content[0][i] = Char(" ", iAttr)
  Next
  Me._Content[0][0].c = Asc("[")
  Me._Content[0][1].c = Asc("]")
  For i = 1 To String.Len($sText)
    Try Me._Content[0][i + 2].c = Asc(Mid($sText, i, 1))
  Next
  Me._Content[0][Me._Content[0].Max].c = Asc("X")
  Me._NeedRender = False

  If Me.Resizable Then
    
    hAttr.Background = Me.Background
    hAttr.Foreground = Me.Foreground
    hAttr.Bold = False
    iAttr = hAttr.GetInteger()
    
    Me._Content[Me._Content.Max - 1][Me._Content[0].Max].c = &h25E2
    
  Endif
End

Private Function Text_Read() As String

  Return $sText

End

Private Sub Text_Write(Value As String)

  $sText = Value
  Me._NeedRender = True
  TermWindows.SetRenderArea(Rect(Me.ScreenX, Me.ScreenY, Me.Width, 1))
  TermWindows._Render

End

Public Sub _Arrange()

  Me._GetClientRect().Move(0, 1, Me.W - 1, Me.Height - 1)
  Super._Arrange

End

Private Function Maximized_Read() As Boolean

  Return $bMaximized

End

Private Sub Maximized_Write(Value As Boolean)

  If $bMaximized = Value Then Return
  $bMaximized = Value

  If $bMaximized Then
    $rectOldPos = Me._GetRect()
    Me.Move(0, 0, Desktop.Width, Desktop.Height)

  Else
    Me.Move($rectOldPos.Left, $rectOldPos.Top, $rectOldPos.Width, $rectOldPos.Height)
  Endif

End

Public Sub _ScreenResize()

  If $bMaximized Then
    Me.Move(0, 0, Desktop.Width, Desktop.Height)

  Endif

End

Public Sub Center()

  Me.Move((Desktop.Width - Me.Width) / 2, (Desktop.Height - Me.Height) / 2, Me.Width, Me.Height)

End

Public Sub Close()

  Dim hCont As TermControl
  Me.Visible = False
  TermWindows.Delete(Me)

End

Public Sub _MouseUp()

  If Mouse.ScreenY = Me.ScreenY Then
    If Mouse.ScreenX = Me.ScreenX + Me.Width - 1 Then
      Me.Close
      Return
    Endif
    If Mouse.X >= 0 And If Mouse.x <= 1 Then
      Me.Maximized = Not Me.Maximized
    Endif
  Endif
  $tmrMove = Null
  $iInMove = 0

  Super._MouseUp

End

Public Sub _MouseDown()

  If Mouse.Left
    If Not Me.Active Then Termwindows._RaiseWindow(Me)
    If Mouse.y = 0 Then
      $iInMove = Mouse.Col
      $tmrMove = New Timer As "_tmrMove"
      $tmrMove.Delay = 100
    Endif
  Endif
  Super._MouseDown

End

Public Sub _MouseMove()

  If $iInMove > 0 Then
    $iTmpCol = Mouse.ScreenCol - $iInMove
    $iTmpRow = Mouse.ScreenRow
    $tmrMove.Start
    'Me.Move(Mouse.ScreenX - $iInMove, Mouse.screeny)
  Endif
  Super._MouseMove

End

Private Function Active_Read() As Boolean

  Return TermWindows.GetActiveWindow() = Me

End

Public Sub _tmrMove_Timer()

  Me.Move($iTmpCol, $iTmpRow)
  $tmrMove.Stop

End

Public Sub Activate()

  TermWindows._RaiseWindow(Me)

End

Private Function Resizable_Read() As Boolean

  Return $bResizable

End

Private Sub Resizable_Write(Value As Boolean)

  $bResizable = Value

End
