' Gambas class file

Export
Class Rect
Static Public _IdToControl As New Collection
Static Private $iLastId As Integer = 1

Public _Content As Char[][]
Public _NeedRender As Boolean

Property Read id As Integer

Property Read Parent As Container
Property Height, H As Integer
Property Read ScreenX As Integer
Property Read ScreenY As Integer
Property Read Window As Window

Property Left, X, Column As Integer
Property Top, Y, {Line} As Integer
Property Width, W As Integer
Property Background As Integer
Property Foreground As Integer
Property Tag As Variant
Property HaveFocus As Boolean
Property Expand As Boolean
Property _Shadow As Boolean
Property _Border As Integer
Property _Padding As Integer

Private $iBorder As Integer

Private $bShadow As Boolean

Private _RecalcPos As Boolean
Private $rectControl As New Rect
Private $rectDrawing As New Rect
Private $iId As Integer
Private $iParent As Integer
Private $iScreenX As Integer
Private $iScreenY As Integer
Private $iWindow As Integer
Private $iBackGround As Integer = -1
Private $iForeground As Integer
Private $vTag As Variant
Private $bExpand As Boolean
Private $yBorder As Byte
Private $iPadding As Integer
Private $rectClient As Rect

Public Sub _new(Optional hParent As Container)

  $iId = $iLastId
  Inc $iLastId
  If hParent Then
    $iParent = hParent.Id
    hParent._Add(Me)
    'GetWindow
  Else
    If Me Is Window Then
      Windows._Add(Me)
    Endif
  Endif
  $rectControl.Width = 5
  $rectControl.Height = 1
  _IdToControl[$iId] = Me
  _RecalcPos = True
  _NeedRender = True
  'Windows._RefreshScreen

End

Private Sub ResizeBuffer(Width As Integer, Height As Integer)

  Dim i As Integer
  Dim aLine As Char[]

  'Debug "Resize", Object.Type(Me)
  _Content = New Char[][]
  For i = 0 To Height
    aLine = New Char[Width]
    _Content.Add(aLine)
  Next
  Me._NeedRender = True

End

Public Sub _Render()

  Dim i, j As Integer
  Dim hAttr As New Attr
  Dim iAttr As Integer
  Dim hRectC As Rect
  Dim iShadow As Integer = IIf($bShadow, 1, 0)
  Dim iBC As Integer
  If Me Is Container Then
    hRectC = $rectControl
  Else
    hRectC = $rectClient
  Endif

  If Not _Content Then ResizeBuffer(hRectC.Width, hRectC.Height)
  iBC = _GetBackGround()
  hAttr.Background = iBC

  iAttr = hAttr.GetInteger()

  For i = 0 To _Content.Max
    For j = 0 To _Content[0].Max
      _Content[i][j] = Char(" ", iAttr)
    Next
  Next

  Select Case $iBorder
    Case Border.Simple
      hAttr.Background = iBC

      iAttr = hAttr.GetInteger()
      For j = 1 To hRectC.width - 2 '_Content[0].Max - 1
        _Content[0][j] = Char(String.Chr(&h2500), iAttr)
      Next
      For j = 1 To hRectC.width - 2
        _Content[hRectC.Height - 1 - iShadow][j] = Char(String.Chr(&h2500), iAttr)
      Next
      For i = 1 To hRectC.Height - 2 - iShadow

        _Content[i][0] = Char(String.chr(&H2502), iAttr)
        _Content[i][hRectC.Width - 1 - iShadow] = Char(String.chr(&H2502), iAttr)
      Next
      _Content[0][0] = Char(String.chr(&H250C), iAttr)
      _Content[0][hRectC.Width - 1 - iShadow] = Char(String.chr(&H2510), iAttr)
      _Content[hRectC.Height - 1 - iShadow][0] = Char(String.chr(&H2514), iAttr)
      _Content[hRectC.Height - 1 - iShadow][hRectC.Width - 1 - iShadow] = Char(String.chr(&H2518), iAttr)
    Case Border.Double
      hAttr.Background = iBC

      iAttr = hAttr.GetInteger()
      For j = 1 To hRectC.width - 2 '_Content[0].Max - 1
        _Content[0][j] = Char(String.Chr(&h2550), iAttr)
      Next
      For j = 1 To hRectC.width - 2
        _Content[hRectC.Height - 1 - iShadow][j] = Char(String.Chr(&h2550), iAttr)
      Next
      For i = 1 To hRectC.Height - 2 - iShadow

        _Content[i][0] = Char(String.chr(&H2551), iAttr)
        _Content[i][hRectC.Width - 1 - iShadow] = Char(String.chr(&H2551), iAttr)
      Next
      _Content[0][0] = Char(String.chr(&H2554), iAttr)
      _Content[0][hRectC.Width - 1 - iShadow] = Char(String.chr(&H2557), iAttr)
      _Content[hRectC.Height - 1 - iShadow][0] = Char(String.chr(&H255A), iAttr)
      _Content[hRectC.Height - 1 - iShadow][hRectC.Width - 1 - iShadow] = Char(String.chr(&H255D), iAttr)
    Case Else

  End Select

  If $bShadow Then
    hAttr.Foreground = Color.Black
    If IsNull(Me.Parent) Then
      hAttr.Background = Color.Blue
    Else
      hAttr.Background = Me.Parent.Background
    Endif

    iAttr = hAttr.GetInteger()
    For i = 1 To _Content[0].Max

      _Content[_Content.Max - 1][i] = Char(String.chr(&H2580), iAttr)

    Next
    For i = 1 To _Content.Max - 2
      _Content[i][_Content[0].Max] = Char(String.chr(&H2588), iAttr)

    Next
    'hAttr.Background = If(IsNull(Me.Parent), Desktop.BackGround, Me.Parent.Background)
    _Content[0][_Content[0].Max] = Char(String.chr(&H2584), iAttr)
    _Content[_Content.Max - 1][0] = Char(" ", iAttr)

  Endif

End

Private Function id_Read() As Integer

  Return $iId

End

Private Function Parent_Read() As Container

  Return _IdToControl[$iParent]

End

Private Function Left_Read() As Integer

  Return $rectControl.X

End

Private Sub Left_Write(Value As Integer)

  Windows.SetRefreshArea(Rect(Me.ScreenX, Me.ScreenY, $rectDrawing.Width, $rectDrawing.Height))
  $rectControl.X = Value
  $rectDrawing.X = Value
  Me._DefineRect
  Windows.SetRefreshArea(Rect(Me.ScreenX, Me.ScreenY, $rectDrawing.Width, $rectDrawing.Height))
  _RecalcPos = True

End

Private Function Top_Read() As Integer

  Return $rectControl.Y

End

Private Sub Top_Write(Value As Integer)

  Windows.SetRefreshArea(Rect(Me.ScreenX, Me.ScreenY, $rectDrawing.Width, $rectDrawing.Height))
  $rectControl.Y = Value
  $rectDrawing.Y = Value
  Me._DefineRect
  _RecalcPos = True

  Windows.SetRefreshArea(Rect(Me.ScreenX, Me.ScreenY, $rectDrawing.Width, $rectDrawing.Height))

End

Private Function Width_Read() As Integer

  Return $rectControl.Width

End

Private Sub Width_Write(Value As Integer)

  If Value < 1 Then Return
  Windows.SetRefreshArea(Rect(Me.ScreenX, Me.ScreenY, $rectControl.Width, $rectControl.Height))
  $rectControl.Width = Value

  '$rectDrawing.width = Value + IIf($bShadow, 1, 0)
  Me._DefineRect
  ResizeBuffer($rectControl.Width, $rectControl.Height)
  Windows.SetRefreshArea(Rect(Me.ScreenX, Me.ScreenY, $rectControl.Width, $rectControl.Height))
  'If Me Is Container Then Me._SetClientRect()

End

Private Function Height_Read() As Integer

  Return $rectControl.Height

End

Private Sub Height_Write(Value As Integer)

  If Value < 1 Then Return
  Windows.SetRefreshArea(Rect(Me.ScreenX, Me.ScreenY, $rectControl.Width, $rectControl.Height))
  $rectControl.Height = Value
  '$rectDrawing.Height = Value + IIf($bShadow, 1, 0)
  Me._DefineRect
  ResizeBuffer($rectControl.Width, $rectControl.Height)
  Windows.SetRefreshArea(Rect(Me.ScreenX, Me.ScreenY, $rectControl.Width, $rectControl.Height))
  'If Me Is Container Then Me._SetClientRect()

End

Private Function ScreenX_Read() As Integer

  If $iParent > 0 Then
    Return _IdToControl[$iParent].ScreenX + Me.Left
  Else
    Return Me.Left
  Endif

End

Private Function ScreenY_Read() As Integer

  If $iParent > 0 Then
    Return _IdToControl[$iParent].ScreenY + Me.Top
  Else
    Return Me.Top
  Endif

End

Private Sub GetWindow()

  Dim hCont As Object = Me.Parent

  Do
    If hCont.Parent = Null Then
      $iWindow = hCont.Id
      Break
    Endif
    hCont = hCont.Parent
  Loop

End

Private Sub ComputeScreenXY()

  Dim hC As Control = Me.Parent

  If Me Is Label Then Stop
  If hC Then
    $iScreenX = hC.ScreenX + $rectControl.Left
    $iScreenY = hC.ScreenY + $rectControl.Top
  Else
    $iScreenX = $rectControl.Left
    $iScreenY = $rectControl.Top
  Endif
  _RecalcPos = False

End

Private Function Window_Read() As Window

  Return _IdToControl[$iWindow]

End

Public Function _GetScreenRect() As Rect

  Return Rect(Me.ScreenX, Me.ScreenY, $rectControl.width, $rectControl.Height)

End

Public Function _GetRect() As Rect

  Return $rectControl.Copy()

End

Private Function Background_Read() As Integer

  Return $iBackGround

End

Private Sub Background_Write(Value As Integer)

  $iBackGround = Value

End

Private Function Foreground_Read() As Integer

  Return $iForeGround

End

Private Sub Foreground_Write(Value As Integer)

  $iBackGround = Value

End

Public Sub _GetChar(c As Integer, l As Integer) As Char
  'If Me.Tag = "#" Then Stop

  Return _Content[l - Me.ScreenY][c - Me.ScreenX]

End

Private Function Tag_Read() As Variant

  Return $vTag

End

Private Sub Tag_Write(Value As Variant)

  $vTag = Value

End

Private Function HaveFocus_Read() As Boolean

End

Private Sub HaveFocus_Write(Value As Boolean)

End

Public Sub _Arrange()

End

Public Sub Move(Left As Integer, Top As Integer, Width As Integer, Height As Integer)

  Me.Left = Left
  Me.Top = Top
  Me.Width = Width
  Me.Height = Height

End

Private Function Expand_Read() As Boolean

  Return $bExpand

End

Private Sub Expand_Write(Value As Boolean)

  $bExpand = Value

End

Public Sub _Initialize()

  'Here generate the content Array to the right size
  'Define the true size for the Client content

End

Public Sub _GetDrawingRect() As Rect

  Return $rectDrawing.Copy()

End

Private Function _Shadow_Read() As Boolean

  Return $bShadow

End

Private Sub _Shadow_Write(Value As Boolean)

  $bShadow = Value

End

Public Sub _DefineRect()

  $rectClient = Rect($rectControl.Left + $iPadding + $yBorder, $rectControl.Top + $iPadding + $yBorder, $rectControl.Width - ($iPadding + $yBorder) * 2 - IIf($bShadow, 1, 0), $rectControl.Height - ($iPadding + $yBorder) * 2 - IIf($bShadow, 1, 0))

End

Private Function _Border_Read() As Integer

  Return $iBorder

End

Private Sub _Border_Write(Value As Integer)

  $iBorder = Value
  $yBorder = IIf($iBorder > Border.None, 1, 0)

End

Public Sub _GetClientRect() As Rect

  Return $rectClient.Copy()

End

Private Function _Padding_Read() As Integer

  Return $iPadding

End

Private Sub _Padding_Write(Value As Integer)

  $iPadding = Value

End

Public Sub _GetBackGround() As Integer

  Dim i As Integer
  If $iBackGround = -1 Then
    If $iParent > 0 Then
      i = Me.Parent._GetBackGround()
      Return i
    Else
      Return Color.White
    Endif
  Else
    Return $iBackGround
  Endif

End
