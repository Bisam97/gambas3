' Gambas class file

Inherits Highlighter

Class Highlight

Public Sub _new()
  
  Component.Load("gb.eval")
  
End

Public Sub GetKeywords() As String[]
  
  Return System.Keywords
  
End

' static int is_proc(void)
' {
'   PATTERN pattern;
'   int i;
' 
'   if (!EVAL->pattern)
'     return FALSE;
' 
'   for (i = 0;; i++)
'   {
'     pattern = EVAL->pattern[i];
'     if (PATTERN_is_end(pattern))
'       return FALSE;
' 
'     if (PATTERN_is(pattern, RS_PRIVATE) || PATTERN_is(pattern, RS_PUBLIC) || PATTERN_is(pattern, RS_STATIC) || PATTERN_is(pattern, RS_FAST))
'       continue;
' 
'     return (PATTERN_is(pattern, RS_SUB) || PATTERN_is(pattern, RS_PROCEDURE) || PATTERN_is(pattern, RS_FUNCTION));
'   }
' }
' 

Private Sub IsProc() As Boolean

  Dim aSym As String[]
  Dim I As Integer
  Dim sSym As String

  aSym = Highlight.Symbols
  
  For I = 0 To aSym.Max
    sSym = aSym[I]
    If sSym == "PRIVATE" Or If sSym == "PUBLIC" Or If sSym == "STATIC" Or If sSym == "FAST" Then Continue
    If sSym == "SUB" Or If sSym == "PROCEDURE" Or If sSym == "FUNCTION" Then
      Return True
    Else
      Return False
    Endif
  Next

End

Public Sub Run(Text As String)
  
  Dim iState As Integer
  Dim iTag As Integer
  Dim iPos As Integer
  Dim I As Integer
  Dim iLen As Integer
  
  iState = Me.State
  iTag = Me.Tag
  
  Highlight.Analyze(Text, True)
  Me.Limit = IsProc()
  
  iPos = 0
  For I = 0 To Highlight.Symbols.Max
    
    If iPos < Highlight.Positions[I] Then 
      Me.State = Highlight.Normal
      Me.Add(Highlight.Positions[I] - iPos)
      iPos = Highlight.Positions[I]
    Endif
    
    iLen = String.Len(Highlight.Symbols[I])
    Me.State = Highlight.Types[I]
    Me.Add(iLen)
    iPos += iLen
    
  Next

  If iPos < String.Len(Highlight.TextAfter) Then 
    Me.State = Highlight.Normal
    Me.Add(String.Len(Highlight.TextAfter) - iPos)
  Endif
  
  Me.State = iState
  Me.Tag = iTag
  Me.TextAfter = Highlight.TextAfter

End
