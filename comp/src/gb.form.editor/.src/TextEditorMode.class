' Gambas class file

Static Public Const Name As String = ""

Static Public Const BRACES_OPEN As String = "([{\""
Static Public Const BRACES_CLOSE As String = ")]}\""
Static Public Const STRING_DELIM As String = "\""
Static Public Const BETWEEN_BRACES_LEFT As String = "([{"
Static Public Const BETWEEN_BRACES_RIGHT As String = ")]}"

Public CloseBraces As Boolean
Public InsideStringEscape As Boolean
Public InsideStringDelim As String

'Private $bCanCloseBraces As Boolean
'Private $bCanCloseBracesComputed As Boolean

Static Public Sub _init()
  
  Try Component.Load("gb.util")
  
End


Static Public Sub _get(Type As String) As TextEditorMode

	Try Return Object.New("TextEditorMode_" & Type)
	'Error.Raise("Cannot load highlighter: '" & Type & "'")
	Return New TextEditorMode

End

Public Sub IsIdentCar(sCar As String) As Boolean
  
  If IsLetter(sCar) Or If IsDigit(sCar) Then Return True
  
End

Public Sub InsideString(hEditor As TextEditor) As Boolean
  
  Dim iLen As Integer
  Dim I As Integer
  Dim sInside As String
  Dim sLine As String
  Dim sCar As String
  Dim sDelim As String
  
  sLine = hEditor.Current.Text
  iLen = hEditor.Current.Length
  sDelim = Me.STRING_DELIM
  
  InsideStringEscape = False
  InsideStringDelim = False
  
  For I = 1 To hEditor.Column
    sCar = String.Mid$(sLine, I, 1)
    If sCar = sInside Then
      sInside = ""
    Else If InStr(sDelim, sCar) Then
      If Not sInside Then sInside = sCar
    Else If sCar = "\\" Then
      If sInside Then 
        Inc I
        InsideStringEscape = I > hEditor.Column
      Endif
    Endif
  Next
  
  InsideStringDelim = sInside
  Return sInside
  
End

Public Sub BetweenBraces(hEditor As TextEditor) As Boolean

  Dim sLine As String
  Dim X As Integer
  Dim iLen As Integer
  Dim iPos As Integer
  
  If InsideString(hEditor) Then Return
  
  sLine = hEditor.Current.Text
  iLen = hEditor.Current.Length
  X = hEditor.Column
  
  If X = 0 Or If X = iLen Then Return
  
  iPos = InStr(Me.BETWEEN_BRACES_LEFT, String.Mid$(sLine, X, 1))
  If iPos = 0 Then Return
  
  Return String.Mid$(sLine, X + 1, 1) = Mid$(Me.BETWEEN_BRACES_RIGHT, iPos, 1)
  
End



Public Sub CanCloseBraces(hEditor As TextEditor) As Boolean
  
  Dim sLine As String
  Dim X As Integer
  Dim iLen As Integer
  Dim sCar As String

  If Not CloseBraces Then Return
  
  sLine = hEditor.Current.Text
  iLen = hEditor.Current.Length
  X = hEditor.Column
  
  If X >= iLen Then Return True
  
  sCar = String.RemoveDiacritics(String.Mid$(sLine, X + 1, 1))
  If IsLetter(sCar) Or If IsNumber(sCar) Then Return False
  
  'If InsideString(hEditor) Then Return
  
  Return True
  
End


Public Sub OnKeyPress(hEditor As TextEditor) As Boolean
  
  Dim sLine As String
  Dim X As Integer
  Dim sCar As String
  Dim iPos As Integer
  
  If Key.Code = Key.BackSpace Then
    
    If Not CloseBraces Then Return

    If hEditor.Selected Then Return
    
    X = hEditor.Column
    If X = 0 Then Return

    sLine = hEditor.Current.Text
    sCar = String.Mid$(sLine, X, 1)
    iPos = InStr(Me.BRACES_OPEN, sCar)
    If iPos = 0 Then Return
    
    sCar = String.Mid$(sLine, X + 1, 1)
    If sCar <> Mid$(Me.BRACES_CLOSE, iPos, 1) Then Return
        
    hEditor.SaveCursor()
    hEditor.Select(X - 1, hEditor.Line, X + 1, hEditor.Line)
    hEditor.Insert("")
    hEditor.RestoreCursor()
    hEditor.Goto(X - 1, hEditor.Line)
    
    Return True
    
  Endif
  
  InsideStringEscape = False
  
  iPos = InStr(Me.BRACES_OPEN, Key.Text)
  
  If iPos Then
    If hEditor.Selected Then
      If hEditor.SelectionLine = hEditor.Line Then
        hEditor.Insert(Key.Text & hEditor.SelectedText & Mid$(Me.BRACES_CLOSE, iPos, 1))
        Return True
      Endif
    Endif
    If CanCloseBraces(hEditor) Then
      hEditor.Begin
      hEditor.SaveCursor()
      hEditor.Insert(Key.Text)
      hEditor.Insert(Mid$(Me.BRACES_CLOSE, iPos, 1))
      hEditor.RestoreCursor()
      hEditor.Goto(hEditor.Column + 1, hEditor.Line)
      hEditor.End
      '$bCanCloseBracesComputed = False
      Return True
    Endif
  Endif
  
  iPos = InStr(Me.BRACES_CLOSE, Key.Text)
  
  If iPos Then
    
    If Not InsideStringEscape And If String.Mid$(hEditor.Current.Text, hEditor.Column + 1, 1) = Key.Text Then
      hEditor.Goto(hEditor.Column + 1, hEditor.Line)
      Return True
    Endif
    
    If InStr(Me.STRING_DELIM, Key.Text) And If hEditor.Column < hEditor.Current.Length Then
      If InsideStringEscape Then Return
      If InsideStringDelim = Key.Text Then
        hEditor.SaveCursor()
        hEditor.Insert(Key.Text)
        hEditor.Insert(Mid$(Me.BRACES_OPEN, iPos, 1))
        hEditor.RestoreCursor()
        hEditor.Goto(hEditor.Column + 1, hEditor.Line)
        '$bCanCloseBracesComputed = False
        Return True
      Endif
    Endif
    
  Endif
  
  '$bCanCloseBracesComputed = False
    
End
