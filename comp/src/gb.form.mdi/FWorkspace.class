' Gambas class file

Static Private $hTile As Picture

Public TitleBar As Control

Private $aWindow As New Object[]
'PRIVATE $aWatcher AS NEW Object[]
Private $hCurrent As CWindow
Private $bMove As Boolean
Private $X As Integer
Private $Y As Integer
Private $W As Integer
Private $H As Integer
Private $bShowTitle As Boolean
Private $iNoWait As Integer
Private $hWatcher As Watcher
Private $iBackground As Integer = Color.Default
Private $bNoClose As Boolean
Private $iLock As Integer
Private $bLogo As Boolean
Private $bButtonLeft As Boolean

Public Sub _new()
  
  If Not $hTile Then $hTile = Picture["img/hash.png"]
  '$hWatcher = NEW Watcher(panChild) AS "panChild"
  TitleBar = tabWorkspace
  $bLogo = Application.Name = "gambas" & System.Version
  If $bLogo Then 
    picLogo.Picture = Picture.Load("img/logo.png")
    picLogo.Resize(picLogo.Picture.W, picLogo.Picture.H)
  Endif
  
End

Public Function GetActiveWindow() As Window

  If $hCurrent Then Return $hCurrent.Window
  
End

Private Function GetIndex(hWin As Window) As Integer
  
  Dim iInd As Integer
  
  For iInd = 0 To $aWindow.Max
    If $aWindow[iInd].Window = hWin Then 
      'DEBUG $aWindow[iInd];; "=>";; iInd
      Return iInd
    Endif
  Next
  
  Return -1
  
End

Public Sub Add(hWin As Window, Optional bResize As Boolean, Optional iGrid As Integer)
  
  Dim iInd As Integer
  Dim hScrollview As ScrollView
  Dim hWatcher As Watcher
  Dim hWindow As CWindow

  If GetIndex(hWin) >= 0 Then Return

  If bResize Then  
    hWin.Reparent(dwgBorder)
  Else
    hWin.Reparent(panWorkspace)
  Endif
  
  hWin.Show ' We must be sure that the Open event is raised
  hWin.Hide
  
  hWindow = New CWindow
  hWindow.Window = hWin
  hWindow.Resizable = bResize
  hWindow.Grid = iGrid
  
  $aWindow.Add(hWindow)
  
  If $aWindow.Count > 1 Then
  
    iInd = tabWorkspace.Count
    Object.Lock(tabWorkspace)
    Inc tabWorkspace.Count
    tabWorkspace.Index = iInd
    tabWorkspace.Current.Text = ""
    Object.Unlock(tabWorkspace)
    Form_Resize
    
  Else

    If $iLock <= 0 Then ShowTabStrip

  Endif
  
  'DEBUG "ADD "; hWin
  
  hWindow.Observer = New Observer(hWin, True) As "Watcher"
  UpdateTitle(hWin)
  Activate
    
End

Public Sub SetResizable(hWin As Window, bResize As Boolean, Optional iGrid As Integer)
  
  Dim iInd As Integer = GetIndex(hWin)
  Dim hWindow As CWindow
  
  If iInd < 0 Then Return
  
  hWindow = $aWindow[iInd]

  hWindow.Resizable = bResize
  hWindow.Grid = iGrid
  
  If bResize Then  
    hWin.Reparent(dwgBorder)
  Else
    hWin.Reparent(panWorkspace)
  Endif
  
  If hWindow = $hCurrent Then Activate
  
End

Private Sub RemoveWindow(hWin As Window, Optional bClose As Boolean)
  
  Dim iInd As Integer = GetIndex(hWin)

  'DEBUG "REMOVE "; hWin;; hWin.Title;; "["; iInd; "]"
  
  If iInd < 0 Then Return

  If bClose Then
    If Object.IsValid(hWin) And If Not hWin.Closed Then
      If hWin.Close() Then Return
    Endif
  Endif

  Inc $iNoWait

  If $hCurrent = $aWindow[iInd] Then $hCurrent = Null
  $aWindow.Remove(iInd)  
  
  If $aWindow.Count Then
    If iInd = 0 Then 
      Object.Lock(tabWorkspace)
      tabWorkspace.Index = 1
      'panChild.Reparent(tabWorkspace)
      tabWorkspace.Index = 0
      Object.Unlock(tabWorkspace)
    Endif
    tabWorkspace[iInd].Delete
  Else
    HideTabStrip
  Endif
  
  Activate
  
  Dec $iNoWait
  
End

Public Sub Remove(Window As Window)
  
  RemoveWindow(Window, True)
  
End


Private Sub UpdateTitle(Optional hWin As Window)
  
  Dim iInd As Integer

  If Not hWin Then
    If Not $hCurrent Then Return
    hWin = $hCurrent.Window
  Endif
  
  iInd = GetIndex(hWin)
  If iInd < 0 Then Return

  With hWin

    tabWorkspace[iInd].Text = .Text
    tabWorkspace[iInd].Picture = .Icon
    If $hCurrent And If $hCurrent.Window = hWin Then
      lblTitle.Text = " " & .Text
      imgIcon.Picture = .Icon
    Endif
  
  End With
  
End


Public Sub Watcher_Title()

  'DEBUG LAST.Name;; LAST.Title
  'IF NOT $hCurrent THEN RETURN
  'IF LAST.Control <> $hCurrent.Window THEN RETURN
  UpdateTitle(Last)
    
End

Public Sub Watcher_Resize()
  
  'DEBUG LAST;; LAST.Control
  If Not $hCurrent Then Return
  'IF LAST.Control <> $hCurrent.Window THEN RETURN
  MoveHandle 
  
End

Public Sub Watcher_Icon()

  'DEBUG LAST;; LAST.Control
  Watcher_Title  
  
End

Public Sub Watcher_Close()
  
  'DEBUG LAST.Name;; LAST.Title;; LAST.Closed
  RemoveWindow(Last)
  
End

Private Sub CheckWindow()
  
  Dim hWindow As CWindow
  Dim iInd As Integer
  
  While iInd < $aWindow.Count
    hWindow = $aWindow[iInd]
    If Object.IsValid(hWindow.Window) And If Not hWindow.Window.Closed Then 
      Inc iInd
      Continue
    Endif
    RemoveWindow(hWindow.Window)
  Wend
  
End


Private Sub MoveHandle()

  Dim hWin As Window = $hCurrent.Window
  
  panRight.Move(hWin.Width, Max(0, (hWin.Height - panRight.Height) / 2))
  panDown.Move(Max(0, (hWin.Width - panRight.Width) / 2), hWin.Height)
  panRightDown.Move(hWin.Width, hWin.Height)
  dwgBorder.Move(0, 0, hWin.Width + 4, hWin.Height + 4)
  
  dwgBorder.Lower
  panRight.Raise
  panDown.Raise
  panRightDown.Raise
  
End

Private Sub GetParent() As Workspace
  
  Return Me.Parent
  
End

Public Sub Activate(Optional hWindow As Window)
  
  Dim hOld As CWindow
  Dim hWin As CWindow

  'IF $iLock > 0 THEN RETURN
  
  If $aWindow.Count Then 
  
    'DEBUG "ACTIVATE "; $hCurrent;; "->";;
    ' IF hWindow THEN 
    '   ERROR hWindow
    ' ELSE 
    '   ERROR $aWindow[tabWorkspace.Index].Window
    ' ENDIF
  
    If hWindow Then
      'DEBUG "Set tab index"
      Try tabWorkspace.Index = GetIndex(hWindow)
      Return
    Endif
  
    hWin = $aWindow[tabWorkspace.Index]
    If Not Object.IsValid(hWin.Window) Then Return

    hOld = $hCurrent
  
    $hCurrent = hWin
    
    If $hCurrent.Resizable Then
      $hCurrent.Window.Move(0, 0)
      MoveHandle
      svwWorkspace.Raise
    Else
      panWorkspace.Raise
    Endif
    'WITH tabWorkspace
    '  $hCurrent.Move(.X + .ClientX, .Y + .ClientY, .ClientW, .ClientH)
    'END WITH
    
    If $iLock = 0 Then

      With $hCurrent.Window
        .Show
        .Raise
        If Not Application.ActiveControl Or If Application.ActiveControl.Window <> $hCurrent.Window Then
          .SetFocus
        Endif
      End With
      
      If hOld And If hOld <> hWin Then 
        $bNoClose = True
        'If $iNoWait = 0 Then Wait
        'DEBUG $bNoClose
        hOld.Window.Hide
        $bNoClose = False
        'DEBUG $bNoClose
        'WAIT 0.2
      Endif
      
      UpdateTitle

    Endif 
        
  Endif

  If $iLock = 0 Then GetParent()._Activate
  
End

Public Sub tabWorkspace_Click()
  
  'DEBUG tabWorkspace.Index
  Activate()
  
End


Public Sub Form_Resize()

  Dim H As Integer

  If tabWorkspace.Visible Then

    If $bLogo Then picLogo.Hide
    
    If tabWorkspace.Orientation = Align.Top Then
    
      H = tabWorkspace.ClientY - 2
      'H = panChild.ScreenY - tabWorkspace.ScreenY
      If btnTabClose.W <> H Or btnTabClose.H <> H Then 
        btnTabClose.Resize(H - 2, H - 2)
        btnTabClose.Picture = Picture["icon:/" & (H - 10) & "/close"]
      Endif
      
      If $bButtonLeft Then
      
        btnTabClose.Move(0, 1)
        tabWorkspace.Move(H, 0, Me.ClientW - H, Me.ClientH)
        
      Else
      
        btnTabClose.Move(Me.ClientW - H + 1, 1)
        tabWorkspace.Move(0, 0, Me.ClientW - H, Me.ClientH)
        
      Endif

      With tabWorkspace
        If $bShowTitle Then
          panTitle.Move(.X, H, .W + btnTabClose.W, panTitle.H)
          svwWorkspace.Move(0, panTitle.H + H, .W + H, .H - panTitle.H - H)
          panWorkspace.Move(0, panTitle.H + H, .W + H, .H - panTitle.H - H)
        Else 
          svwWorkspace.Move(0, H, .W + H, .H - H)
          panWorkspace.Move(0, H, .W + H, .H - H)
        Endif 
      End With 
      
    Else
    
      H = tabWorkspace.H - tabWorkspace.ClientY - tabWorkspace.ClientH - 2
      If btnTabClose.W <> H Or btnTabClose.H <> H Then 
        btnTabClose.Resize(H - 2, H - 2)
        btnTabClose.Picture = Picture["icon:/" & (H - 10) & "/close"]
      Endif

      If $bButtonLeft Then
      
        btnTabClose.Move(0, Me.ClientH - H + 1)
        tabWorkspace.Move(H, 0, Me.ClientW - H, Me.ClientH)
        
      Else
      
        btnTabClose.Move(Me.ClientW - H + 1, Me.ClientH - H + 1)
        tabWorkspace.Move(0, 0, Me.ClientW - H, Me.ClientH)
        
      Endif

      With tabWorkspace
        If $bShowTitle Then
          panTitle.Move(.X, Me.ClientH - H, .W + btnTabClose.W, panTitle.H)
          svwWorkspace.Move(0, Me.ClientH - panTitle.H - H, .W + H, .H - panTitle.H - H)
          panWorkspace.Move(0, Me.ClientH - panTitle.H - H, .W + H, .H - panTitle.H - H)
        Else 
          svwWorkspace.Move(0, Me.ClientY, .W + H, .H - H)
          panWorkspace.Move(0, Me.ClientY, .W + H, .H - H)
        Endif 
      End With 

    Endif  
    
    panWorkspace.BackColor = Color.Background
    panWorkspace.Border = Border.Raised

  Else

    svwWorkspace.Move(0, 0, Me.ClientW, Me.ClientH)
    panWorkspace.Move(0, 0, Me.ClientW, Me.ClientH)
    panWorkspace.BackColor = If($iBackground = Color.Default, Color.Mix(Color.Background, Color.Foreground), $iBackground)
    panWorkspace.Border = Border.None

    If $bLogo Then
      picLogo.Move(picLogo.Parent.W - picLogo.W - Desktop.Scale, picLogo.Parent.H - picLogo.H - Desktop.Scale)
      picLogo.Show
    Endif

    panWorkspace.Raise

  Endif
  
  'DEBUG tabWorkspace.Visible;; "Index =";; tabWorkspace.Index;; "ClientY =";; tabWorkspace.ClientY

  ' WITH tabWorkspace
  '   DEBUG ME.W;; ME.H;; "/";; tabWorkspace.W;; tabWorkspace.H;; "/";; .ClientW;; .ClientH;; .ClientX;; .ClientY
  ' END WITH 
  
End

Public Sub btnClose_Click()

  $aWindow[tabWorkspace.Index].Window.Close
  'CheckWindow

End

Public Sub btnCloseOther_Click()
  
  Dim hWindow As CWindow
  Dim hCurrent As CWindow
  Dim iCpt As Integer
  
  hCurrent = $aWindow[tabWorkspace.Index]
  
  {Lock}
  For Each hWindow In $aWindow.Copy()
    If hWindow = hCurrent Then Continue
    If hWindow.Window.Close() Then Break
  Next 
  
  'CheckWindow
  {Unlock}
  
End


Public Sub Handle_MouseDown()

  $bMove = True  
  $X = Mouse.ScreenX
  $Y = Mouse.ScreenY
  $W = $hCurrent.Window.W
  $H = $hCurrent.Window.H
  
  'DEBUG Mouse.ScreenX;; Mouse.ScreenY
  'DEBUG $X;; $Y

End

Public Sub Handle_MouseMove()

  Dim W, H, G As Integer
  Dim hPanel As Panel

  If Not $bMove Then Return
  
  hPanel = Last

  With $hCurrent.Window

    W = .W
    H = .H

    'DEBUG "(";; W;; H;; ") + (";; Mouse.ScreenX;; Mouse.ScreenY;; ") -> ";

    If hPanel <> panRight Then H = $H + Mouse.ScreenY - $Y
    If hPanel <> panDown Then W = $W + Mouse.ScreenX - $X
    
    W = Max(1, W)
    H = Max(1, H)

    If Not Mouse.Shift Then    
      G = $hCurrent.Grid 
      If G Then
        W = Max(1, Int(W / G + 0.5)) * G
        H = Max(1, Int(H / G + 0.5)) * G
      Endif
    Endif 
    
    'PRINT #File.Err, "(";; W;; H;; ")"
    
    .Resize(W, H)
  
  End With
  
  $bMove = False
  MoveHandle  
  $bMove = True

End

Public Sub Handle_MouseUp()

  $bMove = False  

End

Public Function GetWindows() As Object[]
  
  Dim aWin As New Object[]
  Dim hWindow As CWindow
  
  For Each hWindow In $aWindow
    aWin.Add(hWindow.Window)
  Next  
  
  Return aWin
  
End

Public Sub dwgBorder_Draw()

  Return
  Draw.LineStyle = Line.Solid
  Draw.LineWidth = 4
  Draw.ForeColor = Color.SelectedBackground
  Draw.Line(dwgBorder.W - 2, 0, dwgBorder.W - 2, dwgBorder.H)
  Draw.Line(0, dwgBorder.H - 2, dwgBorder.W, dwgBorder.H - 2)
  'Draw.Tile($hTile, dwgBorder.W - 8, 0, 8, dwgBorder.H)
  'Draw.Tile($hTile, 0, dwgBorder.H - 8, dwgBorder.W, 8)

End

Public Sub imgIcon_DblClick()

  btnClose_Click

End

Public Sub lblTitle_MouseDown()

  Activate  

End

Public Sub IsShowTitle() As Boolean
  
  Return $bShowTitle
  
End

Public Sub SetShowTitle(bVal As Boolean)
  
  $bShowTitle = bVal
  panTitle.Visible = bVal
  
End

Public Sub tabWorkspace_MouseUp()

  Activate

End

Private Sub FindTabFromTitle(sTitle As String) As Integer

  Dim iInd As Integer
  
  For iInd = 0 To tabWorkspace.Count - 1
    If tabWorkspace[iInd].Text = sTitle Then Return iInd
  Next

  Return -1  
  
End


Public Sub tabWorkspace_Menu()

  Dim iInd As Integer
  Dim hWin As CWindow
  Dim hMenu As Menu
  Dim aTitle As New String[]
  Dim sTitle As String
  
  'GetParent()._Menu

  mnuWindow.Children.Clear

  For iInd = 0 To tabWorkspace.Count - 1
    aTitle.Add(tabWorkspace[iInd].Text)
  Next
  aTitle.Sort
  
  For Each sTitle In aTitle
    iInd = FindTabFromTitle(sTitle)
    With tabWorkspace[iInd]
      hMenu = New Menu(mnuWindow) As "mnuWindow"
      If .Text Then
        hMenu.Text = .Text
      Else 
        hMenu.Text = " "
      Endif
      hMenu.Picture = .Picture
      hMenu.Checked = iInd = tabWorkspace.Index
      hMenu.Tag = iInd
    End With
  Next 
  
  hMenu = New Menu(mnuWindow)

  hMenu = New Menu(mnuWindow) As "btnClose"
  hMenu.Text = ("&Close current tab")
  hMenu.Picture = Picture["icon:/small/close"]
  
  If $aWindow.Count >= 2 Then
    hMenu = New Menu(mnuWindow) As "btnCloseOther"
    hMenu.Text = ("Close &all other tabs")
    hMenu.Picture = Picture["icon:/small/trash"]
  Endif
  
  mnuWindow.Popup
  
End

Public Sub mnuWindow_Click()
  
  tabWorkspace.Index = Last.Tag
  
End


Public Sub SetBackground(iColor As Integer)
  
  $iBackground = iColor
  Form_Resize
  
End

Public Sub GetBackground() As Integer
  
  Return $iBackground
  
End

Private Sub HideTabStrip()
  
  tabWorkspace.Hide
  btnTabClose.Hide
  panTitle.Visible = $bShowTitle
  Form_Resize  
  
End


Private Sub ShowTabStrip()
  
  If $aWindow.Count Then 
    btnTabClose.Show
    tabWorkspace.Show
    Form_Resize
  Endif
  
End

Public Sub Lock()
  
  Inc $iLock 
  
  If $iLock = 1 Then 
    HideTabStrip
  Endif
  
End

Public Sub UnLock()
  
  If $iLock <= 0 Then Return
  
  Dec $iLock
  
  If $iLock = 0 Then 
    CheckWindow
    Activate
    ShowTabStrip
  Endif
  
End

Public Sub GetOrientation() As Integer
  
  Return tabWorkspace.Orientation
  
End

Public Sub SetOrientation(iOrientation As Integer)
  
  tabWorkspace.Orientation = iOrientation
  Form_Resize
  
End

Public Sub GetButtonPosition() As Integer
  
  Return If($bButtonLeft, Align.Left, Align.Right)
  
End

Public Sub SetButtonPosition(iPos As Integer)
  
  $bButtonLeft = iPos = Align.Left
  Form_Resize
  
End
