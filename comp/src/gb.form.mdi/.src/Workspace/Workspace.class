' Gambas class file

Export

Inherits UserControl

Public Const _Properties As String = "*,Orientation{Align.Top;Bottom}=Top"
Public Const _DefaultEvent As String = "Activate"
Public Const _Group As String = "Special"

Event Activate
'EVENT WindowMenu

Property ActiveWindow As Window
Property Read Children As Window[]
Property Font As Font
Property Background As Integer
Property Orientation As Integer

Private hWorkspace As FWorkspace

Public Sub _new()
  
  'SUPER.Background = Color.Yellow
  hWorkspace = New FWorkspace(Me)
  'ME.Container = hWorkspace.Container
  
End

Public Sub Add(hWindow As Window, Optional Resizable As Boolean) As Window
  
  hWorkspace.Add(hWindow, Resizable)
  
  Return hWindow
  
End

Public Sub Lock()
  
  hWorkspace.Lock
  
End

Public Sub Unlock()
  
  hWorkspace.UnLock
  
End



' PUBLIC SUB SetResizable(Window AS Window, Resizable AS Boolean, OPTIONAL Grid AS Integer)
'   
'   hWorkspace.SetResizable(Window, Resizable, Grid)
'   
' END


Private Function ActiveWindow_Read() As Window

  Return hWorkspace.GetActiveWindow()

End

Private Sub ActiveWindow_Write(Value As Window)

  hWorkspace.Activate(Value)

End

Private Function Children_Read() As Window[]

  Return hWorkspace.GetWindows()

End

Public Sub _Activate()
  
  Raise Activate
  
End

Private Function ShowTitle_Read() As Boolean

  Return hWorkspace.IsShowTitle()

End

Private Sub ShowTitle_Write(Value As Boolean)

  hWorkspace.SetShowTitle(Value)

End

Private Function Font_Read() As Font

  Return hWorkspace.TitleBar.Font  

End

Private Sub Font_Write(Value As Font)

  hWorkspace.TitleBar.Font = Value

End

Private Function Background_Read() As Integer

  Return hWorkspace.GetBackground()

End

Private Sub Background_Write(Value As Integer)

  hWorkspace.SetBackground(Value)

End

Private Function Orientation_Read() As Integer

  Return hWorkspace.GetOrientation()  

End

Private Sub Orientation_Write(Value As Integer)

  If Value = Align.Top Or If Value = Align.Bottom Then hWorkspace.SetOrientation(Value)

End
