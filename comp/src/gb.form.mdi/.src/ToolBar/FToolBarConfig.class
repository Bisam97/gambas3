' Gambas class file

Private $hToolbar As ToolBar
Private $hForm As FToolBar
Private $aDefault As String[]
Private $hInside As DrawingArea
Private $hPopupToolbar As ToolBar
Static Private $aDeleteLater As New Control[]

Public Sub _new()
  
End


Public Sub Run(hToolbar As ToolBar) 

  Me.Load
  SetCurrentToolbar(hToolbar)
  Me.Show
  
End

Private Sub GetForm(hToolbar As ToolBar) As FToolBar
  
  Return hToolbar._Container.Parent
  
End


Private Sub SetCurrentToolbar(hToolbar As ToolBar)

  'Debug hToolbar;; "-";; $hToolbar
  
  If hToolbar = $hToolbar Then Return
  
  If $hToolbar Then
    Try $hForm.SetConfigureMode(False)
    $hToolbar = Null
    $hForm = Null
  Endif
  
  If Not hToolbar Then Return
  
  $hToolbar = hToolbar
  $hForm = GetForm(hToolbar)

  If $hToolbar.Text Then
    Me.Title = Subst(("'&1' toolbar configuration"), $hToolbar.Text)
  Else
    Me.Title = ("Toolbar configuration")
  Endif
  
  cmbSize.Index = $hForm.GetIconSize()
  
  InitAction
  $hForm.SetConfigureMode(True)

End


Public Sub btnClose_Click()

  Me.Close

End

Public Sub AddAction(sAction As String)
  
  Dim hItem As Control

  'Debug sAction

  If Left(sAction) = "." Then sAction = Mid$(sAction, 2)
  
  For Each hItem In svwAction.Children
    If hItem.Tag = sAction Then
      hItem.Show
      Return
    Endif
  Next
  
  hItem = New DrawingArea(svwAction) As "Item"
  hItem.Tag = sAction
  hItem.Mouse = Mouse.Pointing
  hItem.Resize(Desktop.Scale * 32, Desktop.Scale * 5)
  
End


Private Sub InitAction()
  
  Dim hCtrl As Control
  Dim hItem As DrawingArea
  Dim sAction As String
  
  'For Each hCtrl In svwAction.Children
  '  hCtrl.Delete
  'Next
  svwAction.Children.Clear
  svwAction.Arrangement = Arrange.None
  
  AddAction("|")
  AddAction("-")
  AddAction("~")
  
  'Print $hToolbar.Children.Count;; $hToolbar._Container.Children.Count
  For Each sAction In MAction.Toolbars[$hForm.ToolbarKey].List
  
    If Not MAction.Actions.Exist(sAction) Then Continue
    hCtrl = $hForm.FindControl(sAction, True)
    If Not hCtrl Then Continue
    
    AddAction(sAction)
    
  Next
  
  svwAction.Arrangement = Arrange.Vertical
  
End


Public Sub Item_Enter()
  
  $hInside = Last
  $hInside.Refresh
  
End

Public Sub Item_Leave()
  
  $hInside = Null
  Last.Refresh
  
End

Private Sub DrawItem(hCtrl As Control, hAction As CAction, bScreenshot As Boolean)
  
  'Dim hAction As CAction
  Dim hIcon As Picture
  Dim sText As String
  Dim W As Integer
  Dim bText As Boolean
  
  'If hItem.Tag Then hAction = MAction.Actions[hItem.Tag]
   bText = Draw.W > (Draw.H * 2)
  
  'If $hInside = hItem Then 
  'Draw.Style.Button(0, 0, Draw.W, Draw.H, False)
  
  Draw.Foreground = Color.LightForeground
  Draw.Rect(0, 0, Draw.W, Draw.H)
  Draw.Rect(1, 1, Draw.W - 2, Draw.H - 2)
  Draw.Foreground = hCtrl.Foreground
  
  If hAction Then
    
    hIcon = hAction.GetConfigIcon(If(bScreenshot, $hForm.GetRealIconSize(), 0))
    If hIcon Then 
      If bText Then
        Draw.Picture(hIcon, 8, (Draw.H - hIcon.H) / 2)
      Else
        Draw.Picture(hIcon, (Draw.W - hIcon.W) / 2, (Draw.H - hIcon.H) / 2)
      Endif
      W = hIcon.W
    Else
      W = $hForm.GetIconSize()
    Endif
    If bText Then Draw.Text(hAction.Display, W + 12, 0, Draw.W - W - 16, Draw.H, Align.Normal)
  
  Else
    
    Select Case Last.Tag
      Case "|"
        hIcon = Picture["img/separator.png"]
        sText = ("Separator")
      Case "~"
        hIcon = Picture["img/expander.png"]
        sText = ("Expander")
      Case "-"
        hIcon = Picture["img/space.png"]
        sText = ("Space")
    End Select
    
    If bText Then
      Draw.Picture(hIcon, 8, (Draw.H - hIcon.H) / 2)
    Else
      Draw.Picture(hIcon, (Draw.W - hIcon.W) / 2, (Draw.H - hIcon.H) / 2)
    Endif
    W = hIcon.W
    If bText Then Draw.Text(sText, W + 12, 0, Draw.W - W - 16, Draw.H, Align.Normal)
    'Draw.Style.Separator(8, (hItem.H - W) / 2, W - 4, W, False)
  Endif
  
End


Public Sub Item_Draw()
  
  DrawItem(Last, MAction.Actions[Last.Tag], False)
  
End

Private Sub GetItemScreenshot(hAction As CAction) As Picture
  
  Dim hPict As Picture
  Dim hItem As Control
  ' Dim hObject As Object
  ' Dim bVisible As Boolean
  ' Dim hParent As Control
  ' Dim hWindow As Window
  ' Dim X, Y As Integer
  
  ' hWindow = New Window
  ' hWindow.Border = False
  ' hWindow.Move(Mouse.ScreenX - 4, Mouse.ScreenY - 4, hItem.W, hItem.H)
  ' 
  ' bVisible = hItem.Visible
  ' hParent = hItem.Parent
  ' X = hItem.X
  ' Y = hItem.Y
  ' hObject = hItem
  ' Try hObject.Border = True
  ' hItem.Reparent(hWindow, 0, 0)
  ' hItem.Show
  ' hWindow.Show
  ' Wait
  ' hPict = hItem.Screenshot()
  ' hWindow.Close
  ' hItem.Reparent(hParent, X, Y)
  ' hItem.Visible = bVisible
  
  ' bVisible = hItem.Visible
  ' X = hItem.X
  ' Y = hItem.Y
  ' hParent = hItem.Parent
  ' 
  ' hItem.Ignore = True
  ' hItem.Reparent($hForm, 0, 0)
  ' hItem.Raise
  ' hItem.Background = Color.Background
  ' hItem.Show
  ' Wait
  ' hPict = hItem.Screenshot()
  ' 
  ' hItem.Reparent(hParent, X, Y)
  ' hItem.Visible = bVisible
  ' hItem.Ignore = False
  ' hItem.Background = Color.Default
  
  hItem = $hForm.FindControl(hAction.Key)
  hPict = New Picture(hItem.W, hItem.H)
  Draw.Begin(hPict)
  Draw.FillRect(0, 0, Draw.W, Draw.H, Color.Background)
  DrawItem(hItem, hAction, True)
  Draw.End
  
  Return hPict
  
End

Static Public Sub IsSpecialAction(sAction As String) As Boolean
  
  Return InStr("~|-", sAction)
  
End


Public Sub DragAction(hCtrl As Control, sAction As String)
  
  Dim hAction As CAction 
  Dim bOutside As Boolean
  Dim hDest As Control
  Dim bAnim As Boolean
  Dim hItem As Control

  If Not sAction Then Return

  bOutside = hCtrl.Parent = svwAction
  ' If bOutside Then
  '   If sAction <> "|" Then hCtrl.Hide
  ' Else
  '   hCtrl.Hide
  ' Endif

  If sAction Then hAction = MAction.Actions[sAction]
  
  'hItem = $hForm.FindControl(sAction)
  
  $hForm.DragStart(bOutside)
  
  'If hItem Then
  '  Drag.Icon = GetItemScreenshot(hItem)
  If hAction Then
    Drag.Icon = GetItemScreenshot(hAction)
  Else If sAction = "~" Then
    Drag.Icon = Picture["img/expander.png"]
  Else If sAction = "|" Then
    Drag.Icon = Picture["img/separator.png"]
  Else If sAction = "-" Then
    Drag.Icon = Picture["img/space.png"]
  Else
    Drag.Icon = Null
  Endif

  'Debug "START DRAG";; sAction
  hDest = Drag(hCtrl, sAction, MAction.MIME)
  'Debug "END DRAG"
  
  If hDest Then
  
    If bOutside Then
    
      If hDest = panAction Then
      Else
        If Not IsSpecialAction(hCtrl.Tag) Then 
          hCtrl.Hide
        Endif
      Endif
    
    Else
    
      If hDest = panAction Then
        If hCtrl.Action Then
          $hForm.HideControl(hCtrl)
        Else
          $aDeleteLater.Add(hCtrl)
          hCtrl.Hide
        Endif
        bAnim = True
      Else
        If Not hCtrl.Action Then
          $aDeleteLater.Add(hCtrl)
          hCtrl.Hide
        Endif
      Endif
    
    Endif
    
  Else
  
    If Not bOutside Then
      hCtrl.Show
    Else
      bAnim = True
    Endif
    
  Endif
  
  $hForm.DragEnd(bAnim)
  
  If $aDeleteLater.Count Then timDeleteLater.Trigger
  
End

Public Sub Item_MouseDrag()
  
  Dim hItem As DrawingArea = Last
  
  '$hInside = Null
  'hItem.Refresh
  DragAction(hItem, hItem.Tag)
  
End

Public Sub Form_Close()

  SetCurrentToolbar(Null)
  Settings.Write(Me, "/gb.form.mdi/FToolbarConfig")

End


Public Sub Form_Open()

  Me.Center
  Settings.Read(Me, "/gb.form.mdi/FToolbarConfig")

End


Public Sub panAction_Drag()

  If Drag.Format <> MAction.MIME Or If Drag.Source.Parent = svwAction Then
    Stop Event
    Return
  Endif
  
  Drag.Show(panAction)

End

Public Sub panAction_Drop()

  Dim sAction As String = Drag.Paste(MAction.MIME)
  
  If Not IsSpecialAction(sAction) Then AddAction(sAction)

End


Public Sub btnReset_Click()

  If Message.Question(("Do you really want to reset the toolbar?"), ("Reset"), ("Cancel")) = 1 Then
    $hForm.SaveConfig(True)
    InitAction
  Endif

End

Public Sub btnUndo_Click()

  $hForm.LoadConfig
  InitAction

End

' Public Sub cmbSize_Click()
' 
'   $hForm.SetIconSize(cmbSize.Index)
' 
' End


Public Sub cmbSize_Click()

  $hForm.SetIconSize(cmbSize.Index)

End

Public Sub OpenMenu(hToolbar As ToolBar)
  
  Dim hForm As FToolBar
  
  If $hForm Then Return
  If Not hToolbar.Key Then Return
  
  $hPopupToolbar = hToolbar

  'mnuConfigure.Text = Me.Title & "..." 'Subst(("Configure '&1' toolbar..."), hToolbar.Key)

  mnuSmallSize.Checked = False
  mnuMediumSize.Checked = False
  mnuLargeSize.Checked = False

  Select Case GetForm(hToolbar).GetIconSize()
    Case FToolBar.ICON_LARGE
      mnuLargeSize.Checked = True
    Case FToolBar.ICON_MEDIUM
      mnuMediumSize.Checked = True
    Case Else
      mnuSmallSize.Checked = True
  End Select
  
  mnuToolbar.Popup
  
  'If Not Me.Visible Then SetCurrentToolbar(Null)
  
End

Public Sub mnuSmallSize_Click()
  
  GetForm($hPopupToolbar).SetIconSize(FToolBar.ICON_SMALL)
  
End

Public Sub mnuMediumSize_Click()
  
  GetForm($hPopupToolbar).SetIconSize(FToolBar.ICON_MEDIUM)
  
End

Public Sub mnuLargeSize_Click()
  
  GetForm($hPopupToolbar).SetIconSize(FToolBar.ICON_LARGE)
  
End

Public Sub mnuConfigure_Click()
  
  SetCurrentToolbar($hPopupToolbar)
  Me.Show
  
End

Static Public Sub WillBeDeleted(hCtrl As Control) As Boolean
  
  Return $aDeleteLater.Exist(hCtrl)
  
End

Public Sub timDeleteLater_Timer()
  
  Dim hCtrl As Control
  For Each hCtrl In $aDeleteLater
    hCtrl.Delete
  Next
  $aDeleteLater.Clear
  
End

