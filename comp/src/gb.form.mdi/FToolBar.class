' Gambas class file

Public ToolbarKey As String
'Public ToolbarText As String
Public $bDesign As Boolean

Static Private $cRegister As New Collection

Private $hWatcher As Watcher
Private $hWatcherParent As Watcher
Private $bLock As Boolean
Private $bHidden As Boolean
Private $bVertical As Boolean
Private $bAutoResize As Boolean
Private $bConfigure As Boolean
Private $bInside As Boolean
Private $bPressed As Boolean
Private $iSeparatorSize As Integer
Private $sDropAction As String

Private $bInit As Boolean

Private Const $bShowHandle As Boolean = True
Private $iHandleSize As Integer

Private $iLock As Integer
Private $iArrangement As Integer

Private $aHidden As Control[]

Public Sub _new()
  
  $iHandleSize = Max(8, Desktop.Scale)
  dwgHandle.Width = $iHandleSize
  dwgHandle.Visible = $bShowHandle
  $hWatcherParent = New Watcher(Me.Parent.Parent) As "Container"
  $bAutoResize = True
  
End


Public Sub IsVertical() As Boolean
  
  Return $bVertical
  
End

Public Sub SetVertical(bVertical As Boolean)
  
  $bVertical = bVertical
  Update
  
End

Public Function GetContainer() As Container
  
  Return panToolBar
  
End

Private Function GetToolBarWidth() As Integer
  
  Dim hCtrl As Control
  Dim W As Integer
  Dim HT As Integer
  
  If $bVertical Then 
  
    If $bShowHandle Then HT = dwgHandle.H
  
    For Each hCtrl In panToolBar.Children
      If hCtrl.Visible Then 
        If hCtrl.Expand Then Return GetFreeWidth() - HT
        W += hCtrl.H
      Endif
    Next
    
  Else 
  
    If $bShowHandle Then HT = dwgHandle.W
  
    For Each hCtrl In panToolBar.Children
      If hCtrl.Visible Then 
        If hCtrl.Expand Then Return GetFreeWidth() - HT
        W += hCtrl.W
      Endif
    Next
    
  Endif
  
  Return W + panToolBar.Padding * 2 
  
End

Private Sub GetToolBarHeight() As Integer
  
  Dim hCtrl As Control
  Dim H As Integer

  If $bVertical Then
  
    For Each hCtrl In panToolBar.Children
      H = Max(H, hCtrl.W)
    Next
    
  Else
  
    For Each hCtrl In panToolBar.Children
      H = Max(H, hCtrl.H)
    Next
    
  Endif
  
  Return H + panToolBar.Padding * 2   
  
End



Private Function GetFreeWidth() As Integer
  
  'DEBUG ME.Parent.Parent.ClientW;; ME.Parent.Parent.W
  If $bVertical Then
    Return Me.Parent.Parent.ClientH
  Else 
    Return Me.Parent.Parent.ClientW
  Endif
  
End


' PUBLIC SUB Form_Resize()
' 
'   'DEBUG ME.Width
' 
'   IF NOT DesignMode THEN
'     Object.Lock(ME)
'     panToolBar.Arrangement = Arrange.LeftRight
'     panToolBar.Padding = 2
'     panToolBar.AutoResize = TRUE
'     panToolBar.Move(If(System.RightToLeft, 0, 6), 0, Min(ME.ClientW - 6, GetToolBarWidth()))
'     'panToolBar.Width = GetToolBarWidth()
'     ME.Parent.Resize(Max(8, panToolBar.Width) + 6, Max(8, panToolBar.Height))
'     Object.Unlock(ME)
'   ELSE
'     panToolBar.Arrangement = Arrange.None
'     panToolBar.Move(If(System.RightToLeft, 0, 6), 0, ME.ClientW, ME.ClientH)
'   ENDIF
'   
'   dwgHandle.Move(If(System.RightToLeft, ME.ClientW - 5, 2), 2, 3, ME.ClientH - 4)
' 
' END

Private Sub SetArrangement()
  
  Dim hToolbar As ToolBar = Me.Parent
  
  If $bDesign Then Return
  hToolbar.Arrangement = If($bVertical, Arrange.Column, Arrange.Row)
  hToolBar.Padding = 1
  
End


Private Sub Update()

  Dim W As Integer
  Dim XH, XP As Integer 
  Dim WH As Integer

'   IF $bIgnoreNextUpdate THEN
'     $bIgnoreNextUpdate = bSetIgnore
'     RETURN
'   ENDIF 
' 
'   $bIgnoreNextUpdate = bSetIgnore

  If $iLock Then Return
  If $bLock Then Return
  $bLock = True
  
  '$bVertical = ME.H > ME.W
  SetArrangement

  If System.RightToLeft Then 
    If Not $bVertical Then
      XH = Me.W - $iHandleSize
    Else 
      XH = Me.H - $iHandleSize
    Endif
    XP = 0
  Else 
    XH = 0
    If $bShowHandle Then
      XP = $iHandleSize
    Else
      XP = 0
    Endif
  Endif 
  
  If Not $bVertical Then
  
    If $bDesign Then
    
      If $bShowHandle Then
        dwgHandle.Move(XH, 0, $iHandleSize, Me.H)
        panToolBar.Move(XP, 0, Me.W - $iHandleSize, Me.H)
      Else
        panToolBar.Move(XP, 0, Me.W, Me.H)
      Endif
    
    Else If $bHidden Then
    
      panToolBar.Hide
      If $bShowHandle Then
        dwgHandle.Move(0, 0, $iHandleSize, GetToolBarHeight())
        Me.Parent.Resize($iHandleSize, dwgHandle.H)
      Endif
    
    Else
    
      panToolBar.Show
      
      If $bShowHandle Then WH = dwgHandle.W
      
      If $bAutoResize Then
        W = Max($iHandleSize, Min(GetToolBarWidth() + WH, GetFreeWidth()))
        'W = Max(8, Min(GetToolBarWidth(), GetFreeWidth()))
      Else 
        W = Max($iHandleSize, GetToolBarWidth() + WH)
        'W = Max(W, GetFreeWidth())
        'W = Max(8, GetToolBarWidth())
      Endif
      
      If $bShowHandle Then
        panToolBar.Move(XP, 0, W - $iHandleSize)
        dwgHandle.Move(XH, 0, $iHandleSize, panToolBar.H)
      Else
        panToolBar.Move(XP, 0, W)
      Endif
    
      If $bAutoResize Then
        Me.Parent.Resize(W, Max(GetToolBarHeight(), panToolBar.H))
      Else 
        Me.Parent.Resize(W, GetToolBarHeight())
      Endif
      
    Endif
    
  Else 
  
    If $bDesign Then
    
      If $bShowHandle Then
        dwgHandle.Move(0, XH, Me.W, $iHandleSize)
        panToolBar.Move(0, XP, Me.W, Me.H - $iHandleSize)
      Else
        panToolBar.Move(0, XP, Me.W, Me.H)
      Endif
    
    Else If $bHidden Then
    
      panToolBar.Hide
      If $bShowHandle Then
        dwgHandle.Move(0, 0, GetToolBarHeight(), $iHandleSize)
        Me.Parent.Resize(dwgHandle.W, $iHandleSize)
      Endif
    
    Else
    
      panToolBar.Show

      If $bShowHandle Then WH = dwgHandle.H

      If $bAutoResize Then
        W = Max(Min(GetToolBarWidth() + WH, GetFreeWidth()), $iHandleSize)
        'W = Max(Min(GetToolBarWidth(), GetFreeWidth()), 8)
      Else 
        W = Max(GetToolBarWidth() + WH, $iHandleSize)
        'W = Max(GetToolBarWidth(), 8)
      Endif

      If $bShowHandle Then
        panToolBar.Move(0, XP, panToolBar.W, W - $iHandleSize)
        dwgHandle.Move(0, XH, panToolBar.W, $iHandleSize)
      Else
        panToolBar.Move(0, XP, panToolBar.W, W)
      Endif
    
      If $bAutoResize Then
        Me.Parent.Resize(Max(GetToolBarHeight(), panToolBar.W), W)
      Else 
        Me.Parent.Resize(GetToolBarHeight(), W)
      Endif
      
    Endif
    
  Endif
  
  $bLock = False

End

Public Sub Form_Resize()
  
  Update
  
End

 
' PUBLIC SUB Container_Arrange()
'   
'   DEBUG
'   Form_Resize
'   
' END

Public Sub Container_Resize()
  
  'IF DesignMode THEN RETURN
  Update
  
End


Public Sub panToolBar_Arrange()

  'IF DesignMode THEN RETURN
  Update


End

Public Function IsHidden() As Boolean
  
  Return $bHidden
  
End

Public Sub SetHidden(bHidden As Boolean)
  
  If bHidden = $bHidden Then Return
  $bHidden = bHidden
  Update
  Action.Raise(Me.Parent)
  
End

' PUBLIC SUB dwgHandle_DblClick()
' <
'   SetHidden(NOT $bHidden)
' 
' END

Public Sub dwgHandle_Draw()

  Draw.Style.Button(1, 1, dwgHandle.W - 2, dwgHandle.H - 2, $bPressed And $bInside, Not Me.Enabled)
  'Draw.FillX = 0
  'Draw.FillY = 0
  'Draw.Style.Separator(1, 1, dwgHandle.W - 2, dwgHandle.H - 2, $bVertical, Not Me.Enabled)
  
End

Public Sub dwgHandle_Enter()

  If $bDesign Then Return
  $bInside = True
  dwgHandle.Background = Color.TextBackground
  dwgHandle.Refresh

End

Public Sub dwgHandle_Leave()

  If $bDesign Then Return
  $bInside = False
  dwgHandle.Background = Color.Background
  dwgHandle.Refresh

End

Public Sub dwgHandle_MouseDown()

  If $bDesign Then Return
  $bPressed = True
  dwgHandle.Refresh
  'SetHidden(NOT $bHidden)
  

End

Public Sub dwgHandle_MouseUp()

  If $bDesign Then Return
  If $bInside Then 
    $bPressed = False
    dwgHandle.Refresh
    Action.ConfigureToolbar(Me.Parent)
  Endif
  'SetHidden(NOT $bHidden)

End

Public Sub IsAutoResize() As Boolean
  
  Return $bAutoResize
  
End

Public Sub SetAutoResize(bAutoResize As Boolean)
  
  $bAutoResize = bAutoResize
  Update
  
End

Private Sub InitToolbar()
  
  Dim hCtrl As Control
  Dim hObs As Observer
  Dim sAction As String
  Dim aList As String[]
  Dim aReparent As Control[]
  
  If Not ToolBarKey Then Return
  
  aList = FindToolbar().DefaultConfig
  
  ' Debug panToolBar.Children.Count
  ' Debug System.Backtrace.Join("\n")
  
  aReparent = New Control[]
  For Each hCtrl In panToolBar.Children
    'Debug hCtrl.Name;; hCtrl.Action
    If hCtrl.Action Or If hCtrl Is Separator Then
      hObs = New Observer(hCtrl) As "Item"
      sAction = hCtrl.Action
      If sAction Then
        If Left(sAction) = "." Then sAction = Mid$(sAction, 2)
        If Not aList.Exist(sAction) Then aReparent.Add(hCtrl)
      Endif
    Endif
  Next
  
  For Each hCtrl In aReparent
    hCtrl.Reparent(panHide)
  Next
  
  $bInit = True
  
End

Public Sub FindControl(sAction As String, Optional bHiddenOnly As Boolean) As Control

  Dim hCtrl As Control
  
  If Not bHiddenOnly Then 
  
    For Each hCtrl In panToolBar.Children
      If hCtrl.Action = sAction Or If hCtrl.Action = ("." & sAction) Then Return hCtrl
    Next
  
  Endif
  
  For Each hCtrl In panHide.Children
    If hCtrl.Action = sAction Or If hCtrl.Action = ("." & sAction) Then Return hCtrl
  Next
  
End


Public Sub Form_Open()

  'Debug panToolBar.Children.Count

  If Not $bDesign Then
    If Not $bInit Then InitToolbar
    RegisterToolbar
    $iSeparatorSize = GetToolBarHeight() - panToolBar.Padding * 2
    LoadConfig(True)
  Endif

End

' Public Sub panToolBar_Menu()
' 
'   Debug "Toolbar menu"
' 
' End
' 
' Public Sub Item_Menu()
'   
'   Debug "Item menu"
'   
' End

Private Sub FindToolbar() As CToolbar
  
  MAction.InitAction
  Return MAction.Toolbars[ToolbarKey]
  
End


Public Sub SetConfigureMode(bConfigure As Boolean)

  Dim hChild As Control
  Dim hObs As Observer
  Dim hToolButton As ToolButton

  If $bConfigure = bConfigure Then Return
  
  $bConfigure = bConfigure
  
  For Each hChild In panToolBar.Children
    hChild.Drop = $bConfigure
  Next
  For Each hChild In panHide.Children
    hChild.Drop = $bConfigure
  Next
  Me.Drop = $bConfigure
  panToolBar.Enabled = Not $bConfigure
  'Debug "**** panToolbar.Enabled = "; panToolBar.Enabled
  dwgHandle.Enabled = Not $bConfigure
  
  If $bConfigure Then
    $aHidden = New Control[]
    For Each hChild In panToolBar.Children
      If hChild Is Separator Then Continue
      If Not hChild.Visible Then 
        $aHidden.Add(hChild)
        hChild.Show
      Endif
    Next
  Else
    For Each hChild In $aHidden
      hChild.Hide
    Next
    $aHidden = Null
    SaveConfig
    panToolBar.Refresh
  Endif
  
End

Public Sub Item_Drag()
  
  If Not $bConfigure Or If Drag.Format <> "text/gambas-x-action" Then
    HideWhere(True)
    Stop Event
    Return
  Endif
  
End

Private Sub WaitALittle(iCount As Integer)
  
  Dim eTime As Float
  Dim eWait As Float

  eTime = Timer
  'Wait
  eWait = (0.01 / iCount) - (eTime - Timer)
  If eWait > 0 Then Sleep eWait
  
End


Private Sub HideWhere(bAnim As Boolean)
  
  Dim D As Integer
  
  If Not panWhere.Visible Then Return
  
  If $bVertical Then
    D = panWhere.H
  Else
    D = panWhere.W
  Endif
  
  panWhere.Border = Border.None
  If bAnim Then
    For D = D - 1 To 1 Step -2
      If $bVertical Then
        panWhere.H = D
      Else
        panWhere.W = D
      Endif
      WaitALittle(D)
    Next
  Endif
  panWhere.Hide
  
End

Private Sub ShowWhere(sAction As String, bAnim As Boolean, Optional hCtrl As Control)

  Dim D As Integer
  Dim DM As Integer
  Dim W, H As Integer
  
  If Not hCtrl Then
    If sAction And If sAction <> "|" Then
      hCtrl = FindControl(sAction)
      If Not hCtrl Then Return
    Endif
  Endif
  
  If hCtrl Then
    W = hCtrl.W
    H = hCtrl.H
    panWhere.Move(hCtrl.X, hCtrl.Y)
  Else
    If $bVertical Then
      W = $iSeparatorSize
      H = Desktop.Scale
    Else
      W = Desktop.Scale
      H = $iSeparatorSize
    Endif
  Endif
  
  If $bVertical Then
    DM = H
    panWhere.W = W
  Else
    DM = W
    panWhere.H = H
  Endif  
  
  panWhere.Show
  If bAnim Then
    For D = 1 To DM - 1 Step 2
    'For D = DM To DM
      If $bVertical Then
        panWhere.H = D
      Else
        panWhere.W = D
      Endif
      WaitALittle(DM)
    Next
  Endif
  If $bVertical Then
    panWhere.H = DM
  Else
    panWhere.W = DM
  Endif
  panWhere.Border = Border.Plain
  
End

Public Sub Item_DragMove()
  
  Dim hCtrl As Control = Last
  Dim D As Integer
  Dim bBefore As Boolean
  Dim bAnim As Boolean
  
  If Not $bConfigure Or If Drag.Format <> "text/gambas-x-action" Then
    HideWhere(True)
    Stop Event
    Return
  Endif

  If $bVertical Then
  
    bBefore = Drag.Y <= (hCtrl.H \ 2)
    'If Not bBefore And If Drag.Y > ((hCtrl.H * 2) \ 3) Then Return
    
  Else
  
    bBefore = Drag.X <= (hCtrl.W \ 2)
    'If Not bBefore And If Drag.X > ((hCtrl.W * 2) \ 3) Then Return
    
  Endif
  
  If bBefore Then
    If panWhere.Next = hCtrl Then Return
  Else
    If hCtrl.Next = panWhere Then Return
  Endif
  
  bAnim = Not panWhere.Visible
  'panWhere.Hide
  'HideWhere(False)
  
  If bBefore Then
    panWhere.Next = hCtrl
  Else
    panWhere.Next = hCtrl.Next
    hCtrl.Next = panWhere
  Endif
  
  ShowWhere(Drag.Data, bAnim)
  
End

Public Sub Item_MouseDrag()
  
  Dim hCtrl As Control = Last
  Dim iArr As Integer
  Dim sAction As String
  
  If Not $bConfigure Then Return
  
  sAction = hCtrl.Action
  If Left(sAction) = "." Then sAction = Mid$(sAction, 2)
  If Not sAction Then sAction = "|"

  Lock()
  DragStart(True)
  panWhere.Next = hCtrl.Next
  hCtrl.Next = panWhere
  ShowWhere(sAction, False, hCtrl)
  hCtrl.Hide
  Unlock()
  Wait
  
  FToolBarConfig.DragAction(hCtrl, sAction)
  
End


Public Sub Item_Drop()

  panWhere_Drop

End

Public Sub DragStart(bOutside As Boolean)
  
  $sDropAction = ""
  If bOutside Then
    panWhere.Resize(Desktop.Scale, Desktop.Scale)
    panWhere.Reparent(panToolBar)
  Endif
  
End


Public Sub DragEnd(bAnim As Boolean)
  
  Dim hSep As Separator
  Dim hObs As Observer
  Dim hCtrl As Control
  
  If $sDropAction Then
  
    If $sDropAction = "|" Then
      AddSeparator(panWhere)
    Else
      hCtrl = FindControl($sDropAction)
      If hCtrl Then 
        panToolBar.Enabled = True
        'Debug "hCtrl.Enabled = "; hCtrl.Enabled
        hCtrl.Reparent(panToolBar)
        'Debug "hCtrl.Enabled = "; hCtrl.Enabled
        hCtrl.Show
        hCtrl.Next = panWhere.Next
        panToolBar.Enabled = False
      Endif
    Endif
    Update
    
  Endif

  HideWhere(bAnim)
  panWhere.Reparent(Me)
  
End

Public Sub panWhere_Drag()

  If Not $bConfigure Or If Drag.Format <> "text/gambas-x-action" Then
    Stop Event
    Return
  Endif

End

Private Sub AddSeparator(Optional hNext As Control)
  
  Dim hSep As Separator
  Dim hObs As Observer
  Dim W, H As Integer

  Lock()
  
  hSep = New Separator(panToolBar)
  hSep.Next = hNext
  
  If $bVertical Then
    W = $iSeparatorSize
    H = Desktop.Scale
  Else
    W = Desktop.Scale
    H = $iSeparatorSize
  Endif

  hSep.Resize(W, H)
  hSep.Drop = True
  hObs = New Observer(hSep) As "Item"
  
  Unlock()
  
End


Public Sub panWhere_Drop()
  
  $sDropAction = Drag.Data
  
End

Public Sub SetText(sText As String)
  
  Me.Text = sText
  If $bDesign Then Return
  If sText Then
    dwgHandle.ToolTip = Subst$(("Configure &1 toolbar"), sText)
  Else
    dwgHandle.ToolTip = ("Configure main toolbar")
  Endif
  
End

Private Sub RegisterToolbar()
  
  Dim aSlot As FToolBar[]
  
  If Not ToolbarKey Then Return
  
  If Not $cRegister.Exist(ToolbarKey) Then
    $cRegister[ToolbarKey] = New FToolbar[]
  Endif
  
  aSlot = $cRegister[ToolbarKey]
  If Not aSlot.Exist(Me) Then 
    aSlot.Add(Me)
  Endif
  
End

Private Sub UnregisterToolbar()
  
  Dim aSlot As FToolBar[]
  Dim iInd As Integer

  If Not ToolbarKey Then Return

  aSlot = $cRegister[ToolbarKey]
  If aSlot Then
    iInd = aSlot.Find(Me)
    If iInd >= 0 Then 
      aSlot.Remove(iInd)
    Endif
  Endif
  
End


Public Sub SetKey(sKey As String)
  
  If ToolbarKey = sKey Then Return
  
  UnregisterToolbar
  ToolbarKey = sKey
  RegisterToolbar
  
End


Public Sub Form_Close()

  UnregisterToolbar

End

Public Sub LoadConfig(Optional bInit As Boolean)
  
  Dim hCtrl As Control
  Dim aConfig As String[]
  Dim sAction As String
  Dim iInd As Integer
  Dim bEnabled As Boolean
  Dim bVisible As Boolean
  
  If Not ToolbarKey Then Return
  If $bDesign Then Return
  
  'Print Me; ": Loading config for";; ToolbarKey
  
  aConfig = Settings["/gb.form.mdi/Toolbars/" &/ ToolbarKey]
  If Not aConfig Then 
    If bInit Then Return
    aConfig = FindToolbar().DefaultConfig
    If Not aConfig Then Return
  Endif
  
  bEnabled = panToolBar.Enabled
  panToolBar.Enabled = True
  Lock()
  
  iInd = 0
  While iInd < panToolBar.Children.Count
    hCtrl = panToolBar.Children[iInd]
    If hCtrl.Action Then
      hCtrl.Reparent(panHide)
    Else If hCtrl Is Separator Then 
      hCtrl.Delete
    Else
      Inc iInd
    Endif
  Wend

  For Each sAction In aConfig
    
    'Print "Action "; sAction
    If sAction = "|" Then
      'Print "--> AddSeparator()"
      AddSeparator()
    Else If Left(sAction) = "$" Then
      hCtrl = Me[Mid$(sAction, 2)]
      If hCtrl Then
        'Print "--> Reparent to panToolbar"
        hCtrl.Reparent(panToolBar)
        hCtrl.Raise
      Endif
    Else
      hCtrl = FindControl(sAction)
      If hCtrl Then
        'Print "--> Reparent to panToolbar"
        bVisible = hCtrl.Visible
        hCtrl.Reparent(panToolBar)
        hCtrl.Raise
        If hCtrl.Visible <> bVisible Then Debug "**** VISIBLE CHANGED FOR "; sAction
      Endif
    Endif
    
  Next
  
  ' For Each hCtrl In panToolBar.Children
  '   If hCtrl Is Separator Then Continue
  '   If hCtrl.Action Then Continue
  '   hCtrl.Raise
  ' Next
  
  panToolBar.Enabled = bEnabled
  
  Unlock()
  
End

Public Sub SaveConfig(Optional bReset As Boolean)
  
  Dim aConfig As String[]
  Dim aOldConfig As String[]
  Dim hCtrl As Control
  Dim sAction As String
  Dim hForm As FToolBar
  
  If Not ToolbarKey Then Return
  If $bDesign Then Return
  If Not Object.IsValid(Me.Parent.Parent) Then Return

  If Not bReset Then
    aConfig = New String[]
    For Each hCtrl In panToolBar.Children
      If hCtrl.Action Then
        sAction = hCtrl.Action
        If Left(sAction) = "." Then sAction = Mid$(sAction, 2)
        aConfig.Add(sAction)
      Else If hCtrl Is Separator
        aConfig.Add("|")
      Else If hCtrl.Visible Then
        aConfig.Add("$" & hCtrl.Name)
      Endif
    Next
    If aConfig.Join(",") = FindToolbar().DefaultConfig.Join(",") Then aConfig = Null
  Endif
  
  ' Print Me; ": Saving config for "; ToolbarKey; ": ";
  ' If aConfig Then
  '   Print aConfig.Join(",")
  ' Else
  '   Print "NULL"
  ' Endif
  'Print "Default config is ";; FindToolbar().DefaultConfig.Join(",")
  
  aOldConfig = Settings["/gb.form.mdi/Toolbars/" &/ ToolbarKey]
  
  If IsNull(aOldConfig) And If IsNull(aConfig) Then Return
  If aOldConfig And If aConfig Then
    If aOldConfig.Join(",") = aConfig.Join(",") Then Return
  Endif
  
  Settings["/gb.form.mdi/Toolbars/" &/ ToolbarKey] = aConfig
  Settings.Save
  
  For Each hForm In $cRegister[ToolbarKey]
  
    If Not bReset And If hForm = Me Then Continue
    hForm.LoadConfig
  
  Next
  
End

Private Sub Lock()
  
  If $iLock = 0 Then
    $iArrangement = panToolBar.Arrangement
    panToolBar.Arrangement = Arrange.None
  Endif
  Inc $iLock
  
End

Private Sub Unlock()
  
  If $iLock <= 0 Then Return
  Dec $iLock
  If $iLock = 0 Then
    panToolBar.Arrangement = $iArrangement
    Update
  Endif
  
End

Public Sub HideControl(hCtrl As Control)
  
  hCtrl.Reparent(panHide)
  
End

Public Sub ShowControl(hCtrl As Control)
  
  hCtrl.Reparent(panToolBar)
  
End

Public Sub SetDesign()
  
  $bDesign = True
  dwgHandle.ToolTip = ""
  
End
