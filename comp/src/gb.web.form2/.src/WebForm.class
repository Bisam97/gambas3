' Gambas class file

''' This class represents the different pages and dialogs of your Web application.

Export
Create Static
Inherits WebContainer

Public Const _IsForm As Boolean = True
Public Const _HiddenControls As String = "WebControl,WebForm,Timer"
Public Const _Properties As String = "*,Title,Resizable,Persistent"
Public Const _DefaultEvent As String = "Open"

Static Property Debug As Boolean Use $bDebug

'' This event is raised when the form is opened.
Event Open
'' This event is raised each time an event is handled by the form.
Event Event
'' This event is raised when the form is closed.
Event Close

'' This title is used as HTML page title if the form is the main form.
Property Title As String
'' Return or set if the form is resizable when used as a dialog.
Property Resizable As Boolean
'' Return or set the minimum width of the form.
''
'' This property can take any valid CSS size. If not set, the control will have no minimum width.
Property Width, W As String
'' Return or set the minimum height of the form.
''
'' This property can take any valid CSS size. If not set, the control will have no minimum height.
Property Height, H As String
'' Return if the form is a popup.
Property Read Popup As Boolean
'' Return the control that owns the popup.
Property Read PopupParent As WebControl
'' Return or set if the form is persistent.
''
'' Closing a non-persistent form automatically destroys it.
Property Persistent As Boolean

Static Public _DisableRefresh As Integer
Static Public _HasRefresh As Boolean
Static Public _InMessage As Integer
Static Public _Current As WebForm

Private Const LOG_ENABLED As Boolean = True

Static Private $iRequestProcess As Integer
Static Private $sCookie As String
Static Private $bSendCookie As Boolean
Static Private $hTimeout As Timer
Static Private $hRead As File
Static Private $hWrite As File
Static Private $bDoNotRespond As Boolean

Static Private $aJavascript As New String[]
Static Private $aJavascriptBefore As New String[]
Static Private $aJavascriptFiles As String[]
Static Private $aJavascriptExternFiles As String[]

Public _Loaded As Boolean
Public _Window As Integer

Private $sTitle As String
Private $bPersistent As Boolean
Private $bResizable As Boolean
Private $hWindowContainer As WebContainer

Private $sX As String
Private $sY As String
Private $sWidth As String
Private $sHeight As String

Private $iEventLoopLevel As Integer
Private $vEventLoopReturn As Variant

'Private $bOpened As Boolean

Static Public Sub _init()
  
  System.Language = Request.Language
  
End

Static Private Sub MakeSessionId() As String
  
  Dim iInd As Integer
  Dim sId As String
  
  For iInd = 1 To 6
    sId &= Hex$(Int(Rnd(65536)), 4)
  Next
  
  Return sId
  
End

Static Private Sub GetCookiePath() As String

  Dim sPath As String
  
  sPath = CGI["SCRIPT_NAME"]
  If sPath = "/." Then sPath = "/"
  Return sPath

End

Static Public Sub PrintLog(sLog As String)

  Dim hFile As File

  If Not LOG_ENABLED Then Return
  'If Not $bDebug Then Return
  hFile = Open File.Dir(File.Dir(Temp())) &/ "session/error.log" For Append
  For Each sLog In Split(sLog, "\n")
    Print #hFile, Format(Application.Id, "######"); " | "; sLog
  Next
  Close #hFile

End

Static Public Sub Main()

  Dim hProcess As Process
  Dim sCookie As String
  Dim sRead As String
  Dim sWrite As String
  Dim sTemp As String
  Dim sKey As String
  Dim cEnv As Collection
  Dim sPath As String
  Dim aLib As String[]
  Dim sFile As String
  Dim sVar As String
  Dim hLock As File
  Dim iPid As Integer
  
  sTemp = File.Dir(File.Dir(Temp$())) &/ "session"
  Try Mkdir sTemp
  
  ' Beware that a CGI script receives the Request query in its first argument as soon as there is no "=" character in it!
  
  If Args.Count = 3 And If Args[1] = "" Then
  
    PrintLog("Start: " & Args.All.Join(" | "))
    
    If Args[2] <> "TEST" Then Application.Daemon = True
  
    $bSendCookie = True
    $sCookie = Args[2]

    PrintLog("Catch SIGUSR1 signal")
    Signal[Signal.SIGUSR1].Catch()

    PrintLog("Create startup form")
    _Current = Application.Startup.AutoCreate()
    
    PrintLog("Start request timeout")
    $hTimeout = New Timer As "Timeout"
    $hTimeout.Delay = 20000
    $hTimeout.Start
    
    PrintLog("Create session file")
    Try Kill sTemp &/ $sCookie
    Link "/proc" &/ CStr(Application.Id) To sTemp &/ $sCookie

    PrintLog("Waiting for SIGUSR1")
    Return
    
  Endif
  
  ' Static requests, not handled by the session process.
  
  sPath = Mid$(Request.Path, 2)

  If sPath Then
  
    If sPath Begins "style:" And sPath Ends ".css" Then
      
      aLib = Split(Left(sPath, -4), ":")
      If aLib.Count >= 3 Then sFile = aLib[1] & ".css"
      RenderStyleSheet(sFile)
      Return
      
    Else If sPath Begins "lib:" And sPath Ends ".js" Then
      
      aLib = Split(Left(sPath, -3), ":")
      aLib.Remove(aLib.Max)
      'If aLib.Count >= 3 Then sFile = aLib[1] & ".js"
      RenderJavascript(aLib)
      Return
    
    ' Else If sPath Begins "img:" Then
    '   
    '   Try sPath = Session[Mid$(sPath, 5)]["Image"]
    '   If Not Error Then Response.SendFile(sPath)
    '   Goto END_REQUEST
    '   
    ' Else If sPath Begins "download:" Then
    '   
    '   If DownloadFile(Mid$(sPath, 10)) Then Goto NOT_FOUND
    '   Goto END_REQUEST
      
    Else If sPath = "~dump" Then
      
      Response.ContentType = "text/plain;charset=utf-8"
      Response.Begin
      
      For Each sVar In Env
        Print sVar; " = "; Env[sVar]
      Next
  
      Response.End
      Return
        
    ' Else If sPath = "~logout" Then
    '   
    Else If Exist("../.public/" &/ sPath) Then
      
      Response.SendFile("../.public/" &/ sPath)
      Return
      
    Else If Exist(".public/" &/ sPath) Then
      
      Response.SendFile(".public/" &/ sPath)
      Return
      
    Endif
    
  Endif
    
  PrintLog("NEW REQUEST: " & Application.Request)

  sCookie = Request.Cookies["GBSESSIONID"]
  If sCookie Then
    PrintLog(sTemp &/ sCookie & " = " & Str(Exist(sTemp &/ sCookie, True)))
    If Not Exist(sTemp &/ sCookie, True) Then 
      PrintLog("UNKNOWN SESSION")
      Response.RemoveCookie("GBSESSIONID", sCookie, "", GetCookiePath())
      If Request.Path = "/x" Then
        Response.ContentType = "text/javascript;charset=utf-8"
        Response.Begin
        Print "window.location.reload(true)";
        Response.End
      Else
        Response.Redirect(Application.Root)
      Endif
      Return
    Endif
  Endif
  
  PrintLog("CATCH SIGUSR1 SIGNAL")
  Signal[Signal.SIGUSR1].Catch()
    
  If Not sCookie Then 
    
    sCookie = MakeSessionId()
    Try hLock = Lock sTemp &/ sCookie & ".lock" Wait 10

    If Not Exist(Application.Path &/ Args[0]) Then
      PrintLog("EXEC gbx3 " & Application.Path)
      hProcess = Exec ["gbx3", Application.Path, "--", "", sCookie] Wait
    Else
      PrintLog("EXEC " & Application.Path &/ Args[0])
      hProcess = Exec [Application.Path &/ Args[0], "", sCookie] Wait
    Endif
    
    While Not Exist(sTemp &/ sCookie, True)
      Sleep 0.05
    Wend
    
    PrintLog("COOKIE = " & sCookie & " [NEW]")
    
  Else
    
    Try hLock = Lock sTemp &/ sCookie & ".lock" Wait 10
    PrintLog("COOKIE = " & sCookie)
    
  Endif
  
  If Error Then
    Response.Status = "429 Too many requests"
    Response.ContentType = "text/plain;charset=utf-8"
    Response.Begin
    Print Error.Text;
    Response.End
    Return
  Endif
  
  $sCookie = sCookie
  sRead = sTemp &/ $sCookie & ".out"
  sWrite = sTemp &/ $sCookie & ".in"
  
  PrintLog("OPEN READ " & sRead)
  $hRead = Open Pipe sRead For Read
    
  PrintLog("OPEN WRITE " & sWrite)
  $hWrite = Open Pipe sWrite For Write
  
  iPid = CInt(File.Name(Stat(sTemp &/ sCookie).Link))
  PrintLog("SEND SIGUSR1 TO PROCESS " & CStr(iPid))
  Signal.Send(iPid, Signal.SIGUSR1)
    
  cEnv = New Collection
  For Each sKey In Env
    cEnv[sKey] = Env[sKey]
  Next
  PrintLog("WRITE ENV")
  Write #$hWrite, Application.Id As Integer
  Write #$hWrite, cEnv As Collection
  
  ' If Request.Method = "POST" Then
  '   While Not Eof(File.In)
  '     Wait
  '     sData = Read -4096
  '     Print #hWrite, sData;
  '   Wend
  ' Endif
  
  PrintLog("WAITING FOR SIGUSR1")
  ' Now we wait SIGUSR1 from session process
  
Catch
  
  PrintLog("**** " & Error.Where & ": " & Error.Backtrace.Join(" "))
  
End

Static Private Sub BeginResponse()

  Dim sTemp As String
  Dim sRead As String
  Dim sWrite As String
  Dim cEnv As Collection
  Dim sVal As String
  
  PrintLog("BeginResponse")
  
  $hTimeout.Stop
  
  sTemp = File.Dir(File.Dir(Temp$())) &/ "session"
  sRead = sTemp &/ $sCookie & ".in"
  sWrite = sTemp &/ $sCookie & ".out"
  
  PrintLog("Open read " & sRead)
  $hRead = Open Pipe sRead For Read
  Input From $hRead
  
  PrintLog("Read env")
  $iRequestProcess = Read As Integer
  cEnv = Read As Collection

  CGI.Reset
  For Each sVal In cEnv
    CGI[cEnv.Key] = sVal
  Next
  ' To disable compression
  CGI["HTTP_ACCEPT_ENCODING"] = ""
  
  PrintLog("Open write " & sWrite)
  $hWrite = Open Pipe sWrite For Write
  Output To $hWrite
  
  PrintLog("Send SIGUSR1 to request process " & CStr($iRequestProcess))
  Signal.Send($iRequestProcess, Signal.SIGUSR1)
  
End

Static Private Sub EndResponse()
  
  If $bDoNotRespond Then 
    PrintLog("EndResponse ignore")
    Return
  Endif

  Input From Default
  Output To Default
  
  PrintLog("Close read")
  Close $hRead
  $hRead = Null
  
  PrintLog("Close write")
  Close $hWrite
  $hWrite = Null
  
  $hTimeout.Restart
  
End

Static Private Sub SendResponse()
  
  If $bDoNotRespond Then 
    PrintLog("SendResponse ignore")
    Return
  Endif

  PrintLog("SendResponse")  
  Response.Buffered = True
  Response.ContentType = "text/javascript;charset=utf-8"
  Response.Begin
  PrintJavascript
  Response.End
  
End

Static Public Sub Application_Signal(Num As Integer)
  
  Dim sData As String
  
  If Num <> Signal.SIGUSR1 Then Return
  
  If Application.Daemon Then
    
    PrintLog("Caught SIGUSR1")
  
    BeginResponse
    HandleRequest
    EndResponse
  
  Else
    
    PrintLog("CAUGHT SIGUSR1")
    
    ' sTemp = File.Dir(File.Dir(Temp$())) &/ "session"
    ' sRead = sTemp &/ $sCookie & ".out"
    ' 
    ' PrintLog("OPEN READ " & sRead)
    ' hRead = Open Pipe sRead For Read
    
    PrintLog("READ RESPONSE")
    While Not Eof($hRead)
      sData = Read #$hRead, -4096
      Print sData;
      PrintLog("READ RESPONSE ==> " & Replace(sData, "\n", "\nREAD RESPONSE ==> "))
    Wend
    
    Quit
    
  Endif
  
Catch

  PrintLog("**** " & Error.Text & ": " & Error.Backtrace.Join(" "))  
  Signal.Send($iRequestProcess, Signal.SIGKILL)
  Exit()
  
End

Static Private Sub Exit()

  Dim sTemp As String
  
  PrintLog("Exit")
  sTemp = File.Dir(File.Dir(Temp$())) &/ "session"
  Try Kill sTemp &/ $sCookie
  Try Kill sTemp &/ $sCookie & ".in"
  Try Kill sTemp &/ $sCookie & ".out"
  Try Kill sTemp &/ $sCookie & ".lock"
  Signal[Signal.SIGUSR1].Reset()
  Quit
  
End


Static Public Sub Timeout_Timer()

  PrintLog("Timeout")
  Exit()
  
End

Static Public Sub _AddJavascript(sStr As String)
  
  $aJavascript.Add(sStr)
  
End

Static Public Sub _AddJavascriptBefore(sStr As String)
  
  $aJavascriptBefore.Add(sStr)
  
End

Static Private Sub Logout()
  
  PrintLog("Logout")
  Response.RemoveCookie("GBSESSIONID", $sCookie, "", GetCookiePath())
  
End

Static Private Sub HandleRequest()

  Dim sPath As String

  PrintLog("HandleRequest")

  sPath = Mid$(Request.Path, 2)

  If sPath = "~logout" Then
    
    Logout()
    Response.Redirect(Application.Root)
    EndResponse()
    Exit()
    
  Else If sPath = "x" Then

    PrintLog("/x: " & Request["c"])

    _Current._HandleMessage()

  Else If sPath Then
    
    Response.Status = "404 Not Found"
    Response.Begin
    Response.End
    Return
    
  Else
  
    If $bSendCookie Then
      Response.SetCookie("GBSESSIONID", $sCookie, "", GetCookiePath(),, True)
      $bSendCookie = False
    Endif
    
    _Current.Render()
    
  Endif

End

Static Private Sub RenderStyleSheet(Optional sFile As String)
  
  If Not sFile Then sFile = "style.css"
  
  If Not Exist(sFile) Then 
    Response.Status = "404 NotFound"
    Response.Begin
    Response.End
    Return
  Endif
  
  Response.Buffered = True
  Response.ContentType = "text/css;charset=utf-8"
  Response.Begin
  
  Print Replace(File.Load(sFile), "//", Application.Root);
  
  If Exist("../.public" &/ sFile) Then Print File.Load("../.public/" &/ sFile);
  
  Response.End
  
End

Static Private Sub RenderJavascript(aLib As String[])
  
  Dim sFile As String
  
  Response.ContentType = "text/javascript;charset=utf-8"
  Response.Begin
  
  For Each sFile In aLib
  
    sFile &= ".js"
  
    If sFile = "lib.js" Then 
      Print "$root = "; JS(Application.Root); ";"
      Print File.Load(sFile)
      Print File.Load("ac.js")
    Else
      If Exist(sFile) Then
        Print File.Load(sFile)
      Else If Exist(".." &/ sFile) Then
        Print File.Load(".." &/ sFile)
      Endif
    Endif
    
  Next
  
  Response.End
  
End

Static Private Sub PrintJavascript()
  
  If $aJavascriptBefore.Count Then 
    Print $aJavascriptBefore.Join(";\n"); ";"
    $aJavascriptBefore.Clear
  Endif
  
  If _HasRefresh Then
    _HasRefresh = False
    _Current._RefreshReply()
  Endif
  
  If $aJavascript.Count Then 
    Print $aJavascript.Join(";\n"); ";"
    $aJavascript.Clear
  Endif
  
End

Public Sub _new()

  If Not Me.Parent Then  
    WebControl._NextName = "$$"
    $hWindowContainer = New WebContainer(Me)
    $hWindowContainer.Ignore = True
    $hWindowContainer._Naked = True
    $hWindowContainer.Class = "gw-window-container"
  Endif
  
End

Public Sub _ready()

  If Not Me.Parent Then 
    $hWindowContainer.Raise
  Endif
  
  _Loaded = True

End

Public Sub _BeforeRender()
  
  If Me.Parent Then 
    Super._BeforeRender()
    Return
  Endif
  
  Print "<div class=\"gw-form";
  If Me.Class Then Print " "; Me.Class;
  Print "\" id=\""; Me.Name; "\"";
  Me._RenderStyleSheet()
  Print ">"
  
End

Public Sub Render()

  Dim sImage As String
  
  Response.Buffered = True
  Response.Begin
  
  Header.Form = Me
  Header.__Render()
  'Print Header.ToString();
  Header.Form = Null
  
  $aJavascript.Clear
  
  Print "<body"; Me._GetEventJS("onload", "open"); ">"
  
  Print "<div id=\"gw-preload\" style=\"display:none;\">";
  For Each sImage In ["error.png", "info.png", "question.png", "warning.png"]
    Print "<img src=\""; Application.Root &/ "message" &/ sImage; "\">";
  Next
  Print "</div>"
  
  Print "<div id=\"gw-modal\" onmousedown=\"gw.window.onDownModal();\"></div>"
  Print "<div id=\"gw-lock\">"
    "<div id=\"gw-lock-animation\">"
    "<div id=\"gw-lock-1\" class=\"gw-lock-circle\"></div>"
    "<div id=\"gw-lock-2\" class=\"gw-lock-circle\"></div>"
    "<div id=\"gw-lock-3\" class=\"gw-lock-circle\"></div>"
    "</div>"
    "</div>"
  
  Me._Redraw()
  
  Print "<script type=\"text/javascript\">"
  Print "gw.form = "; JS(Object.Type(Me)); ";"
  Print "gw.version = "; JS(Application.Version); ";"
  Print "gw.debug = "; JS($bDebug); ";"
  PrintJavascript
  Print "</script>"
  
  Print "</body>"
  Print "</html>"
  
  Response.End
  
End

Static Private Sub Debug_Write(Value As Boolean)

  If $bDebug = Value Then Return
  $bDebug = Value
  _AddJavascript("gw.debug = " & JS($bDebug))

End

Public Sub _GetJavascriptFiles() As String[]
  
  Return $aJavascriptFiles
  
End

Public Sub _GetJavascriptExternFiles() As String[]
  
  Return $aJavascriptExternFiles
  
End

'' Add a javascript file to the list of javascript ressources defined by the `<style>` markups of the page header.

Public Sub AddJavascriptFile(sFile As String)
  
  If sFile Begins "http://" Or If sFile Begins "https://" Then
    If Not $aJavascriptExternFiles Then $aJavascriptExternFiles = New String[]
    $aJavascriptExternFiles.Add(sFile)
  Else
    If sFile Ends ".js" Then sFile = Left(sFile, -3)
    If Not $aJavascriptFiles Then $aJavascriptFiles = New String[]
    $aJavascriptFiles.Add(sFile)
  Endif
  
End

Private Function Title_Read() As String

  Return $sTitle

End

Private Sub Title_Write(Value As String)

  $sTitle = Value

End

Private Function Persistent_Read() As Boolean

  Return $bPersistent

End

Private Sub Persistent_Write(Value As Boolean)

  $bPersistent = Value

End

Private Sub UpdateSize()

  If $bResizable Then
    Me.Style["width"] = ""
    Me.Style["height"] = ""
  Else
    Me.Style["width"] = Me.Style["min-width"]
    Me.Style["height"] = Me.Style["min-height"]
  Endif

End

Private Function Resizable_Read() As Boolean

  Return $bResizable

End

Private Sub Resizable_Write(Value As Boolean)

  'Dim hWindow As WebWindow = WebControl.FromId(_Window)
  $bResizable = Value
  UpdateSize
  'If hWindow Then hWindow.Resizable = Value

End

Public Sub _HandleMessage()

  Dim hCtrl As WebControl
  Dim aCmd As Variant
  Dim iOldInMessage As Integer
  
  'Dim fTimer As Float
  
  'fTimer = Timer
  
  aCmd = JSON.Decode(Request["c"])
  
  iOldInMessage = _InMessage
  Inc _InMessage
  
  Raise Event

  Select Case aCmd[0]
    
    Case "raise"
      
      If aCmd[1] Then
        hCtrl = WebControl.FromName(aCmd[1])
      Else
        hCtrl = Me
      Endif
      
      If Not hCtrl Then 
        PrintLog("Control not found: " & aCmd[1])
        Goto VOID_RESPONSE
      Endif
      
      PrintLog("Raise event '" & aCmd[2] & "' on '" & hCtrl.Name & "'")
      Object.Raise(hCtrl, aCmd[2], aCmd[3])
      
    Case "update"
      
      'Debug aCmd[1];; aCmd[2];; aCmd[3]
      
      If aCmd[1] Then
        hCtrl = WebControl.FromName(aCmd[1])
        If Not hCtrl Then Goto VOID_RESPONSE
      Else
        hCtrl = Me
      Endif
      hCtrl._UpdateProperty(aCmd[2], aCmd[3])
    
  End Select
  
  _InMessage = iOldInMessage
  
  SendResponse
  Return
  
VOID_RESPONSE:

  Response.Begin
  'Print "console.log("; JS("unknown control " & aCmd[1]); ");"
  Response.End
  Return
  
' Catch
'   
'   sErr = Error.Text & "\n" & Error.Backtrace.Join(" ")
'   _InExec = iOldInExec
'   
'   Response.Cancel
'   Response.Begin
'   Print "console.log("; JS(aCmd); ");"
'   Print "console.log("; JS(sErr); ");"
'   Print "console.log("; JS($aJavascript.Join("\n")); ");"
'   Print "alert("; JS(sErr); ");"
'   Response.End
  
End

'' Print some text to the browser javascript console.

Static Public Sub Print(Text As String)
  
  $aJavascript.Add("console.log(" & JS(Text) & ")")
  
End

'' Execute some javascript into the browser.

Static Public Sub Exec(Javascript As String)
  
  $aJavascript.Add(Javascript)
  
End

Public Sub _BeginJavascript() As Variant

  Dim aJavascript As String[]
  Dim aJavascriptBefore As String[]
  
  aJavascript = $aJavascript
  aJavascriptBefore = $aJavascriptBefore
  
  $aJavascript = New String[]
  $aJavascriptBefore = New String[]
  
  Return [aJavascript, aJavascriptBefore]
  
End

Public Sub _EndJavascript(vSave As Variant)
  
  Dim aJavascript As String[]
  Dim aJavascriptBefore As String[]
  
  aJavascript = $aJavascript
  aJavascriptBefore = $aJavascriptBefore
  
  $aJavascript = vSave[0]
  $aJavascriptBefore = vSave[1]
  
  If aJavascriptBefore.Count Then Print aJavascriptBefore.Join(";"); ";";
  If aJavascript.Count Then Print aJavascript.Join(";"); ";";
  
End

Private Sub ExitEventLoop(vReturnValue As Variant)
  
  PrintLog("ExitEventLoop")
  Dec $iEventLoopLevel
  $vEventLoopReturn = vReturnValue
  $bDoNotRespond = True  
  
End

Public Sub Delete()
  
  Super.Delete()
  $hWindowContainer = Null
  
End

'' Close the form.
''
'' If the form was a dialog, you can specify a return value with the optional ~ReturnValue~ argument.
'' 
'' That return value will be passed as an argument to the [../control/.dialog] event of the control that owns the dialog.

Public Sub Close(Optional ReturnValue As Variant)
  
  ' Dim bCancel As Boolean
  Dim hWindow As WebWindow
  
  Raise Close
  
  If _Window Then
  
    hWindow = WebControl.FromId(_Window)
    With hWindow
      If .Modal Then ExitEventLoop(ReturnValue)
      .Close()
      If $bPersistent Then .Child = Null
      .Delete
      _Window = 0
    End With
    
  Else
    
    Logout()
    _AddJavascript("window.location.reload(true)")
    
  Endif
  
    
End

'' Hide the form.

Public Sub Hide()
  
  Dim hWindow As WebControl
  
  If Me.Parent Then
    Super.Hide()
    Return
  Endif
  
  If _Window = 0 Then Return
  
  hWindow = WebControl.FromId(_Window)
  If hWindow Then hWindow.Hide
  
End

Private Sub DoShow()
  
  Dim hWindow As WebWindow
  
  If _Window Then 
    hWindow = WebControl.FromId(_Window)
    If hWindow Then hWindow.Show
    Return
  Endif
  
  WebControl._NextName = "$" & Me.Name
  hWindow = New WebWindow(WebForm._Current._GetWindowContainer())
  _Window = hWindow.Id
  
  hWindow.Child = Me
  hWindow.Resizable = $bResizable
  hWindow.Move($sX, $sY, $sWidth, $sHeight)
  'hWindow.Refresh
  
End

'' Show the form.

Public Sub Show()

  If Me.Parent Then Return
  DoShow  
  Raise Open
  
End

Private Sub RunEventLoop()

  Dim iLevel As Integer
  
  Inc $iEventLoopLevel
  iLevel = $iEventLoopLevel

  Raise Open

  If $iEventLoopLevel = iLevel Then

    PrintLog("Send response before entering event loop")
  
    SendResponse
    EndResponse
  
    PrintLog("Entering event loop (" & Object.Count(Me) & ")")
    $bDoNotRespond = False
    While $iEventLoopLevel = iLevel
      Wait Next
    Wend
    $bDoNotRespond = False
    PrintLog("Exiting event loop (" & Object.Count(Me) & ")")
    
  Endif

End

'' Show the form as a modal dialog.
''
'' ~Parent~ is the owner of the dialog. If not specified, then the value of [/lang/last] is used as owner.
'' 
'' An error is raised if you try to call this method on an embedded form.

Public Sub ShowModal(Optional Parent As WebControl) As Variant
  
  Dim hWindow As WebWindow
  Dim vReturn As Variant
  
  If Me.Parent Then Error.Raise("Form is embedded")
  If _Window = 0 Then DoShow()
  
  hWindow = WebControl.FromId(_Window)
  If hWindow Then
    hWindow.Modal = True
    If IsMissing(Parent) Then Try Parent = Last
    If Parent Then hWindow.ParentControl = Parent.Name
  Endif
  
  RunEventLoop
  
  vReturn = $vEventLoopReturn
  $vEventLoopReturn = Null
  Return vReturn
  
End

'' Show the form as a popup.
''
'' - ~Control~ is the owner of the popup. It is normally the control the popup is attached to.
'' - ~Alignment~ defines the position of the popup on the screen:
''   - [Align.Left](../../align/left) : the popup is aligned to the left of its owner (this is the default).
''   - [Align.Right](../../align/eight) : the popup is aligned to the right of its owner.

Public Sub ShowPopup(Control As WebControl, Optional Alignment As Integer = Align.Left)
  
  Dim hWindow As WebWindow
  
  If Me.Parent Then Error.Raise("Form is embedded")
  If _Window Then 
    hWindow = WebControl.FromId(_Window)
    If hWindow.Visible Then Return
    hWindow.Show()
  Endif
  
  If Not hWindow Then hWindow = New WebWindow(WebForm._Current._GetWindowContainer())
  hWindow.Child = Me
  hWindow.Resizable = $bResizable
  hWindow.PopupAlignment = Alignment
  hWindow.PopupControl = Control.Name
  hWindow.Modal = True
  
  _Window = hWindow.Id
  
  RunEventLoop
  
End

'' Move and/or resize the form.
'' [[ warning
'' A main form cannot be moved nor resized.
'' ]]

Public Sub Move(X As String, Y As String, Optional Width As String, Optional Height As String)
  
  Dim hWindow As WebWindow = WebControl.FromId(_Window)
  
  $sX = X
  $sY = Y
  If Not IsMissing(Width) Then $sWidth = Width
  If Not IsMissing(Height) Then $sHeight = Height
  '$bCentered = False
  
  If hWindow Then hWindow.Move(X, Y, Width, Height)
  
End

'' Resize the form.
'' [[ warning
'' A main form cannot be resized.
'' ]]

Public Sub Resize(Width As String, Height As String)
  
  Dim hWindow As WebWindow = WebControl.FromId(_Window)
  
  $sWidth = Width
  $sHeight = Height
  '$bCentered = False
  
  If hWindow Then hWindow.Resize(Width, Height)
  
End

Public Sub _UpdateProperty(sProp As String, vValue As Variant)
  
  Dim aWindows As String[]
  Dim sName As String
  
  Select Case sProp
  
    Case "#windows" 
      aWindows = vValue
      Inc _DisableRefresh
      For Each sName In aWindows
        Try WebControl.FromName(sName).Raise()
      Next
      Dec _DisableRefresh
      
  End Select
  
End

Static Public Sub Application_Error()
  
  PrintLog("**** " & Error.Text & ": " & Error.Backtrace.Join(" "))
  
End

Private Function Width_Read() As String

  Return Me.Style["min-width"]

End

Private Sub Width_Write(Value As String)

  Me.Style["min-width"] = Value
  UpdateSize

End

Private Function Height_Read() As String

  Return Me.Style["min-height"]

End

Private Sub Height_Write(Value As String)

  Me.Style["min-height"] = Value
  UpdateSize

End

Public Sub _GetWindowContainer() As WebContainer

  'If Me.Parent Then Return Me.Form._GetWindowContainer()  
  Return $hWindowContainer
  
End

Private Function Popup_Read() As Boolean

  Dim hWindow As WebWindow = WebForm.FromId(Me._Window)
  If hWindow Then Return hWindow.IsPopup()
  
End

Private Function PopupParent_Read() As WebControl

  Dim hWindow As WebWindow = WebForm.FromId(Me._Window)
  If hWindow Then Return WebControl.FromName(hWindow.PopupControl)

End

' Public Sub _RefreshReply() As Boolean
'   
'   If Super._RefreshReply() Then Return
'   'If $hWindowContainer Then $hWindowContainer._RefreshReply()
'   
' End
' 
' Public Sub _CancelChildrenRefresh()
' 
'   Super._CancelChildrenRefresh()
'   'If $hWindowContainer Then $hWindowContainer._CancelRefresh()
'   
' End
' 
