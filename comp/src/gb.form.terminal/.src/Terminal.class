' Gambas class file

Export
Inherits UserControl

Private $hView As New ScrollArea(Me) As "View"

Property {Process} As Process
Private $hProcess As Process
Private $hEmulator As New CEmulator
Private $iCharHeight As Integer
Private $iCharWidth As Integer
Private $bStickOnBottom As Boolean = True
Private $colImg As New Collection
Private $bStickLock As Boolean
Private $bHaveFocus As Boolean
Private tmrDraw As New Timer As "tmrDraw"

Property Background As Integer

'Property ForeGround As Integer
Private $iBackGround As Integer = Color.Black

Public Sub _new()

  $hView.Background = $iBackGround 'Color.SetAlpha(Color.Black, 125)

  $hView.Focus = True

End

Public Sub RunShell(Path As String, Optional aEnv As String[]) As Boolean

  $hProcess = Exec [Path] With aEnv For Input Output As "MyProcess"

End

Public Sub View_Draw()

  Dim $aLines As CChar[][]
  Dim iNbreHistLines As Integer

  Dim hLine As CChar[]
  Dim C As CChar
  Dim hImg As Image

  Dim i, j As Integer
  Dim hFont As Font
  Dim hScreen As CScreen = $hEmulator.CurrentScreen
  Dim hDefaultChar As CChar = hScreen._GetDefaultChar()
  Dim iLineMax As Integer

  $iCharHeight = Paint.Font.Height
  $iCharWidth = Paint.Font.TextWidth("m")

  If $bStickOnBottom Then
    iNbreHistLines = 0
  Else
    iNbreHistLines = ((($hView.ScrollH - $hView.ClientH) - $hView.ScrollY) / $iCharHeight)
  Endif

  $aLines = $hEmulator.GetLines(iNbreHistLines)

  $iCharHeight = Paint.Font.Height
  $iCharWidth = Paint.Font.TextWidth("m")

  For j = 0 To $aLines.Max
    iLineMax = $aLines[j].Max
    For i = 0 To hScreen.Columns
      If i > iLineMax Then
        C = hDefaultChar
      Else
        C = $aLines[j][i]
      Endif

      If C = Null Then C = hDefaultChar

      himg = $colImg[C.Character]
      If Not hImg Then
        himg = New Image($iCharWidth, $iCharHeight, C.BackGround)
        hFont = Paint.Font
        Paint.Begin(himg)
          Paint.Font = hFont
          Draw.Background = C.BackGround
          Paint.Brush = Paint.Color(C.ForeGround)
          Paint.Text(String.Chr(C.Character), 0, 0, $iCharWidth, $iCharHeight, Align.Center)
          Paint.Fill
        Paint.End
        $colImg[C.Character] = himg
      Endif
      Draw.Image(hImg, i * $iCharWidth, j * $iCharHeight)

    Next

  Next
  If $bStickOnBottom Then

    Paint.Brush = Paint.Color(color.LightGray)
    Paint.LineWidth = 2
    Paint.Rectangle(hScreen.CursorX * $iCharWidth, hScreen.CursorY * $iCharHeight, $iCharWidth, $iCharHeight)
    'Paint.stroke
    If $bHaveFocus Then
      Paint.Fill()
    Else
      Paint.Stroke()
    Endif
  Endif

  $bStickLock = True
  $hView.ResizeContents($hView.ClientWidth, $hEmulator.CurrentScreen.GetAllLinesCount() * $iCharHeight)
  $bStickLock = False
  If $bStickOnBottom Then $hView.ScrollY = $hView.ScrollH - $hView.ClientHeight

End

Public Sub View_GotFocus()

  $bHaveFocus = True
  tmrDraw.Trigger

End

Public Sub View_LostFocus()

  $bHaveFocus = False
  tmrDraw.Trigger

End

Private Function Process_Read() As Process

  Return $hProcess

End

Private Sub Process_Write(Value As Process)

  $hProcess = Value
  Object.Attach(Value, Me, "MyProcess")

End

Public Sub MyProcess_Read()

  Dim s As String

  s = Read #$hProcess, Lof($hProcess)
  Try s = Conv(s, System.Charset, "UTF-8")

  $hEmulator.ReceiveStream(s)

  tmrDraw.Trigger

End

Public Sub MyProcess_Error(sError As String)

  $hEmulator.ReceiveStream(Conv(sError, System.Charset, "UTF-8"))
  $hView.Refresh

End

Public Sub View_KeyPress()

  $hEmulator.ReceiveStream(Key.Text)
  Write #$hProcess, Conv(Key.Text, "UTF-8", System.Charset)
  tmrDraw.Trigger

End

Public Sub View_Resize()

  Dim iH As Integer = $hView.Font.Height
  Dim iW As Integer = $hView.Font.TextWidth("m")

  Try $hEmulator.Resize(Floor(Last.ClientHeight / iH), Floor(Last.ClientWidth / iW))

End

Public Sub View_Scroll()

  If Not $bStickLock Then $bStickOnBottom = ($hView.ScrollY + $hView.ClientHeight) = $hView.ScrollH

End

Public Sub _free()

  $hProcess.close

End

Public Sub tmrDraw_Timer()

  $hView.Refresh

End

Private Function Background_Read() As Integer

  Return $hView.Background

End

Private Sub Background_Write(Value As Integer)

  $hView.Background = Value
  'tmrDraw.Trigger
End
