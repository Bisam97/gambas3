' Gambas class file

Inherits UserControl

Export

Public Const _Properties As String = "*,Border=True,Limit,Blink"
Public Const _DrawWith As String = "-"
Public Const _Group As String = "View"

Event Kill

Property Border As Boolean
Property Read Attr As TerminalAttr
Property Foreground As Integer
Property Read Column As Integer
Property Read Line As Integer
Property Limit As Integer
Property Type As String
Property AlternateScreen As Boolean
Property Blink As Boolean

Private $hPanel As Panel
Private $hView As DrawingArea
Private $hScroll As ScrollBar

Private $aScreen As New TerminalScreen[2]
Private $hScreen As TerminalScreen

Private $LH As Integer
Private $iAscent As Integer
Private $CW As Float
Private $hCacheFont As Image

Private $bMouseDown As Boolean
Private $iLimit As Integer
Private $bHideCursor As Boolean
Private $hMouseTimer As Timer

Private $hProcess As Process

Private $hFilter As TerminalFilter
Public _DisableFilter As Integer

Private $sType As String

Private $hCursorTimer As Timer
Private $bBlink As Boolean

Private $sBuffer As String
Private $hOutputTimer As Timer

Public _HasBlink As Boolean
Public _Blink As Boolean
Private $hBlinkTimer As Timer

Public Sub _new()
  
  Me.Font = Font["monospace"]

  $hPanel = New Panel(Me) 
  $hPanel.Arrangement = Arrange.Fill
  $hPanel.Border = Border.Plain

  $hView = New DrawingArea($hPanel) As "View"
  $hView.Border = False
  $hView.Focus = True
  $hView.Tracking = True
  $hView.Mouse = Mouse.Text
  $hView.Background = Color.Black
  $hView.Foreground = Color.White
  $hView.NoBackground = True
  
  $hScroll = New ScrollBar($hView) As "ScrollBar"
  $hScroll.Ignore = True
  $hScroll.Mouse = Mouse.Arrow
  $hScroll.Hide
  
  Me.Proxy = $hView
  
  Me.Type = "VT100"
  
  $aScreen[0] = New TerminalScreen As "TerminalScreen"
  $aScreen[1] = New TerminalScreen As "TerminalScreen"
  $hScreen = $aScreen[0]
  
  UpdateFont
  
  '$hRefreshTimer = New Timer As "RefreshTimer"
  '$hRefreshTimer.Delay = 50
  
  $hOutputTimer = New Timer As "OutputTimer"
  $hOutputTimer.Delay = 50
  
  $hBlinkTimer = New Timer As "BlinkTimer"
  $hBlinkTimer.Delay = 500
  
End

Public Sub Clear()
  
  $hScreen.Clear()
  UpdateFont
  
End

Public Sub Refresh()

  _HasBlink = False
  $hView.Refresh
  
End

Public Sub _RefreshLine((Y) As Integer)

  'If $hRefreshTimer.Enabled Then Return
  $hView.Refresh(0, (Y - GetScrollY()) * $LH, $hView.ClientW, $LH)

End

Public Sub _UpdateSize()

  Dim W, H As Integer

  'W = $hView.ClientW
  'If $hView.ScrollH <= $hView.ClientH Then W -= Style.ScrollbarSize + Style.ScrollbarSpacing
  W = Max(1, CInt($hView.ClientW / $CW))
  H = Max(1, $hView.ClientH \ $LH)
  
  '$hView.ResizeContents($hView.ClientW, Max(H, $hScreen.Lines.Count) * $LH + $hView.ClientH Mod $LH)
  $hScroll.MinValue = 0
  $hScroll.MaxValue = Max(0, $hScreen.Lines.Count - H)
  
  If $hScreen.Resize(W, H) Then
    'Debug W;; H
    If $hProcess Then $hProcess.Term.Resize(W, H)
  Endif

  Refresh
  
End

Private Sub UpdateFont()

  Dim sText As String
  Dim I As Integer
  
  With $hView.Font
  
    $LH = .Height
    $iAscent = .Ascent
    sText = String$(16, "WwmM")
    $CW = .TextWidth(sText) / Len(sText)
    'Debug $CW
    $CW = Ceil($CW)
    
    ' If .Fixed Then
    '   
    '   $hCacheFont = Null
    '   
    ' Else
    
      $hCacheFont = New Image($CW * 256, $LH * 2, Color.Transparent)
      Paint.Begin($hCacheFont)
      Paint.Background = Color.White
      Paint.Font = $hView.Font
      For I = 33 To 126
        Paint.DrawText(String.Chr(I), I * $CW, 0, $CW, $LH, Align.Center)
      Next
      For I = 160 To 255
        Paint.DrawText(String.Chr(I), I * $CW, 0, $CW, $LH, Align.Center)
      Next
      Paint.End
      
      Paint.Begin($hCacheFont)
      Paint.DrawImage($hCacheFont, 0, $LH, $hCacheFont.W, $LH,, Rect(0, 0, $hCacheFont.W, $LH))
      Paint.DrawImage($hCacheFont, 1, $LH, $hCacheFont.W, $LH, 0.8, Rect(0, 0, $hCacheFont.W, $LH))
      Paint.End
      
    ' Endif
  
  End With
  
  ' For I = 33 To 255
  '   Paint.DrawText(String.Chr(I), I * $CW, $LH, $CW, $LH, Align.Center)
  '   Paint.DrawText(String.Chr(I), I * $CW + 1, $LH, $CW, $LH, Align.Center)
  '   'Paint.DrawText(String.Chr(I), I * $CW, $iAscent + $LH)
  ' Next
  ' Paint.End
  
  _UpdateSize

End

Public Sub View_Font()
  
  UpdateFont
  
End


Public Sub View_Arrange()
  
  $hScroll.Move($hView.ClientW - Style.ScrollbarSize, 0, Style.ScrollbarSize, $hView.ClientH)
  _UpdateSize
  
End

Private Sub GetScrollY() As Integer
  
  Return $hScroll.Value
  
End

Public Sub BlinkTimer_Timer()
  
  _Blink = Not _Blink
  Refresh
  
End


Public Sub View_Draw()

  ApplyLimit
  $hScreen.Paint(GetScrollY() * $LH, $LH, $CW, $iAscent, $bHideCursor, $hCacheFont)
  If _HasBlink Then
    If Not $hBlinkTimer.Enabled Then $hBlinkTimer.Start
  Else
    $hBlinkTimer.Stop
  Endif
  
End

Public Sub Goto(X As Integer, Y As Integer)

  $hScreen.Goto(X, Y)
  
End


Private Function Border_Read() As Boolean

  Return $hPanel.Border <> Border.None

End

Private Sub Border_Write(Value As Boolean)

  $hPanel.Border = If(Value, Border.Plain, Border.None)

End

Private Function Attr_Read() As TerminalAttr

  Return $hScreen.Attr

End

Public Sub _EnsureVisibleAt((X) As Integer, Y As Integer)
  
  Dim H As Integer
  
  H = $hView.ClientH \ $LH
  
  If $hScroll.Value < (Y - H + 1) Then
    $hScroll.Value = Y - H + 1
  Else If $hScroll.Value > Y Then
    $hScroll.Value = Y
  Endif
  
End


Public Sub EnsureVisible()

  _EnsureVisibleAt($hScreen.X, $hScreen.Y)
  
End

Private Function Foreground_Read() As Integer

  Return Super.Foreground

End

Private Sub Foreground_Write(Value As Integer)

  Super.Foreground = Value
  UpdateFont

End

Private Sub GotoMouse(bStart As Boolean)

  Dim X As Integer
  Dim Y As Integer

  X = CInt((Mouse.ScreenX - $hView.ScreenX) / $CW)
  Y = GetScrollY() + (Mouse.ScreenY - $hView.ScreenY) \ $LH

  $hScreen.GotoMouse(X, Y, bStart)

End

Public Sub View_MouseDown()

  If Mouse.Left Then  
    $bMouseDown = True
    GotoMouse(True)
    $hMouseTimer = New Timer(50) As "MouseTimer"
  Else If Mouse.Middle Then
    Clipboard.Current = Clipboard.Selection
    Paste()
    Clipboard.Current = Clipboard.Default
  Endif
  
End

Public Sub View_MouseMove()
  
  If $bMouseDown Then 
    GotoMouse(False)
  Else
    If Mouse.X >= ($hView.ClientW - Style.ScrollbarSize) And If $hScroll.MaxValue Then
      $hScroll.Raise
      $hScroll.Show
    Else
      $hScroll.Hide
    Endif
  Endif
  
End

Public Sub View_MouseUp()
  
  Dim sText As String
  
  If $hMouseTimer Then
    $hMouseTimer.Stop
    $hMouseTimer = Null
  Endif
  
  If $bMouseDown Then
    sText = $hScreen.GetSelectedText()
    If sText Then
      Clipboard.Current = Clipboard.Selection
      Clipboard.Copy(sText, "text/plain")
      Clipboard.Current = Clipboard.Default
    Endif
  Endif
  
  $bMouseDown = False
  
End

Public Sub View_KeyPress()
  
  'If Key.Text Then $hScreen.Print(Replace(Key.Text, "\r", "\n"))
  If Not $hProcess Then Return
  
  If $hOutputTimer.Enabled Then $hOutputTimer.Trigger
  
  If $hFilter.InputTo(Me, $hProcess, Key.Code, Key.Text, Key.Normal, Key.Shift) Then 
    Stop Event
  Endif
  
End


Private Function Column_Read() As Integer

  Return $hScreen.Column

End

Private Function Line_Read() As Integer

  Return $hScreen.Line

End

Private Sub ApplyLimit()

  Dim iLimit As Integer

  iLimit = $iLimit
  If iLimit <= 0 Then iLimit = 10000

  If iLimit <= ($hView.ClientH \ $LH) Then Return

  $hScreen.ApplyLimit(iLimit)

End

Private Function Limit_Read() As Integer

  Return $iLimit

End

Private Sub Limit_Write(Value As Integer)

  $iLimit = Value
  ApplyLimit

End

Public Sub View_GotFocus()
  
  If $bBlink Then $hCursorTimer = New Timer(500) As "CursorTimer"
  
End

Public Sub View_LostFocus()
  
  If $bBlink Then
    $hCursorTimer.Stop
    $hCursorTimer = Null
  Endif
  
  $bHideCursor = False
  
End

Public Sub _ShowCursor()
  
  $bHideCursor = False
  
End


Public Sub CursorTimer_Timer()
  
  $bHideCursor = Not $bHideCursor
  _RefreshLine($hScreen.Y)
  
End

Public Sub MouseTimer_Timer()
  
  GotoMouse(False)
  
End

Private Function Type_Read() As String

  Return $sType

End

Private Sub Type_Write(Value As String)

  Try $hFilter = Object.New("TerminalFilter_" & Value)
  If Error Then Error.Raise("Unknown terminal type: " & Value)
  $sType = UCase(Value)

End

' Running a command

Public Sub Exec(aCommand As String[]) As Process

  If $hProcess Then Return
  
  $hProcess = Exec aCommand With ["TERM=xterm"] For Input Output As "Process"
  $hProcess.Term.Echo = True
  $hProcess.Term.Resize($hScreen.Width, $hScreen.Height)
  
End

Public Sub Shell(sCommand As String) As Process

  If $hProcess Then Return
  
  $hProcess = Shell sCommand With ["TERM=xterm"] For Input Output As "Process"
  $hProcess.Term.Echo = True
  $hProcess.Term.Resize($hScreen.Width, $hScreen.Height)
  
End

Public Sub Process_Kill()
  
  $hProcess = Null
  Raise Kill
  
End

Public Sub Process_Read()
  
  Dim sData As String
  
  sData = Read #$hProcess, Lof($hProcess)
  
  $sBuffer &= sData
  
  If Len($sBuffer) > 65536 Then
    $hOutputTimer.Trigger
  Else
    $hOutputTimer.Restart
  Endif
  
End

Public Sub OutputTimer_Timer()

  $hFilter.OutputTo(Me, $hProcess, $sBuffer)
  $sBuffer = ""
  $hOutputTimer.Stop
  
End

Public Sub _GetCurrentScreen() As TerminalScreen
  
  Return $hScreen
  
End

Private Function AlternateScreen_Read() As Boolean

  Return $hScreen = $aScreen[1] 

End

Private Sub AlternateScreen_Write(Value As Boolean)

  Dim hScreen As TerminalScreen
  
  If Value Then
    hScreen = $aScreen[1]
  Else
    hScreen = $aScreen[0]
  Endif
  
  If hScreen = $hScreen Then Return
  
  $hScreen = hScreen
  _UpdateSize

End

Public Sub ScrollBar_Change()
  
  Refresh
  
End

Public Sub Kill()
  
  Try $hProcess.Kill
  
End

Private Function Blink_Read() As Boolean

  Return $bBlink

End

Private Sub Blink_Write(Value As Boolean)

  If Value = $bBlink Then Return

  If $hView.HasFocus Then
    $bBlink = Value
    View_GotFocus
  Else
    View_LostFocus
    $bBlink = Value
  Endif
  _RefreshLine($hScreen.Line)

End

Public Sub Copy()

  Dim sText As String
  
  sText = $hScreen.GetSelectedText()
  If sText Then Clipboard.Copy(sText)
  
End

Public Sub Paste()

  Dim sText As String
  
  If Not $hProcess Then Return
  
  sText = Clipboard.Paste("text/plain")
  If Not sText Then Return
  
  $hFilter.InputTo(Me, $hProcess, 0, sText)
  
End
