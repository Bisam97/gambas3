' Gambas class file

Inherits TerminalFilter

Private Enum MODE_NORMAL, MODE_TITLE, MODE_IGNORE_CHAR

Private $sLeft As String

Public Sub OutputTo(hView As TerminalView, hProcess As Process, sData As String)
  
  Dim iPos As Integer
  Dim iPos2 As Integer
  Dim iCode As Integer
  Dim iMode As Integer
  
  If hView._DisableFilter Then
    $sLeft &= sData
    Return
  Endif
  
  If $sLeft Then 
    sData = $sLeft & sData
    $sLeft = ""
  Endif
  
  If Not String.IsValid(sData) Then
    $sLeft = sData
    Return
  Endif
  
  Do
    
    Inc iPos
    
    iPos2 = InStr(sData, Chr$(27), iPos)
    If iPos2 = 0 Then
      hView._GetCurrentScreen().Print(Mid$(sData, iPos))
      Break
    Endif
    
    If iPos2 > iPos Then hView._GetCurrentScreen().Print(Mid$(sData, iPos, iPos2 - iPos))
    
    iPos = iPos2
    Inc iPos
    
    If iPos > Len(sData) Then
      $sLeft = Mid$(sData, iPos2)
      Return
    Endif
    
    If Mid$(sData, iPos, 1) = "[" Then
      
      Inc iPos
      
      Do
        
        If iPos > Len(sData) Then
          $sLeft = Mid$(sData, iPos2)
          Return
        Endif
        
        iCode = Asc(Mid$(sData, iPos, 1))
        If iCode >= 64 And If iCode <= 126 Then Break
        
        Inc iPos
        
      Loop
      
    Endif
    
    iMode = Escape(hView, hProcess, sData, iPos2 + 1, iPos - iPos2)
    
    If iMode = MODE_TITLE Then
      Inc iPos
      iPos2 = InStr(sData, Chr$(7), iPos)
      If iPos2 = 0 Then
        $sLeft = Mid$(sData, iPos)
        Return
      Endif
      'Debug "SET TITLE : " & Mid$(sData, iPos, iPos2 - iPos)
      iPos = iPos2
      iMode = MODE_NORMAL
    Else If iMode = MODE_IGNORE_CHAR Then
      Inc iPos
      iMode = MODE_NORMAL
    Endif
    
  Loop
  
End

' Escape sequence without the initial 27 character.

Private Sub Escape(hView As TerminalView, hProcess As Process, sData As String, iPos As Integer, iLen As Integer) As Integer
  
  Dim hScreen As TerminalScreen = hView._GetCurrentScreen()
  Dim Y As Integer
  Dim X As Integer
  Dim aArg As String[]
  Dim sArg As String
  Dim iArg As Integer
  Dim sStr As String
  Dim iMode As Integer
  Dim N As Integer
  Dim I As Integer
  
  sStr = Mid$(sData, iPos, iLen)
  
  If hScreen.DEBUG_FILTER Then
    Debug "ESC";
    For I = 1 To Len(sStr)
      Error " "; Mid$(sStr, I, 1);
    Next
    Error
    hScreen.DebugRefresh
  Endif
  
  Select Case Left(sStr)
      
    Case "7" ' Save cursor
      
      hScreen.SaveCursor()
      
    Case "8" ' Restore cursor
      
      hScreen.RestoreCursor()
      
    Case "D" ' Index
      
      hScreen.Index
      
    Case "M" ' Reverse index
      
      hScreen.ReverseIndex
      
    Case "="
      hScreen.AppKeypad = True
      
    Case ">"
      hScreen.AppKeypad = False
      
    Case "("
      iMode = MODE_IGNORE_CHAR
      
    Case "]"
      iMode = MODE_TITLE
      
    Case "["
      
      Select Case Right(sStr)
          
        Case "A"
          
          GoSub GET_COUNT
          hScreen.CursorUp(N)
          
        Case "B"
          
          GoSub GET_COUNT
          hScreen.CursorDown(N)
          
        Case "C"
          
          GoSub GET_COUNT
          hScreen.CursorRight(N)
          
        Case "D"
          
          GoSub GET_COUNT
          hScreen.CursorLeft(N)
          
        Case "G"
          
          GoSub GET_ARGS
          Try hScreen.CursorGoto(CInt(aArg[0]) - 1, hScreen.Line)
          
        Case "H", "f" ' Cursor goto
          
          GoSub GET_ARGS
          
          If aArg Then
            Try Y = CInt(aArg[0]) - 1
            Try X = CInt(aArg[1]) - 1
          Endif
          hScreen.CursorGoto(X, Y)
          
        Case "J" ' Erase screen
          
          GoSub GET_ARGS
          If Not aArg Or If aArg[0] = "0" Then
            hScreen.EraseDown
          Else If aArg[0] = "1" Then
            hScreen.EraseUp
          Else If aArg[0] = "2" Then
            hScreen.EraseScreen
          Else
            Goto NOT_IMPLEMENTED
          Endif
          
        Case "K" ' Erase line
          
          GoSub GET_ARGS
          If Not aArg Or If aArg[0] = "0" Then
            hScreen.EraseEndOfLine
          Else If aArg[0] = "1" Then
            hScreen.EraseStartOfLine
          Else If aArg[0] = "2" Then
            hScreen.EraseLine
          Else
            Goto NOT_IMPLEMENTED
          Endif
          
        Case "L" ' Insert lines
          
          GoSub GET_COUNT
          hScreen.InsertLine(N)
          
        Case "M" ' Delete lines
          
          GoSub GET_COUNT
          hScreen.DeleteLine(N)
          
        Case "P" ' Delete characters
          
          GoSub GET_COUNT
          hScreen.DeleteChar(N)
          
        Case "h"
          
          Select Mid$(sStr, 2, -1)
            Case "4" ' Insert mode
              hScreen.InsertMode = True
            Case "20" ' Newline mode
              hScreen.NewLineMode = True
            Case "?1" ' Application cursor keys
              hScreen.AppCursorKey = True
            Case "?6" ' Origin
              hScreen.Origin = True
            Case "?7" ' Wrap mode
              hScreen.WrapMode = True
            Case "?25" ' Hide cursor
              hScreen.HideCursor = True
            Case "?47", "?1047"
              hView.AlternateScreen = True
            Case "?1048"
              hScreen.SaveCursor
            Case "?1049"
              hScreen.SaveCursor
              hView.AlternateScreen = True
              hView._GetCurrentScreen().Clear()
            Default
              Goto NOT_IMPLEMENTED
          End Select
          
        Case "l"
          
          Select Mid$(sStr, 2, -1)
            Case "4" ' Insert mode
              hScreen.InsertMode = False
            Case "20" ' Newline mode
              hScreen.NewLineMode = False
            Case "?1" ' Normal cursor keys
              hScreen.AppCursorKey = False
            Case "?6" ' Origin
              hScreen.Origin = False
            Case "?7" ' Wrap mode
              hScreen.WrapMode = False
            Case "?25" ' Hide cursor
              hScreen.HideCursor = False
            Case "?47"
              hView.AlternateScreen = False
            Case "?1047"
              hScreen.Clear
              hView.AlternateScreen = False
            Case "?1048"
              hScreen.RestoreCursor
            Case "?1049"
              hView.AlternateScreen = False
              hScreen.RestoreCursor
            Default
              Goto NOT_IMPLEMENTED
          End Select
          
        Case "m" ' Set attribute
          
          GoSub GET_ARGS
          If aArg Then
            For i = 0 To aArg.Max
              sArg = aArg[i]
              'For Each sArg In aArg
              
              Try iArg = CInt(sArg)
              If Error Then Continue
              
              Select Case iArg
                Case 0
                  hScreen.Attr.Reset()
                Case 1
                  hScreen.Attr.Bold = True
                Case 2
                  hScreen.Attr.Dim = True
                Case 4
                  hScreen.Attr.Underscore = True
                Case 7
                  hScreen.Attr.Reverse = True
                Case 21
                  hScreen.Attr.Bold = False
                Case 22
                  hScreen.Attr.Dim = False
                Case 24
                  hScreen.Attr.Underscore = False
                Case 27
                  hScreen.Attr.Reverse = False
                Case 30
                  hScreen.Attr.Foreground = 0
                Case 31 To 37
                  hScreen.Attr.Foreground = iArg - 30 + 8
                Case 39
                  hScreen.Attr.Foreground = -1
                Case 40 To 47
                  hScreen.Attr.Background = iArg - 40
                Case 49
                  hScreen.Attr.Background = -1
                Case 90 To 97
                  hScreen.Attr.Foreground = iArg - 90
                Case 100 To 107
                  hScreen.Attr.Background = iArg - 100
                Case 38
                  If (aArg.max - i) >= 2 And If aArg[i + 1] = "5" Then
                    Try hScreen.Attr.Background = CInt(aArg[i + 2])
                    i += 2
                  Endif
                  'TODO: Implement support for RGB Colors
                  ' If (aArg.max - i) >= 4 And If aArg[i + 1] = "2" Then
                  '   Try hScreen.Attr.Background = Color.RGB(CInt(aArg[i + 2]), CInt(aArg[i + 3]), CInt(aArg[i + 4))
                  '   i += 4
                  ' Endif
                Case 48
                  If (aArg.max - i) >= 2 And If aArg[i + 1] = "5" Then
                    Try hScreen.Attr.Foreground = CInt(aArg[i + 2])
                    i += 2
                  Endif
                  'TODO: Implement support for RGB Colors
                  ' If (aArg.max - i) >= 4 And If aArg[i + 1] = "2" Then
                  '   Try hScreen.Attr.ForeGround = Color.RGB(CInt(aArg[i + 2]), CInt(aArg[i + 3]), CInt(aArg[i + 4))
                  '   i += 4
                  ' Endif
                  
                Default
                  Goto NOT_IMPLEMENTED
              End Select
            Next
          Endif
          
        Case "r" ' Scroll screen
          
          GoSub GET_ARGS
          If Not aArg Then
            hScreen.ScrollScreen()
          Else
            Try hScreen.ScrollScreen(CInt(aArg[0]) - 1, CInt(aArg[1]) - 1)
          Endif
          
        Case "s" ' Save cursor
          
          hScreen.SaveCursor
          
        Case "u" ' Restore cursor
          
          hScreen.RestoreCursor
          
        Case "c"  'Report terminal type
          Print #hProcess, "\e[?1;2c"
          
        Default
          
          Goto NOT_IMPLEMENTED
          
      End Select
      
    Default
      
      Goto NOT_IMPLEMENTED
      
  End Select
  
  Return iMode
  
GET_COUNT:
  
  N = 1
  If Len(sStr) > 2 Then Try N = CInt(Mid$(sStr, 2, -1))
  
  Return
  
GET_ARGS:
  
  If Len(sStr) > 2 Then
    aArg = Split(Mid$(sStr, 2, -1), ";")
  Else
    aArg = Null
  Endif
  
  Return
  
NOT_IMPLEMENTED:
  
  Debug "Not implemented: "; Quote(sStr)
  
End

Public Sub InputTo(hView As TerminalView, hProcess As Process, iCode As Integer, sText As String) As Boolean
  
  Dim hScreen As TerminalScreen = hView._GetCurrentScreen()
  
  If Key.Normal Then
    
    Select Case iCode
        
      Case Key.Up
        sText = If(hScreen.AppCursorKey, "\eOA", "\e[A")
        
      Case Key.Down
        sText = If(hScreen.AppCursorKey, "\eOB", "\e[B")
        
      Case Key.Right
        sText = If(hScreen.AppCursorKey, "\eOC", "\e[C")
        
      Case Key.Left
        sText = If(hScreen.AppCursorKey, "\eOD", "\e[D")
        ' Case Key.Space
        '   sText = If(hScreen.AppCursorKey, "\eO ", " ")
        ' Case Key.Tab
        '   sText = If(hScreen.AppCursorKey, "\eOI", Key.Text)
      Case Key.Enter
        sText = If(hScreen.AppCursorKey, "\eOM", Key.Text)

      Case Key.Insert
        sText = "\e[2~"

      Case Key.End
        sText = "\e[4~"

      Case Key.PageDown
        sText = "\e[6~"

      Case Key.Home
        sText = "\e[1~"

      Case Key.PageUp
        sText = "\e[5~"

      Case Key.F1
        sText = "\eOP"

      Case Key.F2
        sText = "\eOQ"

      Case Key.F3
        sText = "\eOR"

      Case Key.F4
        sText = "\eOS"

      Case Key.F5
        sText = "\e[15~"

      Case Key.F6
        sText = "\e[17~"

      Case Key.F7
        sText = "\e[18~"

      Case Key.F8
        sText = "\e[19~"

      Case Key.F9
        sText = "\e[20~"

      Case Key.F10
        sText = "\e[21~"

      Case Key.F11
        sText = "\e[23~"

      Case Key.F12
        sText = "\e[24~"
        
    End Select
    
  Endif
  
  If sText Then
    Print #hProcess, sText;
    Return True
  Endif
  
End
