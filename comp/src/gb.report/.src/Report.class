' Gambas class file

Create Static
Export
Inherits ReportVBox

Public Const _Properties As String = "*"
Public Const _HiddenControls As String = "Report,ReportControl,ReportContainer"
Public Const _IsForm As Boolean = True

'Public Constants
Public {Debug} As Boolean = False

Private iCurPage As Integer = 0
Private $iCount As Integer = -1
Private $bLayoutIsDirty As Boolean = True
Private $fScale As Float = 1.0
Private $hReportTControl As New TControl


Property Read Count As Integer
Property Height As String
Property Width As String
Property Scale As Float

'EVENT Data()

Public Sub _New()

  object.Attach(Me, Me, "Report")
  
  $hReportTControl.RelPage = 0
  ReportControl._ObjectFromId[Me.id] = Me
  
End

Public Sub Layout()
  
  If Not $bLayoutIsDirty Then Return 
  MTools.ReportResolution = Paint.ResolutionX
  If Me.Parent = Null Then 
    Me.Width = Paint.Width & " px"
    Me.Height = Paint.Height & " px"
  Endif
  Me._SetUnifiedValues()
  
  $hReportTControl.ctrl = Me
  $iCount = $hReportTControl._SetGeometry(0, 0, Me._Width, Me._Height) + 1
  MTools.PageCount = $iCount
  $bLayoutIsDirty = False
  
End


Public Sub Paint(Page As Integer)
   
  If $bLayoutIsDirty Then Layout()
   
  If page < 1 Or page > $iCount Then 
    Error.Raise("This page does not exist")
  Endif
  Dec page
  
  'Paint.Clip
  With Paint.ClipExtents
    Debug .X;; .Y;; .Width;; .Height
  End With
  MTools.DrawCount = 0
  
  Paint.Scale($fScale, $fScale)
  Me._ClipChildren(Page, 0, 0, $hReportTControl, -1, $fSCale)
  Me._PaintBefore(Page, 0, 0, $hReportTControl, -1)
  Me._Paint(Page, 0, 0, $hReportTControl, -1)
  Me._PaintAfter(Page, 0, 0, $hReportTControl, -1)
  
  Debug "DrawCount = "; MTools.DrawCount
    
End

' Private Sub FillPages(ctrl As ReportContainer)
' 
'   Dim hChild As TControl
'   Dim relHeight As Integer
'   For Each hChild In ctrl.Children
'     hChild._Paint(ctrl._Left, ctrl._Top)
'     If hChild Is ReportContainer Then FillPages(hChild)
'   Next 
' 
' End


Private Function Count_Read() As Integer
  
  If $bLayoutIsDirty Then Layout() '$iCount = -1
  
  Return $iCount

End

Private Function Height_Read() As String

  Return Super.Height

End

Private Sub Height_Write(Value As String)
  If Super.Height <> Value Then 
    Super.Height = Value
    $bLayoutIsDirty = True
  Endif

End

Private Function Width_Read() As String

  Return Super.Width

End

Private Sub Width_Write(Value As String)
If Super.Width <> Value Then
  Super.Width = Value
  $bLayoutIsDirty = True
Endif

End

Private Function Scale_Read() As Float

  Return $fScale

End

Private Sub Scale_Write(Value As Float)

  $fScale = Value

End

' Public Sub Mosaic(Range As String, Spacing As String)
' 
'   Dim $fTempZ As Float
'   '$fTempZ = $fZoom
'   
'   
'   
' End

Public Sub Clear()
  
  Super._Free
  iCurPage = 0
  $iCount = -1
  '$iResolution = Desktop.Resolution
  $bLayoutIsDirty = True
  $fScale = 1.0
  Me.Brush = Null
  Me.Border = New ReportBorder
  Me.Spacing = "0 cm"
  Me.Padding = "0 cm"
End
' 
' Public Function Preview()
'   
'   frmPreview.Run(Me)
'   
' End


Public Function Image(Value As String, X As String, Y As String) As ReportBrush
  
  Dim hBrush As New ReportBrush
  hBrush._Type = 1
  hBrush._X = MTools.ScanValue(X)
  hBrush._Y = MTools.ScanValue(Y)
  hBrush._Image = Image.Load(Value)
  Return hBrush
  
End


Public Function LinearGradient(Colors As Integer[], Positions As float[]) As ReportBrush
  
  Dim hBrush As New ReportBrush
  hBrush._Type = 2
  'hBrush.X = MRTools.ScanValue(X)
  'hBrush.Y = MRTools.ScanValue(Y)
  
  hBrush._Color = Colors
  hBrush._Pos = Positions
  Return hBrush
  
  
End

Public Function RadialGradient(Colors As Integer[], Positions As float[]) As ReportBrush
  
  Dim hBrush As New ReportBrush
  hBrush._Type = 3
  'hBrush.X = MRTools.ScanValue(X)
  'hBrush.Y = MRTools.ScanValue(Y)
  
  hBrush._Color = Colors
  hBrush._Pos = Positions
  Return hBrush
  
  
End

Public Sub {Color}(iColor As Integer) As ReportBrush
  Dim hBrush As New ReportBrush
  hBrush._Type = 0
  hBrush._iValue = iColor
  Return hBrush
  
End
