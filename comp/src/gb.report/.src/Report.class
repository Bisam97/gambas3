' Gambas class file

Create Static
Export
Inherits ReportVBox

Public Const _Properties As String = "*,Orientation{Report.Portrait;Landscape},Size"
Public Const _HiddenControls As String = "Report,ReportControl,ReportContainer"
Public Const _IsForm As Boolean = True

'Public Constants
Public Const Portrait As Integer = 0
Public Const Landscape As Integer = 1
Public {Debug} As Boolean = False

Private iCurPage As Integer = 0
Private $iCount As Integer = -1
Private $bLayoutIsDirty As Boolean = True
Private $fScale As Float = 1.0
Private $iOrientation As Integer = Portrait
Private $sSize As String = "A4"
Private $hReportTControl As New TControl
Private hData As Object

Property Read Count As Integer
Property Height As String
Property Width As String
Property Scale As Float
Property Orientation As Integer
Property Size As String

'EVENT Data()

Public Sub _New()

  object.Attach(Me, Me, "Report")
  SetReportSize
  $hReportTControl.RelPage = 0
  ReportControl._ObjectFromId[Me.id] = Me
  
End

Public Sub Layout()
  
  If Not $bLayoutIsDirty Then Return 
  
  MTools.ReportResolution = Paint.ResolutionX
  SetReportSize()
  $hReportTControl.ctrl = Me
  $iCount = $hReportTControl._SetGeometry(0, 0, Me.Width, Me.Height) + 1
  MTools.PageCount = $iCount
  $bLayoutIsDirty = False
  
End


Public Sub Paint(Page As Integer)
   
  If $bLayoutIsDirty Then Layout()
   
  If page < 1 Or page > $iCount Then 
    Error.Raise("This page does not exist")
  Endif
  Dec page
  
  'Paint.Clip
  With Paint.ClipExtents
    Debug .X;; .Y;; .Width;; .Height
  End With
  MTools.DrawCount = 0
  
  Paint.Scale($fScale, $fScale)
  Me._ClipChildren(Page, 0, 0, $hReportTControl, -1, $fSCale)
  Me._PaintBefore(Page, 0, 0, $hReportTControl, -1)
  Me._Paint(Page, 0, 0, $hReportTControl, -1)
  Me._PaintAfter(Page, 0, 0, $hReportTControl, -1)
  
  Debug "DrawCount = "; MTools.DrawCount
    
End

Private Sub FillPages(ctrl As ReportContainer)

  Dim hChild As Object
  Dim relHeight As Integer
  For Each hChild In ctrl.Children
    hChild._Paint(ctrl._Left, ctrl._Top)
    If hChild Is ReportContainer Then FillPages(hChild)
  Next 

End


Private Function Count_Read() As Integer
  
  If $bLayoutIsDirty Then Layout() '$iCount = -1
  
  Return $iCount

End

Private Function Height_Read() As String

  Return Super.Height

End

Private Sub Height_Write(Value As String)
  If Super.Height <> Value Then 
    Super.Height = Value
    $bLayoutIsDirty = True
  Endif

End

Private Function Width_Read() As String

  Return Super.Width

End

Private Sub Width_Write(Value As String)
If Super.Width <> Value Then
  Super.Width = Value
  $bLayoutIsDirty = True
Endif

End

Private Function Scale_Read() As Float

  Return $fScale

End

Private Sub Scale_Write(Value As Float)

  $fScale = Value

End

' Public Sub Mosaic(Range As String, Spacing As String)
' 
'   Dim $fTempZ As Float
'   '$fTempZ = $fZoom
'   
'   
'   
' End


Private Function Size_Read() As String

  Return $sSize

End

Private Sub Size_Write(Value As String)

  $sSize = Value

End

Private Sub SetReportSize()
  Dim w As Float
  Dim h As Float
  If $sSize = "Custom" Then Return 
  Select Case $sSize
    Case "A4"
      w = 21
      h = 29.7
    Case "A3"
      w = 29.7
      h = 42
      
    Case "A5"
    
    Case "A6"
    Case "Letter"
    Case Else 
  End Select
  
  If Me.Orientation = Portrait Then 
    Me.Width = w & " cm"
    Me.Height = h & " cm"
  Else 
    Me.Width = h & " cm"
    Me.Height = w & " cm"
  
  Endif
  
End


Private Function Orientation_Read() As Integer

  Return $iOrientation

End

Private Sub Orientation_Write(Value As Integer)

  $iOrientation = Value

End

Public Sub Clear()
  
  Super._Free
  iCurPage = 0
  $iCount = -1
  '$iResolution = Desktop.Resolution
  $bLayoutIsDirty = True
  $fScale = 1.0
  $iOrientation = Portrait
  $sSize = "A4"
  Me.Spacing = "0 cm"
  Me.Padding = "0 cm"
End
' 
' Public Function Preview()
'   
'   frmPreview.Run(Me)
'   
' End


Public Function Image(Value As String, X As String, Y As String) As ReportBrush
  
  Dim hBrush As New ReportBrush
  hBrush._Type = 1
  hBrush._X = MTools.ScanValue(X)
  hBrush._Y = MTools.ScanValue(Y)
  hBrush._Image = Image.Load(Value)
  Return hBrush
  
End


Public Function LinearGradient(Colors As Integer[], Positions As float[]) As ReportBrush
  
  Dim hBrush As New ReportBrush
  hBrush._Type = 2
  'hBrush.X = MRTools.ScanValue(X)
  'hBrush.Y = MRTools.ScanValue(Y)
  
  hBrush._Color = Colors
  hBrush._Pos = Positions
  Return hBrush
  
  
End

Public Function RadialGradient(Colors As Integer[], Positions As float[]) As ReportBrush
  
  Dim hBrush As New ReportBrush
  hBrush._Type = 3
  'hBrush.X = MRTools.ScanValue(X)
  'hBrush.Y = MRTools.ScanValue(Y)
  
  hBrush._Color = Colors
  hBrush._Pos = Positions
  Return hBrush
  
  
End

Public Sub {Color}(iColor As Integer) As ReportBrush
  Dim hBrush As New ReportBrush
  hBrush._Type = 0
  hBrush._iValue = iColor
  Return hBrush
  
End
