' Gambas class file

Export
Inherits ReportFrame

Public Const _Properties As String = "*"
Public Const _IsControl As Boolean = True

Private $sText As String
Private $iAlignment As Integer '= Align.Center

Property Text As String
Property Alignment As Integer


Public Sub _New()
  
  Me.Height = "100 px"
  
End


Private Function Text_Read() As String

  Return $sText

End

Private Sub Text_Write(Value As String)

  $sText = Value

End

Private Function Alignment_Read() As Integer

  Return $iAlignment

End

Private Sub Alignment_Write(Value As Integer)

  $iAlignment = Value

End


Public Sub _GetSizeHints(AvailableW As Float, AvailableH As Float, TotalWidth As Float, TotalHeight As Float) As TSizeHint

  Dim hMyHints As New TSizeHint
  Dim fTextHeight As Float
  Dim fTextWidth As Float
  Dim hext As PaintExtents
  
  hMyHints.Height = Me._Height + (2 * Me._Padding)
  
  If Not IsNull(Me.Font) Then Paint.Font = Me.Font
  'draw.Font.size = draw.Font.size '* MRTools.ResolutionAffichage

  'if the size choosed by the user is less than the font height, set the object to the font height
  'hext = Paint.TextExtents($sText)
  fTextHeight = MTools.PixelsToUnits(Me.Font.Height($sText)) 'hext.Height)
  fTextWidth = MTools.PixelsToUnits(Me.Font.Width($sText)) 'hext.Width)
  
  If hMyHints.Height < fTextHeight Then hMyHints.Height = fTextHeight + (2 * Me._Padding)
  If Me._RelativeHeight Then hMyHints.Height = TotalHeight * Me._Height / 100
  If Me._Width > 0 And Not Me.Autoresize Then 
    hMyHints.Width = Me._Width
  Else 
    hMyHints.Width = Paint.TextExtents(DecodeText($sText,, True)).Width + (2 * Me._Padding)
    If hMyHints.Width < Me._Width Then hMyHints.Width = Me._Width
  Endif 
  If Me._RelativeWidth Then hMyHints.Width = AvailableW * Me._Width / 100
  If hMyHints.Width > AvailableW Then hMyHints.Width = AvailableW
  Return hMyHints
  
End

Public Sub _Draw(Page As Integer, X As Integer, Y As Integer, hControl As TControl, VirtualId As Integer)

    'Draw.Foreground = Me.Foreground
    Paint.Brush = Paint.Color(Me.BorderColor)
    If Not IsNull(Me.Font) Then Paint.Font = Me.Font
    'Paint.Font.size = Paint.Font.size * MRTools.ReportZoom '* MRTools.ResolutionAffichage
    'draw.Clip((x + hControl.RealLeft + MRTools.UnitsToPixels(Me.Padding)) * MRTools.ReportZoom, (y + hControl.RealTop + MRTools.UnitsToPixels(Me.Padding)) * MRTools.ReportZoom, hControl.RealWidth * MRTools.ReportZoom, hControl.RealHeight * MRTools.ReportZoom)
    'Draw.Text(DecodeText($sText, Page + 1), (x + hControl.RealLeft + MRTools.UnitsToPixels(Me.Padding)) * MRTools.ReportZoom, (y + hControl.RealTop + MRTools.UnitsToPixels(Me.Padding)) * MRTools.ReportZoom, hControl.RealWidth * MRTools.ReportZoom, hControl.RealHeight * MRTools.ReportZoom, $iAlignment)
    Paint.Text(DecodeText($sText, Page + 1), (x + hControl.RealLeft + MTools.UnitsToPixels(Me.Padding)), (y + hControl.RealTop + MTools.UnitsToPixels(Me.Padding)), hControl.RealWidth, hControl.RealHeight, $iAlignment)
    Paint.Fill
    'Draw.Clip.Enabled = False
End



Private Function DecodeText(sText As String, Optional Page As Integer, Optional ForSize As Boolean = False) As String
  
  If ForSize Then 
    If InStr(sText, "$PAGE") Then sText = Replace(sText, "$PAGE", "999")
    If InStr(sText, "$NPAGE") Then sText = Replace(sText, "$NPAGE", "999")
  Else
    If InStr(sText, "$PAGE") Then sText = Replace(sText, "$PAGE", Str(Page))
    If InStr(sText, "$NPAGE") Then sText = Replace(sText, "$NPAGE", Str(MTools.PageCount))
  Endif
  
  Return sText
  
End



