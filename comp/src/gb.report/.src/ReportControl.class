' Gambas class file

Export
Create Private 
'Object Management

Static Public _ObjectFromId As New Collection
Static Public _iCurPagePos As Integer
Static Private $iLastId As Integer


Private $iMyId As Integer
Private $iParentId As Integer
Private $iRelPage As Integer
Private $vTag As Variant
Private $fPadding As Float


Property Read Id As Integer
Property Read Parent As ReportContainer
Property Tag As Variant
Property Padding As String

'Object properties
Private $fLeft As Float = 0.0
Private $fTop As Float = 0.0
Private $fWidth As Float = 0.0
Private $fHeight As Float = 0.0
Private $sHeightUnit As String = "cm"
Private $sLeftUnit As String = "cm"
Private $sWidthUnit As String = "cm"
Private $sTopUnit As String = "cm"
Private $sPadding As String = "cm"
Private $iForeColor As Integer = Color.Black
Private $iBackGround As Integer = Color.White
Private $iFillColor As Integer = Color.Black
Private $iFillStyle As Integer = Fill.None
Private $iLineWidth As Integer = 1
Private $iLineStyle As Integer = Line.None
Private $iVisible As Boolean = True
Private $hFont As New Font
Private $iExpand As Integer
Private $bAutoresize As Boolean = False
Private $bRelativeWidth As Boolean
Private $bRelativeHeight As Boolean
Private $bRelativePadding As Boolean

Property Read _Top As Float
Property Read _Height As Float
Property Read _Width As Float
Property Read _Left As Float
Property Read _Padding As Float
Property Read _RelativeWidth As Boolean
Property Read _RelativeHeight As Boolean
Property Read _RelativePadding As Boolean

Property Left As String
Property Top As String
Property Width As String
Property Height As String
Property ForeColor As Integer
Property BackGround As Integer
Property FillColor As Integer
Property FillStyle As Integer
Property LineWidth As Integer
Property LineStyle As Integer
Property Visible As Boolean
Property {Font} As Font
Property Expand As Integer
Property Autoresize As Boolean


Public Sub _New(Optional Parent As ReportContainer = Null)
  
  $iMyId = $iLastId
  Inc $iLastId
  If IsNull(Parent) Then 
    $iParentId = -1
  Else
    $iParentId = Parent.Id
    Parent._Add(Me)
  Endif
  
End

Private Function Id_Read() As Integer

  Return $iMyId

End

Private Function Parent_Read() As ReportContainer

  Return ReportControl._ObjectFromId[$iParentId]

End

Private Function Left_Read() As String

  Return Units.CmToUnit($fLeft, $sLeftUnit) & " " & $sLeftUnit

End

Private Sub Left_Write(Value As String)
  Dim hSizeParse As TSizeParse
  hSizeParse = MRTools.ScanValue(value)
  If Units.AllowedUnits.Find(hSizeParse.Unit) = -1 Then error.Raise("Unknown unit")
  $fLeft = Units.UnitToCm(Value, hSizeParse.Unit)
  $sLeftUnit = hSizeParse.Unit

End

Private Function Top_Read() As String

  Return Units.CmToUnit($fTop, $sTopUnit) & " " & $sTopUnit

End

Private Sub Top_Write(Value As String)
  Dim hSizeParse As TSizeParse
  hSizeParse = MRTools.ScanValue(value)
  If Units.AllowedUnits.Find(hSizeParse.Unit) = -1 Then error.Raise("Unknown unit")
  $fTop = Units.UnitToCm(Value, hSizeParse.Unit)
  $sTopUnit = hSizeParse.Unit

End

Private Function Width_Read() As String
  If $sWidthUnit = "%" Then 
    Return $fWidth & " " & $sWidthUnit
  Else 
    Return Units.CmToUnit($fWidth, $sLeftUnit) & " " & $sWidthUnit
  Endif 
  

End

Private Sub Width_Write(Value As String)
  Dim hSizeParse As TSizeParse
  hSizeParse = MRTools.ScanValue(value)
  If Units.AllowedUnits.Find(hSizeParse.Unit) = -1 And If hSizeParse.Unit <> "%" Then error.Raise("Unknown unit")
  If hSizeParse.Unit = "%" Then 
    $fWidth = hSizeParse.Value
    $bRelativeWidth = True
  Else
    $fWidth = Units.UnitToCm(Value, hSizeParse.Unit)
    $bRelativeWidth = False
  Endif
  $sWidthUnit = hSizeParse.Unit
End

Private Function Height_Read() As String
  
  If $sHeightUnit = "%" Then
    Return $fHeight & " " & $sHeightUnit
  Else 
    Return Units.CmToUnit($fHeight, $sHeightUnit) & " " & $sHeightUnit
  Endif

End

Private Sub Height_Write(Value As String)
  Dim hSizeParse As TSizeParse
  hSizeParse = MRTools.ScanValue(value)
  If Units.AllowedUnits.Find(hSizeParse.Unit) = -1 And If hSizeParse.Unit <> "%" Then error.Raise("Unknown unit")
  If hSizeParse.Unit = "%" Then 
    $fHeight = hSizeParse.Value
    $bRelativeHeight = True
  Else 
    $fHeight = Units.UnitToCm(hSizeParse.Value, hSizeParse.Unit)
    $bRelativeHeight = False
  Endif
  $sHeightUnit = hSizeParse.Unit
  
End

Private Function ForeColor_Read() As Integer

  Return $iForeColor

End

Private Sub ForeColor_Write(Value As Integer)

  $iForeColor = Value

End

Private Function BackGround_Read() As Integer

  Return $iBackGround

End

Private Sub BackGround_Write(Value As Integer)

  $iBackGround = Value

End

Private Function FillColor_Read() As Integer

  Return $iFillColor

End

Private Sub FillColor_Write(Value As Integer)

  $iFillColor = Value

End

Private Function FillStyle_Read() As Integer

  Return $iFillStyle

End

Private Sub FillStyle_Write(Value As Integer)

  $iFillStyle = Value

End

Private Function LineWidth_Read() As Integer

  Return $iLineWidth

End

Private Sub LineWidth_Write(Value As Integer)

  $iLineWidth = Value

End

Private Function LineStyle_Read() As Integer

  Return $iLineStyle

End

Private Sub LineStyle_Write(Value As Integer)

  $iLineStyle = Value

End

Private Function Expand_Read() As Integer

  Return $iExpand 

End

Private Sub Expand_Write(Value As Integer)

  $iExpand = Value

End

Public Sub _GetSizeHints(AvailableW As Integer, AvailableH As Integer, TotalWidth As Integer, TotalHeight As Integer) As Integer

  Error.Raise("Something goes wrong the _GetSizeHints is not correctly implemented")

End


Public Sub _DrawBefore(Page As Integer, X As Integer, Y As Integer, hControl As TControl, VirtualId As Integer)

  Dim X1, Y1, X2, Y2 As Integer
  
  

  X1 = (x + hControl.RealLeft) 
  Y1 = (y + hControl.RealTop) 
  X2 = (x + hControl.RealLeft + hControl.RealWidth - 1) 
  Y2 = (y + hControl.RealTop + hControl.RealHeight - 1) 

  If Report.Debug Then


      Paint.Brush = Paint.Color(0)
      Paint.Dash = MRTools.GetLineStyle(Line.Dot)
      Paint.Rectangle(X1, Y1, X2 - X1 + 2, Y2 - Y1 + 2)
      Paint.Stroke
      
  Else 
    
    If Me.FillStyle = fill.None Then Return 
    Paint.Brush = Paint.Color($iFillColor)
    Paint.Rectangle(X1, Y1, X2 - X1 + 2, Y2 - Y1 + 2)
    Paint.Fill
    

  Endif 
  
  
  
    
End

Public Sub _Draw(Page As Integer, X As Integer, Y As Integer, hControl As TControl, VirtualId As Integer)
  

    
  
End

Public Sub _DrawAfter(Page As Integer, X As Integer, Y As Integer, hControl As TControl, VirtualId As Integer)
  
Dim X1, Y1, X2, Y2 As Integer
  
  X1 = (x + hControl.RealLeft) 
  Y1 = (y + hControl.RealTop) 
  X2 = (x + hControl.RealLeft + hControl.RealWidth - 1) 
  Y2 = (y + hControl.RealTop + hControl.RealHeight - 1) 
  
    If Me.LineStyle <> Line.None Then 
      Paint.LineWidth = $iLineWidth
      If Me.LineStyle <> Line.Solid Then paint.Dash = MRTools.GetLineStyle(Me.LineStyle)
      'Draw.LineStyle = $iLineStyle
      'Draw.LineWidth = $iLineWidth
      Paint.Brush = Paint.Color($iForeColor)
      
      'Draw.ForeColor = $iForeColor
      'draw.FillStyle = Fill.None
        
     paint.Rectangle(X1, Y1, X2 - X1 + 2, Y2 - Y1 + 2)
      
      paint.Stroke
      
    Endif
  
End

Private Function Visible_Read() As Boolean

  Return $iVisible  

End

Private Sub Visible_Write(Value As Boolean)

  $iVisible = Value

End

Public Sub Move(X As Float, Y As Float, W As Float, H As Float)
  
  $fLeft = X
  $fTop = Y
  $fWidth = W
  $fHeight = H
  
End

Private Function Tag_Read() As Variant

  Return $vTag  

End

Private Sub Tag_Write(Value As Variant)

  $vTag = Value

End


Private Function Font_Read() As Font

  Return $hFont

End

Private Sub Font_Write(Value As Font)

  $hFont = Value

End

Private Function Padding_Read() As String

  Return Units.CmToUnit($fPadding, $sPadding) & " " & $sPadding
  
End

Private Sub Padding_Write(Value As String)
  Dim hSizeParse As TSizeParse
  $bRelativePadding = False
  hSizeParse = MRTools.ScanValue(value)
  If Units.AllowedUnits.Find(hSizeParse.Unit) = -1 Then error.Raise("Unknown unit")
  If hSizeParse.Unit = "%" Then 
    $fPadding = hSizeParse.Value
    $bRelativePadding = True
  Else 
    $fPadding = Units.UnitToCm(hSizeParse.Value, hSizeParse.Unit)
    $sPadding = hSizeParse.Unit
    $bRelativePadding = False
  Endif
End

Private Function _Top_Read() As Float

  Return $fTop

End

Private Function _Height_Read() As Float

  Return $fHeight

End

Private Function _Width_Read() As Float

  Return $fWidth

End

Private Function _Left_Read() As Float

  Return $fLeft

End

Private Function _Padding_Read() As Float

  Return $fPadding

End

Public Sub _Free()
  
  
  
End

Public Function _SetChildGeometry(X As Float, Y As Float, W As Float, H As Float, ContPage As Integer) As Float
  
  
  
End


Private Function Autoresize_Read() As Boolean

  Return $bAutoresize  

End

Private Sub Autoresize_Write(Value As Boolean)

  $bAutoresize = Value

End

Private Function _RelativeWidth_Read() As Boolean

  Return $bRelativeWidth

End

Private Function _RelativeHeight_Read() As Boolean

  Return $bRelativeHeight

End

Private Function _RelativePadding_Read() As Boolean

  Return $bRelativePadding

End
