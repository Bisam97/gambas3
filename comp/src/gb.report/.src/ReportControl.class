' Gambas class file

Export
Create Private 

Public Const _IsControl As Boolean = True
Public Const _Properties As String = "Left,Top,Width,Height,Visible=True,Font,Padding,Expand,AutoResize,Tag"
Public Const _Family As String = "Report"

'Object Management
Static Public _ObjectFromId As New Collection
Static Public _iCurPagePos As Integer
Static Private $iLastId As Integer


Private $iMyId As Integer
Private $iParentId As Integer
Private $iRelPage As Integer
Private $vTag As Variant
Private $fPadding As Float


Property Read Id As Integer
Property Read Parent As ReportContainer
Property Tag As Variant
Property Padding As String

'Object properties
Private $fLeft As Float = 0.0
Private $fTop As Float = 0.0
Private $fWidth As Float = 0.0
Private $fHeight As Float = 0.0
Private $sHeight As String = "0 cm"
Private $sLeft As String = "0 cm"
Private $sWidth As String = "0 cm"
Private $sTop As String = "0 cm"
Private $sPadding As String = "0 cm"

Private $iVisible As Boolean = True
Private $hFont As New Font
Private $bExpand As Boolean
Private $bAutoresize As Boolean = False
Private $bRelativeWidth As Boolean
Private $bRelativeHeight As Boolean
Private $bRelativePadding As Boolean
Private $bIgnore As Boolean = False

Property Read _Top As Float
Property Read _Height As Float
Property Read _Width As Float
Property Read _Left As Float
Property Read _Padding As Float
Property Read _RelativeWidth As Boolean
Property Read _RelativeHeight As Boolean
Property Read _RelativePadding As Boolean
Property Read _FrameWidth As Float

Property Left As String
Property Top As String
Property Width As String
Property Height As String

Property Visible As Boolean
Property {Font} As Font
Property Expand As Boolean
Property Ignore As Boolean

Property Autoresize As Boolean


Public Sub _New(Optional Parent As ReportContainer = Null)
  
  $iMyId = $iLastId
  Inc $iLastId
  If IsNull(Parent) Then 
    $iParentId = -1
  Else
    $iParentId = Parent.Id
    Parent._Add(Me)
  Endif
  
End

Private Function Id_Read() As Integer

  Return $iMyId

End

Private Function Parent_Read() As ReportContainer

  Return ReportControl._ObjectFromId[$iParentId]

End

Private Function Left_Read() As String

  Return $sLeft

End

Private Sub Left_Write(Value As String)
  
  $sLeft = Value

End

Private Function Top_Read() As String

  Return $sTop

End

Private Sub Top_Write(Value As String)
 
 $sTop = Value
 
End

Private Function Width_Read() As String
 
  Return $sWidth

End

Private Sub Width_Write(Value As String)
  
  $sWidth = Value
  
End

Private Function Height_Read() As String
  
  Return $sHeight

End

Private Sub Height_Write(Value As String)
  
  $sHeight = Value
  
End


Private Function Expand_Read() As Boolean

  Return $bExpand 

End

Private Sub Expand_Write(Value As Boolean)

  $bExpand = Value

End

Public Sub _GetSizeHints(AvailableW As Integer, AvailableH As Integer, TotalWidth As Integer, TotalHeight As Integer) As Integer

  Error.Raise("Something goes wrong the _GetSizeHints is not correctly implemented")

End


Public Sub _PaintBefore(Page As Integer, X As Float, Y As Float, hControl As TControl, VirtualId As Integer)

End

Public Sub _Paint(Page As Integer, X As Float, Y As Float, hControl As TControl, VirtualId As Integer)
  
End

Public Sub _PaintFrame(Page As Integer, X As Float, Y As Float, hControl As TControl, VirtualId As Integer)
  Me._Paint(Page, X, Y, hControl, VirtualId)
End

Public Sub _PaintAfter(Page As Integer, X As Float, Y As Float, hControl As TControl, VirtualId As Integer)

End

Private Function Visible_Read() As Boolean

  Return $iVisible  

End

Private Sub Visible_Write(Value As Boolean)

  $iVisible = Value

End

Public Sub Move(X As Float, Y As Float, W As Float, H As Float)
  
  $fLeft = X
  $fTop = Y
  $fWidth = W
  $fHeight = H
  
End

Private Function Tag_Read() As Variant

  Return $vTag  

End

Private Sub Tag_Write(Value As Variant)

  $vTag = Value

End


Private Function Font_Read() As Font

  Return $hFont

End

Private Sub Font_Write(Value As Font)

  $hFont = Value

End

Private Function Padding_Read() As String

  Return $sPadding
  
End

Private Sub Padding_Write(Value As String)
  
  $sPadding = Value
  
End

Private Function _Top_Read() As Float

  Return $fTop

End

Private Function _Height_Read() As Float

  Return $fHeight

End

Private Function _Width_Read() As Float

  Return $fWidth

End

Private Function _Left_Read() As Float

  Return $fLeft

End

Private Function _Padding_Read() As Float

  Return $fPadding

End

Public Sub _Free()
  
  
  
End

Public Function _SetChildGeometry(X As Float, Y As Float, W As Float, H As Float, ContPage As Integer) As Float
  
  
  
End


Private Function Autoresize_Read() As Boolean

  Return $bAutoresize  

End

Private Sub Autoresize_Write(Value As Boolean)

  $bAutoresize = Value

End

Private Function _RelativeWidth_Read() As Boolean

  Return $bRelativeWidth

End

Private Function _RelativeHeight_Read() As Boolean

  Return $bRelativeHeight

End

Private Function _RelativePadding_Read() As Boolean

  Return $bRelativePadding

End

Private Function _FrameWidth_Read() As Float

End

''Convert recursively string values to unified values in cm
Public Sub _SetUnifiedValues()
  
  Dim aSizeParse As TSizeParse[]
  Dim hSizeParse As TSizeParse
  'Left
  hSizeParse = MTools.ScanValue($sLeft)
   If Units.AllowedUnits.Exist(hSizeParse.Unit) = -1 Then error.Raise("Unknown unit")

      $fLeft = Units.UnitToCm(hSizeParse.Value, hSizeParse.Unit)

  'Right
  hSizeParse = MTools.ScanValue($sTop)
    If Units.AllowedUnits.Exist(hSizeParse.Unit) = -1 Then error.Raise("Unknown unit")

      $fTop = Units.UnitToCm(hSizeParse.Value, hSizeParse.Unit)

  'Width
  hSizeParse = MTools.ScanValue($sWidth)
    If Units.AllowedUnits.Exist(hSizeParse.Unit) = -1 And If hSizeParse.Unit <> "%" Then error.Raise("Unknown unit")
    If hSizeParse.Unit = "%" Then 
      $fWidth = hSizeParse.Value
      $bRelativeWidth = True
    Else 
      $fWidth = Units.UnitToCm(hSizeParse.Value, hSizeParse.Unit)
      $bRelativeWidth = False
    Endif
  'Height
  hSizeParse = MTools.ScanValue($sHeight)
    If Units.AllowedUnits.Exist(hSizeParse.Unit) = -1 And If hSizeParse.Unit <> "%" Then error.Raise("Unknown unit")
    If hSizeParse.Unit = "%" Then 
      $fHeight = hSizeParse.Value
      $bRelativeHeight = True
    Else 
      $fHeight = Units.UnitToCm(hSizeParse.Value, hSizeParse.Unit)
      $bRelativeHeight = False
    Endif
  
  'Padding
  hSizeParse = MTools.ScanValue($sPadding)
    If Units.AllowedUnits.Exist(hSizeParse.Unit) = -1 And hSizeParse.Unit <> "%" Then error.Raise("Unknown unit")
    If hSizeParse.Unit = "%" Then 
      $fPadding = hSizeParse.Value
      $bRelativePadding = True
    Else 
      $fPadding = Units.UnitToCm(hSizeParse.Value, hSizeParse.Unit)
      $bRelativePadding = False
    Endif
End


Private Function Ignore_Read() As Boolean

  Return $bIgnore

End

Private Sub Ignore_Write(Value As Boolean)

  $bIgnore = Value

End

