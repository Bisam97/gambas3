' Gambas class file

Export
Inherits ReportControl

Private $sText As String = ""
Private $iAlignment As Integer '= Align.Center
Private $iMaxLength As Integer = 10
Private $iIndex As Integer
Property Data As String
Property Alignment As Integer
Property MaxLength As Integer
Property Read Index As Integer


Event Data

Public Sub _New()
  
  'ME.Height = "1 cm"
  
End


Private Function Data_Read() As String

  Return $sText

End

Private Sub Data_Write(Value As String)

  $sText = Value

End

Private Function Alignment_Read() As Integer

  Return $iAlignment

End

Private Sub Alignment_Write(Value As Integer)

  $iAlignment = Value

End


Public Sub _GetSizeHints(AvailableW As Float, AvailableH As Float, TotalWidth As Float, TotalHeight As Float) As TSizeHint

  Dim hMyHints As New TSizeHint
  Dim fTextHeight As Float
  Dim fTextWidth As Float
  Dim $sTmpText As String = String($iMaxLength, "W")
  Dim hext As PaintExtents
  ' IF $iMaxLength = 0 THEN 
  '   RAISE Data(VirtualId)
  '   $sTmpText = $sText
  ' ENDIF
   
  'IF ME._RelativeWidth THEN PRINT "percent"
  hMyHints.Height = Me._Height + (2 * Me._Padding)
  
  If Not IsNull(Me.Font) Then Paint.Font = Me.Font
  'draw.Font.size = draw.Font.size 

  'if the size choosed by the user is less than the font height, set the object to the font height
  
  'hext = Paint.TextExtents($sTmpText)
  fTextHeight = MRTools.PixelsToUnits(Me.Font.Height($sTmpText)) 'hext.Height)
  fTextWidth = MRTools.PixelsToUnits(Me.Font.Width($sTmpText)) 'hext.Width)
  
  If hMyHints.Height < fTextHeight Then hMyHints.Height = fTextHeight + (2 * Me._Padding)
  If Me._RelativeHeight Then hMyHints.Height = TotalHeight * Me._Height / 100
  If Me._Width > 0 And Not Me.Autoresize Then 
    hMyHints.Width = Me._Width
  Else 
    
    hMyHints.Width = fTextWidth + (2 * Me._Padding)
  
    If hMyHints.Width < Me._Width Then hMyHints.Width = Me._Width
  Endif
    If Me._RelativeWidth Then hMyHints.Width = AvailableW * Me._Width / 100
    If hMyHints.Width > AvailableW Then hMyHints.Width = AvailableW
  
  Return hMyHints
  
End

Public Sub _DrawBefore(Page As Integer, X As Integer, Y As Integer, hControl As TControl, VirtualId As Integer)
  $iIndex = VirtualId
  Raise Data
  Super._DrawBefore(Page, X, Y, hControl, VirtualId)
  
End

Public Sub _Draw(Page As Integer, X As Integer, Y As Integer, hControl As TControl, VirtualId As Integer)
  $iIndex = VirtualId
  Raise Data 
    
  'Draw.ForeColor = Me.ForeColor
  Paint.Brush = Paint.Color(Me.ForeColor)
  'Set the Font if it is initialized
  If Not IsNull(Me.Font) Then Paint.Font = Me.Font
  Paint.Font.size = Paint.Font.size ' * MRTools.ReportZoom '* MRTools.ResolutionAffichage
  
  'Draw.Clip((x + hControl.RealLeft + MRTools.UnitsToPixels(Me.Padding)) * MRTools.ReportZoom, (y + hControl.RealTop + MRTools.UnitsToPixels(Me.Padding)) * MRTools.ReportZoom, hControl.RealWidth * MRTools.ReportZoom, hControl.RealHeight * MRTools.ReportZoom)
    'Draw.Text(Left($sText, $iMaxLength), (x + hControl.RealLeft + MRTools.UnitsToPixels(Me.Padding)) * MRTools.ReportZoom, (y + hControl.RealTop + MRTools.UnitsToPixels(Me.Padding)) * MRTools.ReportZoom, hControl.RealWidth * MRTools.ReportZoom, hControl.RealHeight * MRTools.ReportZoom, $iAlignment)
    paint.Text(Left($sText, $iMaxLength), (x + hControl.RealLeft + MRTools.UnitsToPixels(Me.Padding)), (y + hControl.RealTop + MRTools.UnitsToPixels(Me.Padding)), hControl.RealWidth, hControl.RealHeight, $iAlignment)
    paint.Fill
  'Draw.Clip.Enabled = False
  
End

Public Function _SetGeometry(X As Float, Y As Float, W As Float, H As Float) As Float
  
  Dim X1, Y1, X2, Y2 As Float
  
  X1 = MRTools.UnitsToPixels(X)
  Y1 = MRTools.UnitsToPixels(Y)
  X2 = MRTools.UnitsToPixels(X + W)
  Y2 = MRTools.UnitsToPixels(Y + H)
  
  Me.RealLeft = X1
  Me.RealTop = Y1
  Me.RealWidth = X2 - X1
  Me.RealHeight = Y2 - Y1
  
End

Private Function MaxLength_Read() As Integer

  Return $iMaxLength 

End

Private Sub MaxLength_Write(Value As Integer)

  $iMaxLength = Value

End

Private Function Index_Read() As Integer

  Return $iIndex

End
