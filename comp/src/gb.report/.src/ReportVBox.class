' Gambas class file

Export
Inherits ReportContainer
Public Const _Properties As String = "*"
Public Const _Similar As String = "ReportVBox"

Public Sub _new()

  Super._Arrangement = Arrange.Vertical

End

Public Sub _Free()

  Super._Free

End

Public Sub _GetSizeHints(AvailableW As Float, AvailableH As Float, TotalWidth As Float, TotalHeight As Float) As TSizeHint

  Dim hSizeInt As New TSizeHint
  Dim htmpInts As TSizeHint
  Dim fFix As Float                ''Taille des éléments fixes (non basculable sur une autre page)
  Dim hChild As ReportControl         ''Enfants
  Dim fHeight As Float
  Dim i, j As Integer
  'On définit la taille au besoins des enfants
  For i = Me._CurItem To Me.Children.Max
    hChild = Me.Children[i]
    htmpInts = hChild._GetSizeHints(AvailableW, AvailableH - fHeight, AvailableW, AvailableH)
    'si l 'élément est fixe on retient la hauteur
    If hChild.Fixed Then
      fFix += htmpInts.Height
    Endif
    'on ajoute la hauteur aux besoins
    hSizeInt.Height += htmpInts.Height
    If hSizeInt.Height > AvailableH Then
      Break
    Endif

    'On récupère la largeur de l'enfant le plus large
    If hSizeInt.Width < htmpInts.Width Then hSizeInt.Width = htmpInts.Width
  Next

  'Si la place disponible est moins importante
  'On l'impose
  If AvailableH < hSizeInt.Height Then hSizeInt.Height = AvailableH
  'si height est définit alors on l'impose !
  If Me._Height > 0 And Not Me.Autoresize Then hSizeInt.Height = Me._Height
  'Mais si les éléments fixes dépassent cette taille on doit la leur fournir
  If hSizeInt.Height < fFix Then hSizeInt.Height = fFix

  'A présent, un élément ne peut jamais faire 0 sous peine de disparaitre donc
  hSizeInt.Height = Max(hSizeInt.Height, 0.1)

  'If hSizeInt.Width > AvailableW Then hSizeInt.Width = AvailableW
  'si on est pas en mode autoresize
  If Not Me.Autoresize Then
    If Me._RelativeWidth Then
      hSizeInt.Width = AvailableW * Me._Width / 100
    Else
      hSizeInt.Width = Me._Width
    Endif

  Endif
  Me._SizeInt = hSizeInt

  Return hSizeInt

End

Public Sub _SetChildGeometry(X As Float, Y As Float, W As Float, H As Float, ContPage As Integer, bInFixed As Boolean)

  Dim aPageItems As New TControl[] ''Éléments contenu par cette page
  Dim hChildHints As TSizeHint ''Besoins en hauteur/largeur de l'enfant
  Dim hChild As ReportControl  ''Un enfant reportcontrol
  Dim oChild As Object
  Dim TH, fHeight, fSpc As Float
  Dim fExp As Float
  Dim iNExp As Integer
  Dim O As Object
  Dim i, j As Integer
  Dim hTItem As TControl
  Dim bPass As Boolean
  'Initialisation des variables
  fSpc = IIf(Me._RelativeSpacing, H * Me._Spacing / 100, Me._Spacing) 'ME._Spacing
  'On retire les marges a la hauteur et les bordures
  H = H - Me.Padding._Top - Me.Padding._Bottom - Me.Border._Top - Me.Border._Bottom
  'on retire a la largeur les paddings (et les bordure ?)
  W = W - Me.Padding._Left - Me.Padding._Right - Me.Border._Left - Me.Border._Right

  'On positionne le curseur de position au coin a gauche
  X = Me.Padding._Left + Me.Border._Left
  Y = Me.Padding._Top + Me.Border._Top

  'On initialise la hauteur total avec la hauteur disponible
  TH = H

  'On va retirer a la hauteur totale les éléments fixes

  For i = 0 To Me.Children.Max
    hChild = Me.Children[i]
    If hChild.Fixed And Not hChild.Ignore Then
      hChildHints = hChild._GetSizeHints(W, TH, W, H)
      'Print "Ajout de :" & Object.Type(hChild)
      'si l'index courant est inférieur a l'objet en cour du conteneur alors
      'on l'ajoute a la page et on incrémente la place des objet étendu si il est étendu
      If Me._CurItem = 0 And i = 0 Then Continue

      TH = TH - hChildHints.Height - fspc
      If i < Me._CurItem Then
        hTItem = New TControl
        hTItem.Ctrl = hChild
        hTItem.SizeHint = hChildHints
        'On l'ajoute a la page
        aPageItems.Add(hTItem)
        'Si l'enfant est étendu alors on en tien compte :
        If hChild.Expand Then
          fExp += hChildHints.Height
          Inc iNexp
        Endif
      Endif

    Endif

  Next

  For i = Me._CurItem To Me.Children.Max

    hChild = Me.Children[i]
    hChildHints = hChild._GetSizeHints(W, TH, W, H)

    If TH - hChildHints.Height < 0 Then

      Break
    Endif
    TH = TH - hChildHints.Height - fspc
    hTItem = New TControl
    hTItem.Ctrl = hChild
    hTItem.SizeHint = hChildHints
    'On l'ajoute a la page
    aPageItems.Add(hTItem)
    'Si l'enfant est étendu alors on en tien compte :
    If hChild.Expand Then
      fExp += hChildHints.Height
      Inc iNexp
    Endif
    Inc Me._CurItem
  Next

  If (H - TH) > 0 Then
    TH += fspc
  Endif

  For i = Max(Me._CurItem, 0) To Me.Children.Max
    hChild = Me.Children[i]
    If hChild.Fixed And Not hChild.Ignore Then
      hTItem = New TControl
      hTItem.Ctrl = hChild
      hTItem.SizeHint = hChildHints
      'On l'ajoute a la page
      aPageItems.Add(hTItem)
      'Si l'enfant est étendu alors on en tien compte :
      If hChild.Expand Then
        fExp += hChildHints.Height
        Inc iNexp
      Endif
    Endif
  Next

  'On va mettre en page a présent
  'On définit la taille des éléments étendus
  If iNexp Then
    fExp = (TH + fExp) / iNexp
  Endif

  For Each hTItem In aPageItems

    oChild = hTItem.Ctrl
    'Si l'élément est étendu on lui applique la taille répartie
    If oChild.Expand Then
      'If Me.Tag = "*" Then Stop
      fHeight = fExp
    Else
      'sinon il maintien sa taille
      fHeight = hTItem.SizeHint.Height
    Endif

    'Print Object.Type(hChild) & "  " & fHeight
    hTItem._SetGeometry(X, Y, W, fHeight)
    oChild._SetChildGeometry(X, Y, W, fHeight, ContPage, bInFixed Or Me.Fixed)
    Y += fHeight + fspc

    If oChild Is ReportContainer Then

      If oChild._CurItem <= oChild.Children.max Then
        j = Me.Children.Find(oChild)
        Me._CurItem = Min(Me._CurItem, j)
        Print Me._CurItem
      Endif

    Endif

  Next

  'Fin du processus
  'On ajoute cette page au dossier du conteneur
  Me._PageChildren[ContPage] = aPageItems

End
