' Gambas class file

Export
Create Private
Inherits ReportControl
Static Private iLevel As Integer
Public Const _Properties As String = "*,Border,Background{ReportBrush}"

' Private $fLeftBorderWidth As Float
' Private $fRightBorderWidth As Float
' Private $fTopBorderWidth As Float
' Private $fBottomBorderWidth As Float

Private $hBorder As New ReportBorder

Private $hBackGround As ReportBrush

Property Border As ReportBorder

Property BackGround As ReportBrush
'Property Read _BorderWidth As Float

Private Function Border_Read() As ReportBorder

  Return $hBorder

End

Private Sub Border_Write(Value As ReportBorder)

  $hBorder = Value

End

Public Sub _PaintBefore(Page As Integer, X As Float, Y As Float, hControl As TControl, VirtualId As Integer)

  Dim X1, Y1, X2, Y2 As Float
  Dim hImage As Picture
  Dim fradius As Float

  'If Me.tag = "*" Then Stop

  X1 = (x + hControl.RealLeft)
  Y1 = (y + hControl.RealTop)
  X2 = (x + hControl.RealLeft + hControl.RealWidth)
  Y2 = (y + hControl.RealTop + hControl.RealHeight)
  'Clipping
  'paint.save

  ' Print String(iLevel, " ") & "sauvé"
  ' Inc iLevel
  ' Paint.Rectangle(X1, Y1, X2 - X1, Y2 - Y1)
  ' paint.Clip(True)

  If Report.Debug Then

    Paint.Brush = Paint.Color(Color.Green)
    'Paint.Dash = MTools.GetBorder(Line.Dot)
    Paint.Rectangle(X1, Y1, X2 - X1, Y2 - Y1)
    Paint.Stroke

  Else

    If Me.BackGround = Null Then Return
    paint.Brush = Me.BackGround._PaintBrush(X1, Y1, X2, Y2)

    Paint.Rectangle(X1, Y1, X2 - X1, Y2 - Y1)
    Paint.Fill

  Endif

End

Public Sub _PaintFrame(Page As Integer, X As Float, Y As Float, hControl As TControl, VirtualId As Integer)

  _PaintBefore(Page, X, Y, hControl, VirtualId)
  Me._Paint(Page, X, Y, hControl, VirtualId)
  _PaintAfter(Page, X, Y, hControl, VirtualId)

End

Public Sub _PaintAfter(Page As Integer, X As Float, Y As Float, hControl As TControl, VirtualId As Integer)

  Dim X1, Y1, X2, Y2 As Float
  'Dim fWidth As Float

  Dim fTopWidth, fBottomWidth, fLeftWidth, fRighWidth As Float

  fLeftWidth = MTools.UnitsToPixels($hBorder._Left)
  fRighWidth = MTools.UnitsToPixels($hBorder._Right)
  fTopWidth = MTools.UnitsToPixels($hBorder._Top)
  fBottomWidth = MTools.UnitsToPixels($hBorder._Bottom)

  'If $hBorder.Style <> Line.None Then

  'fWidth = MTools.UnitsToPixels($fBorderWidth)

  X1 = (x + hControl.RealLeft)
  Y1 = (y + hControl.RealTop)
  X2 = (x + hControl.RealLeft + hControl.RealWidth)
  Y2 = (y + hControl.RealTop + hControl.RealHeight)

  'Paint.Brush = Paint.Color($hBorder.Brush._iValue)

  If fTopWidth > 0 Then
    paint.Brush = $hBorder.Top.Brush._PaintBrush(X1, Y1, X2, Y2)
    paint.Rectangle(X1, Y1, X2 - X1, fTopWidth)
    paint.Fill
  Endif
  If fRighWidth > 0 Then
    paint.Brush = $hBorder.Right.Brush._PaintBrush(X1, Y1, X2, Y2)
    paint.Rectangle(X2 - fRighWidth, Y1, fRighWidth, Y2 - Y1)
    paint.Fill
  Endif
  If fBottomWidth > 0 Then
    paint.Brush = $hBorder.Bottom.Brush._PaintBrush(X1, Y1, X2, Y2)
    paint.Rectangle(X1, Y2 - fBottomWidth, X2 - X1, fBottomWidth)
    paint.Fill
  Endif
  If fLeftWidth > 0 Then
    paint.Brush = $hBorder.Left.Brush._PaintBrush(X1, Y1, X2, Y2)
    paint.Rectangle(X1, Y1, fLeftWidth, Y2 - Y1)
    paint.Fill
  Endif
  'Fin du clipping
  'paint.Restore
  'Dec iLevel
  'Print String(iLevel, " ") & "restoré"

  'Endif

End

Private Function BackGround_Read() As ReportBrush

  Return $hBackGround

End

Private Sub BackGround_Write(Value As ReportBrush)

  $hBackGround = Value

End

Public Sub _SetUnifiedValues()

  Dim hSizeParse As TSizeParse
  Dim sValue As String
  Dim ars As String[]

  Super._SetUnifiedValues()

  hSizeParse = New TSizeParse($hBorder.Left.Width)
  $hBorder._Left = hSizeParse.GetValue()
  hSizeParse = New TSizeParse($hBorder.Right.Width)
  $hBorder._Right = hSizeParse.GetValue()
  hSizeParse = New TSizeParse($hBorder.Top.Width)
  $hBorder._Top = hSizeParse.GetValue()
  hSizeParse = New TSizeParse($hBorder.Bottom.Width)
  $hBorder._Bottom = hSizeParse.GetValue()

End

Public Sub _GetSizeHints(AvailableW As Float, AvailableH As Float, TotalWidth As Float, TotalHeight As Float) As TSizeHint

  Dim hMyHints As TSizeHint

  hMyHints = Super._GetSizeHints(AvailableW, AvailableH, TotalWidth, TotalHeight)

  If hMyHints.Height <= 0 Then
    hMyHints.Height = Me.Padding._Top + Me.Padding._Bottom + Me.Border._Top + Me.Border._Bottom
  Endif

  If hMyHints.Width <= 0 Then
    hMyHints.Width = Me.Padding._Left + Me.Padding._Right + Me.Border._Left + Me.Border._Right
  Endif

  Return hMyHints

End
