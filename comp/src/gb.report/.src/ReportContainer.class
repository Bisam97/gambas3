' Gambas class file

Export
Create Private 
Inherits ReportFrame

Public Const _IsContainer As Boolean = True
Public Const _Group As String = "Container"
Public Const _Properties As String = "*,Spacing"

Private $aChild As New TControl[]
Private $fSpacing As Float
Private $sSpacing As String
Private $bRelativeSpacing As Boolean
Private $bRepeat As Boolean
Property Read Children As TControl[]
Property Spacing As String
Property {Repeat} As Boolean


Property Read _Spacing As Float
Property Read _RelativeSpacing As Boolean

Public _RealSpacing As Integer

Public Function _Add(cControl As ReportControl) As TControl
  Dim hTControl As New TControl
  
  hTControl.Ctrl = cControl
  $aChild.Add(hTControl)
  ReportControl._ObjectFromId[cControl.Id] = cControl
  Return hTControl
End

Public Sub _Remove(id As Integer)
  
  $aChild.Remove($aChild.Find(ReportControl._ObjectFromId[id]))
  
End


Public Sub _Free()
  
  Dim hCtrl As TControl
  For Each hCtrl In $aChild
    Try ReportControl._ObjectFromId.Remove(hCtrl.Ctrl.Id)
    'hctrl = NULL
  Next 
  $aChild.Clear
    
End

Private Function Children_Read() As TControl[]

  Return $aChild

End


Private Function Spacing_Read() As String

  Return $sSpacing

End

Private Sub Spacing_Write(Value As String)

  $sSpacing = Value

End


Public Sub _ClipChildren(Page As Integer, X As Float, Y As Float, hControl As TControl, VirtualId As Integer, fScale As Float)
  
  Dim hChild As TControl
  Dim vi As Integer
  Dim hExt As PaintExtents
  Dim fFrameWidth As Float
  Dim CX1, CX2, CY1, CY2 As Float
  Dim hCont As ReportContainer
  
  With Paint.ClipExtents
    CX1 = .X / fScale
    CY1 = .Y / fScale
    CX2 = .X2 / fScale
    CY2 = .Y2 / fScale
  End With
  
  X += hControl.RealLeft
  Y += hControl.RealTop
  
  For Each hChild In Me.Children
    vi = VirtualId
    If hControl.VirtualId > -1 Then vi = hControl.VirtualId
    
    'Evaluate if the object need to be painted
    
    'Debug hChild.Ctrl;; X + hChild.RealLeft;; Y + hChild.RealTop;; "->";; X + hChild.RealLeft + hChild.RealWidth;; Y + hChild.RealTop + hChild.RealHeight; " DANS "; CX1;; CY1;; "->";; CX2;; CY2; " ?"
    
    'reset the Painting flag
    hChild._SkipPainting = False
    'Test the painting Position
    'fFrameWidth = hChild.Ctrl._FrameWidth
    If Not Paint.Device Is Printer And If CX2 > CX1 And If CY2 > CY1 Then 
      If (X + hChild.RealLeft) > CX2 Then 
        hChild._SkipPainting = True
        Continue
      Endif
      If (X + hChild.RealLeft + hChild.RealWidth) < CX1 Then 
        hChild._SkipPainting = True
        Continue
      Endif
      If (Y + hChild.RealTop) > CY2 Then 
        hChild._SkipPainting = True
        Continue
      Endif
      If (Y + hChild.RealTop + hChild.RealHeight) < CY1 Then 
        hChild._SkipPainting = True
        Continue
      Endif
    Endif
    
    If hChild.RelPage >= 0 And If (hChild.RelPage + hControl.RealPage) <> Page Then
      hChild._SkipPainting = True
      Continue
    Endif
    
    'Debug "-> YES"
    
    If hChild.Ctrl Is ReportContainer Then
      hCont = hChild.Ctrl
      hCont._ClipChildren(Page, X, Y, hChild, vi, fScale)
    Endif
    
  Next
  
End

' 
' Public Sub _PaintBefore(Page As Integer, X As Float, Y As Float, hControl As TControl, VirtualId As Integer)
'   
'   Dim hChild As TControl
'   Dim vi As Integer
'   Dim hExt As PaintExtents
'   Dim fFrameWidth As Float
'   
'   Super._PaintBefore(Page, X, Y, hControl, VirtualId)
'   
'   X += hControl.RealLeft
'   Y += hControl.RealTop
'   
'   For Each hChild In Me.Children
'     If hChild._SkipPainting Then Continue
'     
'     vi = VirtualId
'     If hControl.VirtualId > -1 Then vi = hControl.VirtualId
'     
'     hChild.Ctrl._PaintBefore(Page, X, Y, hChild, vi)
'   
'   Next
'   
' End

Public Sub _Paint(Page As Integer, X As Float, Y As Float, hControl As TControl, VirtualId As Integer)
  
  Dim hChild As TControl
  Dim vi As Integer
  
  X += hControl.RealLeft
  Y += hControl.RealTop
  
  For Each hChild In Me.Children

    If hChild._SkipPainting Then Continue
    
    Inc MTools.DrawCount
    
    vi = VirtualId
    If hControl.VirtualId > -1 Then vi = hControl.VirtualId
  
    hChild.Ctrl._Paintframe(Page, X, Y, hChild, vi)
    
  Next 
  
End

' Public Sub _PaintAfter(Page As Integer, X As Float, Y As Float, hControl As TControl, VirtualId As Integer)
'   
'   Dim hChild As TControl
'   Dim vi As Integer
'   
'   Super._PaintAfter(Page, X, Y, hControl, VirtualId)
'   
'   X += hControl.RealLeft
'   Y += hControl.RealTop
'   
'   For Each hChild In Me.Children
'     If hChild._SkipPainting Then Continue
'     'Draw After
'     hChild.Ctrl._PaintAfter(Page, X, Y, hChild, vi)
'   Next
'   
' End



Private Function _Spacing_Read() As Float

  Return $fSpacing

End

' ' PRIVATE FUNCTION _Padding_Read() AS Float
' ' 
' '   RETURN $fPadding
' ' 
' END

Private Function _RelativeSpacing_Read() As Boolean

  Return $bRelativeSpacing

End

Public Sub _SetUnifiedValues()
  Dim hChild As TControl
  Dim hSizeParse As TSizeParse
  
  Super._SetUnifiedValues()

  hSizeParse = MTools.ScanValue($sSpacing)
  If Units.AllowedUnits.Find(hSizeParse.Unit) = -1 And If hSizeParse.Unit <> "%" Then error.Raise("Unknown unit")
  If hSizeParse.Unit = "%" Then 
    $fSpacing = hSizeParse.Value
    $bRelativeSpacing = True
  Else 
    $fSpacing = Units.UnitToCm(hSizeParse.Value, hSizeParse.Unit)
    $bRelativeSpacing = False
  Endif
  
  For Each hChild In $aChild
    hChild.Ctrl._SetUnifiedValues()
  Next
  
  
End

Private Function Repeat_Read() As Boolean

  Return $bRepeat

End

Private Sub Repeat_Write(Value As Boolean)

  $bRepeat = Value

End

Public Sub _GenerateClones()
  
  Dim hTControl As New TControl
    
  Do
   hTControl = Me.Parent._Add(Me)
  Loop While True 'trouver comment stoper la boucle !
  
  
  For Each hTControl In $aChild
  
    If hTControl.Ctrl Is ReportContainer Then 
      If hTControl.Ctrl.Repeat Then hTControl.Ctrl._GenerateClones()
    Endif
  
  Next
  
  
End

