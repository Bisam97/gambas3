' Gambas class file

Export
Create Private 
Inherits ReportFrame

Public Const _IsContainer As Boolean = True
Public Const _Group As String = "Container"
Public Const _Properties As String = "*,Spacing"

Private $aChild As New TControl[]
Private $fSpacing As Float
'PRIVATE $fPadding AS Float
Private $sSpacingUnit As String
'PRIVATE $sPaddingUnit AS String
Private $bRelativeSpacing As Boolean
Property Read Children As TControl[]
Property Spacing As String
'PROPERTY Padding AS String
Property Read _Spacing As Float
'PROPERTY READ _Padding AS Float
Property Read _RelativeSpacing As Boolean

Public _RealSpacing As Integer

Public Function _Add(cControl As ReportControl) As TControl
  Dim hTControl As New TControl
  
  hTControl.Ctrl = cControl
  $aChild.Add(hTControl)
  ReportControl._ObjectFromId[cControl.Id] = cControl
  Return hTControl
End

Public Sub _Remove(id As Integer)
  
  $aChild.Remove($aChild.Find(ReportControl._ObjectFromId[id]))
  
End


Public Sub _Free()
  
  Dim hCtrl As Object
  For Each hCtrl In $aChild
    Try ReportControl._ObjectFromId.Remove(hCtrl.Ctrl.Id)
    'hctrl = NULL
  Next 
  $aChild.Clear
    
End

Private Function Children_Read() As TControl[]

  Return $aChild

End


Private Function Spacing_Read() As String

  Return Units.CmToUnit($fSpacing, $sSpacingUnit) & " " & $sSpacingUnit

End

Private Sub Spacing_Write(Value As String)

  Dim hSizeParse As TSizeParse
  hSizeParse = MTools.ScanValue(value)
  If Units.AllowedUnits.Find(hSizeParse.Unit) = -1 And If hSizeParse.Unit <> "%" Then error.Raise("Unknown unit")
  If hSizeParse.Unit = "%" Then 
    $fSpacing = hSizeParse.Value
    $bRelativeSpacing = True
  Else 
    $fSpacing = Units.UnitToCm(hSizeParse.Value, hSizeParse.Unit)
    $sSpacingUnit = hSizeParse.Unit
    $bRelativeSpacing = False
  Endif
End

' PRIVATE FUNCTION Padding_Read() AS String
' 
'   RETURN Units.CmToUnit($fPadding, $sPaddingUnit) & " " & $sPaddingUnit
' 
' END

' ' PRIVATE SUB Padding_Write(Value AS String)
' ' DIM hSizeParse AS TSizeParse
' '   hSizeParse = MRTools.ScanValue(value)
' '   IF NOT Units.AllowedUnits.Find(hSizeParse.Unit) = -1 THEN error.Raise("Unknown unit")
' '   $fPadding = Units.UnitToCm(Value, hSizeParse.Unit)
' '   $sPaddingUnit = hSizeParse.Unit
' ' 
' END

Public Sub _PaintBefore(Page As Integer, X As Integer, Y As Integer, hControl As TControl, VirtualId As Integer)
  Dim hChild As TControl
  Dim vi As Integer
  Dim hExt As PaintExtents
  Dim fFrameWidth As Float
  
  hExt = Paint.ClipExtents
  
  Super._PaintBefore(Page, X, Y, hControl, VirtualId)
  
  X += hControl.RealLeft
  Y += hControl.RealTop
  
  For Each hChild In Me.Children
    vi = VirtualId
    If hControl.VirtualId > -1 Then vi = hControl.VirtualId
    
    'Evaluate if the object need to be painted
    
    'Debug hChild.Ctrl;; X + hChild.RealLeft;; Y + hChild.RealTop;; "->";; X + hChild.RealLeft + hChild.RealWidth;; Y + hChild.RealTop + hChild.RealHeight; " DANS "; hExt.X;; hExt.Y;; "->";; hExt.X2;; hExt.Y2; " ?"
    
    'reset the Painting flag
    hChild._SkipPainting = False
    'Test the painting Position
    fFrameWidth = hChild.Ctrl._FrameWidth
    If Not Paint.Device Is Printer And If hExt.Width > 0 And If hExt.Height > 0 Then 
      If (X + hChild.RealLeft - fFrameWidth) > hExt.X2 Then 
        hChild._SkipPainting = True
        Continue
      Endif
      If (X + hChild.RealLeft + hChild.RealWidth + fFrameWidth) < hExt.X Then 
        hChild._SkipPainting = True
        Continue
      Endif
      If (Y + hChild.RealTop - fFrameWidth) > hExt.Y2 Then 
        hChild._SkipPainting = True
        Continue
      Endif
      If (Y + hChild.RealTop + hChild.RealHeight + fFrameWidth) < hExt.Y Then 
        hChild._SkipPainting = True
        Continue
      Endif
    Endif
    
    If hChild.RelPage >= 0 And If (hChild.RelPage + hControl.RealPage) <> Page Then
      hChild._SkipPainting = True
      Continue
    Endif
    
    'Debug "-> YES"
    
    'Draw Before
    hChild.Ctrl._PaintBefore(Page, X, Y, hChild, vi)
  
  Next
  
End

Public Sub _Paint(Page As Integer, X As Integer, Y As Integer, hControl As TControl, VirtualId As Integer)
  
  Dim hChild As TControl
  Dim vi As Integer
  
  X += hControl.RealLeft
  Y += hControl.RealTop
  
  For Each hChild In Me.Children

    If hChild._SkipPainting Then Continue
    
    Inc MTools.DrawCount
    
    vi = VirtualId
    If hControl.VirtualId > -1 Then vi = hControl.VirtualId
  
    hChild.Ctrl._Paint(Page, X, Y, hChild, vi)
    
  Next 
  
End

Public Sub _PaintAfter(Page As Integer, X As Integer, Y As Integer, hControl As TControl, VirtualId As Integer)
  
  Dim hChild As TControl
  Dim vi As Integer
  
  Super._PaintAfter(Page, X, Y, hControl, VirtualId)
  
  X += hControl.RealLeft
  Y += hControl.RealTop
  
  For Each hChild In Me.Children
    If hChild._SkipPainting Then Continue
    'Draw After
    hChild.Ctrl._PaintAfter(Page, X, Y, hChild, vi)
  Next
  
End



Private Function _Spacing_Read() As Float

  Return $fSpacing

End

' ' PRIVATE FUNCTION _Padding_Read() AS Float
' ' 
' '   RETURN $fPadding
' ' 
' END

Private Function _RelativeSpacing_Read() As Boolean

  Return $bRelativeSpacing

End
