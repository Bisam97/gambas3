' Gambas class file

Export
Inherits ReportFrame

Public Const _Properties As String = "*,Text,Alignment{Align.*}"
Public Const _DefaultEvent As String = "Data"
Private $sText As String
Private $iAlignment As Integer = Align.Normal
Private $bIsSpecial As Boolean
Private $iIndex As Integer
Private $bGetValueAuto As Boolean = True
Property Text As String
Property Alignment As Integer
Property IsSpecial As Boolean
Property Read Index As Integer

Event Data

Public Sub _New()
  

  
End

Private Function Text_Read() As String
  
  Return $sText

End

Private Sub Text_Write(Value As String)
  
  If Not Me.Report._bInExec Then 
  $bGetValueAuto = False
  Endif
  $sText = Value

End

Private Function Alignment_Read() As Integer

  Return $iAlignment

End

Private Sub Alignment_Write(Value As Integer)

  $iAlignment = Value

End

Public Sub _GetSizeHints(AvailableW As Float, AvailableH As Float, TotalWidth As Float, TotalHeight As Float) As TSizeHint

  Dim hMyHints As New TSizeHint
  Dim fTextHeight As Float
  Dim fTextWidth As Float
  Dim hext As PaintExtents
  Dim bRaiseRes As Boolean
  Dim $sTempText As String
  ' If Not $bGetValueAuto Then
  '   bRaiseRes = Raise Data
  '   $sTempText = AvailableW
  '   'Print bRaiseRes, Me.Text
  ' Endif
  
  hMyHints.Height = Me._Height + (2 * Me._Padding)
  
  
  'PRINT ME.
  If Not IsNull(Me.Font) Then Paint.Font = Me.Font
  Paint.Font.size = Paint.Font.size / 96 * paint.ResolutionX 'mTools.ReportResolution
  
  'if the size choosed by the user is less than the font height, set the object to the font height
  
  
  hext = Paint.TextExtents($sText)
  If $bGetValueAuto Then 
    fTextWidth = AvailableW
  Else
    fTextWidth = MTools.PixelsToUnits(hext.Width)
  Endif
  hext = Paint.TextExtents("Fjitgp,")
  fTextHeight = MTools.PixelsToUnits(hext.Height)
  
  
  
  
  If hMyHints.Height < fTextHeight Then hMyHints.Height = fTextHeight + (2 * Me._Padding) + (2 * Me._BorderWidth)
  If Me._RelativeHeight Then hMyHints.Height = TotalHeight * Me._Height / 100
  If Me._Width > 0 And Not Me.Autoresize Then 
    hMyHints.Width = Me._Width
  Else 
    
    hMyHints.Width = fTextWidth + (2 * Me._Padding) + (2 * Me._BorderWidth)
  
    'IF hMyHints.Width < ME._Width THEN hMyHints.Width = ME._Width
  Endif
    If Me._RelativeWidth Then hMyHints.Width = TotalWidth * Me._Width / 100
    If hMyHints.Width > AvailableW Then hMyHints.Width = AvailableW
  
  Return hMyHints
  
End

Public Sub _Paint(Page As Integer, X As Float, Y As Float, hControl As TControl, VirtualId As Integer)
  
  If $bGetValueAuto Then
    $iIndex = VirtualId
    Raise Data
    
  Endif
  'Draw.Foreground = Me.Foreground
  Paint.Brush = Paint.Color(Me.Border.Color)
  'Set the Font if it is initialized
  If Not IsNull(Me.Font) Then Paint.Font = Me.Font
  Paint.Font.size = Paint.Font.size / 96 * Paint.ResolutionX 'mTools.ReportResolution
  
  'Draw.Clip((x + hControl.RealLeft + MRTools.UnitsToPixels(Me.Padding)) * MRTools.ReportZoom, (y + hControl.RealTop + MRTools.UnitsToPixels(Me.Padding)) * MRTools.ReportZoom, hControl.RealWidth * MRTools.ReportZoom, hControl.RealHeight * MRTools.ReportZoom)
    'Draw.Text($sText, (x + hControl.RealLeft + MRTools.UnitsToPixels(Me.Padding)) * MRTools.ReportZoom, (y + hControl.RealTop + MRTools.UnitsToPixels(Me.Padding)) * MRTools.ReportZoom, hControl.RealWidth * MRTools.ReportZoom, hControl.RealHeight * MRTools.ReportZoom, $iAlignment)

    Paint.Text($sText, (x + hControl.RealLeft + MTools.UnitsToPixels(Me._Padding + Me._BorderWidth)), (y + hControl.RealTop + MTools.UnitsToPixels(Me._Padding)), hControl.RealWidth, hControl.RealHeight, $iAlignment)
    Paint.Fill
    If $bGetValueAuto Then $sText = Null
  'Draw.Clip.Enabled = False
End


Private Function IsSpecial_Read() As Boolean

  Return $bIsSpecial

End


Private Sub IsSpecial_Write(Value As Boolean)

  $bIsSpecial = Value

End


Private Function Index_Read() As Integer

  Return $iIndex

End
