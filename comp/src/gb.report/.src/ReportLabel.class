' Gambas class file

Export
Inherits ReportFrame

Public Const _Properties As String = "*,Text,Key,Format,Alignment{Align.*},UseField"

Private $sText As String
Private $iAlignment As Integer = Align.Normal
Private $bIsSpecial As Boolean
Private $bGetValueAuto As Boolean = True
Private $sKey As String
Private $sFormat As String
Private $bUseField As Boolean

Property Text As String
Property Alignment As Integer
Property IsSpecial As Boolean
Property Key As String
Property {Format} As String
Property UseField As Boolean


Private Function Text_Read() As String
  
  Return $sText

End

Private Sub Text_Write(Value As String)
  
  $sText = Value
  'Me._Count = 2

End

Private Function Alignment_Read() As Integer

  Return $iAlignment

End

Private Sub Alignment_Write(Value As Integer)

  $iAlignment = Value

End

Public Sub _GetSizeHints(AvailableW As Float, AvailableH As Float, TotalWidth As Float, TotalHeight As Float) As TSizeHint

  Dim hMyHints As New TSizeHint
  Dim fTextHeight As Float
  Dim fTextWidth As Float
  Dim hext As PaintExtents
  Dim bRaiseRes As Boolean
  Dim $sTempText As String
  
  hMyHints.Height = Me._Height + (2 * Me._Padding)
  
  
  'PRINT ME.
  If Not IsNull(Me.Font) Then Paint.Font = Me.Font
  'Paint.Font.size = Paint.Font.size / 96 * paint.ResolutionX 'mTools.ReportResolution
  
  'if the size choosed by the user is less than the font height, set the object to the font height
  
  
  
  If $sKey Then 
    
    hext = Paint.TextExtents(Me.Parent._GetData($sKey))
    fTextWidth = MTools.PixelsToUnits(hext.Width)
  Else
    hext = Paint.TextExtents($sText)
    fTextWidth = MTools.PixelsToUnits(hext.Width)
  Endif
  hext = Paint.TextExtents("Fjitgp,")
  fTextHeight = MTools.PixelsToUnits(hext.Height)
  
  
  
  
  If hMyHints.Height < fTextHeight Then hMyHints.Height = fTextHeight + (2 * Me._Padding) + Me.Border._Top + Me.Border._Bottom
  
  If Me._RelativeHeight Then hMyHints.Height = TotalHeight * Me._Height / 100
  If hMyHints.Height <= 0 Then hMyHints.Height = Me.Font.Height
  
  If Me._Width > 0 And Not Me.Autoresize Then 
    hMyHints.Width = Me._Width
  Else 
    
    hMyHints.Width = fTextWidth + (2 * Me._Padding) + Me.Border._Left + Me.Border._Right
  
    'IF hMyHints.Width < ME._Width THEN hMyHints.Width = ME._Width
  Endif
    If Me._RelativeWidth Then hMyHints.Width = TotalWidth * Me._Width / 100
    If hMyHints.Width > AvailableW Then hMyHints.Width = AvailableW
  
  Return hMyHints
  
End

Public Sub _Paint(Page As Integer, X As Float, Y As Float, hControl As TControl, VirtualId As Integer)
  
  Dim sTempText As Variant
  Dim iPadding As Integer
  Dim iX, iY, iW, iH As Integer
  'iPadding = MTools.UnitsToPixels(Me._Padding)
  
  If $sKey Then
  sTempText = Me.Parent._GetData($sKey)
  Else
  sTempText = $sText
  Endif
  If $sFormat Then 
    Try sTempText = Format(sTempText, $sFormat)
  Endif
  If $bUseField Then 
    sTempText = DecodeText(sTempText, Page)
  Endif
  'Draw.Foreground = Me.Foreground
  

  
  iX = (x + hControl.RealLeft + MTools.UnitsToPixels(Me._Padding + Me.Border._Left))
  iY = (y + hControl.RealTop + MTools.UnitsToPixels(Me._Padding + Me.Border._Top))
  iW = (hControl.RealWidth - MTools.UnitsToPixels(2 * Me._Padding + Me.Border._Left + Me.Border._Right))
  
  iH = (hControl.RealHeight - MTools.UnitsToPixels(2 * Me._Padding + Me.Border._Top + Me.Border._Bottom))
  
  Paint.Brush = Me._GetActualBrush(iX, iY, iX + hControl.RealWidth, iY + hControl.RealHeight)
  
    If Report.Debug Then
      
    
    Paint.Brush = Paint.Color(Color.Red)
    Paint.Rectangle(ix, iy, iw, ih)
    Paint.Stroke
    
    
  Endif
  
  'Set the Font if it is initialized
  If Not IsNull(Me.Font) Then 
    Paint.Font = Me.Font
    'If Paint.ResolutionY <> Desktop.Resolution Then Stop
    'Paint.Font.size = Paint.Font.size * Paint.ResolutionY / Desktop.Resolution 'mTools.ReportResolution
  Endif
  
  'Draw.Clip((x + hControl.RealLeft + MRTools.UnitsToPixels(Me.Padding)) * MRTools.ReportZoom, (y + hControl.RealTop + MRTools.UnitsToPixels(Me.Padding)) * MRTools.ReportZoom, hControl.RealWidth * MRTools.ReportZoom, hControl.RealHeight * MRTools.ReportZoom)
    'Draw.Text($sText, (x + hControl.RealLeft + MRTools.UnitsToPixels(Me.Padding)) * MRTools.ReportZoom, (y + hControl.RealTop + MRTools.UnitsToPixels(Me.Padding)) * MRTools.ReportZoom, hControl.RealWidth * MRTools.ReportZoom, hControl.RealHeight * MRTools.ReportZoom, $iAlignment)

    Paint.Text(sTempText, iX, iY, iW, iH, $iAlignment)
    Paint.Fill
    'If $sKey Then $sText = Null
  'Draw.Clip.Enabled = False
End


Private Function IsSpecial_Read() As Boolean

  Return $bIsSpecial

End


Private Sub IsSpecial_Write(Value As Boolean)

  $bIsSpecial = Value

End


Private Function Key_Read() As String

  Return $sKey

End

Private Sub Key_Write(Value As String)

  $sKey = Value

End

Private Function Format_Read() As String

  Return $sFormat

End

Private Sub Format_Write(Value As String)

  $sFormat = Value

End

Private Function DecodeText(sText As String, Optional Page As Integer, Optional ForSize As Boolean = False) As String
  
  If ForSize Then 
    If InStr(sText, "$PAGE") Then sText = Replace(sText, "$PAGE", "999")
    If InStr(sText, "$NPAGE") Then sText = Replace(sText, "$NPAGE", "999")
  Else
    If InStr(sText, "$PAGE") Then sText = Replace(sText, "$PAGE", Str(Page + 1))
    If InStr(sText, "$NPAGE") Then sText = Replace(sText, "$NPAGE", Str(Me.Report.PageCount))
  Endif
  
  Return sText
  
End

Private Function UseField_Read() As Boolean

  Return $bUseField

End

Private Sub UseField_Write(Value As Boolean)

  $bUseField = Value

End
