' Gambas class file

Private $iType As Integer

Public Sub _New(Value As Integer)
  
  $iType = Value
End

Public Sub Draw(CX As Integer, CY As Integer, CW As Integer, CH As Integer)  
  Dim oSerie As _CSerie

  Dim fMaxVal, fMinVal As Float
  'DIM itmp AS Float
  Dim i, j As Integer
  Dim f As Float
  Dim YHeadersW As Integer
  Dim iTwoLetterHeight As Integer = draw.Font.Height() * 2 * Chart._fProportionnal
  Dim iTabPos As Integer
  'DIM iXUnit AS Integer
  'DIM iYUnit AS Integer
  'DIM iGraphTop AS Integer
  'DIM iGraphBottom AS Integer
  'DIM iGraphLeft AS Integer
  Dim iGraphRight As Integer
  Dim iStaticSpace As Integer = 5 * Chart._fProportionnal
  Dim ariPoligone As New Integer[]
  Dim aroPolygones As New Object[]
  Dim hRect As New CRect
  Dim hUnits As CPoint
  'draw.Font.Size = 11 * Chart._fProportionnal
  
  Select Case $iType
    Case ChartType.Areas, ChartType.AreasSymbols
      If Chart.YAxe.AutoScale Then
        fMaxVal = MTools.GetChartMaxValue(Chart)
        fMinVal = 0
      Else
        fMaxVal = Chart.YAxe.MaxValue
        fMinVal = Chart.YAxe.MinValue
      Endif

      
    Case ChartType.AreasStacked
      fMaxVal = MTools.GetChartMaxCumulateValue(Chart)
    Case ChartType.AreasPercent
      fMaxVal = 100
  End Select
  If fMaxVal = 0 Then Return 

    YHeadersW = CX + iStaticSpace * 2

  
  'Set the graph square position value


    hRect.Top = CY '+ iTwoLetterHeight
    hRect.Bottom = CY '+ CH - iStaticSpace * 2

  hRect.Left = YHeadersW
  hRect.Right = CX + CW - YHeadersW / 2
  

  
  
  hUnits = MTools.DrawChartAxes(Chart, hRect, fMinVal, fMaxVal)
  draw.Clip(hRect.Left, hRect.Top, hRect.Right - hRect.Left, hRect.Bottom - hRect.Top)
  
  If Chart.Count < 2 Then Return 
  Draw.FillStyle = Fill.Solid
  
  For j = 0 To Chart.CountDataSets - 1
    ariPoligone = New Integer[]
    ariPoligone.Resize(Chart.Count * 2)
    aroPolygones.Add(ariPoligone)
    
  Next  
  
  For i = 0 To Chart.Count - 1
  f = 0
  fMaxVal = 0  
    For j = 0 To Chart.CountDataSets - 1
      fMaxVal += Chart[j][i]
    Next
    For j = 0 To Chart.CountDataSets - 1
      Select Case $iType
        Case ChartType.AreasPercent
          f += Chart[j][i] / fMaxVal * 100
        Case ChartType.AreasStacked
          f += Chart[j][i]
        Case Else
          f = Chart[j][i]
      End Select 
      aroPolygones[j][i * 2] = hRect.Left + (hUnits.X * i)
      aroPolygones[j][i * 2 + 1] = hRect.Bottom - f * hUnits.Y + (hUnits.Y * fMinVal)
    Next
    

  Next
  For j = 0 To Chart.CountDataSets - 1
    aroPolygones[J].Add(aroPolygones[J][aroPolygones[J].max - 1])
    aroPolygones[J].Add(hRect.Bottom + hUnits.Y * fMinVal)
    aroPolygones[J].Add(hRect.Left)
    aroPolygones[J].Add(hRect.Bottom + hUnits.Y * fMinVal)
  Next
  
  
  For i = aroPolygones.Max To 0 Step -1
  Draw.FillColor = Chart.Colors[i]
    draw.Polygon(aroPolygones[i])  
  Next
  
    If $iType = ChartType.AreasSymbols Then 
  
    For i = 0 To aroPolyGones.Max
    
      For j = 0 To aroPolyGones[i].Max - 4 Step 2
        Draw.LineWidth = 1
        Draw.FillColor = Chart.Colors[i]
        Draw.ForeColor = Color.DarkGray
        MTools.DrawSymbol(i, aroPolyGones[i][j], aroPolyGones[i][j + 1])
      
      Next
    
    Next
  
  Endif
  Draw.Clip.Enabled = False
End
