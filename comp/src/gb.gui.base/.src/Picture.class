' Gambas class file

Export

Class Stock

Static Private $cCache As New Collection
Static Private $cPictToKey As Collection

Static Private Sub GetKey(sPath As String) As String
  
  Dim sKey As String
  
  If sPath Begins "icon:/" Then
    
    sKey = sPath
    
  Else If File.IsRelative(sPath) Then
    
    While sPath Begins "./"
      sPath = Mid$(sPath, 3)
    Wend
    
    sKey = Component.FindFromPath(".." &/ sPath)
    If sKey Then sKey &= ":"
    
    While sPath Begins "../"
      sPath = Mid$(sPath, 4)
    Wend
    sKey &= sPath
    
  Else
    
    sKey = sPath
    
  Endif
  
  Return sKey
  
End


Static Public Sub _get(Path As String) As Picture
  
  Dim sKey As String
  Dim hPict As Picture
  Dim sPath As String
  Dim sBaseName As String
  Dim sDarkPath As String
  Dim bMoveUp As Boolean
  
  If Not Path Then Return
  
  sKey = GetKey(Path)
  hPict = $cCache[sKey]
  If hPict Then Return hPict
  
  If Path Begins "icon:/" Then
    
    'Debug Path
    Try hPict = Stock[Mid$(Path, 7)]
    If Not hPict Then Return 
    
  Else
    
    sPath = Path
    
    If File.IsRelative(sPath) Then
      If sPath Begins "./" Then
        If sPath Not Begins "./gb." Then 
          bMoveUp = True
        Endif
      Else 
        bMoveUp = True
      Endif
    Endif
    
    If bMoveUp Then sPath = ".." &/ sPath
    
    ' Support for rtl/ltr icons
    
    sBaseName = File.BaseName(sPath)
    If sBaseName Ends "-ltr" And If System.RightToLeft Then
      sBaseName = Left(sBaseName, -4) & "-rtl"
      sPath = File.SetBaseName(sPath, sBaseName)
    Else If sBaseName Ends "-rtl" And If Not System.RightToLeft Then
      sBaseName = Left(sBaseName, -4) & "-ltr"
      sPath = File.SetBaseName(sPath, sBaseName)
    Endif
    
    ' Support for dark themes
    
    If Application.DarkTheme Then
      sDarkPath = File.SetBaseName(sPath, sBaseName & "-dark")
      If Exist(sDarkPath) Then
        Try hPict = Image.Load(sDarkPath).Picture
      Else
        Try hPict = Image.Load(sPath).Invert(True).Picture
      Endif
      If hPict Then Goto __LOAD_OK
    Endif
    
    Try hPict = Image.Load(sPath).Picture
    If Error Then
      'Error "gb.gui: warning: unable to load icon "; Path; ": "; System.Backtrace.Join(" ")
      Return Null
    Endif
  Endif
  
__LOAD_OK:
  
  $cCache[sKey] = hPict
  Return hPict
  
End

Static Public Sub _put(Value As Picture, Path As String)
  
  Dim sKey As String
  
  If Not Path Then Return
  
  sKey = GetKey(Path)
  $cCache[sKey] = Value
  
End

Static Public Sub Flush()
  
  $cCache.Clear
  
End

Static Public Sub _exit()
  
  $cCache.Clear
  
End

Static Public Sub _Refresh(ByRef hPict As Picture)

  Dim sKey As String
  Dim sPict As String

  If Not hPict Then Return  
  sPict = CStr(Object.Address(hPict))
  Try sKey = $cPictToKey[sPict]
  If Not sKey Then Return
  hPict = Picture[sKey]
  $cPictToKey.Remove(sPict)
  
End

Static Private Sub RefreshMenu(hMenu As Menu)
  
  _Refresh(ByRef hMenu.Picture)
  For Each hMenu In hMenu.Children
    RefreshMenu(hMenu)
  Next
  
End

Static Public Sub Refresh()

  Dim hPict As Picture
  Dim hWindow As Window
  Dim hCtrl As Object
  Dim sKey As String
  Dim hTabStrip As TabStrip
  Dim I As Integer
  Dim hMenu As Menu
  Dim hWin As Window
  
  Inc Application.Busy
  
  $cPictToKey = New Collection
  For Each hPict In $cCache
    sKey = $cCache.Key
    If sKey Not Begins "icon:/" Then Continue
    $cPictToKey[CStr(Object.Address(hPict))] = sKey
    'Debug sKey
  Next
  
  $cCache.Clear
  
  For Each hWindow In Windows
    
    For Each hCtrl In hWindow.Controls
      
      _Refresh(ByRef hWindow.Icon)
      
      hWin = hWindow
      GoSub REFRESH_MENU
      
      If hCtrl Is TabStrip Then
        
        hTabStrip = hCtrl
        For I = 0 To hTabStrip.Count - 1
          _Refresh(ByRef hTabStrip[I].Picture)
        Next
        
      Else If hCtrl Is Window Then
        
        hWin = hCtrl
        GoSub REFRESH_MENU
        
      Else
        
        Try hCtrl._RefreshPicture()
        If Error Then Try _Refresh(ByRef hCtrl.Picture)
        
      Endif
      
    Next
    
  Next
  
  Dec Application.Busy
  Return
  
REFRESH_MENU:

  For Each hMenu In hWin.Menus
    RefreshMenu(hMenu)
  Next
    
  Return
  
End

