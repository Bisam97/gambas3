' Gambas class file

Export
Inherits UserContainer

Property Layout, Settings As Integer[]
Event Resize

Private $hObs As Observer
Private $hObsPanel As Observer
Private $cWeight As New Collection
Private $bLayouting As Boolean
Private $hPanel As Panel
Private $aResize As New DrawingArea[]

Private $XMin As Integer
Private $XMax As Integer
Private $iNoArrange As Integer
Private $bVertical As Boolean

Public Sub _new()
  
  $bVertical = Me Is VSplit
  $hPanel = New Panel(Me)
  '$hPanel.Border = Border.Plain
  Me._Container = $hPanel
  $hObs = New Observer(Me) As "Container"
  $hObsPanel = New Observer($hPanel) As "Container"
  
End

Private Sub GetChildren(Optional bHidden As Boolean) As Control[]
  
  Dim aControl As New Control[]
  Dim hChild As Control
  
  For Each hChild In $hPanel.Children
    If Not bHidden And If Not hChild.Visible Then Continue
    aControl.Add(hChild)
  Next
  
  Return aControl
  
End


Private Sub GetTotalWeight() As Integer

  Dim hChild As Control
  Dim iWeight As Integer
  
  For Each hChild In GetChildren()
    Try iWeight += $cWeight[Object.Address(hChild)]
  Next
  
  Return iWeight
  
End

Public Sub Container_Arrange()
  
  Dim cNewWeight As Collection
  Dim hChild As Control
  Dim fWeight As Float
  Dim fNewWeight As Float
  Dim I As Integer
  Dim aChildren As Control[]

  If $iNoArrange Then Return
  
  Inc $iNoArrange 
  
  $hPanel.Move(0, 0, Me.W, Me.H)
  
  aChildren = GetChildren()
  
  If $cWeight.Count <> aChildren.Count Then
    
    If $cWeight.Count Then
      fNewWeight = GetTotalWeight() / $cWeight.Count
    Else
      fNewWeight = 1
    Endif
    
    cNewWeight = New Collection
    
    For Each hChild In aChildren
      Try fWeight = $cWeight[Object.Address(hChild)]
      If Error Then fWeight = fNewWeight
      cNewWeight[Object.Address(hChild)] = fWeight
    Next
    
    $cWeight = cNewWeight
  
  Endif
  
  If $aResize.Count > (aChildren.Count - 1) Then
    For I = aChildren.Count - 1 To $aResize.Max
      $aResize[I].Delete
    Next
    $aResize.Resize(aChildren.Count - 1)
  Else If $aResize.Count < (aChildren.Count - 1) Then
    $aResize.Resize(aChildren.Count - 1)
    Me._Container = Null
    For I = aChildren.Count - 2 DownTo 0
      If $aResize[I] Then Break
      $aResize[I] = New DrawingArea(Me) As "Resize"
      With $aResize[I]
        .NoBackground = True
        .Raise
        '.Background = Color.Yellow
        .Mouse = If($bVertical, Mouse.SplitV, Mouse.SplitH)
        .Tag = I
      End With
    Next
    Me._Container = $hPanel
  Endif
  
  DoLayout(Layout_Read())
  
  Dec $iNoArrange
  
End


Private Function Layout_Read() As Integer[]

  Dim aLayout As New Integer[]
  Dim hChild As Control
  Dim W As Integer = If($bVertical, $hPanel.H, $hPanel.W)
  Dim fWeight, fTotal As Float
  
  For Each fWeight In $cWeight
    fTotal += fWeight
  Next
  
  For Each hChild In $hPanel.Children
    If Not hChild.Visible Then
      aLayout.Add(0)
    Else
      Try fWeight = $cWeight[Object.Address(hChild)]
      If Error Then
        aLayout.Add(If($bVertical, hChild.H, hChild.W))
      Else
        aLayout.Add(CInt(W * fWeight / fTotal))
      Endif
    Endif
  Next
  
  Return aLayout

End

Private Sub DoLayout(Value As Integer[])

  Dim I, W, WMax, WTotal As Integer
  Dim iTotal As Integer
  Dim hChild As Control
  Dim X As Integer
  Dim aChildren As Control[]
  Dim iLastVisible As Integer
  
  If $bLayouting Or If Not Value Or If Value.Count = 0 Then Return
  
  $bLayouting = True
  
  'Debug String[](Value).Join(",")
  
  aChildren = GetChildren(True)
  
  Value.Resize(aChildren.Count)
  
  For I = 0 To Value.Max
    Value[I] = Max(0, Value[I])
    iTotal += Value[I]
  Next
  
  If iTotal = 0 Then
    For Each hChild In aChildren
      hChild.Hide
    Next
    Return
  Endif

  WMax = If($bVertical, $hPanel.H, $hPanel.W)
  For I = 0 To Value.Max
    W = Value[I] * WMax / iTotal
    WTotal += W
    If W = 0 Then
      aChildren[I].Hide
    Else
      aChildren[I].Show
      If $bVertical Then
        aChildren[I].Height = W - 1
      Else
        aChildren[I].Width = W - 1
      Endif
      iLastVisible = I
    Endif
  Next
  
  If $bVertical Then
    
    aChildren[iLastVisible].Height += WMax - WTotal + 1
    
    For Each hChild In aChildren
      If Not hChild.Visible Then Continue
      hChild.Move(0, X, $hPanel.W, hChild.H)
      X += hChild.H
    Next
    
    For I = 0 To $aResize.Max
      hChild = aChildren[I + 1]
      If Not hChild.Visible Then Continue
      $aResize[I].Move(0, hChild.Y - Desktop.Scale \ 2, $hPanel.W, Desktop.Scale)
    Next
    
  Else
    
    aChildren[iLastVisible].Width += WMax - WTotal + 1

    For Each hChild In aChildren
      If Not hChild.Visible Then Continue
      hChild.Move(X, 0, hChild.W, $hPanel.H)
      X += hChild.W
    Next
    
    For I = 0 To $aResize.Max
      hChild = aChildren[I + 1]
      If Not hChild.Visible Then Continue
      $aResize[I].Move(hChild.X - Desktop.Scale \ 2, 0, Desktop.Scale, $hPanel.H)
    Next
  
  Endif
  
  $bLayouting = False

End

Private Sub Layout_Write(Value As Integer[])

  Dim I As Integer
  
  $cWeight = New Collection
  For I = 0 To Min($hPanel.Children.Count - 1, Value.Max)
    $cWeight[Object.Address($hPanel.Children[I])] = Value[I]
  Next

  DoLayout(Value)

End

Public Sub Resize_MouseDown()

  Dim aChildren As Control[] = GetChildren()
  Dim I As Integer = Last.Tag
  
  If $bVertical Then
    $XMin = aChildren[I].ScreenY
    $XMax = aChildren[I + 1].ScreenY + aChildren[I + 1].H
  Else
    $XMin = aChildren[I].ScreenX
    $XMax = aChildren[I + 1].ScreenX + aChildren[I + 1].W
  Endif
  Inc $iNoArrange
  
End

Public Sub Resize_MouseMove()
  
  Dim aChildren As Control[] = GetChildren()
  Dim hResize As DrawingArea = Last
  Dim I As Integer = hResize.Tag
  Dim X As Integer
  Dim hChild As Control
  
  If $iNoArrange = 0 Then Return
  
  If $bVertical Then
    
    X = Min(Max(Mouse.ScreenY, $XMin + 4), $XMax - 4)
    
    aChildren[I].H = X - $XMin
    aChildren[I + 1].Move(0, X - $hPanel.ScreenY, $hPanel.W, $XMax - X)
    
    hResize.Move(0, aChildren[I + 1].Y - Desktop.Scale \ 2, $hPanel.W, Desktop.Scale)
    
    For Each hChild In aChildren
      $cWeight[Object.Address(hChild)] = hChild.H
    Next
    
  Else
    
    X = Min(Max(Mouse.ScreenX, $XMin + 4), $XMax - 4)
    'Debug "==============";; X - $XMin
    
    aChildren[I].W = X - $XMin
    aChildren[I + 1].Move(X - $hPanel.ScreenX, 0, $XMax - X, $hPanel.H)
    
    hResize.Move(aChildren[I + 1].X - Desktop.Scale \ 2, 0, Desktop.Scale, $hPanel.H)
    
    For Each hChild In aChildren
      $cWeight[Object.Address(hChild)] = hChild.W
    Next
    
  Endif
  
  Raise Resize
  
End

Public Sub Resize_MouseUp()
  
  Dec $iNoArrange
  Container_Arrange
  
End

Public Sub Resize_Draw()

  Dim X As Integer
  
  X = Desktop.Scale \ 2 - 1
  
  Draw.Foreground = Color.LightForeground
  If $bVertical Then
    Draw.Line(0, X, $hPanel.W - 1, X)
  Else
    Draw.Line(X, 0, X, $hPanel.H - 1)
  Endif
  
End
