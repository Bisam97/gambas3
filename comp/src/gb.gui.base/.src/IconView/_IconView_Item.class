' Gambas class file

Export

Property Read Key As String
Property {Picture} As Picture
Property Text As String
Property RichText As String
Property Selected As Boolean
Property Editable As Boolean
Property Read Next As _IconView_Item
Property Read Previous As _IconView_Item

'' @{since 3.16}
''
'' Return or set the tag associated with a cell.
''
'' This property is intended for the programmer and is never used by the component. It can contain any Variant value.

Property Tag As Variant

'' Return if the item is hovered.

Property Read Hovered As Boolean

Property Read X As Integer
Property Read Y As Integer
Property Read Height, H As Integer
Property Read Width, W As Integer

Public _Key As String

Private $sText As String
Private $sRichText As String
Private $hPicture As Picture
Private $vTag As Variant
Private $bEditable As Boolean
Private $bEllipsized As Boolean
Private $bNeedEllipsized As Boolean

Private $hInside As Rect

Event _Foo

Public Sub _new()
  
  $bEditable = GetIconView().Editable
  
End


Private Sub GetIconView() As IconView
  
  Return Object.Parent(Me)
  
End

Private Sub RefreshView()
  
  GetIconView()._RefreshItem(Me)
  
End

Private Function Key_Read() As String

  Return _Key

End

Private Function Picture_Read() As Picture

  Return $hPicture

End

Private Sub Picture_Write(Value As Picture)

  If $hPicture = Value Then Return
  $hPicture = Value
  $hInside = Null
  GetIconView()._UpdateIconSize($hPicture)
  RefreshView

End

Private Function Text_Read() As String

  Return $sText

End

Private Sub Text_Write(Value As String)

  If $sText = Value Then Return
  $sText = Value
  $hInside = Null
  GetIconView()._SortIsDirty
  RefreshView
  
End


Private Function RichText_Read() As String

  Return $sRichText

End

Private Sub RichText_Write(Value As String)

  If $sRichText = Value Then Return
  $sRichText = Value
  $hInside = Null
  GetIconView()._SortIsDirty
  RefreshView
  
End

' Public Sub _Draw2(X As Integer, Y As Integer, Width As Integer, Height As Integer, bFocus As Boolean, bHover As Boolean)
'   
'   Dim iBackColor As Integer
'   Dim hBackImage As Image
'   Dim hParent As IconView
'   Dim ix, iy As Integer
'   
'   If _IconViewItem._hBackPicture.Width <> Width Then 
'     _IconViewItem._hBackPicture = DrawBackGround(Width, Height, Color.SelectedBackground)
'     _IconViewItem._hBackPictureNoFocus = DrawBackGround(Width, Height, Color.Gray)
'     _IconViewItem._hBackPictureMouseOver = DrawBackGround(Width, Height, Color.Lighter(Color.SelectedBackground))
'     _IconViewItem._hBackPictureSelOver = DrawBackGround(Width, Height, Color.Darker(Color.SelectedBackground))
'   Endif
'   
'   If bHover Then
'     hBackImage = IIf(Me.Selected, _hBackPictureSelOver, _hBackPictureMouseOver)
'     iBackColor = Color.Transparent
'     
'   Else
'     
'     If bFocus
'       hBackImage = _hBackPicture
'       iBackColor = Color.SelectedBackground
'     Else
'       hBackImage = _hBackPictureNoFocus
'       iBackColor = Color.Gray
'     Endif
'     
'   Endif
'   
'   Draw.Font = _Font
'   ix = X + (Width - $hPicture.w) / 2
'   iy = Y + (Height - ($hPicture.Height + Draw.TextHeight($sText) + 5)) / 2
' 
'   
'   If Me.Selected Or bHover Then
'     Draw.Foreground = Color.Lighter(iBackColor)
'     Draw.FillColor = iBackColor
'     Draw.FillStyle = Fill.Solid
'     Draw.Image(hBackImage, X, Y)
'     'Draw.Rect(X, Y, Width, Height)
'     Draw.Picture($hPicture.Image.Colorize(iBackColor).Picture, iX, iY)
'     
'     'Draw.Rect($iX + ($hPicture.Width - Draw.TextWidth($sText)) / 2 - 4, $iY + $hPicture.Height + 5, Draw.TextWidth($sText) + 8, Draw.TextHeight($sText))
'     Draw.Foreground = IIf(bFocus, Color.SelectedForeground, Color.TextForeground)
'   Else
'     Draw.Picture($hPicture, iX, iY)
'     Draw.Foreground = Color.TextForeground
'     
'   Endif
'   Me._TextX = ix + ($hPicture.Width - Draw.TextWidth($sText)) / 2
'   Me._TextY = Y + (Height - (Draw.TextHeight($sText) + 5))
'   Me._TextWidth = Draw.TextWidth($sText) + 8
'   Me._TextHeight = Draw.TextHeight($sText)
'     
'     Draw.Text($sText, iX + ($hPicture.Width - Draw.TextWidth($sText)) / 2, iY + $hPicture.Height + 5)
' 
' '  Prend le rectangle comme zone 
'   $ix = X
'   $iy = Y
'   $iWidth = Width
'   $iheight = Height
'   
' End

Public Sub _GetTextRect(hRect As Rect, bHorizontal As Boolean) As Rect
  
  Dim hText As Rect
  Dim X, Y, W, H As Integer
  Dim HT As Integer
  Dim DS As Integer = Desktop.Scale
  Dim PW, PH As Integer
  
  ' hRect = hRect.Copy()
  ' hRect.Adjust(DS + DS \ 2)
  GetIconSize(ByRef PW, ByRef PH)
  
  If bHorizontal Then
    
    X = hRect.X
    If $hPicture Then X += PW + DS * 2
    
    W = hRect.X + hRect.W - X - DS * 2

    If $sRichText Then
      With GetIconView().Font.RichTextSize($sRichText, W)
        W = .Width
        H = .Height
      End With 
    Else
      With GetIconView().Font.RichTextSize(Html($sText), W)
        W = .Width
        H = .Height
      End With
    Endif

    HT = hRect.H
    If H > HT Then
      H = HT
      $bNeedEllipsized = True
    Else
      $bNeedEllipsized = False
    Endif

    hText = New Rect(X, hRect.Y + (hRect.H - H) \ 2, W, H)
    
  Else
  
    Y = hRect.Y + PH + DS * 2
    
    If $sRichText Then
      With GetIconView().Font.RichTextSize($sRichText, hRect.W)
        W = .Width
        H = .Height
      End With 
    Else
      With GetIconView().Font.RichTextSize(Html($sText), hRect.W)
        W = .Width
        H = .Height
      End With
    Endif
    
    HT = hRect.Y + hRect.H - Y - DS
    If H > HT Then
      H = HT
      $bNeedEllipsized = True
    Else
      $bNeedEllipsized = False
    Endif
    
    hText = New Rect(hRect.X + (hRect.W - W) \ 2, Y, W, H)
    'hText = hText.Intersection(hRect)
    
    hText.Adjust(-1)
    
  Endif
  
  Return hText
  
End

Private Sub GetBackground(hIconView As IconView, Optional bSelected As Boolean, bFocus As Boolean) As Integer

  Dim iColor As Integer
  
  iColor = hIconView.Background
  If iColor = Color.Default Then iColor = Color.TextBackground
  
  If bSelected Then 
    If bFocus Then
      iColor = Color.Merge(Color.SelectedBackground, iColor)
    Else
      iColor = Color.Merge(Color.LightForeground, iColor, 0.75)
    Endif
  Endif
  
  If Not hIconView.Enabled Then iColor = Color.Desaturate(iColor)
  Return iColor

End

Private Sub GetForeground(hIconView As IconView, Optional bSelected As Boolean) As Integer

  Dim iColor As Integer
  
  If bSelected Then 
    iColor = Color.SelectedForeground
  Else
    iColor = hIconView.Foreground
    If iColor = Color.Default Then iColor = Color.TextForeground
  Endif
  
  If Not hIconView.Enabled Then iColor = Color.Desaturate(Color.Merge(iColor, GetBackground(hIconView, bSelected)))
  Return iColor

End

Private Sub DrawText(sText As String, sRichText As String, X As Float, Y As Float, W As Float, H As Float, iAlign As Integer)
  
  If sRichText Then
    Paint.DrawRichText(sRichText, X, Y, W, H, iAlign)
  Else
    Paint.DrawRichText(Html(sText), X, Y, W, H, iAlign)
  Endif
  
End

Private Sub GetIconSize(ByRef PW As Integer, ByRef PH As Integer)
  
  If $hPicture Then
    PW = $hPicture.W
    PH = $hPicture.H
  Else
    PW = Max(Desktop.Scale * 4, GetIconView().IconSize)
    PH = PW
  Endif
  
End

Public Sub _GetRects(hRect As Rect, bHorizontal As Boolean, ByRef hRect1 As Rect, ByRef hRect2 As Rect)
  
  Dim PW, PH As Integer
  Dim DS As Integer
  
  DS = Desktop.Scale
  hRect = hRect.Copy()
  hRect.Adjust(DS)
  
  GetIconSize(ByRef PW, ByRef PH)
  
  If bHorizontal Then
    hRect1 = Rect(hRect.X, hRect.Y + (hRect.H - PH) / 2 - DS, PW + DS * 2, PH + DS * 2)
  Else
    hRect1 = Rect(hRect.X + (hRect.W - PW) / 2 - DS, hRect.Y, PW + DS * 2, PH + DS * 2)
  Endif
  
  If $sText Or If $sRichText Then 
    hRect2 = _GetTextRect(hRect, bHorizontal)
    hRect2.Adjust(-(DS \ 2))
    If bHorizontal Then 
      If hRect2.H < hRect1.H Then
        hRect2.Y = hRect1.Y
        hRect2.H = hRect1.H
      Endif
    Else
      If hRect2.W < hRect1.W Then
        hRect2.X = hRect1.X
        hRect2.W = hRect1.W
      Endif
    Endif
  Else 
    hRect2 = Null
  Endif

End


Public Sub _Draw(hRect As Rect, hClip As Rect, hIconView As IconView, bHorizontal As Boolean, bFocus As Boolean, bHover As Boolean, bCurrent As Boolean)
  
  Dim PW, PH As Integer
  Dim iColor As Integer
  Dim bFrame As Boolean
  Dim sText As String
  Dim hRect1, hRect2, hRectBg As Rect
  Dim DS As Integer = Desktop.Scale
  Dim bSelected As Boolean
  Dim iAlign As Integer
  
  hRect = hRect.Copy()
  'hRect.Adjust(DS \ 4)
  
  If Not hIconView.Picture Then
    bFrame = True
  Endif
  
  GetIconSize(ByRef PW, ByRef PH)
  
  bSelected = hIconView._IsItemSelected(Me)
  
  iColor = GetBackground(hIconView, bSelected, bFocus)

  hClip = hClip.Intersection(hRect)
  If IsNull(hClip) Then Return
  
  hRectBg = hRect.Copy()
  hRectBg.Adjust(1)
  
  _GetRects(hRect, bHorizontal, ByRef hRect1, ByRef hRect2)

  If $sText Or If $sRichText Then

    sText = $sRichText
    If Not sText Then sText = Html($sText)

    If $bNeedEllipsized Then
      sText = MyTrimRichText(sText, hRect2.W - DS, hRect2.H - DS)
      $bEllipsized = True
    Else
      $bEllipsized = False
    Endif

  Endif
  
  GoSub PAINT_BACKGROUND

  If $hPicture Then Paint.DrawPicture($hPicture, hRect1.X + (hRect1.W - PW) / 2, hRect1.Y + (hRect1.H - PH) / 2)
  
  If $sText Or If $sRichText Then
    'Draw.Clip(hRect.X, Y, hRect.W, hRect.H - Y)
    Paint.Font = hIconView.Font
    
    If Not $sRichText And If Not $bEllipsized Then sText = ""
    
    hRect2.Adjust(DS \ 2)
    
    If bHorizontal Then
      iAlign = Align.Normal
    Else 
      iAlign = Align.Top
    Endif
    
    If Not bFrame Then
      Paint.Background = GetBackground(hIconView, False) '$bSelected) 'If($bSelected, Color.SelectedBackground, Color.TextBackground)
      DrawText($sText, sText, hRect2.X + 1, hRect2.Y + 1, hRect2.W, hRect2.H, iAlign)
    Endif
    Paint.Background = GetForeground(hIconView, False) '$bSelected) 'If($bSelected, Color.SelectedForeground, Color.TextForeground)
    DrawText($sText, sText, hRect2.X, hRect2.Y, hRect2.W, hRect2.H, iAlign)
    'Draw.Clip.Enabled = False
  Endif
    
  Return
  
PAINT_RECTS:

  If hRect1 Then Paint.Rectangle(hRect1.X, hRect1.Y, hRect1.W, hRect1.H) ', Desktop.Scale / 2)
  If hRect2 Then Paint.Rectangle(hRect2.X, hRect2.Y, hRect2.W, hRect2.H) ', Desktop.Scale / 2)
  Return

PAINT_BACKGROUND:

  If bHover Or If bSelected Or If bCurrent Then
    
    Paint.Save
    Paint.ClipRect = hClip
    
    If bHover Then
    
      GoSub PAINT_RECTS
      If bCurrent Or If bSelected Then
        Paint.Background = Color.Merge(iColor, Color.TextForeground, 0.2)
      Else
        Paint.Background = GetBackground(hIconView, True, bFocus)
      Endif
      Paint.Fill 'LineWidth = 1
      'Paint.Stroke
      
    Else If bCurrent Then
      
      GoSub PAINT_RECTS
      Paint.Background = Color.Merge(iColor, Color.TextForeground, 0.1)
      Paint.Fill
      
    Endif

    If bCurrent Or If bHover Then
    
      If hRect1 Then hRect1.Adjust(1)
      If hRect2 Then hRect2.Adjust(1)
      
    Endif

    GoSub PAINT_RECTS
    Paint.Background = iColor
    Paint.Fill

    Paint.Restore
  
    If bCurrent Or If bHover Then
    
      If hRect1 Then hRect1.Adjust(-1)
      If hRect2 Then hRect2.Adjust(-1)
      
    Endif

  Endif

  Return
  
End


Private Function Selected_Read() As Boolean

  Return GetIconView()._IsItemSelected(Me)

End

Private Sub Selected_Write(Value As Boolean)

  If Selected_Read() = Value Then Return
  GetIconView()._SelectItem(Me, Value)

End

Public Sub EnsureVisible()
  
  Dim hParent As IconView = GetIconView()
  
  hParent._EnsureVisible(hParent._FindItem(Me))
  
End

' Private Sub GetInsideRect(hRect As Rect, YT As Integer) As Rect
' 
'   Dim sText As String
'   Dim hFont As Font
'   Dim H, HT As Integer
' 
'   If Not $hInside Then
' 
'     sText = $sText
'     hFont = GetIconView().Font
'     H = hFont.RichTextHeight(sText, hRect.W)
'     HT = hRect.H - (YT - hRect.Y)
'     If H > HT Then sText = Ellipsize(sText, hFont, hRect.W, HT)
'     
'     $hInside = New Rect(hRect.X - 4, YT - 6, hRect.W + 8, hFont.RichTextHeight(sText, hRect.W) + 10)
'     
'   Endif
'   
'   Return $hInside
'   
' End

Public Sub _Intersect(hRect As Rect, hOther As Rect, bHorizontal As Boolean) As Boolean
  
  Dim DS As Integer
  Dim hRect1, hRect2 As Rect
  
  DS = Desktop.Scale
  'hRect = hRect.Copy()
  'hRect.Adjust(DS)
  
  _GetRects(hRect, bHorizontal, ByRef hRect1, ByRef hRect2)
  If hRect1.Intersection(hOther) Then Return True
  If hRect2 And If hRect2.Intersection(hOther) Then Return True
  
End

Public Sub _Inside(hRect As Rect, (hIconView) As IconView, bHorizontal As Boolean, X As Integer, Y As Integer) As Boolean
  
  Dim DS As Integer
  Dim hRect1, hRect2 As Rect
  
  DS = Desktop.Scale
  'hRect = hRect.Copy()
  'hRect.Adjust(DS)
  
  If Not hRect.Contains(X, Y) Then Return False
  
  _GetRects(hRect, bHorizontal, ByRef hRect1, ByRef hRect2)
  If hRect1.Contains(X, Y) Then Return True
  If hRect2 And If hRect2.Contains(X, Y) Then Return True
  Return False
  
  ' If bHorizontal Then
  ' 
  '   Return True
  '   
  ' Else
  ' 
  '   GetIconSize(ByRef PW, ByRef PH)
  ' 
  '   YT = hRect.Y
  '   
  '   If PW Then 
  '     hInside = New Rect(hRect.X + (hRect.W - PW) / 2 - (DS \ 2), hRect.Y - (DS \ 2), PW + DS, PH + DS)
  '     If hInside.Contains(X, Y) Then Return True
  '     YT += PH + DS \ 2
  '   Endif
  '   
  '   If $sText Then
  '     sText = $sText
  '     H = hIconView.Font.RichTextHeight(sText, hRect.W)
  '     HT = hRect.H - (YT - hRect.Y)
  '     If H > HT Then 
  '       sText = Ellipsize(sText, hIconView.Font, hRect.W, HT)
  '     Endif
  '     hInside = New Rect(hRect.X - DS \ 2, YT - DS \ 2, hRect.W + DS, hIconView.Font.RichTextHeight(sText, hRect.W) + DS)
  '     If hInside.Contains(X, Y) Then Return True
  '   Endif
  '   
  ' Endif
  
End

Public Sub _compare(hItem As _IconView_Item) As Integer
  
  Dim hParent As IconView = GetIconView()
  
  If Not hParent._CompareItem(_Key, hItem.Key) Then 
    Return hParent.Compare
  Else
    Return Comp($sText, hItem.Text, gb.Natural + gb.IgnoreCase)
  Endif
  
End

Private Function Editable_Read() As Boolean

  Return $bEditable

End

Private Sub Editable_Write(Value As Boolean)

  $bEditable = Value

End

Public Sub Rename()
  
  If Not $bEditable Then Return
  GetIconView()._RenameItem(Me)
  
End

Private Sub GetGeometry() As Rect
  
  Dim hParent As IconView = GetIconView()
  Dim hRect As New Rect
  hParent._GetItemGeometry(Me, hRect)
  Return hRect
  
End


Private Function X_Read() As Integer

  Return GetGeometry().X

End

Private Function Y_Read() As Integer

  Return GetGeometry().Y

End

Private Function Width_Read() As Integer

  Return GetGeometry().Width

End

Private Function Height_Read() As Integer

  Return GetGeometry().Height

End

Public Sub MoveAfter(Optional (Key) As String)
  
  Dim hParent As IconView = GetIconView()
  Dim iPos As Integer 
  
  If Not Key Then 
    MoveFirst()
    Return
  Endif
  
  iPos = hParent._FindItem(hParent[Key])
  If iPos < 0 Then Error.Raise(Subst("Unknown item: '&1'", Key))
  
  hParent._MoveItem(Me, iPos + 1)
  
End

Public Sub MoveBefore(Optional (Key) As String)
  
  Dim hParent As IconView = GetIconView()
  Dim iPos As Integer 
  
  If Not Key Then 
    MoveLast()
    Return
  Endif
  
  iPos = hParent._FindItem(hParent[Key])
  If iPos < 0 Then Error.Raise(Subst("Unknown item: '&1'", Key))
  
  hParent._MoveItem(Me, iPos)
  
End

Public Sub MoveFirst()
  
  Dim hParent As IconView = GetIconView()
  hParent._MoveItem(Me, 0)
  
End

Public Sub MoveLast()
  
  Dim hParent As IconView = GetIconView()
  hParent._MoveItem(Me, hParent.Count - 1)
  
End

' Private Sub Ellipsize(sText As String, hFont As Font, W As Integer, H As Integer) As String
'   
'   Dim sPoints As String = "…"
'   Dim iPos As Integer
'   Dim sCar As String
'   Dim bMarkup As Boolean
'   
'   If Not sText Then Return
'   
'   For iPos = 1 To String.Len(sText)
'     sCar = String.Mid(sText, iPos, 1)
'     If sCar = "<" Then
'       bMarkup = True
'     Else If sCar = ">" Then
'       bMarkup = False
'     Endif
'     If bMarkup Then Continue
'     If hFont.RichTextHeight(String.Left(sText, iPos) & sPoints, W) > H Then Break
'   Next
'   
'   Return String.Left(sText, iPos - 1) & sPoints
'   
' End
' 
Public Sub _IsEllipsized() As Boolean
  
  Return $bEllipsized
  
End

Private Function Hovered_Read() As Boolean

  Return GetIconView()._IsHovered(Me)

End

Public Sub _Invalidate()
  
  $hInside = Null
  
End

Private Function Tag_Read() As Variant

  Return $vTag

End

Private Sub Tag_Write(Value As Variant)

  $vTag = Value

End

Private Sub MyTrimRichText(RichText As String, W As Float, Optional H As Float) As String

  Dim sResult As String
  Dim cCache As Collection
  
  cCache = GetIconView()._GetTrimTextCache()
  sResult = cCache[RichText]
  If Not sResult Then
    sResult = Paint.TrimRichText(RichText, W, H)
    cCache[RichText] = sResult
    If cCache.Count > 256 Then 
      For Each cCache
        cCache.Remove(cCache.Key)
        Break
      Next
    Endif
  Endif
  
  Return sResult
  
End


Private Function Next_Read() As _IconView_Item

  Dim hParent As IconView = GetIconView()
  Dim iPos As Integer = hParent._FindItem(Me) + 1
  If iPos > hParent.Keys.Max Then Return Null
  Return hParent._GetItem(iPos)

End

Private Function Previous_Read() As _IconView_Item

  Dim hParent As IconView = GetIconView()
  Dim iPos As Integer = hParent._FindItem(Me) - 1
  If iPos < 0 Then Return Null
  Return hParent._GetItem(iPos)

End

