' Gambas class file

Export

Static Property Read Type As String

'' Return all desktop types defined by the environment.
''
'' This is the different elements of the 'XDG_CURRENT_DESKTOP' environment variable content.
''
'' If 'XDG_CURRENT_DESKTOP' is not defined, several heuristics are used for detecting the current desktop:
'' for example, checking the `KDE_FULL_SESSION` environment variable for KDE desktops, checking the 
'' `GNOME_DESKTOP_SESSION_ID` environmental variable for Gnome desktops, and so on.

Static Property Read Types As String[]

Static Private $sDesktop As String
Static Private $aDesktopType As String[]

Static Private Sub GetDesktop() As String

  If $sDesktop Then Return $sDesktop

  If Not $aDesktopType Then 
    $aDesktopType = Split(UCase(Env["XDG_CURRENT_DESKTOP"]), ":")
  Endif
  
  If $aDesktopType.Count = 0 Then
    
    If Env["KDE_FULL_SESSION"] Then
      $aDesktopType.Add("KDE")
    Else If Env["GNOME_DESKTOP_SESSION_ID"] Then
      $aDesktopType.Add("GNOME")
    Else If Env["MATE_DESKTOP_SESSION_ID"] Or If Env["MATECORBA_SOCKETDIR"] Then
      $aDesktopType.Add("MATE")
    Else If Env["E_BIN_DIR"] And If Env["E_LIB_DIR"] Then
      $aDesktopType.Add("ENLIGHTENMENT")
    Else If Env["WMAKER_BIN_NAME"] Then
      $aDesktopType.Add("WINDOWMAKER")
    Else If UCase(Env["XDG_MENU_PREFIX"]) Begins "XCFE" Then
      $aDesktopType.Add("XFCE")
    Else If InStr(Env["XDG_DATA_DIR"], "/xfce") Then
      $aDesktopType.Add("XFCE")
    Else If Env["DESKTOP_SESSION"] Then
      $aDesktopType.Add(UCase(Env["DESKTOP_SESSION"]))
    Else 
      $aDesktopType.Add("UNKNOWN")
    Endif

  Endif
  
  If $aDesktopType.Count Then 
  
    If $aDesktopType[0] = "KDE" Then
      If Env["KDE_SESSION_VERSION"] = "4" Then
        $aDesktopType.Add("KDE4")
      Else If Env["KDE_SESSION_VERSION"] = "5" Then
        $aDesktopType.Add("KDE5")
      Endif
    Endif
    
    $sDesktop = $aDesktopType[0]
    If $sDesktop Begins "X-" Then $sDesktop = Mid$($sDesktop, 3)
    
  Endif

  $aDesktopType.ReadOnly = True
  
  Return $sDesktop

End

Static Private Function Type_Read() As String

  Return GetDesktop()

End

Static Private Function Types_Read() As String[]

  GetDesktop()
  Return $aDesktopType

End

'' Return if the current desktop has a specific type.
''
'' - ~Type~: The desktop type to check. The tests are not case sensitive.

Static Public Sub Is(Type As String) As Boolean
  
  GetDesktop()
  If $aDesktopType.Exist(Type, gb.IgnoreCase) Then Return True
  If $aDesktopType.Exist("X-" & Type, gb.IgnoreCase) Then Return True
  
End

