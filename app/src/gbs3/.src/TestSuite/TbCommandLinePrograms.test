' Gambas test file

Public Sub _Setup()

  TSR.CreateTestEnvironment()

End

Public Sub Precompile()
  
  If TSR.$bTestDebug Then Test.note("Testing PreCompile")
  Mmain._ResetAll()
  Mmain.$bPrecompiler = True
  MMain.$bExecuteFromArgs = True
  
  MMain.$aVarsDecl.Clear()
  MMain.PrecompileLine("{i}Acar=3")
  MMain.PrecompileLine("{f}Bcar=3.0")
  MMain.PrecompileLine("{l}Ccar=3")
  Assert.equals(MMain.$aVarsDecl["Acar"], "Dim Acar As Integer", "Test precompile short forms I")
  Assert.equals(MMain.$aVarsDecl["Bcar"], "Dim Bcar As Float", "Test precompile short forms F")
  Assert.equals(MMain.$aVarsDecl["Ccar"], "Dim Ccar As Long", "Test precompile short forms L")
  Dim expected As String = "gbs" & System.version & ": \"{l}Acar=45\".1: " & ("Redefinition of variable") & " Dim Acar As Long " & ("From") & " Dim Acar As Integer " & ("Not Allowed")
  Assert.Equals(TSR.ErrorMsgOut(Mmain, "PrecompileLine", "{l}Acar=45"), expected, "Test For Error")
  MMain.$aVarsDecl.Clear()
End


Public Sub CreateProgramFromCommandLineArgs()

  MMain._ResetAll()
  MMain.$bExecuteFromArgs = True
  MMain.$sUse = "gb.eval.highlight,gb.pcre,gb.inotifyt"
  Dim sResult As String = TSR.ErrorMsgOut(Mmain, "GenerateFilesFromArgs", "Dim I As Integer:Print I:Inc I")
  Dim sExpect As String = "gbs" & System.Version & ": \"Dim I As Integer:Print I:Inc I\".0:" & (" Unknown component") & ": gb.inotifyt"
  Assert.Equals(sResult, sExpect, "Test For bad Component ")
  If TSR.$bTestDebug Then
    Test.note(sResult)
    Test.Note(sExpect)
  Endif
  
  MMain.$sFinalProgram = ""
  MMain.$bPrecompiler = True
  MMain.$bExecuteFromArgs = True
  MMain.$sUse = "gb.eval.highlight,gb.pcre,gb.web"
  MMain.GenerateFilesFromArgs("{i}i=9:Print i:inc i")
  Assert.Equals(TSR.CompareStringArray(Split(Mmain.$sFinalProgram, "\n", "", True), Split("Public Sub Main()\nDim i As Integer\ni=9\nPrint i\ninc i\n\nEnd\n", "\n", "", True)), True, "Verify program is formatted Correctly from command Line")
End ' Gambas test file

Public Sub ExecuteACommandLineProgram()
  
  MMain._ResetAll()
  MMain.$bTestMode = True
  Mmain.$bPrecompiler = True
  MMain.$bExecuteFromArgs = True
  
  Mmain.$sPath = "{s}Var1=\"Hello World\":Print \"We say\";;Var1:For {i}i = 0 to 2:Print i:next"
  
  Mmain.Main()
  If TSR.$bTestDebug Then
      Test.Note("Application Output")
      Test.Note(Mmain.$sTestModeCapture)
  Endif
  
  Assert.Equals(MMain.$sTestModeCapture, "We say Hello World\n0\n1\n2\n", "Check the output from the Executed command line script")
  
End
