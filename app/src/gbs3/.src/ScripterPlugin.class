' Gambas class file

Export 
Static Public CompileResult As Integer = 0
Static Public CompileErrorText As String = ""


'' This allows integration of scripter into an application that uses plugins
'' the call would be Scripter(MyScript,"-b -c etc these are other parameters")
'' This returns the instanciated class of the plugin script
Static Public Sub _call(ScriptPath As String, Optional CompileParameters As String[] = [], PluginNewParameters As Variant[] = Null) As Variant
   Dim PluginClass As Class
   Dim PluginObject As Object
   
   ScriptMain._ResetAll()
   
   If Not Component.IsLoaded("gb.eval") Then Component.Load("gb.eval")
   If Not Class.IsLoaded("ScriptMain") Then Class.load("ScriptMain")
   If Not Class.IsLoaded("Highlight") Then Class.load("ScriptMain")
   
   ScriptMain.$bRunAsPlugin = True
   
   Dim aParms As String[] = CompileParameters
   aParms.Add("gbs" & System.version, 0)
   aParms.Push("-p")
   aParms.Push(ScriptPath)
   CompileResult = ScriptMain.ScripterMain(aParms)
   If CompileResult <> 0 Then 
      Warning("Plugin Compile Failed :" & ScriptMain.$sLastCompileError)
      CompileErrorText = ScriptMain.$sLastCompileError
      ScriptMain._ResetAll()
      Return Null
   Endif
   Try Component.Load(ScriptMain.$sExecutable)
   Try PlugInClass = Class.Load(ScriptMain.$sStartUpClass)
   If IsNull(PluginNewParameters) Then
      PlugInObject = PluginClass.New()
   Else 
      PlugInObject = PluginClass.New(PlugInNewParameters)
   Endif 
   ScriptMain._ResetAll()
   Return PluginObject
End

'' Allow a user to provide a string program and build it
'' Return the Plugin Object
Static Public Sub FromString(PluginName As String, Program As String, Optional CompileParameters As String[] = [], PluginNewParameters As Variant[] = Null) As Variant
  
  Dim WorkFile As String = Temp(PluginName)
  Try File.Save(WorkFile, Program)
  If Error Then 
    CompileErrorText = ("Unable to Create Temp Workfile : ") & Error.text
    CompileError(PluginName, 0, CompileErrorText)
  Endif
  
  Return _call(WorkFile, CompileParameters, PluginNewParameters)
End



''Turn on verbose info during plugin compile
Static Public Sub SetVerbose()
If Verbose.$bVerboseOn = True Then 
  Verbose.$bVerboseOn = False
Else 
  Verbose.$bVerboseOn = True
Endif
End
