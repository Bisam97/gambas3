' Gambas module file

Public Sub _call(sInputProjectDir As String, sOutputScriptDir As String)

    Dim s As String
    
    Dim sourceProject As String = sInputProjectDir
    
    Dim sourcePath As String = SourceProject &/ ".src"
    Dim ConnectionPath As String = SourceProject &/ ".connection"
    Dim bConnection As Boolean = False
    
    If Not Exist(SourceProject) Then
        warning("Unable to find source project " & SourceProject, True)
    Else If Not Exist(SourcePath) Then
        warning("Unable to find source code directory " & SourcePath, True)
    Else If Exist(ConnectionPath) Then
        bConnection = True
    Endif
    
    Dim ScriptFile As String = "#!/usr/bin/env gbs3 \n'Auto Generated Script " & CStr(Now) & "\n"
    Dim ScriptName As String = Split(sourceProject, "/").last
    Dim DestPath As String = sOutputScriptDir
     
    If DestPath <> "" Then ' we have the destination directory
        If Not Exist(DestPath) Then
          warning("Output Path for script not found : " & DestPath, True)
          Return
        Endif
        DestPath = DestPath &/ ScriptName & ".gbs"
    Else
        DestPath = Env["PWD"] &/ ScriptName & ".gbs"
    Endif
    
    Dim aModules As String[] = Dir(SourcePath, "*.module")
    Dim aClasses As String[] = Dir(SourcePath, "*.class")
    Dim aForms As String[] = Dir(SourcePath, "*.form")
    Dim aConnections As New String[] 
    If bConnection Then aConnections = Dir(ConnectionPath, "*.connection")
    
    Dim aProjectFile As String[] 
    Try aProjectFile = Split(File.Load(sourceProject &/ ".project"), "\n", "\"\"", True, True)
    If Error Then
      Warning("Unable to access the project file : " & SourceProject &/ ".project", True)
      Return
    Endif
    Dim Startup As String = ""
    For Each s As String In aProjectFile
        Dim aSS As String[] = Split(s, "=", "\"\"", True, True)
        If Upper(AsS[0]) = "COMPONENT" Or If Upper(AsS[0]) = "LIBRARY" Then
            ScriptFile &= "Use " & Quote(AsS[1]) & "\n"
        Else If Upper(aSS[0]) = "STARTUP" Then
            Startup = aSS[1]
            ScriptFile &= "#Script Startup=" & Quote(Startup) & "\n"
        Else If Upper(aSS[0]) = "TITLE" Then
          ScriptFile &= "#Script Title=" & Quote(aSS[1]) & "\n"
        Else If Upper(aSS[0]) = "DESCRIPTION" Then
          ScriptFile &= "#Script Description=" & Quote(aSS[1]) & "\n"
        Else If Upper(aSS[0]) = "NAME" Then
          ScriptFile &= "#Script Name=" & Quote(aSS[1]) & "\n"
        Else If Upper(aSS[0]) = "AUTHORS" Or If Upper(aSS[0]) = "AUTHOR" Then
          ScriptFile &= "#Script Authors=" & Quote(aSS[1]) & "\n"
         Else If Upper(aSS[0]) = "VERSION" Then
          ScriptFile &= "#Script Version=" & Quote(aSS[1]) & "\n"
         Else If Upper(aSS[0]) = "LICENSE" Then
          ScriptFile &= "#Script License=" & Quote(aSS[1]) & "\n"
        Endif
    Next

    For Each s In aClasses
            Try ScriptFile &= "class " & File.BaseName(s) & "\n" & File.Load(sourcePath &/ s) & "\nEnd Class\n"
            If Error Then
                Warning("Unable to generate Class : " & SourcePath &/ s, True)
                Return
            Endif
    Next

    For Each s In aModules
        If aModules.count = 1 Or If File.BaseName(s) = Startup Then
                Try ScriptFile &= File.Load(sourcePath &/ s) & "\n"
                If Error Then
                  Warning("Unable to generate Startup " & Startup & " : " & SourcePath &/ s, True)
                  Return
                Endif
                ' Dim ReadCheck As String[] = Split(ScriptFile, "\n")
        Else
            Try ScriptFile &= "module " & File.BaseName(s) & "\n" & File.Load(sourcePath &/ s) & "\nEnd module\n"
            If Error Then
                Warning("Unable to generate simple module : " & SourcePath &/ s, True)
                Return
            Endif
        Endif
    Next
     
    For Each s In aForms
        Try ScriptFile &= "form " & File.BaseName(s) & "\n" & File.Load(sourcePath &/ s) & "\nend form\n"
        If Error Then
              Warning("Unable to generate simple Form : " & SourcePath &/ s, True)
              Return
        Endif
    Next
    
    For Each s In aConnections
            Try ScriptFile &= "connection " & File.BaseName(s) & "\n" & File.Load(ConnectionPath &/ s) & "\nend connection\n"
            If Error Then
              Warning("Unable to generate simple connection : " & ConnectionPath &/ s, True)
              Return
            Endif
    Next
            
    Try File.Save(DestPath, ScriptFile)
    If Error Then
      Warning("Unable to write Output Generated script to : " & ScriptFile, True)
    Else
      Chmod DestPath To "rwxr-xr-x"
    Endif

End
