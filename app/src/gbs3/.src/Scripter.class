' Gambas class file

Export 
Static Public CompileResult As Integer = 0
Static Public CompileError As String = ""

'' This allows integration of scripter into an application that uses plugins
'' the call would be Scripter(MyScript,"-b -c etc these are other parameters")
'' This returns the instanciated class of the plugin script
Static Public Sub _call(ScriptPath As String, Optional CompileParameters As String[] = [], PluginNewParameters As Variant[] = Null) As Variant
   Dim PluginClass As Class
   Dim PluginObject As Object
   If Not Component.IsLoaded("gb.eval") Then Component.Load("gb.eval")
   If Not Class.IsLoaded("ScriptMain") Then Class.load("ScriptMain")
   If Not Class.IsLoaded("Highlight") Then Class.load("ScriptMain")
   
   ScriptMain.$bRunAsPlugin = True
   Dim aParms As String[] = CompileParameters
   aParms.Add("gbs" & System.version, 0)
   aParms.Push("-p")
   aParms.Push(ScriptPath)
   CompileResult = ScriptMain.ScripterMain(aParms)
   If CompileResult <> 0 Then 
      Warning("Plugin Compile Failed :" & ScriptMain.$sLastCompileError)
      CompileError = ScriptMain.$sLastCompileError
      Return Null
   Endif
   Component.Load(ScriptMain.$sExecutable)
   PlugInClass = Class.Load(ScriptMain.$sStartUpClass)
   If IsNull(PluginNewParameters) Then
      PlugInObject = PluginClass.New()
   Else 
      PlugInObject = PluginClass.New(PlugInNewParameters)
   Endif 
   ScriptMain._ResetAll()
   Return PluginObject
End

'' Allow user to define keyword filter, this will allow to stop certain functions from
'' being allowed inside a script file. as need by the pluging user
'' This filter set is a set of regular expressions which will be used to match program lines
'' Entry would be : "Message if matched":"Regular expression"
'' example "File IO not permitted":"*Open* For * Write"
'' to prevent opening a file for or input output would look like
Static Public Sub SetKeyWordFilter(KeyManagement As Collection)
  
  If IsNull(KeyManagement) Then 
     Reader.$sScriptFilter.Clear()
     Return
  Endif
  
  If Not Class.IsLoaded("RegExp") Then 
    Try Component.Load("gb.pcre")
    If Error Then 
        Warning("Component gb.pcre not found, filter will be ignored")
        Return 
    Endif
    Try Class.Load("RegExp")
    If Error Then 
      Warning("Unable to load regexp, filter will be ignored")
      Return
    Endif
    Reader.$sScriptFilter = KeyManagement
  Else 
    Reader.$sScriptFilter = KeyManagement
  Endif
  
End

''Turn on verbose info during plugin compile
Static Public Sub SetVerbose()
If Verbose.$bVerboseOn = True Then 
  Verbose.$bVerboseOn = False
Else 
  Verbose.$bVerboseOn = True
Endif
End