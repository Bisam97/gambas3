' Gambas module file

Public InfoFilePath As String

Private Const DEFAULT_LANG As String = "en"

Private Const TYPE_COMMON As Integer = 0
Private Const TYPE_COMPONENT As Integer = 1
Private Const TYPE_CLASS As Integer = 2
Private Const TYPE_SYMBOL As Integer = 3

Private Const BULLET As String = ""
Private Const ARROW As String = "<b>&gt;</b>" ' â–º
'PRIVATE CONST BRK AS String = "<p>"

Private Const LETTER_DIGIT As String = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"

Private $aHighlightClass As String[] = ["", "normal", "keyword", "function", "operator", "symbol", "number", "string", "comment", "", "", "datatype"]

Private $hConn As New Connection

Private $aLang As String[]

Private $sUser As String

Private $bWget As Boolean

Private $sVersion As String
Private $bHelp As Boolean
Private $bShow As Boolean
Private $bEdit As Boolean
Private $bRename As Boolean
Private $bAdmin As Boolean
Private $bHistory As Boolean
Private $bComment As Boolean
Private $bLogin As Boolean
Private $bFind As Boolean
Private $bView As Boolean
Private $bGet As Boolean
Private $bOnlineHelp As Boolean
Private $bNoTitle As Boolean
Private $bNoImage As Boolean
Private $bNoCache As Boolean
Private $iIgnore As Integer

Private $bNew As Boolean

Private $sLang As String
Private $sLangSuff As String
'Private $sLangVerSuff As String
Private $sShowSuff As String
Private $sPath As String
Private $sRoot As String
Private $aPath As String[]
Private $sUri As String
Private $bExample As Boolean
Private $iType As Integer
Private $cGotSpecial As Collection
Private $bHeader As Boolean

Private $hComp As CComponent
Private $hClass As CClassInfo
Private $hSym As CSymbolInfo

Private $sSection As String
Private $aSection As String[]
Private $bVerbatim As Boolean
Private $bCode As Boolean
Private $iNoWiki As Integer
Private $sRes As String
Private $sList As String
Private $iPos As Integer
Private $bWhite As Boolean
Private $bRefresh As Boolean
Private $bUndo As Boolean
Private $bImage As Boolean
Private $bDispImage As Boolean
Private $cCompRedirect As Collection
Private $bSyntax As Boolean
Private $sTitle As String
Private $iNoEncode As Integer

Private $eTime As Float

Private $sOnlyVersion As String

Private PARA As String

Private $aDay As String[]
Private $aMonth As String[]

Private $sTemp As String
Private $hTemp As File

Private $sError As String
Private $sLog As String

Public Sub FormatDate(dDate As Date) As String

  dDate -= Frac(Date(Now)) ' Go to GMT

  If Not $aDay Then
    $aDay = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]
    $aMonth = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
  Endif

  Return $aDay[WeekDay(dDate)] & ", " & Format(Day(dDate), "00") & " " & $aMonth[Month(dDate) - 1] & " " & Year(dDate) & " " & Format(Time(dDate), "hh:nn:ss") & " GMT"

End

Private Sub AddParam(sReq As String, sParam As String) As String

  Dim aParam As String[]
  Dim iPos As Integer

  If Not sParam Then Return sReq

  iPos = InStr(sReq, "?")
  If iPos = 0 Then Return sReq & "?" & sParam

  aParam = Split(Mid$(sReq, iPos + 1), "&")
  If aParam.Find(sParam) >= 0 Then Return sReq

  Return sReq & "&" & sParam

End

Private Sub RemoveParam(sReq As String, sParam As String) As String

  Dim aParam As String[]
  Dim iPos As Integer
  Dim iInd As Integer

  iPos = InStr(sReq, "?")
  If iPos = 0 Then Return sReq

  aParam = Split(Mid$(sReq, iPos + 1), "&")
  iInd = aParam.Find(sParam)
  If iInd < 0 Then Return sReq

  aParam.Remove(iInd)
  If aParam.Count = 0 Then Return Left$(sReq, iPos - 1)

  Return Left$(sReq, iPos - 1) & "?" & aParam.Join("&")

End

Private Sub DeleteTempFile()

  Shell "rm -rf " & File.Dir(Temp$()) & " > /dev/null 2>&1" Wait

End

Private Sub AddRedirect(sSrc As String, sDest As String)

  If Not $cCompRedirect Then $cCompRedirect = New Collection
  $cCompRedirect[sSrc] = sDest

End

Public Sub Main()

  Dim rPage As Result
  Dim sPath As String
  Dim bPost As Boolean
  Dim sDir As String
  Dim sErr As String

  'File.In.EndOfLine = gb.Windows
  'File.Out.EndOfLine = gb.Windows

  $eTime = Timer

  $aLang = [DEFAULT_LANG, "fr", "de", "es", "it", "nl", "pl", "pt", "pt_BR", "mk", "sq", "ca", "hu", "cs", "tr", "ar", "fa", "id", "vi", "ko", "ja", "ru", "zh", "zh_TW", "eo"]

  $sRoot = File.Dir(File.Dir(Application.Path)) 'Application.Env["DOCUMENT_ROOT"]
  If Not Exist($sRoot &/ ".htaccess") Then $sRoot = User.Home &/ "www/help"

  $sUser = Application.Env["REMOTE_USER"]

  OpenDatabase

  System.Language = $sLang

  bPost = Application.Env["REQUEST_METHOD"] = "POST"

  If $bAdmin Then
    If bPost Then
      DoAdminPage
    Else
      AdminPage
    Endif
  Else If $bEdit Then
    If bPost Then
      UpdatePage
    Else If $bUndo Then
      UndoPage
    Else
      EditPage
    Endif
  Else If $bRename Then
    If bPost Then
      DoRenamePage
    Else
      RenamePage
    Endif
  Else If $bHistory Then
    HistoryPage
  Else If $bLogin Then
    LoginPage
  Else If $bDispImage Then
    DisplayImage
  Else If $bFind Then
    If bPost Then
      DoSearchPage
    Else
      SearchPage
    Endif
  Else If $bGet Then
    GetPage
  Else
    DisplayPage
  Endif

  CComponent.Exit
  DeleteTempFile

Catch

  sErr = Error.Where & ": " & Error.Text
  Debug sErr

  Output To Default
  If Not $bHeader Then
    Print "Content-type: text/html"
    Print
  Endif
  Print "<html><body><h2>Unexpected error while displaying this page.</h2>"
  Print "<pre>"; Error.Text
  Print "<b>"; Error.Where; "</b>"
  Print $sLog
  Print "</pre></body>"
  DeleteTempFile

End

Private Sub ReadConfiguration()

  Dim hFile As File

  hFile = Open $sRoot &/ ".conf" For Read
  Line Input #hFile, $hConn.Type
  Line Input #hFile, $hConn.Login
  Line Input #hFile, $hConn.Password
  Line Input #hFile, $hConn.Name
  Close #hFile

Catch

  Print $sRoot;; Error.Where;; Error.Text

End

Private Sub GetInfoFilePath(sVer As String) As String

  Return $sRoot &/ "info" &/ sVer

End

Private Sub InitVersion(sVer As String)

  $sUri = RemoveParam($sUri, "v3")
  If $sVersion = "3.0" Then $sUri = AddParam($sUri, "v3")

  '$sLangSuff = RemoveParam($sLangSuff, "v3")
  'If $sVersion = "3.0" Then $sLangSuff = AddParam($sLangSuff, "v3")

  InfoFilePath = GetInfoFilePath(sVer)

End

Private Sub IsComponentPath(sPath As String) As Boolean

  If sPath = "/comp" Then Return True
  If sPath = "/comp/" Then Return True
  If sPath Like "/comp/*" Then Return True

End

Public Sub GetVersion() As String

  Return $sVersion

End

Private Sub OpenDatabase()

  Dim aQuery As String[]
  Dim sQuery As String

  $hConn.Type = "mysql"
  $hConn.Login = "root"
  $hConn.Name = "gambas"

  ReadConfiguration

  $hConn.Open

  $sUri = Application.Env["REQUEST_URI"]

  If Not $sUri Then

    $sUri = "/help/changes"
    $sPath = "/changes"
    $sLang = DEFAULT_LANG
    DB.Debug = True
    '$sRoot = "/var/www/html"

  Else

    $sPath = Application.Env["PATH_INFO"]
    If Right$($sPath) = "/" Then $sPath = Left$($sPath, -1)
    If Not $sPath Then $sPath = "/"

    aQuery = Split(Application.Env["QUERY_STRING"], "&")

    $sVersion = "2.0"

    For Each sQuery In aQuery

      If sQuery = "refresh" Then
        $bRefresh = True
      Else If sQuery = "undo" Then
        $bUndo = True
      Else If sQuery = "view" Then
        $bView = True
        $bShow = True
      Else If sQuery = "show" Then
        $bShow = True
      Else If sQuery = "v3" Then
        $sVersion = "3.0"
      Else If $aLang.Find(sQuery) >= 0 Then
        $sLang = sQuery
      Else If sQuery = "wiki" Then
        $bGet = True
      Else If sQuery = "help" Then
        $bView = True
        $bShow = True
        $bOnlineHelp = True
      Else If sQuery = "notitle" Then
        $bNoTitle = True
      Else If sQuery = "noimage" Then
        $bNoImage = True
      Else If sQuery = "nocache" Then
        $bNoCache = True
      Endif

    Next

    If Not $sLang Then $sLang = DEFAULT_LANG

  Endif

  $bWget = Application.Env["HTTP_USER_AGENT"] Like "WGet*"

  '$bComment = IsCommentPath($sPath)
  $bImage = Left(File.Name($sPath)) = ":"
  $bDispImage = $sUri Like "/image*"
  If Not $bShow Then $bShow = $bWget Or $sUri Like "/show*"
  $bHelp = $bShow Or $sUri Like "/help*"
  $bEdit = $sUri Like "/edit*"
  $bRename = $sUri Like "/rename*"
  $bFind = $sUri Like "/help/search*"
  If $bFind Then $bHelp = False
  $bAdmin = $sUri Like "/admin*"
  $bHistory = $sUri Like "/hist*"

  ' URI

  $sUri = $sPath
  If $sLang <> DEFAULT_LANG Then $sUri = AddParam($sUri, $sLang)

  ' Suffixe ?show

  If $bOnlineHelp Then
    $sUri = AddParam($sUri, "help")
    $sShowSuff &= "help"
  Else If $bView Then
    $sUri = AddParam($sUri, "view")
    $sShowSuff = "view"
  Else If $bShow Then
    $sUri = AddParam($sUri, "show")
    $sShowSuff = "show"
  Endif

  ' suffixe de langue et de version

  If $sLang <> DEFAULT_LANG Then
    $sLangSuff = $sLang
  Else If $bWget Then
    $sLangSuff = $sLang
  Endif
  If $sLangSuff Then $sLangSuff = "?" & $sLangSuff

  $aPath = Split($sPath, "/")

  InitVersion($sVersion)

  If $sPath Like "/comp/*" Then
    $iType = $aPath.Count - 2
    If $aPath.Count > 2 Then

      If Left($aPath[$aPath.Count - 1]) = "~" Then
        $iType = TYPE_COMMON
      Else
        CComponent.Init
        $hComp = CComponent.All[$aPath[2]]
        If $hComp Then
          $hComp.Load
          If $aPath.Count > 3 Then $hClass = CComponent.All[$aPath[2]][$aPath[3]]
          If $hClass Then
            If $aPath.Count > 4 Then
              $hSym = $hClass.Symbols[Replace($aPath[4], ".", ":")]
            Endif
          Endif
        Endif
      Endif
    Endif
  Endif

  If $bWget Then $bRefresh = True

End

Private Function IsCommentPath(sPath As String) As Boolean

  Return Right(sPath, 8) = ".comment"

End

Private Function GetCommentPath(sPath As String) As String

  If Right(sPath, 8) = ".comment" Then
    Return sPath
  Else
    Return sPath & ".comment"
  Endif

End

Private Function GetUncommentPath(sPath As String) As String

  If Right(sPath, 8) = ".comment" Then
    Return Left$(sPath, -8)
  Else
    Return sPath
  Endif

End

Private Function GetAbsolutePath(sRoot As String, sPath As String) As String

  Dim sElt As String
  Dim sRes As String

  If Left(sPath, 2) <> "./" And Left(sPath, 3) <> "../" Then
    If Left(sPath) <> "/" Then sPath = "/" & sPath
    Return sPath
  Endif

  sRes = sRoot
  If Right(sRes) = "/" And Len(sRes) > 1 Then sRes = Left(sRes, -1)

  For Each sElt In Split(sPath, "/")
    If sElt = "." Then Continue
    If sElt = ".." Then
      'IF sRes = sRoot THEN CONTINUE
      sRes = File.Dir(sRes)
      Continue
    Endif
    sRes &/= sElt
  Next

  Return sRes

End

Private Sub GetLinkClass(sClass As String, bLTR As Boolean, sTitle As String) As String

  If System.RightToLeft And If Not bLTR And If IsAscii(sTitle) Then
    sClass &= "lang=\"en\" "
    bLTR = True
  Endif
  If bLTR Then sClass &= "dir=\"ltr\" "
  Return sClass

End

Private Function GetLink(sPath As String, Optional sMyTitle As String, Optional bNoImage As Boolean, Optional sClass As String, Optional bLTR As Boolean) As String

  Dim sTitle As String
  Dim sRelPath As String
  Dim sSuff As String
  Dim sPath2 As String
  Dim sTitle2 As String
  Dim iPos As Integer
  Dim sMoreSuff As String

  If sClass Then sClass = "class=\"" & sClass & "\" "

  If sPath Like "http://*" Or If sPath Like "https://*" Or If sPath Like "mailto:*" Then

    If Not sMyTitle Then sMyTitle = sPath
    Return "<a " & GetLinkClass(sClass, bLTR, sMyTitle) & "href=\"" & EncodeLink(sPath) & "\" target=\"_blank\">" & EncodeHTML(sMyTitle) & "</a>"

  Else

    iPos = RInStr(sPath, "?")
    If iPos Then
      sMoreSuff = Mid$(sPath, iPos + 1)
      sPath = Left(sPath, iPos - 1)
    Endif

    If sPath = "/" Then
    Else
      If sPath Like (Replace($sPath, "[", "[[]") &/ "*") Then
        sRelPath = "." &/ Mid$(sPath, Len($sPath) + 1)
      Else
        sRelPath = sPath
      Endif

      sPath = LCase(GetAbsolutePath(GetRealPath($sPath), sRelPath))
    Endif

    sTitle = GetTitle(sPath)
    ' If Not sTitle Then
    '   If sPath Like "/comp/gb.qt4*/*/*" Then
    '     sPath2 = Replace(sPath, "/gb.qt4", "/gb.qt")
    '     sTitle2 = GetTitle(sPath2)
    '     If sTitle2 Then
    '       sPath = sPath2
    '       sTitle = sTitle2
    '     Endif
    '   Endif
    ' Endif

    If sMyTitle <> ("Cancel") Then
    Else
      sTitle = sMyTitle
    Endif

    sSuff = AddParam($sLangSuff, sMoreSuff)
    'If IsComponentPath(sPath) Then
    If $sVersion = "3.0" And If Right$(sPath, 2) <> "v2" Then sSuff = AddParam(sSuff, "v3")
    'Endif

    If sTitle Then

      If Left(File.Name(sPath)) = ":" And Not bNoImage Then

        If $bNoImage Then Return ""

        If sMyTitle Then sTitle = sMyTitle

        sMoreSuff = ""
        iPos = InStr(sTitle, "|")
        If iPos Then
          sMoreSuff = Mid$(sTitle, iPos + 1)
          sTitle = Left(sTitle, iPos - 1)
          If sMoreSuff = "<" Then
            sMoreSuff = " align=\"left\""
          Else If sMoreSuff = ">" Then
            sMoreSuff = " align=\"right\""
          Else
            sMoreSuff = " class=\"" & sMoreSuff & "\""
          Endif
        Endif

        Return "<img src=\"/image" &/ sPath & sSuff & "\" alt=\"" & EncodeHTML(sTitle) & "\" title=\"" & EncodeHTML(sTitle) & "\" " & sMoreSuff & " />"

      Else

        If sMyTitle Then sTitle = sMyTitle

        Return "<a " & GetLinkClass(sClass, bLTR, sTitle) & "href=\"/help" &/ EncodeLink(sPath & AddParam(sSuff, $sShowSuff)) & "\">" & EncodeHTML(sTitle) & "</a>"

      Endif

    Else

      If $bWget Then

        If sMyTitle Then
          Return "<i>" & EncodeHTML(sMyTitle) & "</i>"
        Else
          Return "<i>" & EncodeHTML(sRelPath) & "</i>"
        Endif

      Else

        If sMyTitle Then
          Return "<a " & GetLinkClass(sClass, bLTR, sMyTitle) & "href=\"/edit" &/ EncodeLink(sPath & sSuff) & "\"><i>" & EncodeHTML(sMyTitle) & "</i></a>"
        Else
          Return "<a " & GetLinkClass(sClass, True, "a") & "href=\"/edit" &/ EncodeLink(sPath & sSuff) & "\"><i>" & EncodeHTML(sRelPath) & "</i></a>"
        Endif

      Endif

    Endif

  Endif

End

Private Function GetImage(sImg As String, Optional sAdd As String, Optional sAlign As String = "center") As String

  If sAdd Then sAdd = " " & sAdd
  Return "<img" & sAdd & " border=\"0\" src=\"/img/" & sImg & ".png\" align=\"" & sAlign & "\" />"

End

Private Function EncodeHTML(sStr As String) As String

  Dim iPos As Integer
  Dim sRes As String
  Dim sCar As String

  For iPos = 1 To Len(sStr)

    sCar = Mid$(sStr, iPos, 1)

    If sCar = "<" Then
      sCar = "&lt;"
    Else If sCar = ">" Then
      sCar = "&gt;"
    Else If sCar = "&" Then
      sCar = "&amp;"
    Else If sCar = "\"" Then
      sCar = "&quot;"
      'ELSE IF Asc(sCar) > 127 THEN
      'sCar = "&#" & Asc(sCar) & ";"
    Endif

    sRes = sRes & sCar

  Next

  Return sRes

End

Private Sub FinishList()

  If $sList Then
    $sRes = $sRes & $sList & "\n"
    $sList = ""
  Endif

End

Private Sub AddPara()

  If Right($sRes, 5) <> "<p/>\n" Then
    If Right$($sRes) = "\n" Then
      $sRes &= "<p/>"
    Else
      $sRes &= "\n"
    Endif
  Endif

End

Private Sub RemovePara()

  If Right($sRes, 5) = "<p/>\n" Then
    $sRes = Left$($sRes, -5) & "\n"
  Endif

End

Private Sub EnterSection(sSection As String)

  Dim aSection As String[]
  Dim sParam As String
  Dim iPos As Integer

  'IF $sSection <> "example" AND IF $sSection <> "syntax" AND IF $sSection <> "title" THEN
  '  AddPara
  ' ENDIF

  If sSection Then
    iPos = InStr(sSection, " ")
    If iPos Then
      sParam = Mid$(sSection, iPos + 1)
      sSection = Left$(sSection, iPos - 1)
    Endif
  Endif

  sSection = LCase(sSection)

  FinishList

  'LeaveSection()
  $aSection.Push($sSection)
  $sSection = sSection
  $bVerbatim = False
  $sList = ""

  If $iIgnore > 0 And If $sSection <> "only" Then Return

  Select Case $sSection

    Case "syntax"
      If sParam <> "no-title" Then
        If $bSyntax Then $sRes &= "<div class=\"title\">" & $sTitle & "</div>"
      Endif
      sParam = ("Syntax")
      '$sRes &= "<div class=\"black\"><font size=\"-2\"><b>" & sParam & "</b></font></div>\n"
      $sRes &= "<pre class=\"syntax\">"
      $bSyntax = True

    Case "example"
      If Not $bExample Then
        $bExample = True
        $sRes &= "<h3>" & ("Example") & "</h3>\n"
      Endif
      $sRes &= "<div class=\"example\">"
      $bVerbatim = True
      ' IF NOT sParam THEN sParam = ("Example")
      ' $sRes &= "<div class=\"gray\"><font size=\"-2\"><b>" & sParam & "</b></font></div>\n"
      ' $sRes &= "<pre class=\"example\">"
      $iNoWiki = 1

    Case "code"
      $sRes &= "<div class=\"example\">"
      $bVerbatim = True
      $iNoWiki = 1
      $bCode = True

    Case "seealso"
      '$sRes &= "<p><table class=\"table\" border=\"0\" bordercolor=\"#000000\" cellpadding=\"6\" cellspacing=\"0\">\n"
      '$sRes &= "<tr><th>" & ("See also") & "</th></tr><tr><td valign=\"top\">\n"
      $sRes &= "<div class=\"seealso\">\n"
      $sRes &= "<h3>" & ("See also") & "</h3>\n"
      $iPos = Len($sRes)

    Case "error"
      $sRes &= "<h3>" & ("Errors") & "</h3>\n"
      '$sRes &= "<div class=\"gray\"><font size=\"-2\"><b>" & ("Errors") & "</b></font></div>\n"
      $sRes &= "<table class=\"table\" border=\"0\" bordercolor=\"#000000\" cellpadding=\"6\" cellspacing=\"0\" width=\"100%\">\n"
      $sRes &= "<tr><th>" & ("Message") & "</th><th>" & ("Description") & "</th></tr><tr class=\"dark\"><td valign=\"top\">\n"
      $bWhite = True

    Case "warning", "info", "vb", "critical", "tip"
      $sRes &= "<div class=\"message " & $sSection & "\"><table class=\"none\" border=\"0\"><tr><td width=\"40\" valign=\"top\">" & GetImage($sSection) & "</td><td valign=\"top\">\n"

    Case "title"
      If Not sParam Then sParam = "gray"
      $sRes &= "<div class=\"" & sParam & "\"><font size=\"-2\"><b>"

    Case "box"
      If sParam Then $sRes &= "<div class=\"gray\"><font size=\"-2\"><b>" & EncodeHTML(sParam) & "</b></font></div>"
      $sRes &= "<div class=\"box\">\n"

    Case "only"
      $cGotSpecial["only"] = True
      If sParam <> $sVersion Then
        'If IsComponentPath($sPath) Then
        '  $sRes &= "<div style=\"display:none\">"
        'Else
        '  $sRes &= "<table class=\"only-" & Left(sParam) & "\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">"
        '  '$sRes &= "<tr><td class=\"only-" & Left(sParam) & "-title\" valign=\"top\">&nbsp;" & sParam & "&nbsp;</td><td width=\"100%\">&nbsp;</td></tr>"
        '  $sRes &= "<tr><td class=\"only-contents\">"
        '  $sRes &= "<div class=\"only-" & Left(sParam) & "-title\">&nbsp;" & sParam & "&nbsp;</div>"
        'Endif
        $sOnlyVersion = $sVersion
        $sVersion = sParam
        InitVersion($sVersion)
        Inc $iIgnore
      Endif

    Case "html"
      Inc $iNoEncode

  End Select

End

Private Sub LeaveSection()

  Dim sList As String
  Dim sTmp As String

  FinishList
  RemovePara

  If $iIgnore = 0 Or If $sSection = "only" Then

    Select Case $sSection

      Case "syntax"
        $sRes = RTrim($sRes) & "</pre><p/>\n"

      Case "example"
        $sRes = RTrim($sRes) & "</div>\n"
        $bVerbatim = False
        $iNoWiki = 0

      Case "code"
        $sRes = RTrim($sRes) & "</div>\n"
        $bVerbatim = False
        $iNoWiki = 0
        $bCode = False

      Case "error"
        $sRes &= "</td></tr>\n"
        $sRes &= "</table>\n"

      Case "seealso"
        sTmp = Mid$($sRes, $iPos + 1, -4)
        sTmp = Replace(sTmp, "</a>", "</a>, ")
        sTmp = Replace(sTmp, ",,", ",")
        sTmp = Replace(sTmp, ", ,", ",")
        $sRes = Left$($sRes, $iPos) & sTmp & Right$($sRes, 4)
        '$sRes &= "</td></tr>\n"
        '$sRes &= "</table>\n"
        $sRes &= "</div>\n"

      Case "warning", "info", "vb", "critical", "tip"
        $sRes &= "</td></tr></table></div>\n"

      Case "title"
        $sRes &= "</b></font></div>" ' no '\n' to prevent an '<p>' to be added

      Case "box"
        $sRes &= "</div>\n"

      Case "only"
        If $sOnlyVersion Then
          'If IsComponentPath($sPath) Then
          '  $sRes &= "</div>"
          'Else
          '  $sRes &= "</td></tr></table>"
          'Endif
          $sVersion = $sOnlyVersion
          InitVersion($sVersion)
          $sOnlyVersion = ""
          Dec $iIgnore
        Endif

      Case "html"
        Dec $iNoEncode

    End Select

  Endif

  Try $sSection = $aSection.Pop()

End

Private Function Encode(sText As String) As String

  Dim iPos As Integer
  Dim iPos2 As Integer
  Dim iPos3 As Integer
  Dim sCar, sPrev, sNext As String
  Dim bBold As Boolean
  Dim bItalic As Boolean
  Dim bUnderline As Boolean
  Dim bTT As Boolean
  Dim sTitle As String
  Dim sLink As String
  Dim sLinkTitle As String
  Dim bLinkTitle As String
  Dim sLine As String
  Dim bLastVoid As Boolean
  Dim bHeader As Boolean
  Dim sArg As String
  Dim hSym As CSymbolInfo
  Dim iLevel As Integer
  Dim iLevelLen As Integer
  Dim bList As Boolean
  Dim sStr As String
  Dim iInTable As Integer

  Dim bTitleIndex As Boolean
  Dim bUseThisTitleForIndex As Boolean
  Dim sTitleIndex As String
  Dim sTitleIndexStamp As String
  Dim iTitleIndex As Integer
  Dim iTitleIndexStart As Integer
  Dim iLastTitleLevel As Integer
  Dim iTitleLevel As Integer
  Dim bBegin, bEnd As Boolean

  $sRes = ""
  $aSection = New String[]
  EnterSection("")

  For Each sStr In Split(RTrim(sText), "\n")

    If Left$(sStr) = "{" And If Len(sStr) >= 2 Then

      EnterSection(Trim(Mid$(sStr, 2)))
      Continue

    Endif

    If RTrim(sStr) = "}" Then

      LeaveSection()
      Continue

    Endif

    If $bVerbatim Then

      If sStr = "==" Then
        $bVerbatim = False
        $sRes = $sRes & "</pre>\n"
      Else If sStr = "--" Then
        $sRes = $sRes & "<hr>"
      Else
        If Left(sStr, 4) = "<hr>" Then
          $sRes &= "<hr>"
          sStr = Mid$(sStr, 5)
        Endif
        If Left(sStr) = "\\" Then sStr = Mid$(sStr, 2)
        If $sSection = "example" Or If $sSection = "code" Then
          sStr = EncodeHTML(sStr)
          iPos = Len(sStr) - Len(LTrim(sStr))
          If iPos > 0 Then
            sStr = String$(iPos, "&nbsp;") & Mid$(sStr, iPos + 1)
          Endif
          sStr = Replace(sStr, "  ", "&nbsp;&nbsp;")
          $sRes &= sStr & "<br/>\n"
        Else
          $sRes &= sStr & "\n"
        Endif
      Endif
      Continue

    Endif

    If $iIgnore Then Continue

    If $iNoEncode Then
      $sRes &= sStr & "\n"
      Continue
    Endif

    If $bCode Then
      '$sRes &= HighlightCode(sStr) & "\n"
    Endif

    If $iNoWiki = 0 Then

      sStr = RTrim(sStr)
      sTitle = ""

      If Not sStr Then
        '       IF bLastVoid THEN
        '         $sRes = $sRes & "<br>\n"
        '       ELSE
        '         bLastVoid = TRUE
        '         $sRes = $sRes & "\n"
        '       ENDIF
        If Right($sRes, 5) <> "<p/>\n" Then
          $sRes = $sRes & "<p/>\n"
        Else
          $sRes = $sRes & "\n"
        Endif
        Continue
      Endif

      While Left(sStr) = " "
        sStr = Mid$(sStr, 2)
        $sRes &= "&nbsp;"
      Wend

      bLastVoid = False
      bList = False

      iPos = InStr(sStr, " ")

      If iPos >= 2 Then
        If Left$(sStr, iPos - 1) = String(iPos - 1, "*") Then

          iLevel = iPos - 1
          iLevelLen = iLevel * 6
          If Len($sList) > iLevelLen Then
            sCar = Mid$($sList, 1 + iLevelLen)
            $sList = Left($sList, iLevelLen)
          Else If Len($sList) < iLevelLen Then
            sCar = String$((iLevelLen - Len($sList)) \ 6, "<ul>\n")
            $sList &= String$((iLevelLen - Len($sList)) \ 6, "</ul>\n")
          Else
            sCar = ""
          Endif

          $sRes &= sCar & "<li>"
          sStr = Trim(Mid$(sStr, iPos + 1))
          bList = True

        Else If Left$(sStr, iPos - 1) = String(iPos - 1, "#") Then

          iLevel = iPos - 1
          iLevelLen = iLevel * 6
          If Len($sList) > iLevelLen Then
            sCar = Mid$($sList, 1 + iLevelLen)
            $sList = Left($sList, iLevelLen)
          Else If Len($sList) < iLevelLen Then
            sCar = String$((iLevelLen - Len($sList)) \ 6, "<ol>\n")
            $sList &= String$((iLevelLen - Len($sList)) \ 6, "</ol>\n")
          Else
            sCar = ""
          Endif

          $sRes &= sCar & "<li>"
          sStr = Trim(Mid$(sStr, iPos + 1))
          bList = True

        Endif

      Endif

      If Not bList Then FinishList

      If Left$(sStr) = "@" Then

        iPos = InStr(sStr, " ")
        If iPos Then
          sArg = Trim(Mid$(sStr, iPos + 1))
          sStr = Left$(sStr, iPos - 1)
        Endif

        sStr = Mid$(sStr, 2)

        Try $cGotSpecial[sStr] = True

        Select Case sStr

          Case "classes"
            $sRes &= GetClasses()
            Continue

          Case "no-classes"
            Try $cGotSpecial["classes"] = False
            Continue

          Case "symbols"
            $sRes &= GetSymbols()
            Continue

          Case "components"
            $sRes &= GetComponents()
            Continue

          Case "redirect"
            iPos = InStr(sArg, " ")
            If iPos Then AddRedirect(Trim(Left(sArg, iPos - 1)), Trim(Mid$(sArg, iPos + 1)))
            Continue

            ' @index /path prefix
          Case "index"
            $sRes &= GetIndex2(sArg)
            Continue

          Case "title-index"
            sTitleIndexStamp = "{~" & Format(Int(Rnd(1000000)), "000000") & "~}"
            $sRes &= sTitleIndexStamp
            bTitleIndex = True
            Continue

            ' @list /path +-number
          Case "list"
            '$sRes = $sRes & GetList(sArg)
            Continue

            ' @header /path +-number
          Case "header"
            '$sRes = $sRes & GetList(sArg)
            Continue

          Case "syntax"
            If sArg Then
              hSym = $hClass.Symbols[Replace(sArg, ".", ":")]
              If hSym Then EnterSection("syntax no-title")
            Else
              hSym = $hSym
              If hSym Then EnterSection("syntax")
            Endif
            If hSym Then
              $sRes &= GetSymbolSyntax(hSym)
              LeaveSection()
            Endif
            Continue

          Case "version"
            $sRes &= GetGambasVersion()
            Continue

          Case "only-in", "only"
            $sRes &= GetOnlyIn(sArg)
            Continue

          Case "since"
            $sRes &= GetSince(sArg)
            Continue

          Case "changes"
            $sRes &= GetLastChanges()
            Continue

          Case "translate", "todo"
            $sRes &= GetTranslate()
            Continue

          Case "class-stat"
            $sRes &= GetClassStat(sArg)
            Continue

          Case "no-autolink"
            Continue

          Case "include"
            $sRes &= GetInclude(sArg)
            Continue

          Case Else
            $sRes &= "<div style=\"background:solid yellow;\"><b><tt>" & sStr & " ?</tt></b></div>"
            Continue

        End Select

      Else If Left$(sStr) = "+" Then

        $bExample = False
        iPos = 1
        While Mid$(sStr, iPos, 1) = "+"
          Inc iPos
        Wend
        sStr = LTrim(Mid$(sStr, iPos))
        If Len(sStr) Then
          'DEC iPos
          If bTitleIndex And If iInTable = 0 Then
            Inc iTitleIndex
            iTitleLevel = iPos - 1
            $sRes &= "<a name=\"t" & iTitleIndex & "\"></a>"
            bUseThisTitleForIndex = True
          Else
            bUseThisTitleForIndex = False
          Endif
          $sRes &= "<h" & iPos & ">"
          iTitleIndexStart = Len($sRes)
          sTitle = "</h" & iPos & ">"
        Endif

      Endif

      If Left(sStr, 2) = "[[" Then

        $sRes = $sRes & "<table class=\"table\" border=\"0\" bordercolor=\"#000000\" cellpadding=\"4\" cellspacing=\"0\"" & Trim(Mid$(sStr, 3)) & ">\n"
        bHeader = True
        $sRes = $sRes & "<tr><th>\n"
        $bWhite = True
        Inc iInTable
        Continue

      Else If Len(sStr) <= 2 Then

        If sStr = "]]" Then
          If bHeader Then
            $sRes = $sRes & "</th></tr>\n"
            bHeader = False
          Else
            $sRes = $sRes & "</td></tr>\n"
          Endif
          $sRes = $sRes & "</table>\n"
          Dec iInTable
          Continue
        Else If sStr = "[]" Then
          bHeader = False
          Continue
        Else If sStr = "--" Then
          $sRes = $sRes & "<hr>\n"
          Continue
        Else If sStr = "==" Then
          $bVerbatim = True
          $sRes = $sRes & "<pre class=\"code\">"
          Continue
          '       ELSE IF sStr = "[" THEN
          '         IF bHeader THEN
          '           $sRes = $sRes & "<tr><th>\n"
          '         ELSE
          '           $sRes = $sRes & "<tr><td>\n"
          '         ENDIF
          '         CONTINUE
          '       ELSE IF sStr = "]" THEN
          '         IF bHeader THEN
          '           $sRes = $sRes & "</th></tr>\n"
          '           bHeader = FALSE
          '         ELSE
          '           $sRes = $sRes & "</td></tr>\n"
          '         ENDIF
          '         CONTINUE
        Else If sStr = "][" Then
          $bWhite = Not $bWhite
          If bHeader Then
            If Right($sRes, 9) = "<tr><th>\n" Then
              If $bWhite Then
                $sRes = Left$($sRes, -9) & "<tr class=\"dark\"><td valign=\"top\">\n"
              Else
                $sRes = Left$($sRes, -9) & "<tr><td valign=\"top\">\n"
              Endif
            Else
              If $bWhite Then
                $sRes = $sRes & "</th></tr>\n<tr class=\"dark\"><td valign=\"top\">\n"
              Else
                $sRes = $sRes & "</th></tr>\n<tr><td valign=\"top\">\n"
              Endif
            Endif
            bHeader = False
          Else
            If $bWhite Then
              $sRes = $sRes & "</td></tr>\n<tr class=\"dark\"><td valign=\"top\">\n"
            Else
              $sRes = $sRes & "</td></tr>\n<tr><td valign=\"top\">\n"
            Endif
          Endif
          Continue
        Else If sStr = "-" Then
          If bHeader Then
            $sRes = $sRes & "</th><th>\n"
          Else
            $sRes = $sRes & "</td><td valign=\"top\">\n"
          Endif
          Continue
          'ELSE IF sStr = "_" THEN
          '  $sRes = $sRes & "<br><br>"
          '  CONTINUE
        Endif

      Endif
    Endif

    For iPos = 1 To Len(sStr)

      sCar = Mid$(sStr, iPos, 1)

      If sCar = "\\" Then
        Inc iPos
        sCar = Mid$(sStr, iPos, 1)
        If sCar = "<" Then
          sCar = "&lt;"
        Else If sCar = ">" Then
          sCar = "&gt;"
        Else If sCar = "&" Then
          sCar = "&amp;"
        Endif
      Else If sCar = "\"" Then
        sCar = "&quot;"
      Else If sCar = "<" Then
        iPos2 = InStr(sStr, ">", iPos)
        If iPos2 = 0 Then iPos2 = Len(sStr) + 1
        sCar = Mid$(sStr, iPos, iPos2 - iPos + 1)
        iPos = iPos2
        If sCar Like "<math*" Then
          Inc $iNoWiki
        Else If sCar = "</math>" Then
          Dec $iNoWiki
        Endif
      Else If $iNoWiki Then

      Else If InStr("*_/=", sCar) > 0 Then

        If iPos > 1 Then
          sPrev = Mid$(sStr, iPos - 1, 1)
        Else
          sPrev = ""
        Endif

        If iPos < Len(sStr) Then
          sNext = Mid$(sStr, iPos + 1, 1)
        Else
          sNext = ""
        Endif

        If InStr(LETTER_DIGIT, sPrev) And If InStr(LETTER_DIGIT, sNext) Then Goto NEXT_CAR
        If Asc(sPrev) <= 32 And If Asc(sNext) <= 32 Then Goto NEXT_CAR

        ' bBegin = False
        ' bEnd = False
        '
        ' If Asc(sPrev) <= 32 Or If InStr("('\">", sPrev) Then bBegin = True
        ' If Asc(sNext) <= 32 Or If InStr(".;:,)!?'\"<", sNext) Then bEnd = True
        '
        ' If Not bEnd And If Not bBegin
        '   If InStr("*/_=", sPrev) Then bBegin = True
        '   If InStr("*/_=", sNext) Then bEnd = True
        ' Endif
        '
        ' If bBegin And bEnd And If Asc(sPrev) <= 32 And If Asc(sNext) <= 32 Then Goto NEXT_CAR

        bBegin = Asc(sNext) > 32
        bEnd = Asc(sPrev) > 32

        If sCar = "*" Then
          If Not bBold And If bBegin Then
            bBold = True
            sCar = "<b>"
          Else If bBold And If bEnd Then
            bBold = False
            sCar = "</b>"
          Endif
        Else If sCar = "/" Then
          If Not bItalic And If bBegin Then
            bItalic = True
            sCar = "<i>"
          Else If bItalic And If bEnd Then
            bItalic = False
            sCar = "</i>"
          Endif
        Else If sCar = "_" Then
          If iPos = Len(sStr) And If Not bUnderline Then
            sCar = "<br/>"
          Else If Not bUnderLine And If bBegin Then
            bUnderline = True
            sCar = "<u>"
          Else If bUnderLine And If bEnd Then
            bUnderline = False
            sCar = "</u>"
          Endif
        Else If sCar = "=" Then
          If Not bTT And If bBegin Then
            bTT = True
            sCar = "<tt>"
          Else If bTT And If bEnd Then
            bTT = False
            sCar = "</tt>"
          Endif
        Endif

      Else If sCar = "[" Then

        If Mid$(sStr, iPos + 1, 1) <> " " Then

          sLink = ""
          sLinkTitle = ""
          bLinkTitle = False
          iPos2 = iPos + 1

          While iPos2 <= Len(sStr)
            sCar = Mid$(sStr, iPos2, 1)
            If sCar = "]" Then Break
            If sCar = "\\" Then
              Inc iPos2
              sCar = Mid$(sStr, iPos2, 1)
            Endif
            sLink &= sCar
            Inc iPos2
          Wend

          iPos3 = InStr(sLink, "|")
          If iPos3 Then
            sLinkTitle = Mid$(sLink, iPos3 + 1)
            sLink = Left$(sLink, iPos3 - 1)
          Endif

          sCar = "["

          If iPos2 <= Len(sStr) And If Len(Trim(sLink)) Then
            sCar = GetLink(Trim(sLink), Trim(sLinkTitle))
            iPos = iPos2
          Endif

        Endif

      Else If sCar = "%" Then
        If Mid$(sStr, iPos + 1, 1) <> " " Then
          iPos2 = InStr(sStr, "%", iPos + 1)
          If iPos2 Then
            sLink = Mid$(sStr, iPos + 1, iPos2 - iPos - 1)
            sCar = GetImage(sLink)
            iPos = iPos2
          Endif
        Endif
        'ELSE IF Asc(sCar) > 127 THEN
        'sCar = "&#" & Asc(sCar) & ";"
        
      Else If sCar = "&" Then
        If Not IsLetter(Mid$(sStr, iPos + 1, 1)) Then
          sCar = "&amp;"
        Endif
      Endif

    NEXT_CAR:

      $sRes &= sCar

    Next
    
    If bList Then $sRes &= "</li>"

    If sTitle Then
      If bUseThisTitleForIndex Then
        While iTitleLevel > iLastTitleLevel
          sTitleIndex &= "<ul>\n"
          Inc iLastTitleLevel
        Wend
        While iTitleLevel < iLastTitleLevel
          sTitleIndex &= "</ul>\n"
          Dec iLastTitleLevel
        Wend
        sTitleIndex &= "<li><a href=\"#t" & iTitleIndex & "\">" & Mid$($sRes, iTitleIndexStart + 1, Len($sRes) - iTitleIndexStart) & "</a></li>\n"
      Endif
      $sRes &= sTitle
    Endif
    $sRes &= "\n"

  Next

BREAK_ALL:

  While $aSection.Count
    LeaveSection()
  Wend

  If bTitleIndex Then
    sTitleIndex = "<div class=\"index-border\"><div class=\"index\"><div align=\"center\"><b>" & ("Contents") & "</b></div>\n" & sTitleIndex & "</div></div>"
    $sRes = Replace($sRes, sTitleIndexStamp, sTitleIndex)
  Endif

  While Right$($sRes) = "\n"
    $sRes = Left$($sRes, -1)
  Wend

  If Not $sRes And If $cGotSpecial.Exist("only") Then
    Return Encode("{warning\n" & Subst(("This documentation page does not exist in version &1."), $sVersion) & "\n}\n")
  Endif

  Return $sRes

End

Private Function DecodeURL(sUrl As String) As String

  Dim sRes As String
  Dim iPos As Integer
  Dim sCar As String

  For iPos = 1 To Len(sUrl)

    sCar = Mid$(sUrl, iPos, 1)

    If sCar = "+" Then
      sCar = " "
    Else If sCar = "%" Then
      sCar = Chr$(Val("&H" & Mid$(sUrl, iPos + 1, 2)))
      iPos = iPos + 2
    Endif

    sRes = sRes & sCar

  Next

  sRes = Replace(sRes, "\r", "")

  Return sRes

End

Private Sub EncodeLink(sLink As String) As String
  
  Return Replace$(sLink, "&", "&amp;")
  
End


Private Sub EncodeURL(URL As String) As String

  Dim iInd As Integer
  Dim sRes As String
  Dim sCar As String

  For iInd = 1 To Len(URL)
    sCar = Mid$(URL, iInd, 1)
    If sCar = " " Then
      sCar = "+"
    Else If IsLetter(sCar) Or If IsDigit(sCar) Or If InStr("*-._", sCar) Then
    Else
      sCar = "%" & Hex$(Asc(sCar), 2)
    Endif
    sRes &= sCar
  Next

  Return sRes

End

Private Function GetForm() As Collection

  Dim sLine As String
  Dim iPos As Integer
  Dim sVal As String
  Dim sName As String
  Dim cForm As New Collection
  Dim sForm As String

  Read #File.In, sForm, Val(Application.Env["CONTENT_LENGTH"])

  For Each sLine In Split(sForm, "&")

    iPos = InStr(sLine, "=")
    If iPos = 0 Then Continue
    sVal = DecodeURL(Mid$(sLine, iPos + 1))
    sName = Left$(sLine, iPos - 1)
    cForm[sName] = sVal

  Next

  Return cForm

End

Private Sub PrintTitle(sTitle As String)

  Dim iPos As Integer

  If sTitle Then
    If $hSym Then
      If Not $hSym.IsHidden() Then Print $hClass.Name; ".";
    Endif
    iPos = RInStr(sTitle, "#")
    If iPos > 1 Then sTitle = Left(sTitle, iPos - 1)
    Print EncodeHTML(sTitle)
    If $hClass Then
      Print " ("; $hComp.Key; ")";
    Endif
  Else
    Print $sPath
  Endif

End

Private Sub MakeTitle(sTitle As String)

  Print "<title>"
  Print ("Gambas Documentation"); " - ";
  PrintTitle(sTitle)
  Print "</title>"

End

Private Sub PrintTab(sText As String, bOn As Boolean, sClass As String, sPath As String, Optional sLink As String)

  If bOn Then
    Print "<td class=\"tabon\" width=\"1\"><font size=\"-1\"><b>"; sText; "</b></font></td>"
  Else
    Print "<td class=\"taboff\" width=\"1\"><div style=\"height: 4px;\"></div>"
    Print "<table cellspacing=\"0\"><tr><td class=\""; sClass; "\">";
    If sPath Then
      Print "<font size=\"-1\">"; GetLink(sPath, sText, True); "</font>"
    Else
      Print "<font size=\"-1\"><a href=\""; EncodeLink(sLink); "\">"; sText; "</a></font>"
    Endif
    Print "</td></tr></table>"
    Print "</td>"
  Endif

End

Private Sub PrintPath()

  Dim sElt As String
  Dim sPath As String
  Dim aElt As String[]

  If $bView Then Return

  'If Not $sPath Or If $sPath = "/" Then Return

  If System.RightToLeft Then
    Print "<div class=\"path\" dir=\"rtl\">";
  Else
    Print "<div class=\"path\">";
  Endif

  sPath = AddParam($sLangSuff, $sShowSuff)
  sPath = AddParam(sPath, "v" & Left($sVersion))

  Print "<a class=\"flag\" href=\"/help" & EncodeLink(sPath) & "\">";
  Print "<img class=\"flag\" align=\"top\" src=\"/img/lang/"; $sLang; ".png\" alt=\"" & ("Home") & "\" />";
  'PRINT GetImage("lang/" & $sLang, "class=\"flag\" alt=\"" & ("Home") & "\"");
  Print "</a>&nbsp;";

  If $sPath And If $sPath <> "/" Then

    Print ARROW; "&nbsp;";

    sPath = "/"
    aElt = Split(File.Dir($sPath), "/")
    For Each sElt In aElt
      If Not sElt Then Continue
      sPath &/= sElt
      If $bHelp Then
        Print GetLink(sPath, sElt);
      Else
        Print sElt;
      Endif
      Print "&nbsp;"; ARROW; "&nbsp;";
    Next
    Print File.Name($sPath); "&nbsp;";

  Endif

  Print "</div>";

End

Private Sub PrintVersion()

  Dim sUri As String

  If $bWget Then Return

  sUri = RemoveParam($sUri, "v2")
  sUri = RemoveParam(sUri, "v3")
  sUri = AddParam(sUri, "v")

  Print "<div class=\"path\">"
  Print "<select id=\"version\" onchange=\"window.location.href='/help" &/ EncodeLink(sUri); "' + this.value.substr(0,1);\">"
  Print "<option"; If($sVersion = "2.0", " selected=\"selected\"", ""); ">2.0</option>"
  Print "<option"; If($sVersion = "3.0", " selected=\"selected\"", ""); ">3.0</option>"
  Print "</select></div>";
  Return

  ' 'If IsComponentPath($sPath) Then
  '   Print "<div class=\"path\">&nbsp;&nbsp;";
  '   If $sVersion = "3.0" Then
  '     sElt = Replace($sUri, "v3", "")
  '     If Right(sElt) = "&" Or Right(sElt) = "?" Then sElt = Left$(sElt, -1)
  '     Print "<a href=\"/help" &/ sElt; "\">[2.0]</a>";
  '   Else
  '     Print "<a href=\"/help" &/ AddParam($sUri, "v3"); "\">[3.0]</a>";
  '   Endif
  '   Print "</div>";
  'Endif

End

Private Sub PrintDivLang()

  If $sVersion Then
    Print "<div class=\"lang"; Replace$($sVersion, ".", ""); "\">";
  Else
    Print "<div class=\"lang\">";
  Endif

End

Private Sub MakeHeader(Optional sTitle As String, Optional sWarn As String)

  Dim iPos As Integer
  Dim sLang As String
  Dim rPage As Result
  Dim sSuff As String
  Dim sUri As String

  $sTitle = sTitle

  $sTemp = Temp$()
  $hTemp = Open $sTemp For Create
  Output To #$hTemp

  Print "<!DOCTYPE html>"
  
  Print "<html lang=\""; $sLang; "\"";
  If System.RightToLeft Then
    Print " dir=\"rtl\">"
  Else
    Print " dir=\"ltr\">"
  Endif
  
  ' Print "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">"
  ' 'Print "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"xhtml1-transitional.dtd\">"
  ' 'Print "<?xml version=\"1.0\"?>"
  ' 'Print "<?xml-stylesheet type=\"text/xsl\" href=\"mathml.xsl\"?>"
  ' Print "<html xmlns=\"http://www.w3.org/1999/xhtml\""; ' xmlns:pref=\"http://www.w3.org/2002/Math/preference\" pref:renderer=\"mathplayer-dl\"";
  ' Print " xml:lang=\"" & $sLang & "\" lang=\"" & $sLang & "\"";
  ' If System.RightToLeft Then
  '   Print " dir=\"rtl\">"
  ' Else
  '   Print " dir=\"ltr\">"
  ' Endif
  ' Print "<head>"

  Print "<head>"
  Print "  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />"
  Print "  <meta language=\""; $sLang; "\" />"
  Print "  <link rel=\"stylesheet\" href=\"/style.css\" />"
  If $bNoTitle Then
    Print "<style>"
    Print "<!--"
    Print "  .title { display: none; }"
    Print "-->"
    Print "</style>"
  Else If $bOnlineHelp Then
    Print "<style>"
    Print "<!--"
    Print "  .title { font-size: large; letter-spacing: 1px; }"
    Print "-->"
    Print "</style>"
  Else If $bView Then
    Print "<style>"
    Print "<!--"
    Print ".title {"
    Print "  padding: 0px;"
    Print "  font-weight: bold;"
    Print "  font-size: xx-large;"
    Print "  color: #3398c3;"
    Print "  text-shadow: 2px 2px 2px #FF7F00;"
    Print "  letter-spacing: 2px;"
    Print "  margin-bottom: 16px;"
    Print "  border: none;"
    Print "}"
    Print "-->"
    Print "</style>"
  Endif
  MakeTitle(sTitle)
  Print "</head>"

  If $bOnlineHelp Then
    Print "<body class=\"none\">"
  Else If $bView Then
    Print "<body class=\"view\">"
  Else
    Print "<body>"
  Endif

  'IF System.RightToLeft THEN
  '  PRINT "<body dir=\"rtl\">"
  'ELSE
  '  PRINT "<body>"
  'ENDIF

  If $sError Then Print "<pre>"; EncodeHTML($sError); "</pre><hr>"

  $bHeader = True

  'PRINT "<p>&nbsp;<p>&nbsp;<p>"
  'IF NOT $bWget THEN PRINT "<div style=\"height: 16px;\"></div>"

  If Not $bShow Then

    'Print "<table class=\"none\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">"

    If Not $bWget Then

      'Print "<tr valign=\"top\" height=\"24\">"

      'If System.RightToLeft Then
      '  Print "<p align=\"right\">"
      'Else
      '  Print "<p align=\"left\">"
      'Endif

      PrintDivLang()

      'Print "<div style=\"padding:8px 8px 8px 0px;\">";
      Print "<table width=\"100%\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tr><td width=\"16\">";
      PrintVersion
      Print "</td><td nowrap=\"nowrap\">&nbsp;&nbsp;";
      PrintPath
      Print "</td><td align=\"right\">";

      For Each sLang In $aLang
        If sLang = $sLang Then Continue
        Print "&nbsp;";
        If $bAdmin Then
          Print "<a class=\"flag\" href=\"/admin" &/ EncodeLink($sPath);
        Else
          Print "<a class=\"flag\" href=\"/help" &/ EncodeLink($sPath);
        Endif
        Print "?"; sLang;
        'If IsComponentPath($sPath) And If $sVersion = "3.0" Then Print "&amp;v3";
        If $sVersion = "3.0" Then Print "&amp;v3";
        Print "\">"; GetImage("lang/" & sLang, "class=\"flag\" alt=\"" & sLang & "\"", "top");
        Print "</a>";
      Next

      'Print "&nbsp;&nbsp;";

      Print "</td></tr></table>";

      'Print "<div class=\"bottom-corner\">";
      'Print "<img src=\"/img/bottom-left-corner.png\" class=\"bottom-left-corner\">"
      'Print "<img src=\"/img/bottom-right-corner.png\" class=\"bottom-right-corner\">"
      'Print "</div>";

      Print "</div>";

    Else

      PrintPath

    Endif

    If $bHelp Then Print "<a href=\"/help/license\" id=\"license-logo\"><img src=\"/img/license.png\" border=\"0\" /></a>"

    'Print "<div style=\"height:2px;\"></div>"
    'Print "<div class=\"pathlimit\">&nbsp;</div>";

    'If System.RightToLeft Then
    '  'Print "<tr><td align=\"right\">"
    '  Print "<p align=\"right\">"
    'Else
    '  'Print "<tr><td align=\"left\">"
    '  Print "<p align=\"left\">"
    'Endif
    'PRINT "<font size=\"-1\">"

    If $bHelp Then

      rPage = DB.Exec("SELECT sPath FROM page WHERE sPath < &1 AND sLang = &2 ORDER BY sPath DESC LIMIT 2", $sPath, $sLang)
      If rPage.Available And If IsCommentPath(rPage!sPath) Then rPage.MoveNext
      If rPage.Available Then
        'Print "<a href=\"/help" &/ rPage!sPath & $sLangSuff & "\">" & ("Previous") & "</a>";
        Print GetLink(rPage!sPath, ("Previous"), True);
      Else
        Print ("Previous");
      Endif
      Print "&nbsp;&nbsp;";

      rPage = DB.Exec("SELECT sPath FROM page WHERE sPath > &1 AND sLang = &2 ORDER BY sPath LIMIT 2", $sPath, $sLang)
      If rPage.Available And If IsCommentPath(rPage!sPath) Then rPage.MoveNext
      If rPage.Available Then
        'Print "<a href=\"/help" &/ rPage!sPath & $sLangSuff & "\">" & ("Next") & "</a>";
        Print GetLink(rPage!sPath, ("Next"), True);
      Else
        Print ("Next");
      Endif
      Print "&nbsp;&nbsp;";

    Endif

    sSuff = $sLangSuff
    'If IsComponentPath($sPath) Then
    If $sVersion = "3.0" Then sSuff = AddParam(sSuff, "v3")
    'Endif

    If Not $bWget Then

      If True Then '$sUser

        If $bAdmin Or $bFind Then
        Else If $bEdit Or $bRename Then
          'If $bNew Then
          '  Print "<a href=\"/help" &/ GetUncommentPath($sPath) & $sLangSuff & "\">";
          'Else
          '  Print "<a href=\"/help" &/ $sPath & $sLangSuff & "\">";
          'Endif
          'Print ("Cancel");
          'Print "</a>&nbsp;&nbsp;";
          Print GetLink($sPath, ("Cancel")); "&nbsp;&nbsp;";
        Else
          Print "<a href=\"/edit" &/ EncodeLink($sPath & sSuff) & "\">";
          If sTitle Then
            Print ("Edit");
          Else
            Print ("Create");
          Endif
          Print "</a>&nbsp;&nbsp;";
          If sTitle And $sPath <> "/" And Not $bComment Then
            Print "<a href=\"/rename" &/ EncodeLink($sPath & sSuff) & "\">";
            Print ("Rename");
            Print "</a>&nbsp;&nbsp;";
          Endif
          If sTitle And Not $bImage Then
            Print "<a href=\"/edit" &/ EncodeLink($sPath & AddParam(sSuff, "undo")) & "\">";
            Print ("Undo");
            Print "</a>&nbsp;&nbsp;";
          Endif
          If Not ($bComment Or $bNew) Then
            Print "<a href=\"/help" &/ EncodeLink($sPath & AddParam(sSuff, "refresh")) & "\">";
            Print ("Refresh");
            Print "</a>&nbsp;&nbsp;";
          Endif
        Endif

        If $bHelp Then
          Print "<a href=\"/help/search" & EncodeLink($sLangSuff) & "\">"; ("Search"); "</a>&nbsp;&nbsp;";
          Print "<a href=\"/admin" & EncodeLink($sLangSuff) & "\">"; ("Administration"); "</a>&nbsp;&nbsp;";
        Endif

      Else

        If Not ($bComment Or $bNew) Then
          Print "<a href=\"/help" &/ EncodeLink($sPath & AddParam(sSuff, "refresh")) & "\">";
          Print ("Refresh");
          Print "</a>&nbsp;&nbsp;";
        Endif

      Endif

      'IF $sUser THEN
      '  PRINT $sUser
      'ELSE
      '  PRINT "<font size=\"-1\"><a href=\"/login\">"; ("Login"); "</a></font>"
      'ENDIF

    Endif

    'Print "</tr></table>"

  Else If Not $bView Then

    PrintDivLang()
    PrintPath
    PrintVersion
    Print "</div>";

  Endif

  Print

  If Not $bShow And ($bHelp Or $bHistory) Then

    Print "<table class=\"tabheader frame\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\"><tr>"

    PrintTab(("Documentation"), Not ($bComment Or $bHistory), "taboffl", GetUncommentPath($sPath))
    If (Not $bNew Or $bComment) And Not $bImage Then
      If GetTitle(GetUncommentPath($sPath)) Then
        'PrintTab(("Comments"), $bComment, If($bHistory, "taboffl", "taboffr"), GetCommentPath($sPath))
        PrintTab(("History"), $bHistory, "taboffr", "", "/hist" &/ GetUncommentPath($sPath) & $sLangSuff)
      Endif
    Endif

    Print "<td class=\"tabnone\">&nbsp;</td>"
    Print "</tr></table>"

    Print "<div class=\"tab frame\">"

  Else

    If $bShow Then
      Print "<div class=\"frame\">"
    Else
      Print "<div class=\"notab frame\">"
    Endif

  Endif

  If sWarn And If Not $bOnlineHelp Then
    Print "<div class=\"alert\">"
    Print "<b>"; ("Warning!"); "&nbsp;"; sWarn; "</b>"
    If Not $bWget Then
      Print "&nbsp;<a href=\"/help" &/ EncodeLink(AddParam(RemoveParam($sUri, $sLang), "en")) & "\"";
      If Not $bOnlineHelp Then Print " target=\"_blank\"";
      Print ">" & ("See english version") & "</a>&nbsp;"
    Endif
    Print "</div>"
  Endif

  If Not $bEdit Then
    If $bComment Then
      Print "<h3>"; Subst(("Comments on &1"), GetTitle(GetUncommentPath($sPath))); "<h3>"
    Else
      Print "<div class=\"title\">"
      'PrintTitle(String.UCase(String.Left(sTitle)) & String.Mid(sTitle, 2))
      PrintTitle(sTitle)
      Print "</div>"
    Endif
  Endif

End

Private Sub MakeFooter(Optional dDate As Date)

  Dim sEnv As String
  Dim sData As String

  Print "</div>"

  '   IF NOT $bWGet THEN
  ' '     PRINT "<br><table width=\"100%\" cellspacing=\"0\" cellpadding=\"0\">"
  ' '     PRINT "<tr><td>";
  ' '     PRINT "<font size=\"-2\">"; Subst(("Documentation generated in &1 s. by a CGI script written in <b>Gambas</b> :-)"), Format$(Timer - $eTime, "0.###")); "</font>"
  ' '     PRINT "</td>";
  ' '     IF dDate THEN
  ' '       PRINT "<td align=\"right\"><font size=\"-2\">";
  ' '       PRINT ("Last modified:");; dDate;
  ' '       PRINT "</font></td>";
  ' '     ENDIF
  ' '     PRINT "</tr>"
  ' '     PRINT "</table>"
  '
  ' '     IF Right(Application.Env["REQUEST_URI"]) = "/" THEN
  ' '
  ' '       PRINT "<p><table width=\"100%\" cellspacing=\"0\" cellpadding=\"2\" border=\"1\">"
  ' '       FOR EACH sEnv IN Application.Env
  ' '         PRINT "<tr><td>"; EncodeHTML(sEnv); "</td><td>"; EncodeHTML(Application.Env[sEnv]); "&nbsp;</td></tr>"
  ' '       NEXT
  ' '       PRINT "</table>"
  ' '
  ' '     ENDIF
  '   ELSE
  '     PRINT "<hr>"
  '   ENDIF
  Print "</body>"
  Print "</html>"
  Print

  Close #$hTemp
  Output To Default
  sData = File.Load($sTemp)

  Print "Content-type: text/html;charset=UTF-8"
  Print "Content-language: "; Replace(System.Language, "_", "-")
  Print "Content-length: "; Len(sData)
  If $bOnlineHelp Then
    Print "Cache-Control: max-age=604800" ' one week
    If dDate Then
      Print "Last-Modified: "; FormatDate(dDate)
    Endif
  Endif

  Print
  Print sData;

End

Private Function GetRealPath(sPath As String) As String

  Dim rPage As Result
  Dim iInd As Integer

  For iInd = 1 To 10

    rPage = DB.Find("page", "sPath = &1 AND sLang = &2", sPath, DEFAULT_LANG)

    If rPage.Available And If Left$(rPage!sTitle) = "@" Then
      sPath = GetAbsolutePath(sPath, Mid$(rPage!sTitle, 2))
    Else
      Break
    Endif

  Next

  Return sPath

End

Private Function FindPage(sPath As String, Optional bNoLink As Boolean) As Result

  Dim rPage As Result

  If Not bNoLink Then sPath = GetRealPath(sPath)

  rPage = DB.Find("page", "sPath = &1 AND sLang = &2", sPath, $sLang)
  If Not rPage.Available Then
    rPage = DB.Find("page", "sPath = &1 AND sLang = &2", sPath, DEFAULT_LANG)
  Endif

  Return rPage

End

Private Function GetTitle(sPath As String, Optional bVersion As Boolean) As String

  Dim rPage As Result
  Dim sNewPath As String
  Dim sTitle As String
  Dim iPos As Integer
  Dim sVer As String
  Dim aVer As String[]

  rPage = FindPage(sPath)
  If rPage.Available Then
    'IF sPath LIKE "/comp/*/*/*" THEN
    '  RETURN GetTitle(File.Dir(sPath)) & "." & rPage!sTitle
    'ELSE
    sTitle = rPage!sTitle
    iPos = RInStr(sTitle, "#")
    If iPos > 1 Then
      sVer = Mid$(sTitle, iPos + 1)
      sTitle = Left(sTitle, iPos - 1)
      If bVersion Then
        aVer = Split(sVer, ",")
        If aVer.Find($sVersion) < 0 And If aVer.Find(Left($sVersion)) < 0 Then
          sTitle = ""
        Endif
      Endif
    Endif
    Return sTitle
  Else
    sNewPath = SubstitutePath(sPath)
    If sNewPath <> sPath Then Return GetTitle(sNewPath)
    'Print "<pre>GetTitle: " & $sPath & " " & sPath & " ?</pre>"
    'ENDIF
  Endif

End

Private Sub PrintExample(sExample As String)

  If Not sExample Then Return

  If Not $bExample Then
    $bExample = True
    Print "<h3>" & ("Example") & "</h3>"
  Endif

  Print "<pre class=\"example\">"; RTrim(sExample); "</pre><p/>"

End

' PRIVATE SUB PrintSection(sCode AS String)
'
'   sCode = Encode(sCode)
'   IF NOT sCode THEN RETURN
'
'   PRINT sCode
'   PRINT "<p>"
'
' END

Private Sub DisplayImage()

  Dim rPage As Result
  Dim rPageDef As Result
  Dim bWarn As Boolean
  Dim sWarn As String
  Dim sPath As String
  Dim sPage As String

  sPath = GetRealPath($sPath)

  rPage = DB.Find("page", "sPath = &1 AND sLang = &2", sPath, $sLang)
  rPageDef = DB.Find("page", "sPath = &1 AND sLang = &2", sPath, DEFAULT_LANG)

  If rPageDef.Available Then
    If Not rPage.Available Then
      '       IF sPath = $sPath THEN
      '         sWarn = ("This page is not translated.")
      '         $bNew = TRUE
      '       ENDIF
      rPage = rPageDef
    Else
      '       IF rPageDef!dDate > rPage!dDate THEN
      '         IF sPath = $sPath THEN sWarn = ("This page is not up to date.")
      '       ENDIF
    Endif
  Endif

  'DEBUG DB.Tables["page"].Fields["sdata"].Type
  'PRINT #File.Err, rPage.Fields["sData"].Type; "/"; Len(rPage["sData"].Data)
  'DEBUG rPage!sData.Length

  Print rPage!sHtml ' Content-Type
  Print "Content-Length: "; rPage["sData"].Length
  Print "Last-Modified: "; FormatDate(rPage!dDate)
  Print
  Print rPage!sData.Data;

End

Private Function SubstitutePath(sPath As String) As String

  If $bOnlineHelp Then

    If sPath Like "/comp/gb.qt4*" Then
      If sPath = $sPath Then AddRedirect("/comp/gb.qt", "/comp/gb.qt4")
      sPath = Replace(sPath, "/comp/gb.qt4", "/comp/gb.qt")
    Else If sPath Like "/comp/gb.gtk*" Then
      If sPath = $sPath Then AddRedirect("/comp/gb.qt4", "/comp/gb.gtk")
      sPath = Replace(sPath, "/comp/gb.gtk", "/comp/gb.qt4")
    Else If sPath Like "/comp/gb.gui*" Then
      If sPath = $sPath Then AddRedirect("/comp/gb.qt4", "/comp/gb.gui")
      sPath = Replace(sPath, "/comp/gb.gui", "/comp/gb.qt4")
    Endif

  Endif

  Return sPath

End

Private Sub DisplayPage()

  Dim rPage As Result
  Dim rPageDef As Result
  Dim bWarn As Boolean
  Dim sWarn As String
  Dim sPath As String
  Dim sPage As String
  Dim bRefresh As Boolean

  sPath = GetRealPath($sPath)

  bRefresh = $bRefresh

  If Not $bRefresh Then
    rPage = DB.Find("page", "sPath = &1 AND sLang = &2", sPath, $sLang)
    rPageDef = DB.Find("page", "sPath = &1 AND sLang = &2", sPath, DEFAULT_LANG)
    If rPage.Available And If rPage!bRefresh Then
      bRefresh = True
    Endif
  Endif

  If bRefresh Then
    rPage = DB.Edit("page", "sPath = &1 AND sLang = &2", sPath, $sLang)
    rPageDef = DB.Edit("page", "sPath = &1 AND sLang = &2", sPath, DEFAULT_LANG)
  Endif

  If rPageDef.Available Then
    If Not rPage.Available Then
      If sPath = $sPath Then
        sWarn = ("This page is not translated.")
        $bNew = True
      Endif
      rPage = rPageDef
      bRefresh = False
    Else
      If rPageDef!dDate > rPage!dDate Then
        If sPath = $sPath Then sWarn = ("This page is not up to date.")
      Endif
    Endif
  Endif

  If Not rPage.Available Then

    'If HandleUnavailablePage($sPath) Then
    sPath = SubstitutePath($sPath)
    If sPath <> $sPath Then
      $sPath = sPath
      $bNoCache = True
      DisplayPage
      Return
    Endif

    MakeHeader()
    If $bComment Then
      Print "<h3>" & ("There is no comment on this page yet.") & "</h3>"
    Else
      Print "<h3>" & ("This documentation page is not available.") & "</h3>"
    Endif
    MakeFooter
    Return
  Endif

  MakeHeader(rPage!sTitle, sWarn)

  If $bImage Then

    Print "<img border=\"1\" src=\"/image" &/ $sUri; "\" />"
  
  Else
    
    Print MakePageWithoutHeader(rPage)
    
  Endif

  ' Else If $bShow Then
  ' 
  '   Print MakePageWithoutHeader(rPage)
  ' 
  ' Else
  ' 
  '   If bRefresh And Not $bNew Then
  '     sPage = MakePageWithoutHeader(rPage)
  '     If $cGotSpecial.Count = 0 Then
  '       rPage!sHTML = sPage
  '       rPage!bRefresh = False
  '       rPage.Update
  '     Endif
  '   Endif
  ' 
  '   If $bNoCache Or IsNull(rPage!sHTML) Then
  '     If Not sPage Then sPage = MakePageWithoutHeader(rPage)
  '     Print sPage
  '   Else
  '     Print rPage!sHTML
  '   Endif
  ' 
  ' Endif

  MakeFooter(rPage!dDate)

End

Private Function MakePageWithoutHeader(rPage As Result) As String

  Dim bExample As Boolean
  Dim bPrint As Boolean
  Dim hFile As File
  Dim sFile As String
  Dim sResult As String

  sFile = Temp$()
  Try Kill sFile
  Try hFile = Open sFile For Create
  If Error Then
    hFile = Open sFile For Create
  Endif
  Output To #hFile

  $cGotSpecial = New Collection
  $sTitle = rPage!sTitle

  bPrint = False

  If $iType = TYPE_SYMBOL And If Not $hSym Then
    Print "<div class=\"message critical\">"; Subst(("This symbol does not exist in version &1."), $sVersion); "</div>"
    $cGotSpecial["syntax"] = True
  Else If $iType = TYPE_CLASS And If Not $hClass Then
    Print "<div class=\"message critical\">"; Subst(("This class does not exist in version &1."), $sVersion); "</div>"
    $cGotSpecial["symbols"] = True
  Else If $iType = TYPE_COMPONENT And If Not $hComp Then
    Print "<div class=\"message critical\">"; Subst(("This component does not exist in version &1."), $sVersion); "</div>"
    $cGotSpecial["classes"] = True
  Else

    sResult = Encode(rPage!sDesc)

    If $iType = TYPE_SYMBOL And If Not $cGotSpecial.Exist("syntax") Then
      Print Encode("@syntax")
      Print "<p/>"
    Endif
    
    Print sResult

    If $iType = TYPE_COMPONENT And If Not $cGotSpecial.Exist("classes") Then
      Print "<p/>"
      Print Encode("@classes")
    Else If $iType = TYPE_CLASS And If Not $cGotSpecial.Exist("symbols") Then
      Print "<p/>"
      Print Encode("@symbols")
    Endif

  Endif

  Output To Default
  Close #hFile

  sResult = File.Load(sFile)
  Kill sFile
  Return sResult

End

Private Function QuoteSpecial(sName As String) As String

  sName = Replace(sName, "[", "\\[")
  sName = Replace(sName, "_", "\\_")
  Return sName

End

Private Function GetOld(sPath As String, Optional bSyntax As Boolean) As String

  Dim sData As String
  Dim iPos As Integer
  Dim iPos2 As Integer
  Dim sRes As String
  Dim sCar As String

  sData = File.Load(sPath)
  iPos = InStr(sData, "</h1>")
  If iPos Then sData = Mid$(sData, iPos + 5)

  If bSyntax Then
    iPos = InStr(sData, "</table>")
    If iPos Then sData = Mid$(sData, iPos + 8)
  Endif

  iPos = 1
  Do
    iPos = InStr(sData, "<", iPos)
    If iPos = 0 Then Break
    If InStr(" =>", Mid$(sData, iPos + 1, 1)) Then
      Inc iPos
      Continue
    Endif
    iPos2 = InStr(sData, ">", iPos + 1)
    If iPos2 = 0 Then Break
    sData = Left$(sData, iPos - 1) & Mid$(sData, iPos2 + 1)
  Loop

  sData = Trim(sData)
  If LCase(sData) = "not documented" Then sData = ""

  Return sData

End

Private Function GetOldComponentName(sComp As String) As String

  Dim sRes As String
  Dim iPos As Integer
  Dim sCar As String

  Select Case sComp

    Case "gb.xml"
      Return "GbXmlLibxml"

    Case "gb.xml.rpc"
      Return "GbXmlLibxmlRpc"

    Case "gb.xml.xslt"
      Return "GbXmlLibxmlXslt"

    Case "gb.sdl.sound"
      Return "GbSdl"

    Case "gb.settings"
      Return "Gb"

    Default

      sComp = "." & sComp

      For iPos = 1 To Len(sComp)
        sCar = Mid$(sComp, iPos, 1)
        If sCar = "." Then
          Inc iPos
          sCar = UCase(Mid$(sComp, iPos, 1))
        Endif
        sRes = sRes & sCar
      Next

      Return sRes

  End Select

End

Private Function GetOldName(sName As String) As String

  sName = Replace(sName, "$", "")
  sName = Replace(sName, "[", "")
  sName = Replace(sName, "]", "")
  sName = Replace(sName, "_", "")
  sName = Replace(sName, ".", "")
  Return sName

End

Private Function GetOldClassName(sName As String) As String

  sName = Replace(sName, "[]", "Array")
  sName = Replace(sName, ".", "")
  Return sName

End

Private Sub RemoveMarkup(sStr As String) As String

  Dim iInd As Integer
  Dim aWait As New String[]
  Dim sWait As String
  Dim sCar As String
  Dim sRes As String

  For iInd = 1 To Len(sStr)
    sCar = Mid$(sStr, iInd, 1)
    If sCar = sWait Then
      sWait = aWait.Pop()
      Continue
    Endif
    If sCar = "<" Then
      aWait.Push(sWait)
      sWait = ">"
      Continue
    Endif
    If sCar = Chr$(34) Then
      If sWait Then
        aWait.Push(sWait)
        sWait = Chr$(34)
        Continue
      Endif
    Endif
    If Not sWait Then sRes &= sCar
  Next

  Return sRes

End

Private Sub GetOpenGL(sName As String, sLib As String) As String

  Dim sPath As String
  
  sPath = $sRoot &/ "opengl/3" &/ sLib & LCase(sName) & ".txt"
  If Exist(sPath) Then Return File.Load(sPath)
  sPath = $sRoot &/ "opengl/2" &/ sLib & LCase(sName) & ".txt"
  If Exist(sPath) Then Return File.Load(sPath)
  
  If $hSym And If $hSym.Kind = "C" Then Return
  If Len(sName) > 3 Then Return GetOpenGL(Left(sName, -1), sLib)

End

Private Sub GetDefaultSymbolTitle(hSym As CSymbolInfo) As String

  Dim sTitle As String
  Dim sName As String
  
  sTitle = hSym.Name
  
  If Left$(hSym.Name) = "_" Then
    sName = Replace(GetVirtualClass(hSym.Class & "."), "_", ".")
    If Not sName Then 
      sName = $hSym.Class
    Endif
    Select Case LCase($hSym.Name)
      Case "_new"
        sTitle = If($sVersion = "2.0", "NEW ", "New ") & sName
      Case "_put"
        sTitle = sName & "[] = ..."
      Case "_get"
        sTitle = sName & "[]"
      Case "_call"
        sTitle = sName & "()"
      Case "_next"
        sTitle = If($sVersion = "2.0", "FOR EACH ", "For Each ") & sName
    End Select
  Endif

  If Left$(sTitle) = ":" Then sTitle = Mid$(sTitle, 2)
  
  Return sTitle

End

Private Sub EditPage()

  Dim rPage As Result
  Dim rModel As Result
  Dim sSave As String
  Dim aFile As String[]
  Dim sName As String
  Dim iPos As Integer
  Dim sDir As String
  Dim sPath As String
  Dim sKind As String
  Dim sTitle As String

  rPage = FindPage($sPath, True)
  If Not rPage.Available Then
    rPage = DB.Create("page")
    If $bComment Then
      rPage!sTitle = Subst(("Comments on &1"), GetTitle(GetUncommentPath($sPath)))
    Else

      sDir = $sRoot &/ "old" 'System.Path &/ "share/gambas2/help/"
      If Exist(sDir) Then

        Select Case $iType

          Case TYPE_COMPONENT

            If $hComp Then

              rPage!sTitle = $hComp.Key

              sPath = sDir &/ GetOldComponentName($hComp.Key) & ".html"
              If Exist(sPath) Then
                rPage!sDesc = GetOld(sPath)
              Endif

            Endif

          Case TYPE_CLASS

            If $hClass Then
              rPage!sTitle = $hClass.Name

              sPath = sDir &/ GetOldComponentName($hComp.Key) & GetOldClassName($hClass.Name) & ".html"
              If Exist(sPath) Then
                rPage!sDesc = GetOld(sPath)
              Endif
            Endif

          Case TYPE_SYMBOL

            If $hSym Then
              rPage!sTitle = GetDefaultSymbolTitle($hSym)

              sName = UCase($hSym.Kind)
              If sName = ":" Then
                sName = "E" & Mid$($hSym.Name, 2)
              Else
                sName = sName & $hSym.Name
              Endif
              sName = Replace(sName, "_", "")

              sPath = sDir &/ GetOldComponentName($hComp.Key) & GetOldClassName($hClass.Name) & sName & ".html"
              If Exist(sPath) Then
                rPage!sDesc = GetOld(sPath, True)
              Else
                rPage!sDesc = "<!--" & ("DELETE ME") & "\n" & RemoveMarkup(GetSymbolSyntax($hSym)) & "\n-->\n"
              Endif
            Endif

          Case Else

            If $sPath Like "/lang/*" Then
              sName = Mid$($sPath, 7)
              sName = UCase(Left$(sName)) & Mid$(sName, 2)
              aFile = Dir(sDir, "Lang" & sName & ".html")
              If aFile.Count = 0 Then aFile = Dir(sDir, "Lang" & UCase(sName) & ".html")
              If aFile.Count = 0 Then aFile = Dir(sDir, "Lang" & sName & "*.html")
              If aFile.Count Then
                rPage!sDesc = GetOld(sDir &/ aFile[0])
                rPage!sTitle = Mid$(File.BaseName(aFile[0]), 5)
              Endif
            Else If $sPath Like "/api/name/*" Then
              sName = LCase(Mid$($sPath, 11))
              aFile = Dir(sDir, "Api*.html")
              iPos = aFile.Find("api" & GetOldName(sName) & ".html", gb.Text)
              If iPos >= 0 Then
                rPage!sDesc = GetOld(sDir &/ aFile[iPos])
                rPage!sTitle = Mid$(File.BaseName(aFile[iPos]), 4)
              Endif
              ' Else If $sPath Like "/comp/gb.qt4/*" Then
              '   rModel = FindPage(Replace($sPath, "/gb.qt4/", "/gb.qt/"), True)
              '   rPage!sDesc = rModel!sDesc
              '   rPage!sTitle = rModel!sTitle
            Else
              sName = Mid$(File.Name($sPath), 2)
              aFile = Dir(sDir, "*.html")
              iPos = aFile.Find(GetOldName(sName) & ".html", gb.Text)
              If iPos >= 0 Then
                rPage!sDesc = GetOld(sDir &/ aFile[iPos])
                rPage!sTitle = File.BaseName(aFile[iPos])
              Endif
            Endif

        End Select

      Endif

      If $hComp Then
        If $hComp.Key = "gb.gtk" Or $hComp.Key = "gb.gui" Then
          rPage!sTitle = "@" & Replace($sPath, "/" & $hComp.Key, "/gb.qt")
          'rPage!sDesc = NULL
        Else If $hComp.Key = "gb.opengl" Then
          If $hSym Then rPage!sDesc = GetOpenGL($hSym.Name, "gl")
        Else If $hComp.Key = "gb.opengl.glu" Then
          If $hSym Then rPage!sDesc = GetOpenGL($hSym.Name, "glu")
        Else If $hComp.Key = "gb.opengl.glsl" Then
          If $hSym Then rPage!sDesc = GetOpenGL($hSym.Name, "gl")
        Endif
      Endif

    Endif

  Endif

  sTitle = rPage!sTitle

  $bNew = rPage!sLang <> $sLang
  MakeHeader(sTitle)

  sSave = "\n<input type=\"submit\" name=\"command\" accesskey=\"S\" value=\"" & ("Save") & "\"></input>" &
  "&nbsp;&nbsp;<input type=\"submit\" name=\"command\" value=\"" & ("Delete") & "\"></input>"
  If $bImage Then
    Print "<form action=\"" & "/edit" &/ $sUri & "\" method=\"post\" name=\"edit\" enctype=\"multipart/form-data\">"
    Print "<p/><input type=\"text\" name=\"sTitle\" size=\"64\" maxlength=\"64\" value=\"" & sTitle & "\"></input>&nbsp;&nbsp;" & sSave 
    Print "<p/><input type=\"file\" name=\"sData\" size=\"64\"></input>"
    Print "</form>"
  Else
    Print "<form action=\"" & "/edit" &/ $sUri & "\" method=\"post\" name=\"edit\">"
    Print "<p/><input type=\"text\" name=\"sTitle\" size=\"64\" maxlength=\"64\" value=\"" & sTitle & "\"></input>&nbsp;&nbsp;" & sSave 
    Print "<p/><textarea style=\"width:100%\" rows=\"40\" name=\"sDesc\">"; EncodeHTML(rPage!sDesc); "</textarea>"
    Print "</form>"
  Endif

  MakeFooter()

End

Private Function MakeRelative(sLink As String) As String

  Dim aPath As String[]
  Dim aLink As String[]
  Dim iInd As Integer
  Dim iMax As Integer

  aPath = Split($sPath, "/")
  aLink = Split(sLink, "/")

  iMax = Min(aPath.Max, aLink.Max)
  For iInd = 0 To iMax
    If aPath[iInd] <> aLink[iInd] Then Break
  Next

  If iInd <= iMax And (aPath.Count - iInd <= 2) Then

    sLink = String$(aPath.Count - iInd, "../")
    While iInd < aLink.Count
      sLink = sLink &/ aLink[iInd]
      Inc iInd
    Wend

  Endif

  Return sLink

End

Private Function AutoLink(sStr As String) As String

  Dim cCache As New Collection
  Dim sRes As String
  Dim iInd As Integer
  Dim rPage As Result
  Dim rComp As Result
  Dim sCar As String
  Dim iWord As Integer
  Dim sWait As String
  Dim sWord As String
  Dim sOrig As String
  Dim nSpace As Integer
  Dim aWord As String[]
  Dim nWord As Integer
  Dim iPos As Integer

  'DIM bSkip AS Boolean
  Dim iLevelBrace As Integer
  Dim sClass As String
  Dim sSymbol As String
  Dim sTitle As String
  Dim sLink As String

  For Each sStr In Split(sStr, "\n")

    sStr = RTrim(sStr)

    If sWait Then
      If sStr = sWait Then
        If sWait = "}" Then
          Dec iLevelBrace
          If iLevelBrace = 0 Then
            sWait = ""
          Endif
        Else
          sWait = ""
        Endif
      Endif
      sRes &= sStr & "\n"
      Continue
    Else If sStr = "==" Then
      sWait = sStr
      sRes &= sStr & "\n"
      Continue
    Else If Left(sStr) = "{" Then
      If LCase(Mid$(sStr, 2)) = "example" Or If LCase(Mid$(sStr, 2)) = "code" Or If Mid$(sStr, 2) Like "syntax*" Then
        Inc iLevelBrace
        sWait = "}"
      Endif
      sRes &= sStr & "\n"
      Continue
    Else If Left(sStr) = "@" Then
      sRes &= sStr & "\n"
      Continue
    Else If Left(sStr) = "+" Then
      cCache.Clear
      sRes &= sStr & "\n"
      Continue
    Endif

    'bSkip = FALSE
    sWait = ""
    iWord = 0

    sStr &= " "
    For iInd = 1 To Len(sStr)

      sCar = Mid$(sStr, iInd, 1)

      If sWait = " " Then
        If IsPunct(sCar) Or If IsSpace(sCar) Then
          sWait = ""
        Endif
      Else If sWait Then
        If sCar = sWait Then
          If sWait = "]" Then
            iPos = InStr(sLink, "|")
            If iPos Then sLink = Left$(sLink, iPos - 1)
            cCache["#" & GetAbsolutePath($sPath, sLink)] = True
          Endif
          sWait = ""
        Else
          If sWait = "]" Then sLink &= sCar
        Endif
      Else If iWord = 0 Then
        If LCase(sCar) >= "a" And LCase(sCar) <= "z" Then
          iWord = iInd
          Continue
        Else If sCar = "[" Then
          sLink = ""
          sWait = "]"
        Else If sCar = "{" Then
          sWait = "}"
        Else If sCar = "%" Then
          sWait = "%"
        Else If sCar = "<" Then
          sWait = ">"
        Else If sCar = "\\" Then
          sWait = " "
          'sCar = ""
          'INC iInd
          'sCar &= Mid$(sStr, iInd, 1)
        Endif
      Else
        If LCase(sCar) >= "a" And LCase(sCar) <= "z" Then Continue
        If sCar >= "0" And sCar <= "9" Then Continue
        If sCar = "$" Or sCar = "-" Or sCar = "_" Or sCar = "\\" Then Continue
        If sCar = "." Then
          If IsLetter(Mid$(sStr, iInd + 1, 1)) Then Continue
        Endif
        'IF sCar = " " AND nSpace < 2 THEN
        '  INC nSpace
        '  CONTINUE
        'ENDIF
        sOrig = Mid$(sStr, iWord, iInd - iWord)
        sWord = Replace(sOrig, "\\_", "_")
        sTitle = ""

        If Not cCache.Exist(sWord) Then

          cCache[sWord] = True

          If Len(sWord) > 1 Then

            aWord = Split(sWord, ".", "", True)

            If aWord.Count = 1 Then

              rPage = DB.Find("page", "sTitle = &1 AND sLang = &2", sWord, DEFAULT_LANG)

              If $hComp Then
                For Each rPage
                  If rPage!sPath Like "/lang/*" Or If (rPage!sPath Like ("/comp/" &/ $hComp.Key & "/*") And Not (rPage!sPath Like "/comp/*/*/*")) Then
                    If rPage!sTitle = sWord Then
                      Goto FOUND
                    Endif
                  Endif
                Next
              Endif

              For Each rPage
                If rPage!sPath Like "/lang/*" Or If (rPage!sPath Like "/comp/*/*" And Not (rPage!sPath Like "/comp/*/*/*")) Then
                  If rPage!sTitle = sWord Then
                    Break
                  Endif
                Else If rPage!sPath Like "/def/*" Then
                  Break
                Endif
              Next

            Else

              If aWord[0] = "gb" Then
                rPage = DB.Find("page", "sPath = &1 AND sLang = &2", "/comp" &/ sWord, DEFAULT_LANG)
                If rPage.Available Then Goto FOUND
              Endif

              If aWord.Count = 2 Then

                'rPage = DB.Find("page", "sTitle = &1 AND sLang = &2 AND sPath LIKE &3", aWord[1], DEFAULT_LANG, "/comp/gb.qt" &/ LCase(aWord[0]) &/ "%")
                'If Not rPage.Available Then
                  rPage = DB.Find("page", "sTitle = &1 AND sLang = &2 AND sPath LIKE &3", aWord[1], DEFAULT_LANG, "/comp/gb%." &/ aWord[0] &/ "/%")
                'Endif
                sTitle = sWord

              Endif

            Endif

          FOUND:

            If rPage.Available Then
              If rPage!sPath <> $sPath Then
                If Not cCache.Exist("#" & rPage!sPath) Then

                  iInd = iWord + Len(sOrig)
                  cCache["#" & rPage!sPath] = True
                  iWord = 0
                  nSpace = 0

                  If Mid$(sStr, iInd, 2) = "()" Then
                    If Not sTitle Then sTitle = GetTitle(rPage!sPath)
                    sTitle &= "()"
                    iInd += 2
                    sCar = Mid$(sStr, iInd, 1)
                  Endif

                  If sTitle Then
                    sRes &= "[" & MakeRelative(rPage!sPath) & "|" & sTitle & "]" & sCar
                  Else
                    sRes &= "[" & MakeRelative(rPage!sPath) & "]" & sCar
                  Endif
                  Continue
                  'sTitle = ""
                Endif
              Endif
            Endif

          Endif

          sRes &= sOrig & sCar 'aWord[0]
          iInd = iWord + Len(sOrig) 'Len(aWord[0])
          iWord = 0
          nSpace = 0
          'bSkip = FALSE
          Continue

        Else
          sCar = sOrig & sCar
        Endif
        iWord = 0
      Endif

      sRes &= sCar

    Next

    If Right(sRes) = " " Then sRes = Left(sRes, -1)
    sRes &= "\n"
    sWait = ""

  Next

  Return Trim(sRes) & "\n"

End

Private Sub UndoPage()

  Dim rPage As Result
  Dim rArch As Result

  rPage = DB.Edit("page", "sPath = &1 AND sLang = &2", $sPath, $sLang)
  If rPage.Available Then

    rArch = DB.Limit(2).Find("archive", "sPath = &1 AND sLang = &2 ORDER BY dDate DESC", $sPath, $sLang)
    If rArch.Count >= 2 Then

      rArch.MoveNext

      rPage!sTitle = rArch!sTitle
      rPage!dDate = rArch!dDate
      rPage!sDesc = rArch!sDesc
      rPage!sHTML = ""
      rPage!sUser = rArch!sUser
      rPage.Update

      DB.Delete("archive", "sPath = &1 AND sLang = &2 AND dDate > &3", $sPath, $sLang, rArch!dDate)

    Else

      DB.Delete("page", "sPath = &1 AND sLang = &2", $sPath, $sLang)
      DB.Delete("archive", "sPath = &1 AND sLang = &2", $sPath, $sLang)

    Endif
  Endif

  Print "Content-type: text/html"
  Print "Location: http://" & Application.Env["HTTP_HOST"] &/ "help" &/ $sUri
  Print

End

Private Sub UpdatePage()

  Dim sForm As String
  Dim sLine As String
  Dim iPos As Integer
  Dim iPos2 As Integer
  Dim rPage As Result
  Dim sVal As String
  Dim bCreate As Boolean

  'DIM bOK AS Boolean
  Dim bDelete As Boolean
  Dim rArch As Result
  Dim hField As ResultField
  Dim sBoundary As String
  Dim sName As String
  Dim sField As String
  Dim bStop As Boolean
  Dim sTitle As String

  rPage = DB.Create("page")
  rPage!sPath = $sPath
  rPage!sLang = $sLang
  rPage!dDate = Now
  Try rPage.Update

  rPage = DB.Edit("page", "sPath = &1 AND sLang = &2", $sPath, $sLang)
  If Not rPage.Available Then
    Error.Raise("Unable to edit the page")
  Endif

  'rPage!bDoNotCache = FALSE

  rPage!sPath = $sPath
  rPage!sLang = $sLang
  rPage!dDate = Now
  rPage!sUser = $sUser

  If $bImage Then

    '     PRINT "Content-type: application/octet-stream"
    '     PRINT
    '     WHILE NOT Eof
    '       LINE INPUT sLine
    '       PRINT sLine; "\r"
    '     WEND
    '     RETURN

    ' PRINT #File.Err, rPage!sData.Length

    File.In.EndOfLine = gb.Windows
    Line Input sBoundary
    'DEBUG sBoundary

    Do
      Do
        Line Input sLine
        'DEBUG sLine
        If Not sLine Then Break
        If sLine Like "Content-Disposition: *" Then
          'sField = Scan(sLine, "*name=\"*\"*")[1]
          iPos = InStr(sLine, "name=\"")
          iPos2 = InStr(sLine, "\"", iPos + 6)
          sField = Mid$(sLine, iPos + 6, iPos2 - iPos - 6)
        Else If sLine Like "Content-Type: *" Then
          rPage!sHtml = sLine
        Endif
      Loop
      sForm = ""
      Do
        Line Input sLine
        'DEBUG Left$(sLine, 32)
        If sLine = sBoundary Then Break
        If sLine = (sBoundary & "--") Then
          bStop = True
          Break
        Endif
        If sForm Then sForm &= "\r\n"
        sForm &= sLine
      Loop
      'PRINT #File.Err, sField; "->"; rPage.Fields[sField].Type
      If sField = "command" Then
        bDelete = sForm = ("Delete")
      Else If Trim(sForm) Then
        rPage[sField] = sForm
      Endif
      'PRINT #File.Err, sField; "<-"; Len(sForm)
    Loop Until bStop

    'PRINT #File.Err, "-> "; rPage!sData.Length

    File.In.EndOfLine = gb.Unix

  Else

    Read sForm, Val(Application.Env["CONTENT_LENGTH"])

    For Each sLine In Split(sForm, "&")

      iPos = InStr(sLine, "=")
      If iPos = 0 Then Continue
      sVal = DecodeURL(Mid$(sLine, iPos + 1))
      'IF sVal THEN bOK = TRUE
      sField = Left$(sLine, iPos - 1)
      If sField = "command" Then
        bDelete = sVal = ("Delete")
      Else
        rPage[sField] = sVal
      Endif

    Next

    If Not (rPage!sDesc Like "@no-autolink\n*") Then
      rPage!sDesc = AutoLink(rPage!sDesc)
    Endif
    rPage!sHTML = MakePageWithoutHeader(rPage)
    If $cGotSpecial.Count Then
      rPage!sHTML = ""
    Endif

  Endif

  If bDelete Then

    rPage.Delete

  Else

    If Not $bImage Then
      rArch = DB.Create("archive")
      For Each hField In rArch.Fields
        'PRINT "<pre>"; hField.Name; " = "; rPage[hField.Name]; "</pre>"
        rArch[hField.Name] = rPage[hField.Name]
      Next
    Endif

    sTitle = rPage!sTitle
    If Not sTitle Then
      
      Select Case $iType
      
        Case TYPE_COMPONENT
          Try sTitle = $hComp.Name
          
        Case TYPE_CLASS
          Try sTitle = $hClass.Name
          
        Case TYPE_SYMBOL
          If $hSym Then
            sTitle = GetDefaultSymbolTitle($hSym)
          Endif
        
        Default
      
          sName = File.Name($sPath)
          If Left(sName) = ":" Then sName = Mid$(sName, 2)
          sTitle = sName
          
      End Select
      
      rPage!sTitle = sTitle
      
    Endif
    'db.Debug = TRUE
    DB.Begin

    'DEBUG "rArch.Update"
    If Not $bImage Then
      Try rArch.Update
    Endif
    'DEBUG "rPage.Update"
    rPage.Update
    'DEBUG "Commit"

    DB.Commit
    'db.Debug = FALSE

  Endif

  Print "Content-type: text/html"
  Print "Location: http://" & Application.Env["HTTP_HOST"] &/ "help" &/ $sUri;
  'IF $bImage AND IF Right($sUri, 8) <> "?refresh" THEN PRINT "?refresh";
  Print
  Print

End

Private Sub RenamePage()

  Dim rPage As Result
  Dim sSave As String
  Dim aFile As String[]
  Dim sName As String
  Dim iPos As Integer
  Dim sDir As String
  Dim sPath As String
  Dim sKind As String

  rPage = FindPage($sPath)

  If Not rPage.Available Then
    MakeHeader()
    Print "<h3>" & ("This documentation page is not available.") & "</h3>"
    MakeFooter
    Return
  Endif

  MakeHeader(rPage!sTitle)

  sSave = "&nbsp;&nbsp;<input type=\"submit\" value=\"" & ("Save") & "\"></input>"

  Print "<form action=\"" & "/rename" &/ $sUri & "\" method=\"post\" name=\"rename\">"

  Print "<b>" & ("New path") & "</b>&nbsp;&nbsp;"
  Print "<input type=\"text\" name=\"sNewPath\" size=\"80\" maxlength=\"64\" value=\"" & rPage!sPath & "\"></input>"
  Print "<p/><input type=\"checkbox\" name=\"bChild\">" & ("Rename children") & "</input>"
  Print "<p/><input type=\"checkbox\" name=\"bKeep\">" & ("Keep original") & "</input>"
  Print "<p/>"
  Print "<input type=\"submit\" value=\"" & ("Rename") & "\"></input>"

  Print "</form>"

  MakeFooter()

End

Private Sub RenameOnePage(sPath As String, sNewPath As String, bKeep As Boolean, Optional sPrefix As String)

  Dim rPage, rCopy As Result
  Dim sOld As String

  If bKeep Then
  
    If sPrefix Then
      rPage = DB.Find("page", "sPath like &1", Replace(sPrefix, "%", "%%") & "%")
    Else
      rPage = DB.Find("page", "sPath = &1", sPath)
    Endif
  
    While rPage.Available
  
      If Left$(File.Name(rPage!sPath)) <> ":" Then
  
        If rPage!sPath = sPath Then 
        
          rCopy = DB.Edit("page", "sPath = &1 and sLang = &2", sNewPath, rPage!sLang)
          If Not rCopy.Available Then rCopy = DB.Create("page")
          
          rCopy!sPath = sNewPath
          rCopy!dDate = Now
          rCopy!sUser = $sUser
          rCopy!sLang = rPage!sLang
          rCopy!sTitle = rPage!sTitle
          rCopy!sHTML = ""
    
          sOld = sPath
          rCopy!sDesc = rPage!sDesc
          rCopy!sDesc = Replace(rCopy!sDesc, "[" & sOld, "[" & sNewPath)
          If Left(sOld) = "/" Then
            sOld = Mid$(sOld, 2)
            rCopy!sDesc = Replace(rCopy!sDesc, "[" & sOld, "[" & sNewPath)
          Endif
    
          rCopy.Update
          
        Endif
  
      Endif
  
      rPage.MoveNext
    Wend

  Else

    If sPrefix Then
      rPage = DB.Edit("page", "sPath like &1", Replace(sPrefix, "%", "%%") & "%")
    Else
      rPage = DB.Edit("page")
    Endif
  
    While rPage.Available
  
      If Left$(File.Name(rPage!sPath)) <> ":" Then
  
        If rPage!sPath = sPath Then
          rPage!sPath = sNewPath
          rPage!dDate = Now
          rPage!sUser = $sUser
        Endif
  
        sOld = sPath
        rPage!sDesc = Replace(rPage!sDesc, "[" & sOld, "[" & sNewPath)
        'rPage!sDesc = Replace(rPage!sDesc, "[" & sOld &/ "]", "[" & sNewPath & "]")
        If Left(sOld) = "/" Then
          sOld = Mid$(sOld, 2)
          rPage!sDesc = Replace(rPage!sDesc, "[" & sOld, "[" & sNewPath)
          'rPage!sDesc = Replace(rPage!sDesc, "[" & sOld &/ "]", "[" & sNewPath & "]")
        Endif
  
        rPage.Update
  
      Endif
  
      rPage.MoveNext
    Wend
    
  Endif

End

Private Sub DoRenamePage()

  Dim sNewPath As String
  Dim rPage As Result
  Dim bUpdate As Boolean
  Dim cForm As Collection
  Dim bChild As Boolean
  Dim bKeep As Boolean
  Dim sUri As String

  cForm = GetForm()
  sNewPath = cForm!sNewPath
  bChild = cForm.Exist("bChild")
  bKeep = cForm.Exist("bKeep")

  If Left$(sNewPath) <> "/" Then sNewPath = "/" & sNewPath
  If Right$(sNewPath) = "/" Then sNewPath = Right(sNewPath, -1)

  If FindPage(sNewPath).Available Then
    MakeHeader
    Print "<h3>" & ("This documentation page already exists.") & "</h3>"
    MakeFooter
    Return
  Endif

  DB.Begin

  If Not bChild Then

    RenameOnePage($sPath, sNewPath, bKeep)

  Else

    rPage = DB.Edit("page", "sPath like &1 and sLang = 'en'", Replace($sPath, "%", "%%") & "%")
    While rPage.Available

      If Left$(File.Name(rPage!sPath)) <> ":" Then

        If rPage!sPath Like (Replace($sPath, "[", "[[]") & "*") Then
          RenameOnePage(rPage!sPath, sNewPath & Mid$(rPage!sPath, Len($sPath) + 1), bKeep, $sPath)
        Endif

      Endif

      rPage.MoveNext
    Wend

  Endif

  DB.Commit

  Print "Content-type: text/html"
  Print "Location: ";
  sUri = "http://" & Application.Env["HTTP_HOST"] &/ "help" &/ sNewPath & $sLangSuff
  If $sVersion = "3.0" Then sUri = AddParam(sUri, "v3")
  Print sUri
  Print

End

Private Sub HistoryPage()

  Dim rPage As Result
  Dim sBefore As String
  Dim sNext As String
  Dim sDiff As String
  Dim sLig As String
  Dim sLeft As String
  Dim sRight As String
  Dim sSym As String
  Dim sDesc As String
  Dim dDate As Date
  Dim sUser As String
  Dim aSplit As String[]
  Dim aPrint As Byte[]
  Dim iWidth As Integer
  Dim sRes As String
  Dim bGotSym As Boolean
  Dim iInd As Integer
  Dim iSet As Integer
  Dim bPrint As Boolean

  MakeHeader(Subst(("&1 - History"), GetTitle($sPath)))

  sBefore = Temp$()
  sNext = Temp$()

  iWidth = 120

  rPage = DB.Find("archive", "sPath = &1 AND sLang = &2 ORDER BY dDate DESC", $sPath, $sLang)
  If Not rPage.Available Then rPage = DB.Find("page", "sPath = &1 AND sLang = &2", $sPath, $sLang)

  For Each rPage

    If sUser Then

      Print "<div class=\"black\"><font size=\"-2\"><b>";
      Print dDate; " - "; sUser;
      Print "</b></font></div>"

      File.Save(sNext, sDesc)
      File.Save(sBefore, rPage!sDesc)
      Exec ["diff", "-bByt", "-W", 2 * iWidth, sBefore, sNext] To sDiff

      aSplit = Split(sDiff, "\n")
      aPrint = New Byte[aSplit.Count]

      bGotSym = False
      sRes = "<pre class=\"example\"><font size=\"-2\">"

      For iInd = 0 To aSplit.Max

        If Trim(Mid$(aSplit[iInd], iWidth - 1, 3)) Then
          For iSet = Max(0, iInd - 3) To Min(aSplit.Max, iInd + 3)
            aPrint[iSet] = 1
          Next
        Endif

      Next

      bPrint = True

      For iInd = 0 To aSplit.Max

        If aPrint[iInd] = 0 Then
          If bPrint Then
            bPrint = False
            sRes &= String$(iWidth - 2, ".") & "   " & String$(iWidth - 2, ".") & "\n"
          Endif
          Continue
        Endif

        bPrint = True

        sLig = aSplit[iInd]

        sLeft = Left$(sLig, iWidth - 2)
        sLeft &= Space$(Max(0, iWidth - 2 - String.Len(sLeft)))
        sLeft = EncodeHTML(sLeft)
        If Left(sLeft) = " " Then sLeft = "&nbsp;" & Mid$(sLeft, 2)

        sRight = Mid$(sLig, iWidth + 3)
        sRight &= Space$(Max(0, iWidth - 2 - String.Len(sRight)))
        sRight = EncodeHTML(sRight)
        If Left(sRight) = " " Then sRight = "&nbsp;" & Mid$(sRight, 2)

        sSym = Trim(Mid$(sLig, iWidth - 1, 3))

        If sSym Then bGotSym = True

        If InStr("|<(", sSym) Then
          sRes &= "<font style=\"background: #FFD0D0;\">" & sLeft & "</font>"
        Else
          sRes &= sLeft
        Endif

        sRes &= "&nbsp;&nbsp;&nbsp;"

        If InStr("|>)", sSym) Then
          sRes &= "<font style=\"background: #D0FFD0;\">" & sRight & "</font> "
        Else
          sRes &= sRight
        Endif

        sRes &= "\n"

      Next

      sRes &= "</font></pre>"

      If bGotSym Then
        Print sRes
      Else
        Print "<div class=\"example\"><b>"; ("No change"); "</b></div>"
      Endif

    Endif

    sDesc = rPage!sDesc
    sUser = rPage!sUser
    dDate = rPage!dDate

  Next

  If sUser Then

    Print "<div class=\"black\"><font size=\"-2\"><b>";
    Print dDate; " - "; sUser;
    Print "</b></font></div>"
    Print "<div class=\"example\"><b>"; ("Creation"); "</b></div>"

  Endif

  MakeFooter

End

Private Sub LoginPage()

  MakeHeader("Welcome")

  'Print "<h2>"; Subst(("Welcome back &1!"), $sUser); "</h2>"

  MakeFooter

End

Private Function GetUserPath() As String

  Return $sRoot &/ ".htaccess"

End

Private Function GetUser() As String[]

  Dim aUser As New String[]
  Dim sLine As String
  Dim sPath As String
  Dim iPos As Integer

  For Each sLine In Split(File.Load(GetUserPath()), "\n")

    sLine = Trim(sLine)
    If Not sLine Then Continue
    iPos = InStr(sLine, ":")
    If iPos = 0 Then Continue
    aUser.Add(Left$(sLine, iPos - 1))

  Next

  'RETURN aUser.Sort()
  aUser.Sort
  Return aUser

End

Private Sub AdminPage()

  Dim aUser As String[]
  Dim sUser As String

  aUser = GetUser()

  MakeHeader(("Administration"))

  Print "<h2>"; ("User management"); "</h2>"

  'PRINT "<pre class=\"example\">";
  'FOR EACH sUser IN aUser
  '  PRINT EncodeHTML(sUser); "&nbsp;";
  'NEXT
  'PRINT "</pre><br>"

  Print "<table class=\"table\" cellpadding=\"8\" cellspacing=\"0\" border=\"0\">"

  Print "<tr><th>"
  Print ("Create user")
  Print "</th><th>"
  Print ("Edit user")
  Print "</th><th>"
  Print ("Delete user")
  Print "</th></tr>"

  Print "<tr><td align=\"top\">"

  Print "<form action=\"" & "/admin/create" & $sLangSuff & "\" method=\"post\" name=\"new\">"
  Print "<table class=\"none\">"
  Print "<tr><td width=\"100\">"; ("Name"); "</td><td><input type=\"text\" name=\"sName\" size=\"16\" maxlength=\"16\"></input></td></tr>"
  Print "<tr><td>"; ("Password"); "</td><td><input type=\"password\" name=\"sPassword\" size=\"16\" maxlength=\"16\"></input></td></tr>"
  Print "<tr><td>"; ("Confirm"); "</td><td><input type=\"password\" name=\"sPasswordAgain\" size=\"16\" maxlength=\"16\"></input></td></tr>"
  Print "</table>"
  Print "<p/><input type=\"submit\" value=\"" & ("Create user") & "\"></input>"
  Print "</form>"

  Print "</td><td valign=\"top\">"

  Print "<form action=\"" & "/admin/edit" & $sLangSuff & "\" method=\"post\" name=\"new\">"
  Print "<table class=\"none\">"
  Print "<tr><td width=\"100\">"; ("Name"); "</td><td>"

  Print "<select name=\"sName\" size=\"1\" style=\"width: 100%;\">"
  For Each sUser In aUser
    Print "<option value=\""; sUser; "\">"; sUser; "</option>"
  Next
  Print "</select>"
  Print "</td></tr>"
  Print "<tr><td>"; ("Password"); "</td><td><input type=\"password\" name=\"sPassword\" size=\"16\" maxlength=\"16\"></input></td></tr>"
  Print "<tr><td>"; ("Confirm"); "</td><td><input type=\"password\" name=\"sPasswordAgain\" size=\"16\" maxlength=\"16\"></input></td></tr>"
  Print "</table>"
  Print "<p/><input type=\"submit\" value=\"" & ("Edit user") & "\"></input>"
  Print "</form>"

  Print "</td><td valign=\"top\">"

  Print "<form action=\"" & "/admin/delete" & $sLangSuff & "\" method=\"post\" name=\"new\">"
  Print "<table class=\"none\">"
  Print "<tr><td width=\"100\">"; ("Name"); "</td><td>"

  Print "<select name=\"sName\" size=\"1\" style=\"width: 100%;\">"
  For Each sUser In aUser
    Print "<option value=\""; sUser; "\">"; sUser; "</option>"
  Next
  Print "</select>"

  Print "</td></tr>"
  Print "</table>"
  Print "<p/><input type=\"submit\" value=\"" & ("Delete user") & "\"></input>"
  Print "</form>"

  Print "</td></tr>"
  Print "</table>"

  Print "<h2>"; ("Database management"); "</h2>"

  Print "<form action=\"" & "/admin/save.sql.bz2" & $sLangSuff & "\" method=\"post\" name=\"save\">"
  Print "<input type=\"submit\" value=\"" & ("Download database") & "\"></input>"
  Print "</form>"

  Print "<form action=\"" & "/admin/purge" & $sLangSuff & "\" method=\"post\" name=\"purge\">"
  Print "<input type=\"submit\" value=\"" & ("Purge temporary files") & "\"></input>"
  Print "</form>"

  Print "<form action=\"" & "/admin/clear" & $sLangSuff & "\" method=\"post\" name=\"clear\">"
  Print "<input type=\"submit\" value=\"" & ("Clear page cache") & "\"></input>"
  Print "</form>"

  'Print "<form action=\"" & "/admin/special" & $sLangSuff & "\" method=\"post\" name=\"clear\">"
  'Print "<input type=\"submit\" value=\"" & ("Copy gb.qt to gb.qt4") & "\"></input>"
  'Print "</form>"

  MakeFooter

End

Private Sub DoAdminPage()

  Dim cForm As Collection
  Dim hProcess As Process
  Dim sSave As String
  Dim rPage, rCopy As Result
  Dim hField As ResultField
  Dim hConn As Connection
  Dim rOther As Result

  cForm = GetForm()

  If $sPath = "/create" Then

    MakeHeader(("Create user"))
    If Not Trim(cForm!sName) Then
      Print ("Please enter a user name.")
    Else If cForm!sPassword <> cForm!sPasswordAgain Then
      Print ("Passwords do not match.")
    Else If Not Trim(cForm!sPassword) Then
      Print ("Please enter a password.")
    Else If GetUser().Find(cForm!sName) >= 0 Then
      Print ("User already exists.")
    Else
      hProcess = Shell "/usr/sbin/htpasswd -b \"" & GetUserPath() & "\" \"" & cForm!sName & "\" \"" & cForm!sPassword & "\"" Wait
      If hProcess.Value = 0 Then
        Print Subst(("User '&1' created."), cForm!sName)
      Else
        Print Subst(("Cannot create user '&1'. Error code #&2."), cForm!sName, hProcess.Value)
      Endif
    Endif

  Else If $sPath = "/edit" Then

    MakeHeader(("Edit user"))
    If cForm!sPassword <> cForm!sPasswordAgain Then
      Print ("Passwords do not match.")
    Else If Not Trim(cForm!sPassword) Then
      Print ("Please enter a password.")
    Else
      hProcess = Shell "/usr/sbin/htpasswd -b \"" & GetUserPath() & "\" \"" & cForm!sName & "\" \"" & cForm!sPassword & "\"" Wait
      If hProcess.Value = 0 Then
        Print Subst(("User '&1' modified."), cForm!sName)
      Else
        Print Subst(("Cannot edit user '&1'. Error code #&2."), cForm!sName, hProcess.Value)
      Endif
    Endif

  Else If $sPath = "/delete" Then

    MakeHeader(("Delete user"))

    If cForm!sName = "gambas" Then
      Print ("Cannot delete user 'gambas'. This user is reserved.")
    Else
      hProcess = Shell "/usr/sbin/htpasswd -D \"" & GetUserPath() & "\" \"" & cForm!sName & "\"" Wait
      If hProcess.Value = 0 Then
        Print Subst(("User '&1' deleted."), cForm!sName)
      Else
        Print Subst(("Cannot delete user '&1'. Error code #&2."), cForm!sName, hProcess.Value)
      Endif
    Endif

  Else If $sPath = "/save.sql.bz2" Then

    Print "Content-Type: application/x-bzip2"
    Print

    'hProcess = EXEC ["mysqldump", "-e", "--compatible=mysql40", "--user=" & $hConn.Login, $hConn.Name] FOR READ
    hProcess = Shell "mysqldump --default-character-set=latin1 -e --compatible=mysql40 --user=" & $hConn.Login & " " & $hConn.Name & " | bzip2" For Read
    Repeat
      Wait 0.2
    Until hProcess.State <> Process.Running
    Return

  Else If $sPath = "/purge" Then

    Shell "rm -rf " & File.Dir(File.Dir(Temp$())) Wait

  Else If $sPath = "/clear" Then

    DB.Begin
    rPage = DB.Edit("page")
    While rPage.Available
      If Left(File.Name(rPage!sPath)) <> ":" Then
        rPage!bRefresh = True
        rPage.Update
      Endif
      rPage.MoveNext
    Wend
    DB.Commit

    ' hConn = New Connection
    ' hConn.Type = $hConn.Type
    ' hConn.Login = $hConn.Login
    ' hConn.Name = "gambas2"
    ' hConn.Password = $hConn.Password
    ' hConn.Open
    '
    ' $hConn.Begin
    ' rPage = $hConn.Edit("page")
    ' While rPage.Available
    '   If Left(File.Name(rPage!sPath)) = ":" Then
    '     If rPage!sData.Length = 0 Then
    '       rOther = hConn.Find("page", "sPath = &1 AND sLang = &2", rPage!sPath, rPage!sLang)
    '       If rOther.Available Then
    '         rPage!sData = rOther!sData.Data
    '         rPage.Update
    '       Endif
    '     Endif
    '   Endif
    '   rPage.MoveNext
    ' Wend
    ' $hConn.Commit
    '
    ' hConn.Close

    MakeHeader(("Clear page cache"))
    Print "<p/>"; ("The page cache has been cleared.")

    ' Else If $sPath = "/special" Then
    '
    '   DB.Begin
    '
    '   rPage = DB.Find("page", "sPath like &1", "/comp/gb.qt/%")
    '   While rPage.Available
    '     rCopy = DB.Create("page")
    '     For Each hField In rPage.Fields
    '       rCopy[hField.Name] = rPage[hField.Name]
    '     Next
    '     rCopy!sPath = Replace(rPage!sPath, "/comp/gb.qt/", "/comp/gb.qt4/")
    '     rCopy!bRefresh = True
    '     Try rCopy.Update
    '     rPage.MoveNext
    '   Wend
    '
    '   DB.Commit
    '
    '   MakeHeader(("Copy gb.qt to gb.qt4"))
    '   Print "<p>"; ("The copy is finished.")

  Endif

  Print "<p/><a href=\"/admin" & EncodeLink($sLangSuff) & "\">"; ("Return to administration page"); "</a>"
  MakeFooter()

  'PRINT "Content-type: text/html"
  ' PRINT "Location: http://" & Application.Env["HTTP_HOST"] &/ "admin"

End

Private Sub SearchPage()

  MakeHeader(("Search"))

  Print "<h2>"; ("Search with Google"); "</h2>"

  Print "<form action=\"/help/search\" method=\"post\" name=\"search\">"
  Print "<input type=\"text\" name=\"q\" size=\"64\"></input>"
  Print "<input type=\"hidden\" name=\"hl\" value=\""; EncodeHTML($sLang); "\"></input>"
  Print "<input type=\"submit\" value=\"" & ("Search") & "\"></input>"
  Print "</form>"

  MakeFooter

End

Private Sub DoSearchPage()

  Dim cForm As Collection

  cForm = GetForm()

  Print "Content-type: text/html;charset=UTF-8"
  'PRINT "Refresh: 0;http://www.google.com/search?hl="; EncodeURL(cForm["hl"]); "&q="; EncodeURL(cForm["q"] & " +site:gambasdoc.org")
  Print "Location: http://www.google.com/search?hl="; EncodeURL(cForm["hl"]); "&q="; EncodeURL(cForm["q"] & " +site:gambasdoc.org")
  Print

End

Private Function GetComponents() As String

  Dim hComp As CComponent
  Dim sPath As String
  Dim sRes As String

  CComponent.Init

  sRes = "<ul>\n"
  For Each hComp In CComponent.All
    sRes = sRes & "<li>" & GetLink("/comp" &/ hComp.Key,,, "arrow") & "</li>\n"
  Next
  sRes = sRes & "</ul>\n"

  Return sRes

End

Private Function GetClasses() As String

  'DIM sComp AS String
  Dim sClass As String
  Dim sRes As String
  Dim iInd As Integer
  Dim iPos As Integer
  Dim aClass As New String[]

  'CComponent.Init
  'sComp = $aPath[1]
  'hComp = CComponent.All[sComp]
  'hComp.Load()

  If Not $hComp Then
    Return "<h2>" & Subst(("This component does not exist in version &1."), $sVersion) & "</h2>"
  Endif

  sRes = "<div class=\"black\"><font size=\"-2\"><b>" & ("Classes") & "</b></font></div>\n"

  sRes &= "<div class=\"border\">"
  sRes &= "<table class=\"none\" border=\"0\" cellpadding=\"2\" cellspacing=\"0\">\n"
  sRes &= "<tr valign=\"top\">\n"

  For Each sClass In $hComp.ClassList
    If Left(sClass) = "." Or If Left(sClass) = "_" Or If InStr(sClass, "*") Then Continue
    aClass.Add(sClass)
  Next

  For iInd = 0 To aClass.Max Step 16
    If iInd > 0 Then sRes = sRes & "<td width=\"16\"></td>\n"
    sRes = sRes & "<td>\n"
    For iPos = iInd To Min(iInd + 15, aClass.Max)
      sClass = aClass[iPos]
      'sRes = sRes & "<a href=\"/help" &/ sComp &/ LCase$(sClass) & $sLangSuff & "\">" & sClass & "</a><br>\n"
      sRes = sRes & GetLink("/comp" &/ LCase($hComp.Key &/ sClass),,, "arrow") & "<br/>\n"
    Next
    sRes = sRes & "</td>\n"
  Next

  sRes = sRes & "</tr>\n</table>\n</div><p/>\n"

  Return sRes

Catch

  Return "<pre>" & Error.Where & ": " & Error.Text & "</pre>\n"

End

Private Function GetIndex(sRoot As String) As String

  Dim rPage As Result
  Dim sLetter As String
  Dim sPath As String
  Dim sTitle As String
  Dim sRes As String
  Dim aPath As New String[]
  Dim aSplit As String[]

  If Not sRoot Then Error.Raise("@index needs an argument")

  rPage = DB.Find("page", "sLang = &1 AND sPath LIKE &2", DEFAULT_LANG, sRoot &/ "%") ' $Lang
  For Each rPage
    sPath = GetRealPath(rPage!sPath)
    sTitle = GetTitle(sPath, True)
    If Not sTitle Then Continue
    aPath.Add(sTitle & "\n" & rPage!sPath)
  Next

  For Each sPath In aPath.Sort(gb.Text)
    aSplit = Split(sPath, "\n")
    sTitle = aSplit[0]
    sPath = aSplit[1]
    If UCase(Left(sTitle)) <> sLetter Then
      sLetter = UCase(Left(sTitle))
      sRes &= "<h3>" & sLetter & "</h3>\n" & GetLink(sPath,, True, "arrow") & "\n"
    Else
      sRes &= "&nbsp;&bull;&nbsp;&nbsp;" & GetLink(sPath,, True, "arrow") & "\n"
    Endif
  Next

  Return sRes

End

Private Sub UCaseTitle(sTitle As String) As String

  Dim iInd As Integer
  Dim sRes As String
  Dim sCar As String
  Dim bLastLetter As Boolean

  If String.UCase(String.Left(sTitle)) = String.Left(sTitle) Then Return sTitle

  If $sLang <> "en" Then Return String.UCase(String.Left(sTitle)) & String.Mid$(sTitle, 2)

  For iInd = 1 To String.Len(sTitle)

    sCar = String.Mid$(sTitle, iInd, 1)
    If String.UCase(sCar) <> String.LCase(sCar) Then
      If Not bLastLetter Then
        sCar = String.UCase(sCar)
      Endif
      bLastLetter = True
    Else
      If sCar = "(" Then
        bLastLetter = True
      Else
        bLastLetter = False
      Endif
    Endif
    sRes &= sCar

  Next

  Return sRes

End

Private Function AddIndexEntry(aPath As String[], iInd As Integer) As String

  Dim sRes As String
  Dim aSplit As String[]
  Dim sPath As String
  Dim sTitle As String
  Dim sDisplay As String
  Dim sOldTitle As String

  aSplit = Split(aPath[iInd], "\n")
  sTitle = aSplit[0]
  sDisplay = aSplit[1]
  sPath = aSplit[2]
  If iInd Then
    aSplit = Split(aPath[iInd - 1], "\n")
    sOldTitle = aSplit[0]
  Endif

  If String.UCase(String.Left(sTitle)) <> String.UCase(String.Left(sOldTitle)) Then
    If System.RightToLeft Then
      sRes = "<td align=\"left\""
    Else
      sRes = "<td align=\"right\""
    Endif
    sRes &= " valign=\"top\"><b>" & String.UCase(String.Left(sTitle)) & "</b></td>\n"
  Else
    sRes = "<td></td>\n"
  Endif

  sRes &= "<td width=\"4\"></td><td valign=\"top\">" & GetLink(sPath, UCaseTitle(sDisplay), True, "arrow") & "</td>\n"
  Return sRes

End

Private Function GetIndex2(sRoot As String) As String

  Dim rPage As Result
  Dim sRes As String
  Dim aPath As New String[]
  Dim iInd As Integer
  Dim iInd2 As Integer
  Dim sPath As String
  Dim sTitle As String
  Dim iPos As Integer
  Dim sPrefix As String
  Dim aArg As String[]
  Dim sDisplay As String
  Dim bKeepPrefix As Boolean

  If Not sRoot Then Error.Raise("@index needs an argument")

  aArg = Split(sRoot, " ", Chr$(34))
  sRoot = aArg[0]
  If aArg.Count >= 2 Then 
    sPrefix = aArg[1]
    If Left(sPrefix) = "(" And If Right(sPrefix) = ")" Then
      sPrefix = Mid$(sPrefix, 2, -1)
      bKeepPrefix = True
    Endif
  Endif

  rPage = DB.Find("page", "sLang = &1 AND sPath LIKE &2", DEFAULT_LANG, sRoot &/ "%") ' $Lang
  For Each rPage
    If InStr(Mid$(rPage!sPath, Len(sRoot) + 2), "/") Then Continue
    If IsCommentPath(rPage!sPath) Then Continue
    sPath = GetRealPath(rPage!sPath)
    If Left(rPage!sTitle) = "@" Then
      If sPath Like (Replace(sRoot, "[", "[[]") &/ "*") Then Continue
    Endif
    
    sTitle = GetTitle(sPath, True)
    If Not sTitle Then Continue
    
    sDisplay = sTitle
    
    If sPrefix Then
      If sTitle Like (Replace(sPrefix, "[", "[[]") & "*") Then
        sTitle = LTrim(Mid$(sTitle, Len(sPrefix) + 1))
        If Not bKeepPrefix Then sDisplay = sTitle
      Endif
    Endif
    
    aPath.Add(sTitle & "\n" & sDisplay & "\n" & rPage!sPath)
  Next

  aPath.Sort(gb.Text)

  sRes = "<table width=\"100%\">\n"

  For iInd = 0 To aPath.Count \ 4

    sRes &= "<tr>\n"

    iInd2 = iInd
    While iInd2 < aPath.Count
      sRes &= AddIndexEntry(aPath, iInd2)
      iInd2 += 1 + aPath.Count \ 4
    Wend

    sRes &= "</tr>\n"

  Next

  sRes &= "</table>\n"

  Return sRes

End

Private Function GetLastChanges() As String

  Dim rPage As Result
  Dim sRes As String
  Dim bOdd As Boolean

  'rPage = DB.Find("page", "sLang = &1 ORDER BY dDate DESC LIMIT 100", $sLang)
  rPage = DB.Exec("SELECT sPath,dDate,sUser FROM page WHERE sLang = &1 ORDER BY dDate DESC LIMIT 100", $sLang)

  sRes = "<table class=\"table\" border=\"0\" cellpadding=\"4\" cellspacing=\"0\">\n"
  sRes &= "<tr><th>" & ("Date") & "</th><th>" & ("User") & "</th><th>" & ("Page") & "</th></tr>\n"

  For Each rPage

    If bOdd Then
      sRes &= "<tr class=\"dark\">\n"
    Else
      sRes &= "<tr>\n"
    Endif
    sRes &= "<td>" & rPage!dDate & "</td>\n"
    sRes &= "<td>" & rPage!sUser & "</td>\n"
    sRes &= "<td>" & GetLink(rPage!sPath,, True, "arrow") & "</td>\n"
    sRes &= "</tr>\n"

    bOdd = Not bOdd
  Next

  sRes &= "</table>\n"
  Return sRes

End

Private Function GetTranslate() As String

  Dim rPage As Result
  Dim rPageDef As Result
  Dim sRes As String
  Dim bOdd As Boolean

  If $sLang = DEFAULT_LANG Then
    Return "Nothing to translate, but the following is not yet documented!\n" & GetTodo()
  Endif

  rPageDef = DB.Find("page", "sLang = &1 ORDER BY dDate DESC", DEFAULT_LANG)

  sRes = "<table class=\"table\" border=\"0\" cellpadding=\"4\" cellspacing=\"0\">\n"
  sRes &= "<tr><th>" & ("State") & "</th><th>" & ("Date") & "</th><th>" & ("User") & "</th><th>" & ("Page") & "</th></tr>\n"

  For Each rPageDef
    rPage = DB.Find("page", "sLang = &1 AND sPath = &2", $sLang, rPageDef!sPath)
    If rPage.Available And If rPage!dDate >= rPageDef!dDate Then Continue

    If bOdd Then
      sRes &= "<tr class=\"dark\">\n"
    Else
      sRes &= "<tr>\n"
    Endif

    If rPage.Available Then
      sRes &= "<td align=\"center\">" & GetImage("refresh") & "</td>"
    Else
      sRes &= "<td align=\"center\">" & GetImage("new") & "</td>"
    Endif

    If rPage.Available Then
      sRes &= "<td>" & rPage!dDate & "</td>\n"
      sRes &= "<td>" & rPage!sUser & "</td>\n"
    Else
      sRes &= "<td>" & rPageDef!dDate & "</td>\n"
      sRes &= "<td>" & rPageDef!sUser & "</td>\n"
    Endif
    sRes &= "<td>" & GetLink(rPageDef!sPath,, True, "arrow") & "</td>\n"
    sRes &= "</tr>\n"

    bOdd = Not bOdd
  Next

  sRes &= "</table>\n"

  Return sRes

End

Private Function GetToDo() As String

  Dim hComp As CComponent
  Dim hClass As CClassInfo
  Dim hSymbol As CSymbolInfo
  Dim bPrintComponent As Boolean
  Dim bPrintClass As Boolean
  Dim sClass As String
  Dim rPage As Result
  Dim sRes As String
  Dim sComp As String
  Dim sName As String
  Dim iCpt As Integer
  Dim aIgnore As String[] = ["gb.gui", "gb.gtk", "gb.qt", "gb.corba", "gb.gtk.ext", "gb.qt.ext"]
  Dim aAllow As String[] = ["_new", "_put", "_get", "_call", "_next"]

  $sVersion = "3.0"
  InitVersion("3.0")
  CComponent.Init

  For Each hComp In CComponent.All
    
    hComp.Load
    sComp = hComp.Name
    bPrintComponent = True

    For Each sClass In hComp.ClassList
  
      If sClass = "." Then Continue
      If InStr(sClass, "*") Then Continue
      
      hClass = hComp[sClass]
  
      bPrintClass = True
  
      'If $cCompRedirect And If $cCompRedirect.Exist(sComp) Then Continue
      If aIgnore.Find(sComp) >= 0 Then Continue
  
      For Each hSymbol In hClass.Symbols
  
        If hSymbol.Class <> hClass.Name Or If hSymbol.Component <> hClass.Component Then Continue
        
        sName = hSymbol.Name
        
        If hSymbol.Kind = "C" Then
          
          If Left(sName) = "_" Then Continue
          
        Else
        
          If LCase(sName) = "_free" Then Continue
          If LCase(sName) = "_new" Then
            If Not hClass.Creatable Or If hClass.IsVirtual() Then Continue
          Endif
          
          If InStr(sName, "_") Then
            If Left(sName) <> "_" Or If aAllow.Find(sName) < 0 Then Continue
          Endif
          
        Endif
  
        rPage = DB.Find("page", "sLang = &1 AND sPath = &2", DEFAULT_LANG, GetSymbolPath(hSymbol))
        If Not rPage.Available Then
          
          If bPrintComponent Then
            sRes &= "<h2>" & GetLink("/comp" &/ sComp) & "</h2>"
            bPrintComponent = False
          Endif
          If bPrintClass Then
            sRes &= "<h3>" & GetLink("/comp" &/ sComp &/ LCase(hClass.Name), hClass.Name) & "</h3>\n"
            bPrintClass = False
          Endif
          sRes &= GetSymbolLink(hSymbol, hClass, hClass.Name & "." & hSymbol.Name) & "&nbsp;\n"
          Inc iCpt
        Endif
      Next
    Next
  
  Next

  Return sRes & "<hr>\n" & Subst("&1 symbols to document yet.\n", CStr(iCpt))

End

Private Sub GetSymbolPath(hSym As CSymbolInfo) As String

  Dim sComp As String

  If $cCompRedirect Then
    sComp = hSym.Component
    While $cCompRedirect.Exist(sComp)
      sComp = $cCompRedirect[sComp]
    Wend
  Endif
  If Not sComp Then sComp = hSym.Component

  Return "/comp" &/ LCase(sComp &/ hSym.Class &/ Replace(hSym.Name, ":", "."))

End

Private Function GetSymbolLink(hSym As CSymbolInfo, hClass As CClassInfo, Optional sMyTitle As String) As String

  Dim sRes As String
  Dim sComp As String
  Dim sPath As String
  Dim iPos As Integer

  If $cCompRedirect Then
    sComp = hSym.Component
    While $cCompRedirect.Exist(sComp)
      sComp = $cCompRedirect[sComp]
    Wend
  Endif
  If Not sComp Then sComp = hSym.Component

  'If hSym.Class <> hClass.Name Then sRes &= "<font color=\"#808080\">"
  If hSym.IsStatic() Then sRes &= "<b>"
  
  sPath = GetSymbolPath(hSym)
  If Not sMyTitle Then sMyTitle = GetTitle(sPath)
  iPos = InStr(sMyTitle, " / ")
  If iPos Then sMyTitle = Left(sMyTitle, iPos - 1)
  sRes &= GetLink(sPath, sMyTitle,, "none")
  
  If hSym.IsStatic() Then sRes &= "</b>"
  'If hSym.Class <> hClass.Name Then sRes &= "Â°"

  Return sRes

End

Private Function GetSymbolType(hComp As CComponent, hClass As CClassInfo, aSym As String[]) As String

  Dim sRes As String
  Dim hSym As CSymbolInfo
  Dim sName As String

  If aSym.Count = 0 Then Return

  sRes = sRes & "<td dir=\"ltr\">\n"

  For Each sName In aSym
    hSym = hClass.Symbols[sName]
    If System.RightToLeft Then
      sRes &= " &nbsp;" & GetSymbolLink(hSym, hClass)
    Else
      sRes &= GetSymbolLink(hSym, hClass) & "&nbsp; "
    Endif
  Next

  sRes = sRes & "</td><td>&nbsp;</td>\n"
  Return sRes

End

Private Function GetSymbols() As String

  Dim sSymbol As String
  Dim sRes As String
  Dim iInd As Integer
  Dim iPos As Integer
  Dim cSymbol As New Collection
  Dim hSym As CSymbolInfo
  Dim bSymbol As Boolean
  Dim bDynamic As Boolean
  Dim bStatic As Boolean
  Dim bParent As Boolean
  Dim bParentSymbol As Boolean
  Dim bParentDynamic As Boolean
  Dim bParentStatic As Boolean
  Dim sBreak As String
  Dim sSpace As String
  Dim sPrefix As String
  Dim aArray As String[]

  If Not $hClass Then Return "<p/>No symbols."

  If $hClass.Symbols.Count Then

    For Each sSymbol In ["P", "C", "M", "p", "e", "m"]
      cSymbol[sSymbol] = New String[]
      cSymbol[">" & sSymbol] = New String[]
    Next

    For Each hSym In $hClass.Symbols
      If hSym.IsHidden() Then Continue
      If Right$(hSym.Name) = "$" Then Continue

      bParent = hSym.Class <> $hClass.Name Or hSym.Component <> $hClass.Component

      If bParent Then
        bParentSymbol = True
        sPrefix = ">"
      Else
        bSymbol = True
        sPrefix = ""
      Endif

      Select Case hSym.Kind
        Case "r", "p", "v"
          cSymbol[sPrefix & "p"].Add(hSym.Name)
        Case "R", "P", "V"
          cSymbol[sPrefix & "P"].Add(hSym.Name)
        Case "C"
          cSymbol[sPrefix & "C"].Add(hSym.Name)
        Case ":", "e", "E"
          hSym.Kind = "e"
          cSymbol[sPrefix & "e"].Add(hSym.Name)
        Case "m"
          cSymbol[sPrefix & "m"].Add(hSym.Name)
        Case "M"
          cSymbol[sPrefix & "M"].Add(hSym.Name)
        Default
          Print hSym.Kind; " ?"
      End Select
      'IF InStr("rpm", hSym.Kind) THEN bDynamic = TRUE
      If hSym.IsStatic() Then
        If bParent Then
          bParentStatic = True
        Else
          bStatic = True
        Endif
      Else
        If bParent Then
          bParentDynamic = True
        Else
          bDynamic = True
        Endif
      Endif
    Next

    For Each aArray In cSymbol
      aArray.Sort
    Next

  Endif

  sRes = "<div class=\"black\"><font size=\"-2\"><b>" & ("Symbols") & "</b></font></div>\n"

  sRes &= "<div class=\"border\">\n"

  sBreak = "<br/>\n"

  If $hClass.Parent Then
    'PRINT #$hFile, "<div class=\"table\">"
    If $hClass.Parent = $hClass.Name Then
      sRes = sRes & ("This class reimplements")
    Else
      sRes = sRes & ("This class inherits")
    Endif

    sRes = sRes & " " & GetLink("/comp" &/ $hClass.ParentComponent &/ $hClass.Parent,,, "arrow")

    If $hClass.ParentComponent <> $hClass.Component Then
      sRes = sRes & " " & ("in") & " " & GetLink("/comp" &/ $hClass.ParentComponent,,, "arrow")
    Endif

    ' Inherited symbols

    sRes &= ".\n"

    If bParentSymbol Then

      sSpace = "<td width=\"32\">&nbsp;</td>"

      If bParentStatic Then

        sRes &= "<div style=\"height:6px\"></div>"
        sRes = sRes & "<table class=\"none\" cellspacing=\"0\" cellpadding=\"2\">\n"
        sRes = sRes & "<tr>\n"
        If cSymbol[">P"].Count Then sRes = sRes & "<td><b>" & ("Static&nbsp;properties") & "</b></td>" & sSpace & "\n"
        If cSymbol[">M"].Count Then sRes = sRes & "<td><b>" & ("Static&nbsp;methods") & "</b></td>" & sSpace & "\n"
        'IF cSymbol["E"].Count THEN sRes = sRes & "<td align=left><b>" & ("Events") & "</b></td>" & sSpace & "\n"
        If cSymbol[">C"].Count Then sRes = sRes & "<td><b>" & ("Constants") & "</b></td>" & sSpace & "\n"
        sRes = sRes & "</tr>\n"
        sRes = sRes & "<tr valign=top>\n"
        sRes = sRes & GetSymbolType($hComp, $hClass, cSymbol[">P"])
        sRes = sRes & GetSymbolType($hComp, $hClass, cSymbol[">M"])
        'sRes = sRes & GetSymbolType($hComp, $hClass, cSymbol["E"])
        sRes = sRes & GetSymbolType($hComp, $hClass, cSymbol[">C"])
        sRes = sRes & "</tr>\n"
        sRes = sRes & "</table>\n"

      Endif

      If bParentDynamic Then

        sRes &= "<div style=\"height:6px\"></div>"
        sRes = sRes & "<table class=\"none\" cellspacing=\"0\" cellpadding=\"2\">\n"
        sRes = sRes & "<tr>\n"
        If cSymbol[">p"].Count Then sRes = sRes & "<td><b>" & ("Properties") & "</b></td>" & sSpace & "\n"
        If cSymbol[">m"].Count Then sRes = sRes & "<td><b>" & ("Methods") & "</b></td>" & sSpace & "\n"
        If cSymbol[">e"].Count Then sRes = sRes & "<td><b>" & ("Events") & "</b></td>" & sSpace & "\n"
        'IF cSymbol["C"].Count THEN sRes = sRes & "<td align=left><b>" & ("Constants") & "</b></td>" & sSpace & "\n"
        sRes = sRes & "</tr>\n"
        sRes = sRes & "<tr valign=top>\n"
        sRes = sRes & GetSymbolType($hComp, $hClass, cSymbol[">p"])
        sRes = sRes & GetSymbolType($hComp, $hClass, cSymbol[">m"])
        sRes = sRes & GetSymbolType($hComp, $hClass, cSymbol[">e"])
        'sRes = sRes & GetSymbolType($hComp, $hClass, cSymbol["C"])
        sRes = sRes & "</tr>\n"
        sRes = sRes & "</table>\n"

      Endif

    Endif

    sRes &= "<hr class=\"border\">\n"

  Endif

  If $hClass.IsVirtual() Then
    sRes = sRes & BULLET & Subst(("This class is &1."), GetLink("/def/virtual")) & sBreak
  Else If $hClass.AutoCreatable Then
    sRes = sRes & BULLET & ("This class can be used like an object by creating an hidden instance on demand.") & sBreak
  Endif

  If $hClass.Symbols.Exist("_new") And If $hClass.Creatable And If Not $hClass.IsVirtual() Then
    sRes = sRes & BULLET & Subst(("This class is &1."), GetSymbolLink($hClass.Symbols["_new"], $hClass, ("creatable"))) & sBreak
  Else
    If Not bDynamic Then
      sRes = sRes & BULLET & ("This class is static.") & sBreak
    Else
      sRes = sRes & BULLET & ("This class is not creatable.") & sBreak
    Endif
  Endif

  If $hClass.Symbols.Exist("_get") Then
    If $hClass.Symbols.Exist("_put") Then
      sRes = sRes & BULLET & Subst(("This class acts like a &1 / &2 array."), GetSymbolLink($hClass.Symbols["_get"], $hClass, ("read")), GetSymbolLink($hClass.Symbols["_put"], $hClass, ("write")))
    Else
      sRes = sRes & BULLET & Subst(("This class acts like a &1 array."), GetSymbolLink($hClass.Symbols["_get"], $hClass, ("read-only")))
    Endif
    sRes = sRes & sBreak
  Endif

  If $hClass.Symbols.Exist("_next") Then
    sRes = sRes & BULLET & Subst(("This class is &1 with the &2 keyword."), GetSymbolLink($hClass.Symbols["_next"], $hClass, ("enumerable")), GetLink("/lang/foreach")) & sBreak
  Endif

  If $hClass.Symbols.Exist("_call") Then
    sRes = sRes & BULLET & Subst(("This class can be used as a &1."), GetSymbolLink($hClass.Symbols["_call"], $hClass, ("function"))) & sBreak
  Endif

  ' New symbols

  If bSymbol Then

    sSpace = "<td width=\"32\">&nbsp;</td>"

    sRes &= "<hr class=\"border\">"

    If bStatic Then

      sRes = sRes & "<table class=\"none\" cellspacing=\"0\" cellpadding=\"2\">\n"
      sRes = sRes & "<tr>\n"
      If cSymbol["P"].Count Then sRes = sRes & "<td><b>" & ("Static&nbsp;properties") & "</b></td>" & sSpace & "\n"
      If cSymbol["M"].Count Then sRes = sRes & "<td><b>" & ("Static&nbsp;methods") & "</b></td>" & sSpace & "\n"
      'IF cSymbol["E"].Count THEN sRes = sRes & "<td align=left><b>" & ("Events") & "</b></td>" & sSpace & "\n"
      If cSymbol["C"].Count Then sRes = sRes & "<td><b>" & ("Constants") & "</b></td>" & sSpace & "\n"
      sRes = sRes & "</tr>\n"
      sRes = sRes & "<tr valign=top>\n"
      sRes = sRes & GetSymbolType($hComp, $hClass, cSymbol["P"])
      sRes = sRes & GetSymbolType($hComp, $hClass, cSymbol["M"])
      'sRes = sRes & GetSymbolType($hComp, $hClass, cSymbol["E"])
      sRes = sRes & GetSymbolType($hComp, $hClass, cSymbol["C"])
      sRes = sRes & "</tr>\n"
      sRes = sRes & "</table>\n"

    Endif

    If bStatic And bDynamic Then sRes &= "<div style=\"height:6px\"></div>"

    If bDynamic Then

      'sRes &= "<hr class=\"border\">"
      sRes = sRes & "<table class=\"none\" cellspacing=\"0\" cellpadding=\"2\">\n"
      sRes = sRes & "<tr>\n"
      If cSymbol["p"].Count Then sRes = sRes & "<td><b>" & ("Properties") & "</b></td>" & sSpace & "\n"
      If cSymbol["m"].Count Then sRes = sRes & "<td><b>" & ("Methods") & "</b></td>" & sSpace & "\n"
      If cSymbol["e"].Count Then sRes = sRes & "<td><b>" & ("Events") & "</b></td>" & sSpace & "\n"
      'IF cSymbol["C"].Count THEN sRes = sRes & "<td align=left><b>" & ("Constants") & "</b></td>" & sSpace & "\n"
      sRes = sRes & "</tr>\n"
      sRes = sRes & "<tr valign=top>\n"
      sRes = sRes & GetSymbolType($hComp, $hClass, cSymbol["p"])
      sRes = sRes & GetSymbolType($hComp, $hClass, cSymbol["m"])
      sRes = sRes & GetSymbolType($hComp, $hClass, cSymbol["e"])
      'sRes = sRes & GetSymbolType($hComp, $hClass, cSymbol["C"])
      sRes = sRes & "</tr>\n"
      sRes = sRes & "</table>\n"

    Endif

  Endif

  sRes = sRes & "</div><p/>\n"

  Return sRes

Catch

  Return "<pre>" & Error.Where & ": " & Error.Text & "</pre>\n"

End

Private Sub ClassHasEvents() As Boolean

  Dim hSym As CSymbolInfo

  If Not $hClass Then Return

  For Each hSym In $hClass.Symbols
    If hSym.IsHidden() Then Continue
    If InStr(":eE", hSym.Kind) Then Return True
  Next

End

Private Sub GetVirtualClass(sClass As String) As String
  
  Dim iPos As Integer
  Dim sVirtual As String
  
  If InStr("._", Left(sClass)) > 0 Then
    sClass = Mid$(sClass, 2)
    iPos = RInStr(Replace(sClass, "_", "."), ".")
    If iPos Then
      sVirtual = Left(sClass, iPos - 1)
    Endif
  Endif
  
  Return sVirtual
  
End


Private Function GetSymbolSyntax(hSym As CSymbolInfo) As String

  Dim sSyntax As String
  Dim sName As String
  Dim sVar As String
  Dim sVirtual As String
  Dim sValue As String
  Dim iPos As Integer
  Dim sSign As String
  Dim sType As String

  sName = hSym.Class
  sVirtual = GetVirtualClass(sName)

  Select Case LCase(hSym.Name)

    Case "_get"

      If hSym.IsStatic() Then
        sName = hSym.Class
        If sVirtual Then sName = Mid$(sName, 2)
      Else
        sName = GetClassVariableName(hSym.Class)
        If sVirtual Then
          sVar = GetClassVariableName(sVirtual)
          sSyntax = sSyntax & Keyword("Dim") & " " & sVar & " " & Keyword("As") & " " & GetType(sVirtual) & "\n"
        Else
          sVar = sName
          sSyntax = sSyntax & Keyword("Dim") & " " & sVar & " " & Keyword("As") & " " & GetType(hSym.Class) & "\n"
        Endif
      Endif

      sValue = Replace(GetClassVariableName(hSym.Type), ".", "")
      If sValue = sVar Then sValue &= "2"

      sSyntax &= Keyword("Dim") & " " & sValue & " " & Keyword("As") & " " & GetType(hSym.Type) & "\n\n"
      sSyntax &= sValue & " " & Keyword("=") & " "
      sSyntax &= sName & " " & Keyword("[") & GetSignature(hSym.Signature) & Keyword("]")

    Case "_put"

      sType = CComponent.All[hSym.Component][hSym.Class].Symbols["_get"].Type

      If hSym.IsStatic() Then
        sName = hSym.Class
        If sVirtual Then sName = Mid$(sName, 2)
      Else
        sName = GetClassVariableName(hSym.Class)
        If sVirtual Then
          sVar = GetClassVariableName(sVirtual)
          sSyntax = sSyntax & Keyword("Dim") & " " & sVar & " " & Keyword("As") & " " & GetType(sVirtual) & "\n"
        Else
          sVar = sName
          sSyntax = sSyntax & Keyword("Dim") & " " & sVar & " " & Keyword("As") & " " & GetType(hSym.Class) & "\n"
        Endif
      Endif

      sValue = Replace(GetClassVariableName(sType), ".", "")
      If sValue = sVar Then sValue &= "2"

      sSyntax = sSyntax & Keyword("Dim") & " " & sValue & " " & Keyword("As") & " " & GetType(sType) & "\n\n"
      sSign = GetSignature(hSym.Signature)
      iPos = InStr(sSign, ",")
      If iPos Then sSign = Mid$(sSign, iPos + 1)
      sSyntax = sSyntax & sName & " " & Keyword("[") & sSign & Keyword("]")
      sSyntax = sSyntax & " " & Keyword("=") & " " & sValue

    Case "_next"

      If hSym.IsStatic() Then
        sName = hSym.Class
        If sVirtual Then sName = Mid$(sName, 2)
      Else
        sName = GetClassVariableName(hSym.Class)
        If sVirtual Then
          sVar = GetClassVariableName(sVirtual)
          sSyntax = sSyntax & Keyword("Dim") & " " & sVar & " " & Keyword("As") & " " & GetType(sVirtual) & "\n"
        Else
          sVar = sName
          sSyntax = sSyntax & Keyword("Dim") & " " & sVar & " " & Keyword("As") & " " & GetType(hSym.Class) & "\n"
        Endif
      Endif

      If hSym.Type Then
        sValue = Replace(GetClassVariableName(hSym.Type), ".", "")
        If sValue = sVar Then sValue &= "2"
        sSyntax = sSyntax & Keyword("Dim") & " " & sValue & " " & Keyword("As") & " " & GetType(hSym.Type) & "\n\n"
        sSyntax = sSyntax & Keyword("For Each") & " " & sValue & " " & Keyword("In") & " " & sName & "\n"
      Else
        sSyntax = sSyntax & Keyword("For Each") & " " & sName & "\n"
      Endif

      sSyntax = sSyntax & "&nbsp;&nbsp;...<br/>" & Keyword("Next")

    Case "_new"

      sName = GetClassVariableName(hSym.Class)

      sSyntax &= Keyword("Dim") & " " & sName & " " & Keyword("As") & " " & GetType(hSym.Class) & "\n\n"
      sSyntax &= sName & " " & Keyword("=") & " " & Keyword("New") & " " & GetType(hSym.Class)
      sSyntax &= " " & Keyword("(") & GetSignature(hSym.Signature) & Keyword(")")
      If ClassHasEvents() Then
        sSyntax &= " <b>[</b> " & Keyword("As") & " \"<i>event name</i>\" <b>]</b>"
      Endif

    Case Else

      If hSym.IsStatic() And hSym.Kind <> "C" Then
        sSyntax = Keyword("Static") & " "
      Endif

      Select Case LCase(hSym.Kind)

        Case "p", "v"
          sSyntax = sSyntax & Keyword("Property") & " "
        Case "r"
          sSyntax = sSyntax & Keyword("Property Read") & " "
        Case "c"
          sSyntax = sSyntax & Keyword("Const") & " "
        Case ":"
          sSyntax = sSyntax & Keyword("Event") & " "
        Case "m"
          If hSym.Type Then
            sSyntax = sSyntax & Keyword("Function") & " "
          Else
            sSyntax = sSyntax & Keyword("Sub") & " "
          Endif

      End Select

      If hSym.Name = "_call" Then
        If sVirtual Then
          sSyntax &= "<b>" & Replace(Mid$(hSym.Class, 2), "_", ".") & "</b>"
        Else
          sSyntax &= "<b>" & GetSymbolName(hSym.Class) & "</b>"
        Endif
      Else
        sSyntax &= "<b>" & GetSymbolName(hSym.Name) & "</b>"
      Endif

      If InStr(":m", LCase(hSym.Kind)) Then
        sSyntax = sSyntax & " " & Keyword("(") & GetSignature(hSym.Signature) & Keyword(")")
      Endif

      If hSym.Type Then sSyntax = sSyntax & " " & Keyword("As") & " " & GetType(hSym.Type)

      If hSym.Kind = "C" Then
        sSyntax = sSyntax & " " & Keyword("=") & " "
        Select Case hSym.Type
          Case "s"
            sSyntax = sSyntax & Keyword(Chr$(34)) & hSym.Value & Keyword(Chr$(34))
          Case Else
            sSyntax = sSyntax & hSym.Value
        End Select
      Endif

  End Select

  Return sSyntax

End

'$$$$$$$$$$$$$$$$$$$$$$$$

Private Function GetName(sKey As String) As String

  Dim sName As String
  Dim sElt As String

  For Each sElt In Split(sKey, ".")
    sElt = Replace(sElt, "[]", "Array")
    sName = sName & UCase(Left$(sElt)) & Mid$(sElt, 2)
  Next

  Return sName

End

Private Function GetOldData(sOld As String) As String

  Dim hFic As File
  Dim sData As String
  Dim sLig As String

  If Exist(sOld) Then

    hFic = Open sOld For Read

    While Not Eof(hFic)

      Line Input #hFic, sLig
      If Left(LTrim(sLig)) = "%" Then Continue
      If Trim(sLig) = "<nopublish>" Then Continue
      If Trim(sLig) = "</nopublish>" Then Continue
      If Left$(sLig, 4) = "<!--" Then Continue
      sData = sData & sLig & "\n"

    Wend

    Close #hFic

  Endif

  'IF Instr(sOld, "Settings") THEN
  '  STOP
  'ENDIF

  While Right$(sData, 2) = "\n\n"
    sData = Left$(sData, -1)
  Wend

  If Not Trim(sData) Then
    Print File.BaseName(sOld)
    sData = "_[[" & File.BaseName(sOld) & "][Not documented]]_"
  Endif

  Return sData

  'CATCH

  '  PRINT File.BaseName(sOld); " ?"

End

Private Function FormatClassName(sName As String) As String

  Return Replace(sName, "]", "&#93;")

End

Private Function GetClassPageFromName(sClass As String) As String

  Dim sComp As String
  Dim sName As String

  sComp = $hComp.Key

  If IsNull(CComponent.All[sComp][sClass]) Then
    sComp = CComponent.Classes[sClass].Component
  Endif

  'sName = FormatClassName(sClass)
  'IF Left$(sClass) = "." THEN sName = "<i>" & sName & "</i>"

  'RETURN "[[" & GetName(sComp & "." & sClass) & "][" & sName & "]]"
  Return GetLink("/comp" &/ sComp &/ sClass,,, "arrow")

Catch

  Return sClass

End

'
' PRIVATE FUNCTION GetSymbolPage(hSym AS CSymbolInfo) AS String
'
'   RETURN GetName(hSym.Component & "." & hSym.Class & "." & UCase(hSym.Kind) & GetSymbolName(hSym.Name))
'
' END
'
'
'
' PRIVATE FUNCTION GetSymbolLink(hSym AS CSymbolInfo) AS String
'
'   DIM sName AS String
'   DIM sLink AS String
'
'   sName = GetSymbolName(hSym.Name)
'
'   sLink = "[[" & GetSymbolPage(hSym) & "]["
'   IF hSym.IsStatic() THEN sLink = sLink & "<b>"
'   sLink = sLink & sName
'   IF hSym.IsStatic() THEN sLink = sLink & "</b>"
'   sLink = sLink & "]]&nbsp;"
'
'   RETURN sLink
'
' END
'
'
'
' PRIVATE SUB DumpSymbolType(hComp AS CComponent, hClass AS CClassInfo, aSym AS String[])
'
'   DIM hSym AS CSymbolInfo
'   DIM sName AS String
'
'   IF aSym.Count = 0 THEN RETURN
'
'   PRINT #$hFile, "<td>"
'
'   FOR EACH sName IN aSym
'     hSym = hClass.Symbols[sName]
'     PRINT #$hFile, GetSymbolLink(hSym)
'   NEXT
'
'   PRINT #$hFile, "</td><td>&nbsp;</td>"
'
'   END
'
'

Private Function GetSymbolName(sName As String) As String

  'sName = Replace(sName, "_", "")
  sName = Replace(sName, ":", "")
  'sName = Replace(sName, "$", "")
  Return sName

End

Private Function Keyword(sWord As String, Optional iColor As Integer) As String

  If $sVersion = "2.0" And If iColor = 0 Then sWord = UCase(sWord)

  If iColor Then
    Return "<font color=\"#" & Hex$(iColor, 6) & "\">" & sWord & "</font>"
  Else
    Return "<font color=\"blue\">" & sWord & "</font>"
  Endif

End

Private Function GetType(sType As String) As String

  If Len(sType) = 1 Then
    sType = CSymbolInfo.GetNativeType(sType)
  Else
    If Right$(sType) = ";" Then sType = Left$(sType, -1)
    sType = GetClassPageFromName(sType)
  Endif

  Return Keyword(sType, &H0080FF&)

End

'
'

' PRIVATE FUNCTION AddRes(sRes AS String, sAdd AS String) AS String
'
'   IF Left$(sAdd) = " " THEN
'     RETURN RTrim(sRes) & sAdd
'   ELSE
'     RETURN sRes & sAdd
'   ENDIF
'
' END

Private Function GetSignature(sSign As String) As String

  Dim iInd As Integer
  Dim sRes As String
  Dim sCar As String
  Dim iPos As Integer
  Dim bName As Boolean
  Dim bFirst As Boolean
  Dim iLen As Integer

  bFirst = True

  Do

    iInd = iInd + 1

    If iInd > Len(sSign) Then Break

    sCar = Mid$(sSign, iInd, 1)

    If sCar = "'" Or sCar = "(" Then

      If sCar = "'" Then
        iPos = InStr(sSign, "'", iInd + 1)
      Else
        iPos = InStr(sSign, ")", iInd + 1)
      Endif

      If iPos = 0 Then Break

      If bFirst Then
        bFirst = False
      Else
        sRes = sRes & Keyword(",") & " "
      Endif

      sRes = sRes & "<u>" & Mid$(sSign, iInd + 1, iPos - iInd - 1) & "</u> " & Keyword("As") & " "

      iInd = iPos
      bName = True

      Continue

    Endif

    If sCar = "<" Then

      iPos = InStr(sSign, ">", iInd + 1)
      If iPos = 0 Then Break
      iInd = iPos
      Continue

    Endif

    If sCar = "[" Then

      sRes = RTrim(sRes) & " <b>[</b> "
      Continue

    Endif

    If sCar = "]" Then

      sRes = RTrim(sRes) & " <b>]</b>"
      Continue

    Endif

    If Not bName Then

      If bFirst Then
        bFirst = False
      Else
        sRes = sRes & ", "
      Endif

      sRes = sRes & "? " & Keyword("As") & " "
      bName = False

    Endif

    If sCar = "." Then
      sRes = sRes & ", ..."
      Continue
    Endif

    If sCar >= "A" And sCar <= "Z" Then

      iPos = InStr(sSign, ";", iInd)
      If iPos = 0 Then iPos = Len(sSign) + 1

      sRes = sRes & GetType(Mid$(sSign, iInd, iPos - iInd))

      iInd = iPos
      Continue

    Endif

    sRes = sRes & GetType(sCar)

  Loop

  'sRes = "( " & sRes & " )"

  sRes = " " & sRes & " "

  Do
    iLen = Len(sRes)
    sRes = Replace(sRes, "  ", " ")
    If Len(sRes) = iLen Then Break
  Loop

  Return sRes

End

Private Function GetClassVariableName(sClass As String) As String

  Dim sRes As String

  If Len(sClass) = 1 Then
    sClass = CSymbolInfo.GetNativeType(sClass)
    If InStr("aeiou", LCase(Left$(sClass))) Then
      sRes = "an" & sClass
    Else
      sRes = "a" & sClass
    Endif
  Else
    sClass = Replace(sClass, "[]", "Array")
    If Left$(sClass) = "." Then 
      sClass = Mid$(sClass, 2)
    Else If Left(sClass) = "_" Then
      sClass = Replace(Mid$(sClass, 2), "_", ".")
    Endif
    sRes = "h" & sClass
  Endif

  Return sRes

End

Private Function GetGambasVersion() As String

  Dim sVer As String

  Shell "gbx" & System.Version & " -V " To sVer

  Return Trim(Mid$(sVer, InStr(sVer, "-") + 1))

Catch

  Return "?"

End

Private Sub GetOnlyIn(sVer As String) As String

  Return "<div class=\"only-in\">" & Subst(("Only in &1 version"), EncodeHTML(sVer)) & "</div>\n"

End

Private Sub GetSince(sVer As String) As String

  Return "<div class=\"only-in\">" & Subst(("Since &1 version"), EncodeHTML(sVer)) & "</div>\n"

End

Public Sub Process_Read()

  Dim sStr As String

  Read #Last, sStr, Lof(Last)
  Print sStr;

End

Private Sub GetClassStat(sArg As String) As String

  Dim sRes As String
  Dim sVal As String
  Dim nClass As Integer
  Dim nSym As Integer
  Dim sFile As String
  Dim aFile As String[]
  Dim iCpt As Integer
  Dim sLine As String
  Dim aIgnore As String[]

  If Not sArg Then sArg = $sVersion

  If sArg = "2.0" Then
    aIgnore = ["gb.gui.info", "gb.gtk.info"]
  Else If sArg = "3.0" Then
    aIgnore = ["gb.gui.info", "gb.gtk.info", "gb.qt.info"]
  Endif

  For Each sFile In Dir(GetInfoFilePath(sArg), "*.info")
    If aIgnore.Find(sFile) >= 0 Then Continue
    aFile = Split(File.Load(InfoFilePath &/ sFile), "\n", "", True)
    iCpt = 0
    For Each sLine In aFile
      If Left(sLine) = "#" Then Inc iCpt
    Next
    nClass += iCpt
    nSym += (aFile.Count - iCpt * 3) / 4
  Next

  Return Subst(("There are &1 classes and &2 symbols in all Gambas components."), nClass, nSym)

Catch

  Return Error.Where & ": " & Error.Text

End

Private Sub GetPage()

  Dim rPage As Result
  Dim rPageDef As Result
  Dim bWarn As Boolean
  Dim sWarn As String
  Dim sPath As String
  Dim sPage As String
  Dim bRefresh As Boolean

  sPath = GetRealPath($sPath)

  rPage = DB.Find("page", "sPath = &1 AND sLang = &2", sPath, $sLang)
  rPageDef = DB.Find("page", "sPath = &1 AND sLang = &2", sPath, DEFAULT_LANG)

  If rPageDef.Available Then
    If Not rPage.Available Then
      If sPath = $sPath Then
        sWarn = ("This page is not translated.")
      Endif
      rPage = rPageDef
    Else
      If rPageDef!dDate > rPage!dDate Then
        If sPath = $sPath Then sWarn = ("This page is not up to date.")
      Endif
    Endif
  Endif

  If Not rPage.Available Then
    Return
  Endif

  Print "Content-type: text/plain;charset=UTF-8"
  Print

  If $bImage Then

  Else

    Print rPage!sDesc

  Endif

End

Private Sub HighlightCode(sLine As String) As String

  Dim sRes As String
  Dim I As Integer

  Return sLine

  ' If Not sLine Then Return
  '
  ' sRes = "<div class=\"code\">"
  '
  ' Highlight.Analyze(sLine)
  '
  ' sRes &= String(Highlight.Positions[0] * 2, " ")
  '
  ' For I = 0 To Highlight.Symbols.Max
  '   sRes &= Subst("<span class=\"&1\">&2</span>", $aHighlightClass[Highlight.Types[I]], Highlight.Symbols[I])
  '   If I < Highlight.Symbols.Max Then
  '     If Highlight.Positions[I + 1] > (Highlight.Positions[I] + Len(Highlight.Symbols[I])) Then sRes &= " "
  '   Endif
  ' Next
  '
  ' sRes &= "</div>"
  ' Return sRes

End

Private Sub GetInclude(sPath As String) As String

  Dim rPage As Result

  rPage = FindPage(sPath)
  If rPage.Available Then Return MakePageWithoutHeader(rPage)

End
