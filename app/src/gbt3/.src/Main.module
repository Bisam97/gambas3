' Gambas module file

''' Changes the project in Path (given by args) to start with a random method,
''' runs tests and restores the project afterwards

Public Sub Main()

    Dim sPath, sCompilerPath, sExecutorPath, sCmd, sTestCmd, sRand As String
    Dim sSingleTestModule, sSingleTestMethod, sNewStartupFile, sStartupSequence As String

    With Args
        .Begin(Application.Name & " <options> [path to poject]\n\nType " & Application.Name & " -h for help")
        Try sSingleTestModule = .Get("m", "testmodule", "Single Testmodule")
        Try sSingleTestMethod = .Get("t", "testmethod", "Method of a single testmodule")
        .End
    End With

    sPath = Args[Args.Max]

    sCompilerPath = GetPath("gbc3")
    sExecutorPath = GetPath("gbx3")

    ' ------------------------------------------------- Tests

    If sCompilerPath = Null Then
        Error.Raise("Error: Gambas compiler gbg3 not found.")
    Endif

    If sExecutorPath = Null Then
        Error.Raise("Error: Gambas gbx3 not found.")
    Endif

    If sPath = Null Then
        Error.Raise("Error: Path to project is Null.")
    Endif

    If Not Exist(sPath) Then
        Error.Raise("Error: Path to project not found.")
    Endif

    If sSingleTestMethod And If sSingleTestModule = Null Then
        Error.Raise("Error: Testmodule not defined")
    Endif

    If sSingleTestModule Then
        sTestCmd = "\"" & sSingleTestModule & "" "\""
    Endif

    If sSingleTestMethod Then
        sTestCmd &= ", \"" & sSingleTestMethod & "" "\""
    Endif

    ' ------------------------------------------------- New startup file
    sTestCmd = "Unittest.Main(" & sTestCmd & ")"

    sRand = "TEST" & Randstr()
    sNewStartupFile = sRand & ".module"

    'create test startup module
    sStartupSequence = "'Gambas module" & gb.Lf & gb.Lf &
        "Public Sub Main()" & gb.Lf & gb.Lf &
        sTestCmd & gb.Lf & gb.Lf &
        "End" & gb.Lf

    File.Save(sPath &/ ".src" &/ sNewStartupFile, sStartupSequence)

    ' ------------------------------------------------- run tests

    'compile
    sCmd = sCompilerPath & " " & sPath

    'To sCmd: use sCmd as buffer just that gbc3's "OK" is not printed
    Shell sCmd Wait To sCmd

    'run tests
    sCmd = sExecutorPath & " -s " & sRand & " " & sPath
    Shell sCmd Wait For Read As "Tapprinter"

    ' ------------------------------------------------- Restore project

    'restore project
    Kill sPath &/ ".src" &/ sNewStartupFile

    'compile again
    sCmd = sCompilerPath & " " & sPath

Catch
    Print Error.Text

End

Public Sub Tapprinter_Read()

    Dim sLine As String

    sLine = Read #Last, -256
    Print sLine;

End

Private Function Randstr() As String

    Dim j As Byte
    Dim s As String

    For j = 1 To 5
        If Fix(Rnd(0, 2)) Then
            s &= Chr(Rnd(48, 58))
        Else
            s &= Chr(Rnd(65, 91))
        Endif
    Next
    Return s

End

Private Function GetPath(Prog As String) As String

    'Dim sBuf As StringsBufsBuf
    Shell "which " & Prog To Prog
    Prog = Trim(Prog)
    If Exist(Prog) Then Return Prog

End
