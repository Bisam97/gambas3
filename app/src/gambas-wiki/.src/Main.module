' Gambas module file

Public Const DEFAULT_LANG As String = "en"

Public Languages As String[] = [DEFAULT_LANG, "fr", "de", "es", "it", "nl", "pl", "pt", "pt_BR", "mk", "sq", "ca", 
    "hu", "cs", "tr", "ar", "fa", "id", "vi", "ko", "ja", "ru", "zh", "zh_TW", "eo"]

Public SystemLanguages As String[] = ["C", "fr_FR.UTF-8", "de_DE.UTF-8", "es_ES.UTF-8", "it_IT.UTF-8", "nl_NL.UTF-8", "pl_PL.UTF-8", "pt_PT.UTF-8", "pt_BR.UTF-8", "mk_MK.UTF-8", "sq_AL.UTF-8", "ca_ES.UTF-8", 
    "hu_HU.UTF-8", "cs_CZ.UTF-8", "tr_TR.UTF-8", "ar_AE.UTF-8", "fa_IR.UTF-8", "id_ID.UTF-8", "vi_VN.UTF-8", "ko_KR.UTF-8", "ja_JP.UTF-8", "ru_RU.UTF-8", "zh_CN.UTF-8", "zh_TW.UTF-8", "eo.UTF-8"]

Public Lang As String
Public Root As String
Public Path As String
Public Exist As Boolean
Public Edit As Boolean
Public Image As Boolean

Public Component As String
Public Class As String
Public Symbol As String

Public Sub SetLanguage(sLang As String)

  Dim iLang As Integer
  
  Lang = sLang
  If Not Lang Then Lang = DEFAULT_LANG
  iLang = Languages.Find(Lang)
  If iLang >= 0 Then
    System.Language = SystemLanguages[iLang]
  Else
    Lang = DEFAULT_LANG
  Endif

End

Public Sub GetPagePath(Optional bSuffix As Boolean) As String

  Dim sPath As String
  
  sPath = Root &/ "data" &/ Lang &/ Path &/ "~page"
  If bSuffix Then sPath &= "." & Format(Now, "yyyyddmmhhnnssuu") & "." & Session["login"]
  Return sPath
  
End

Public Sub GetPagePathFrom(sPath As String) As String
  
  Return Root &/ "data" &/ Lang &/ sPath &/ "~page"
  
End


Public Sub MakeDir(sDir As String)

  Dim sPath As String
  Dim sElt As String

  For Each sElt In Split(sDir, "/")
    sPath &/= sElt
    'Shell "echo MKDIR: " & Shell$(sPath) & " >> /tmp/session.log" Wait
    Try Mkdir "/" & sPath
  Next

  'If Not Exist(sDir) Or If Not IsDir(sDir) Then Return True

End

Private Sub InitWiki()
  
  Mkdir Root &/ "data"
  Mkdir Root &/ "data/en"
  Copy "passwd" To Root &/ "passwd"
  Copy "page" To GetPagePath()
  Copy "page" To GetPagePath(True)
  
End

Private Sub LockPage()

  Dim sLock As String = File.Dir(GetPagePath()) &/ "~lock"
  Dim hLock As File
  Dim I As Integer
  
  For I = 1 To 20
    Try hLock = Lock sLock
    If Not Error Then Return
    Sleep 0.1
  Next
  
  Error.Raise("Unable to lock the current page")

End

Private Sub Redirect()

  Response.Redirect(Application.Root &/ Request.Path & "?l=" & Lang)

End

Public Sub Main()

  Dim sMsg As String
  Dim sIdent As String
  Dim iPos As Integer
  Dim sLogin As String
  Dim sPasswd As String
  Dim aPage As String[]
  Dim sDir As String
  Dim aPath As String[]
  
  Root = User.Home &/ "wiki"

  If Args[1] = "-restore" Then
    If IsDir(Root) Then
      Shell "rm -rf " & Shell$(Root & "~") & " >/dev/null 2>&1" Wait
      Move Root To Root & "~"
      Mkdir Root
      Copy "passwd" To Root &/ "passwd"
    Endif
    OldWiki.Restore
    Return
  Endif

  Try Mkdir Root

  ' All pages are stored in a "data" directory stored in the root directory.
  ' If the "data" directory does not exist, the wiki is initialized with a default root page.

  If Not Exist(Root &/ "data") Then 
    InitWiki
    Response.Redirect(Application.Root)
    Return
  Endif

  ' The url path is directly converted to a relative directory path inside the "data" directory located in the root directory.
  ' The page contents is stored inside a "~page" file located in that directory.
  ' Consequently, no "~" character is allowed in the url path.
  ' Each page modification is archived in a "~page.<date>.<user>" file, allowing changes to be undone.
  
  Path = Request.Path
  If Path = "/" Then Path) = ""
  
  ' Handle resource files: images, style sheet...
  
  If Path And If Exist(".public" &/ Path) Then
    Response.SendFile(".public" &/ Path)
    Return
  Endif
  
  ' Reject pages whose url includes a "~" character.
  
  If InStr(Path, "~") Then
    Response.Status = "404 Not Found"
    Response.Begin
    Print "<h1>404 Not Found</h1>"
    Response.End
    Return
  Endif
  
  SetLanguage(Request["l"])
    
  If Request.Exist("logout") Then
    
    Session.Abandon
   
  Else If Request["login"] And If Request["password"] Then
    
    Session.Abandon
    
    For Each sIdent In Split(File.Load(Root &/ "passwd"), "\n")
      iPos = InStr(sIdent, ": ")
      If iPos = 0 Then Continue
      sLogin = Trim(Left(sIdent, iPos - 1))
      sPasswd = Trim(Mid$(sIdent, iPos + 2))
      If sLogin = Request["login"] And If sPasswd = Request["password"] Then
        Session["login"] = sLogin
        Break
      Endif
    Next
    
  Endif

  {Exist} = Main.ExistPage(Path)
  Image = IsImage(Path)
  
  ' Analyze component path
  If Path Begins "/comp/gb" Then
    
    CComponent.Init
    aPath = Split(Path, "/", "", True)
    Component = aPath[1]
    If aPath.Count >= 3 Then {Class} = aPath[2]
    If aPath.Count >= 4 Then 
      Symbol = aPath[3]
      If Left(Symbol) = "." Then Symbol = ":" & Mid$(Symbol, 2)
    Endif
    
  Endif

  If Session.Id Then
  
    If Request.Exist("save") Then
    
      If Request.Exist("page") Then
        MakeDir(File.Dir(GetPagePath()))
        LockPage
        File.Save(GetPagePath(), Request["page"])
        Copy GetPagePath() To GetPagePath(True)
        Redirect
        Return
      Else If Request.Exist("file") And If Image Then
        MakeDir(File.Dir(GetPagePath()))
        LockPage
        Try Kill GetPagePath()
        Copy Request.Files["file"] To GetPagePath()
        Copy GetPagePath() To GetPagePath(True)
        Redirect
        Return
      Endif
      
    Else If Request.Exist("delete") Then
      
      If {Exist} Then
        LockPage
        File.Save(GetPagePath(), "")
        Copy GetPagePath() To GetPagePath(True)
      Endif
      Redirect
      Return
      
    Else If Request.Exist("undo") Then
      
      sDir = File.Dir(GetPagePath())
      aPage = Dir(sDir, "~page.*").Sort(gb.Descent)
      If aPage.Count >= 2 Then
        LockPage
        Try Kill sDir &/ aPage[0]
        Try Kill GetPagePath()
        Try Copy sDir &/ aPage[1] To GetPagePath()
      Endif
      Redirect
      Return
      
    Else If Request.Exist("create") Or If Request.Exist("edit") Then
      
      Edit = True
      
    Endif
    
  Endif

  If Image Then
    If Not Session.Id Or If Request.Exist("show") Then
      Response.SendFile(GetPagePath(), GetContentTypeFrom(Path))
      Return
    Endif
  Endif

  Wiki.Render
  CComponent.Exit
  
Catch
  
  sMsg = Error.Where & ": " & Error.Text & "\n" & Error.Backtrace.Join("\n")
  Response.Begin
  Response.ContentType = "text/plain;charset=utf-8"
  Print "<pre>"; sMsg; "</pre>"
  Response.End

End

Public Sub SolvePath(sPath As String) As String
  
  Dim sData As String
  
  Do
  
    If Not Main.ExistPage(sPath) Then Return sPath
    
    sData = File.Load(Main.GetPagePathFrom(sPath))
    If sData Begins "-->" Then
      sPath = MakeAbsolute(Trim$(Mid$(sData, 4)), sPath)
    Else
      Return sPath
    Endif
    
  Loop
  
End


Public Sub GetPageTitle(sPath As String) As String
  
  Dim sFile As String
  Dim iPos As Integer
  Dim bComp As Boolean
  
  sPath = SolvePath(sPath)
  bComp = sPath Begins "/comp/"
  
  If bComp And If sPath Like "/comp/*/*/*" Then Return GetSymbolTitle(sPath)
  
  sPath = Root &/ "data" &/ Lang &/ sPath &/ "~page"
  If Not Exist(sPath) Then Return 
  
  sFile = LTrim(File.Load(sPath))
  
  If sFile Begins "# " Then
    iPos = InStr(sFile, "\n")
    If iPos = 0 Then iPos = Len(sFile)
    sFile = Trim(Mid$(sFile, 3, iPos - 3))
    If Not bComp Then sFile = String.UCaseFirst(sFile)
    Return sFile
  Endif
  
End

Public Sub IsImage(sPath As String) As Boolean

  Dim sExt As String
  
  sExt = File.Ext(sPath)
  Return ["png", "jpg", "jpeg", "gif"].Exist(sExt)
  
End

Private Sub GetContentTypeFrom(sPath As String) As String
  
  Select Case Lower(File.Ext(sPath))
    Case "css"
      Return "text/css"
    Case "jpg", "jpeg", "jpe", "thumb"
      Return "image/jpeg"
    Case "png"
      Return "image/png"
    Case "gif"
      Return "image/gif"
    Case "tiff", "tif"
      Return "image/tiff"
    Case "odt"
      Return "application/vnd.oasis.opendocument.text"
    Case "doc"
      Return "application/msword"
    Case "ods"
      Return "application/vnd.oasis.opendocument.spreadsheet"
    Case "xls"
      Return "application/msexcel"
    Case "pdf"
      Return "application/pdf"
    Case "zip"
      Return "application/zip"
    Case "html", "htm"
      Return "text/html"
    Case "txt"
      Return "text/plain"
    Case "avi"
      Return "video/x-msvideo"
    Case "mpg", "mpeg"
      Return "video/mpeg"
    Case "ps"
      Return "application/postscript"
    Case "dwg"
      Return "application/acad"
    Case "wav"
      Return "audio/x-wav"
    Case "ogg"
      Return "application/ogg"
    Case "jar"
      Return "application/x-jar"
    'Case "xml", "kml"
    '  Return "text/plain"
    Case Else 
      Return "application/octet-stream"
  End Select
  
End

Public Sub ExistPage(sPath As String) As Boolean

  Dim iSize As Long
  
  Try iSize = Stat(GetPagePathFrom(sPath)).Size
  Return iSize > 0
  
End


Public Function GetSymbolLink(hClass As CClassInfo, sSym As String, Optional sMyTitle As String, Optional sMyStaticTitle As String) As String

  Dim hSym As CSymbolInfo
  Dim sRes As String
  Dim sComp As String
  Dim sPath As String

  hSym = hClass.Symbols[sSym]
  If Not hSym Then Return

  ' If $cCompRedirect Then
  '   sComp = hSym.Component
  '   While $cCompRedirect.Exist(sComp)
  '     sComp = $cCompRedirect[sComp]
  '   Wend
  ' Endif
  If Not sComp Then sComp = hSym.Component

  If hSym.IsStatic() Then sMyTitle = sMyStaticTitle
  
  'sPath = GetSymbolPath(hSym)
  sPath = "/comp" &/ LCase(sComp &/ hSym.Class &/ Replace(hSym.Name, ":", "."))
  If sMyTitle Then
    sRes &= "[" & sMyTitle & "] (" & sPath & ")"
  Else
    sRes &= "[" & sPath & "]"
  Endif
  
  'If hSym.IsStatic() Then sRes &= "**"

  Return sRes

End

Public Function GetClassLinkFromName(sClass As String) As String

  Dim sComp As String = Main.Component

  If IsNull(CComponent.Get(sComp)[sClass]) Then
    sComp = CComponent.Classes[sClass].Component
  Endif

  Return "<a href=\"" & Application.Root &/ LCase("comp" &/ sComp &/ sClass) & "\">" & Html(sClass) & "</a>"

Catch

  Return sClass

End

Public Sub GetStat() As String[]
  
  Dim nClass As Integer
  Dim nSym As Integer
  Dim sFile As String
  Dim aFile As String[]
  Dim iCpt As Integer
  Dim sLine As String
  Dim aIgnore As String[]
  Dim sDir As String

  sDir = System.Path &/ "share/gambas" & System.Version &/ "info"

  aIgnore = ["gb.gui.info", "gb.gtk.info", "gb.gtk3.info", "gb.gui.opengl.info", "gb.gtk.opengl.info", "gb.gui.base", "gb.geom"]

  For Each sFile In Dir(sDir, "*.info")
    If aIgnore.Find(sFile) >= 0 Then Continue
    aFile = Split(File.Load(sDir &/ sFile), "\n", "", True)
    iCpt = 0
    For Each sLine In aFile
      If Left(sLine) = "#" Then Inc iCpt
    Next
    nClass += iCpt
    nSym += (aFile.Count - iCpt * 3) / 4
  Next

  Return [Subst(("There are &1 classes and &2 symbols in all Gambas components."), nClass, nSym)]

Catch

  Return ["`" & Error.Where & ": " & Error.Text & "`"]

End

Public Sub GetSymbolTitle(Optional sPath As String) As String

  Dim hSym As CSymbolInfo
  Dim sTitle As String
  Dim sComponent As String
  Dim sClass As String
  Dim sSymbol As String
  Dim aPath As String[]
  
  If Not sPath Then
    sComponent = Main.Component
    sClass = Main.Class
    sSymbol = Main.Symbol
  Else
    aPath = Split(sPath, "/", "", True)
    sComponent = aPath[1]
    sClass = aPath[2]
    sSymbol = aPath[3]
    If Left(sSymbol) = "." Then sSymbol = ":" & Mid$(sSymbol, 2)
  Endif
  
  Try hSym = CComponent.Get(sComponent)[sClass].Symbols[sSymbol]
  
  If sPath Then
    If Not hSym Then Return sSymbol & " ?"
    If InStr("e:", hSym.Kind) Then
      Return Mid$(hSym.Name, 2)
    Else
      Return hSym.Name
    Endif
  Endif
  
  If Not hSym Then Return sClass & "." & sSymbol & " (" & sComponent & ") ?"

  Select Case Main.Symbol
    Case "_new"
      sTitle = "New " & hSym.Class
    Case "_put"
      sTitle = hSym.Class & "[] = ..."
    Case "_get"
      sTitle = hSym.Class & "[]"
    Case "_call"
      sTitle = hSym.Class & "()"
    Case "_next"
      sTitle = "For Each " & hSym.Class
    Default
      If InStr(":e", hSym.Kind) Then
        sTitle = "Event " & hSym.Class & "." & Mid$(hSym.Name, 2)
      Else
        sTitle = hSym.Class & "." & hSym.Name
      Endif
  End Select

  Return sTitle & " (" & hSym.Component & ")"
  
End

Public Sub MakeAbsolute(sPath As String, sRoot As String) As String
  
  If sPath Begins "/" Then Return sPath

  If sPath Begins "./" Then
    If Not sRoot Then sRoot = "/"
    Return sRoot &/ Mid$(sPath, 3)
  Endif

  While sPath Begins "../"
    
    sRoot = File.Dir(sRoot)
    sPath = Mid(sPath, 4)
    
  Wend
  
  If Not sRoot Then sRoot = "/"
  Return sRoot &/ sPath
  
End
