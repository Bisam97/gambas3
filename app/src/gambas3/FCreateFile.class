' Gambas class file

Private $sPath As String
Private $sDir As String
Private $sType As String
Private $bMouse As Boolean
Private $bDoNotSetName As Boolean
Private $bInit As Boolean
Private $iFilter As Integer 

Public Sub Run(sPath As String, sDir As String, sType As String)
  
  $sPath = sPath
  $sDir = sDir
  $sType = sType
  If Not Me.ShowModal() Then Return
  
End

Public Sub btnCancel_Click()

  Me.Close  

End

Public Sub lstType_Click()

  Dim sPrefix As String
  Dim hChild As control
  Dim bOpt As Boolean
  Dim iFilter As Integer
  
  sPrefix = lstType.Current.Tag
  For Each hChild In panOption.Children
    If Not hChild.Tag Then Continue
    hChild.Visible = Split(hChild.Tag, ",").Exist(sPrefix)
    bOpt = bOpt Or hChild.Visible
  Next
  
  lblOption.Visible = bOpt
  
  If Not $bDoNotSetName Then   
    sPrefix = UCase(Left(sPrefix)) & Mid(sPrefix, 2)
    Object.Lock(txtName)
    txtName.Text = Project.GetNewName(sPrefix)
    txtName.SelectAll
    Object.Unlock(txtName)
  Endif 
  
  iFilter = ["module", "class", "form", "image", "html", "text"].Find(LCase(sPrefix))
  $iFilter = iFilter
  
  txtName.SetFocus
  
End

Public Sub Form_Open()

  Dim hCtrl As Control
  Dim sParent As String
  Dim hModule As CModule
  Dim aFilter As String[]
  Dim hPanel As Container
  Dim hPictureBox As PictureBox

  $bDoNotSetName = False
  
  Settings.Read(Me)
  
  aFilter = ["*.module", ("Gambas modules"), "*.class", ("Gambas classes")]
  
  For Each hModule In CModule.All
  
    aFilter.Add("*." & hModule.Key)
    aFilter.Add(hModule.NameFilter)
  
  Next
  
  aFilter.Insert(["*.png;*.jpg;*.jpeg;*.xpm;*.gif", ("Picture files"), "*.htm;*.html", ("HTML files")])
  
  fchExisting.Filter = aFilter
  
  For Each hPanel In lstType.Children
    If Not hPanel.Tag Then Continue
    If Not CModule.All.Exist(hPanel.Tag) Then Continue
    hPanel.Visible = CModule[hPanel.Tag].Used
  Next
  
  If Not $sType Then $sType = "module"
  For Each hCtrl In lstType.Children
    If hCtrl.Tag = $sType Then 
      lstType.Select(hCtrl)
      Break 
    Endif
  Next
  
  cmbParent.List = Project.GetClassesOnly()
  cmbParent.Add(("(No parent)"), 0)
  If Project.IsClassPath($sPath) Then
    cmbParent.Text = Project.GetParentClass($sPath)
  Endif
  
  lstType_Click
  tabFile_Click
  
End

Public Sub txtWidth_Change()

  'IF $bMouse THEN 
  '  txtWidth.Value = CInt(txtWidth.Value / txtWidth.Step + 0.5) * txtWidth.Step
  '  $bMouse = FALSE
  'ENDIF 
  If btnLinked.Value Then txtHeight.Value = txtWidth.Value  

End

Public Sub txtHeight_Change()

  If btnLinked.Value Then txtWidth.Value = txtHeight.Value    

End

Public Sub txtWidth_MouseDown()

  $bMouse = True  

End

Public Sub txtHeight_MouseDown()

  $bMouse = True  

End


Public Sub txtWidth_MouseWheel()

  $bMouse = True  

End

Public Sub txtHeight_MouseWheel()

  $bMouse = True  

End

Public Sub txtName_GotFocus()

  txtName.Select  

End

Public Sub txtName_Change()

  $bDoNotSetName = txtName.Text  

End

Private Sub CreateFile() As Boolean
  
  Dim sType As String = lstType.Current.Tag
  Dim sName As String = Trim(txtName.Text)
  Dim sMsg As String
  Dim sTemp As String
  Dim hImage As Image

  Select Case sType
  
    Case "text", "image", "html", "css"
    
      If chkExt.Value Then
        If sType = "image" Then 
          sName = File.SetExt(sName, LCase(cmbImageType.Text))
        Else If sType = "html" Or sType = "css" Then
          sName = File.SetExt(sName, sType)
        Endif
      Endif
    
      sMsg = Project.CheckFileName(sName, $sDir)
      If sMsg Then 
        txtName.SetFocus
        Balloon.Warning(sMsg, txtName)
        Return True
      Endif
  
    Case Else

      sMsg = Project.CheckClassName(sName, True)
      If sMsg Then 
        txtName.SetFocus
        Balloon.Warning(sMsg, txtName)
        Return True
      Endif
  
  End Select 
  
  Select Case sType
  
    Case "module"
    
      sTemp = "' Gambas module file\n\n"
      
      Project.Insert(sName, sType, sTemp)
  
    Case "class"
    
      sTemp = "' Gambas class file\n\n"
      If chkExported.Value Then sTemp &= "EXPORT\n"
      If cmbParent.Index > 0 Then sTemp &= "INHERITS " & cmbParent.Text & "\n"
      sTemp = RTrim(sTemp) & "\n"
      
      Project.Insert(sName, sType, sTemp)
  
    Case "form"
    
      sTemp = "' Gambas class file\n\n"
      
      If chkDialog.Value Then 
        sTemp &= "PUBLIC SUB Run() AS Boolean\n\n"
                 "  RETURN NOT ME.ShowModal()\n\n"
                 "END\n\n"
                 "PUBLIC SUB btnOK_Click()\n\n"
                 "  ME.Close(TRUE)\n\n"
                 "END\n\n"
                 "PUBLIC SUB btnCancel_Click()\n\n"
                 "  ME.Close\n\n"
                 "END\n\n" 
      Endif
      
      Project.Insert(sName, "class", sTemp, True, True)
      
      sTemp = Project.FORM_MAGIC & "\n\n" &   
              "{ " & sName & " Form\n" &   
              "  MoveScaled(0, 0, 68, 64)\n"
      
      If chkDialog.Value Then
        sTemp &= "  Resizable = False\n"
        sTemp &= "{ HBox1 HBox\n"
                 "  MoveScaled(1,59,66,4)\n"
                 "  Spacing = 8\n"
                 "  { Panel1 Panel\n"
                 "    MoveScaled(4,0,4,4)\n"
                 "    'Move(24,0,24,24)\n"
                 "    Expand = True\n"
                 "  }\n"
                 "  { btnOK Button\n"
                 "    MoveScaled(31,0,16,4)\n"
                 "    Text = (\"OK\")\n"
                 "    Default = True\n"
                 "  }\n"
                 "  { btnCancel Button\n"
                 "    MoveScaled(48,0,16,4)\n"
                 "    Text = (\"Cancel\")\n"
                 "    Cancel = True\n"
                 "  }\n"
                 "}\n"
      Endif
      
      sTemp &= "}\n"
      
      Project.Insert(sName, "form", sTemp)
      
    Case "webpage"

      Project.Insert(sName, "webpage", "<html>\n<body>\n<%\nPrint \"<h1>Gambas</h1>\";\n%>\n</body>\n</html>\n")
      
    Case "text"
    
      File.Save($sDir &/ sName, "")
      Project.InsertFile(sName, $sDir)
  
    Case "html"
    
      File.Save($sDir &/ sName, "<html>\n<body>\n</body>\n</html>\n")
      Project.InsertFile(sName, $sDir)
  
    Case "css"
    
      File.Save($sDir &/ sName, "BODY\n{\n}\n")
      Project.InsertFile(sName, $sDir)
  
    Case "image"
    
      hImage = New Image(txtWidth.Value, txtHeight.Value)
      hImage.Fill(Color.Transparent)
      hImage.Save($sDir &/ sName)

      Project.InsertFile(sName, $sDir)
  
  End Select  
  
End

Private Sub ImportDependencies(sName As String, sOrig As String, bLink As Boolean)
  
  Dim hIn As File
  Dim hOut As File
  Dim sLine As String
  Dim iPos, iPos2 As Integer
  Dim sImg As String
  Dim sImportDir As String
  Dim sDestImg As String
  Dim sForm As String
  Dim bSave As Boolean

  Inc Application.Busy
  
  sForm = Project.Dir &/ sName & ".form"
  sOrig = File.Dir(sOrig)
  
  hIn = Open sForm
  hOut = Open Temp$("form") For Create 
  
  While Not Eof(hIn)
  
    Line Input #hIn, sLine
    
    iPos = InStr(sLine, "Picture[")
    If iPos = 0 Then Goto NEXT_LINE
    
    sImg = Scan(sLine, "*Picture\\[\"*\"]")[1]
    If sImg Like "icon:/*" Then Goto NEXT_LINE
    
    sImportDir = Project.Dir &/ "import"
    If Not Exist(sImportDir) Then Project.InsertDirectory(sImportDir)
    sImportDir &/= sName
    If Not Exist(sImportDir) Then Project.InsertDirectory(sImportDir)
    
    sDestImg = sImportDir &/ File.Name(sImg)
    
    If Exist(sOrig &/ sImg) Then
      If Not Exist(sDestImg) Then
        Project.InsertFile(File.Name(sDestImg), File.Dir(sDestImg), sOrig &/ sImg, True, bLink)
      Endif
      sLine = Left(sLine, iPos + 7) & Chr$(34) & "import" &/ sName &/ File.Name(sDestImg) & Chr$(34) & "]"    
      bSave = True
    Else 
      Continue 
    Endif 

NEXT_LINE:  
    Print #hOut, sLine
    
  Wend
  
  Close #hOut
  Close #hIn
  
  If bSave Then
    Kill sForm
    Copy Temp$("form") To sForm
    Project.RefreshKey(sForm)
  Endif
  
Finally 
  
  Dec Application.Busy  
  
End



Private Sub ImportFile() As Boolean
  
  Dim sDir As String
  Dim sName As String
  Dim sTemp As String
  Dim sType As String
  
  sTemp = fchExisting.Value
  sDir = File.Dir(fchExisting.Value)
  sName = File.Name(fchExisting.Value)
  
  Select Case File.Ext(sTemp)
  
    Case "module"
      sName = File.BaseName(Project.GetUniqueName(Project.Dir, sName))
      Project.Insert(sName, "module", sTemp,,, chkLink.Value)
  
    Case "class"
      sName = File.BaseName(Project.GetUniqueName(Project.Dir, sName))
      Project.Insert(sName, "class", sTemp,,, chkLink.Value)
  
    Case "form"
      sName = File.BaseName(Project.GetUniqueName(Project.Dir, sName))
      Project.Insert(sName, "class", File.SetExt(sTemp, "class"), True, True, chkLink.Value)
      Project.Insert(sName, "form", sTemp,, True, chkLink.Value)
      ImportDependencies(sName, sTemp, chkLink.Value)
      Project.OpenForm(sName)
          
    Case "webpage"
      sName = File.BaseName(Project.GetUniqueName(Project.Dir, sName))
      Project.Insert(sName, "webpage", sTemp,,, chkLink.Value)
  
    Default
      sName = Project.GetUniqueName($sDir, sName)
      Project.InsertFile(sName, $sDir, sTemp,, chkLink.Value)
  
  End Select
  
End



Public Sub btnOK_Click()

  If tabFile.Index = 0 Then   
    If CreateFile() Then Return
  Else 
    If ImportFile() Then Return
  Endif

  Me.Close(True)

Catch 

  FGambas.Error(("Cannot add file.") & "\n\n" & Error.Text & "\n" & Error.Where)
  
End

Public Sub Form_Close()

  Settings.Write(Me)  
  If $bInit Then Settings.Write(fchExisting)  
  
End

Public Sub tabFile_Click()

  If tabFile.Index = 1 Then 
    If Not $bInit Then 
      Settings.Read(fchExisting)
      $bInit = True
    Endif
    If $iFilter >= 0 Then 
      fchExisting.FilterIndex = $iFilter
      $iFilter = -1
    Endif
  Endif

  fchExisting_Change

End

Public Sub fchExisting_Change()

  If tabFile.Index = 1 Then 
    btnOK.Enabled = fchExisting.Value
  Else 
    btnOK.Enabled = True
  Endif  

End

Public Sub fchExisting_Activate()

  btnOK.Value = True  

End

Public Sub fchExisting_Icon(Path As String)

  If Exist(Path &/ ".project") Then 
    fchExisting.Icon = Project.GetIcon(Path)    
  Endif

End
