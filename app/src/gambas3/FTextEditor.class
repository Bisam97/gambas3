' Gambas class file

Public Path As String
Public Editor As Editor

Property Read ReadOnly As Boolean

Static Private $aExt As String[] = ["htm", "html", "xml", "svg", "css", "webpage"]

Private Const STYLE_HTML As Integer = 1
Private Const STYLE_CSS As Integer = 2
Private Const STYLE_WEB As Integer = 3

Private Const TAG_HTML As Integer = 0
Private Const TAG_CODE As Integer = 1

Private $bModify As Boolean
Private $iStyle As Integer

Private $iViewMode As Integer
Private VIEWMODE_NORMAL As Integer = 0 
Private VIEWMODE_HORIZONTAL As Integer = 1
Private VIEWMODE_VERTICAL As Integer = 2

Private $hEditor1 As Editor
Private $hEditor2 As Editor

Public Sub _new(sPath As String, Optional bModule As Boolean)

  Path = sPath
  Editor = edtEditor
  
  If bModule Then
    btnShowCode.Visible = True
    Me.Name = File.BaseName(Path)
  Else
    btnShowCode.Visible = False
    Me.Name = File.Name(Path)
  Endif

End

Public Sub LoadFile()
  
  Dim sExt As String = LCase(File.Ext(Path))
  
  If $aExt.Find(sExt) >= 0 Then
    With edtEditor
      .Clear
      .Highlight = Highlight.Custom
      .Flags[Editor.HighlightBraces] = True
    End With     

    Select Case sExt
      Case "css"
        $iStyle = STYLE_CSS
      Case "webpage"
        $iStyle = STYLE_WEB
      Case Else 
        $iStyle = STYLE_HTML
    End Select 
  Endif

  ReadConfig

  Project.InitMove(Me)

  SetReadOnly
  Reload

  $bModify = False
  edtEditor.SetFocus

  DrawTitle
  
End

Public Sub Form_Arrange()
  
  Dim iToolbarOffset As Integer
  
  'If we add the ability to hide the toolbar then uncomment this code 
  'IF $bToolbar THEN
  '  panToolBar.Move(0, 0, ME.CLientW)
  '  iToolbarOffset = panToolBar.H
  'ELSE
  '  iToolbarOffset = 0
  'ENDIF
  
  iToolbarOffset = panToolBar.H
  
  Select Case $iViewMode
    Case 0
      edtEditor.Move(0, iToolbarOffset, Me.ClientW, Me.ClientH - iToolbarOffset)
    Case 1
      splHorizontal.Move(0, iToolbarOffset, Me.ClientW, Me.ClientH - iToolbarOffset)
    Case 2
      splVertical.Move(0, iToolbarOffset, Me.ClientW, Me.ClientH - iToolbarOffset)
  End Select 

End

Public Sub ReadConfig()

  ReadConfigEditor(edtEditor)
  If $hEditor1 Then ReadConfigEditor($hEditor1)
  If $hEditor2 Then ReadConfigEditor($hEditor2)

End

Static Public Sub ReadConfigEditor(hEditor As Editor)

  hEditor.Font = Font[Settings["/Editor/Font", Project.DEFAULT_FONT]]

  MTheme.InitEditor(hEditor)

  hEditor.Flags[hEditor.ShowProcedureLimits] = Settings["/Editor/ProcedureLimit", 2] > 0
  hEditor.Flags[hEditor.BlendedProcedureLimits] = Settings["/Editor/ProcedureLimit", 2] = 2
  hEditor.Flags[hEditor.ShowModifiedLines] = Settings["/Editor/ShowChange", True]
  hEditor.Flags[hEditor.ShowLineNumbers] = Settings["/Editor/ShowLineNumbers", False]
  hEditor.Flags[hEditor.ShowCurrentLine] = Settings["/Editor/ShowCurrent", True]
  
End

Public Function Save() As Boolean

  'Project.Config.WriteString("/Window" &/ Name &/ "Pos",
  '  CStr(ME.X) & "," & CStr(ME.Y) & "," & CStr(ME.Width) & "," & CStr(ME.Height))

  If Not $bModify Then Return

  Save.Begin(Path)

  File.Save(Path, Editor.Text)
  Editor.Reset
  $bModify = False
  DrawTitle

  Save.End()

Catch

  Return Save.Error()

End

Private Sub DrawTitle()

  Project.DrawTitle(Me)

End

Public Sub Modify(Optional bReset As Boolean)

  If Project.ReadOnly Then Return
  If $bModify <> bReset Then Return

  $bModify = Not bReset
  DrawTitle
  If $bModify Then Inc Project.TimeStamp

End


Public Function IsModified() As Boolean

  Return $bModify

End


Public Sub Editors_Change()

  Modify

End


Public Sub Editors_Cursor()

  'PRINT edtEditor.Line; edtEditor.Column
  'lblCursor.Text = CStr(edtEditor.Line + 1) & " : " & CStr(edtEditor.Column + 1)
  DrawInfo

End

Public Sub Editors_KeyPress()
  
  If Key.Code = Key.Escape Then 
    Action["find"].Value = False
  Endif
  
  If Key.Code = Key.Insert Then

    If Key.Shift Then
      If Not Editor.ReadOnly Then
        Editor.Paste
      Endif 
    Else If Key.Control Then
      Editor.Copy
    Endif 
    
  Else If Key.Code = Key.Delete Then

    If Key.Shift Then
      If Not Editor.ReadOnly Then
        Editor.Cut
      Endif 
    Endif 
  Endif 

End



'PUBLIC SUB Form_KeyPress(Ascii AS String, Code AS Integer, State AS Integer)
'
'  IF Code = Asc("S") AND State = Mouse.Control THEN
'    ME.Save
'  ENDIF
'
'END



Public Sub Form_GotFocus()
  
  Editor.SetFocus
  
End

Public Sub Goto(iLine As Integer, Optional iColumn As Integer = -1)

  'DEC iLine
  If iColumn < 0 Then iColumn = Editor.Column
  Editor.Goto(iLine, iColumn, True)

End


Public Sub GotoCenter(iLine As Integer, Optional iColumn As Integer = -1)

  Goto(iLine, iColumn)

End


Public Sub Editors_Menu()

  mnuEditor.Popup

End

Public Sub Editors_GotFocus()
  
  Editor = Last 
  mnuEditor.Enabled = True
  
End

Public Sub mnuSave_Click()

  Save

End


' PUBLIC SUB mnuFind_Click()
'
'   DIM sSel AS String
'   DIM iPos AS Integer
'
'   sSel = Left$(Trim(edtEditor.Selection.Text), 64)
'   iPos = Instr(sSel, gb.NewLine)
'   IF iPos THEN sSel = Left$(sSel, iPos - 1)
'
'   Project.FindForm.Find(sSel)
'
' END
'
'
' PUBLIC SUB mnuFindNext_Click()
'
'   Project.FindForm.FindNext
'
' END
'
'
' PUBLIC SUB mnuFindPrevious_Click()
'
'   Project.FindForm.FindPrevious
'
' END


Public Sub Rename(sNewName As String, sNewPath As String)

  Me.Name = sNewName
  Path = sNewPath 'File.Dir(Path) &/ sNewName & "." & File.Ext(Path)
  DrawTitle

End


Public Sub mnuCut_Click()

  Editor.Cut

End

Public Sub mnuCopy_Click()

  Editor.Copy

End

Public Sub mnuPaste_Click()

  Editor.Paste

End

Public Sub mnuUndo_Click()

  Editor.Undo

End

Public Sub mnuRedo_Click()

  Editor.Redo

End


Public Sub mnuGotoLine_Click()

  Dim iLine As Integer

  iLine = FGotoLine.Run(Editor.Line + 1)
  If iLine <= 0 Then Return
  GotoCenter(iLine - 1)

End


' PUBLIC SUB mnuWordWrap_Click()
'
'   edtEditor.Wrap = NOT edtEditor.Wrap
'   mnuWordWrap.Checked = edtEditor.Wrap
'
' END


Public Sub mnuSelectAll_Click()

  Editor.SelectAll()

End


Private Sub SetReadOnly()

  edtEditor.ReadOnly = Project.ReadOnly Or Project.Running Or Stat(Path).Type = gb.Link

  If $hEditor1 Then $hEditor1.ReadOnly = edtEditor.ReadOnly
  If $hEditor2 Then $hEditor2.ReadOnly = edtEditor.ReadOnly

End

Public Sub OnProjectDebug()

  SetReadOnly

End

Public Sub OnShowString(sStr As String, bIgnoreCase As Boolean)
  
  edtEditor.ShowString(sStr, bIgnoreCase)
  If $hEditor1 Then $hEditor1.ShowString(sStr, bIgnoreCase)
  If $hEditor2 Then $hEditor2.ShowString(sStr, bIgnoreCase)
  
End

Public Sub mnuFind_Click()

  FFind.Find

End

Public Sub mnuReplace_Click()

  FFind.Find(True)

End

Private Sub AnalyzeCode(sText As String) As String
  
  Dim iInd As Integer
  Dim iPos As Integer
  Dim iLen As Integer
  
  If Not sText Then Return
  
  Highlight.Analyze(sText, True)
  
  iPos = 0
  For iInd = 0 To Highlight.Symbols.Max
    
    If iPos < Highlight.Positions[iInd] Then 
      Highlight.Add(Highlight.Normal, Highlight.Positions[iInd] - iPos)
      iPos = Highlight.Positions[iInd]
    Endif
    
    iLen = String.Len(Highlight.Symbols[iInd])
    Highlight.Add(Highlight.Types[iInd], iLen)
    iPos += iLen
    
  Next

  If iPos < String.Len(Highlight.TextAfter) Then 
    Highlight.Add(Highlight.Normal, String.Len(Highlight.TextAfter) - iPos)
  Endif
  
  Return Highlight.TextAfter

End


Public Sub Editors_Highlight()

  Dim iState As Integer
  Dim iNextState As Integer
  Dim iInd As Integer
  Dim J As Integer
  Dim sText As String
  Dim sTextAfter As String
  Dim sCar As String
  Dim iPos As Integer
  Dim bMarkup As Boolean
  Dim bQuote As Boolean
  Dim bLimit As Boolean
  Dim bCode As Boolean
  Dim iTag As Integer
  Dim iCount As Integer
  Dim iCodeStart As Integer

  iState = Highlight.State
  iTag = Highlight.Tag
  sText = Highlight.Text

  'PRINT "Highlight:";; iState;; iTag;; sText

  Select Case $iStyle
  
    Case STYLE_HTML, STYLE_WEB

      If iTag = TAG_HTML Then
        bMarkup = iState = Highlight.Keyword
      Else If iTag = TAG_CODE
        bCode = True
        iCodeStart = 1
      Endif
    
      For iInd = 1 To String.Len(sText)
    
        iNextState = iState
        sCar = String.Mid$(sText, iInd, 1)
    
        If bCode Then
        
          If bQuote Then
            If sCar = Chr$(34) Then 
              bQuote = False
            Endif
          Else If sCar = Chr$(34) Then
            bQuote = True
          Else If sCar = "'" Then
            Break
          Else If String.Mid$(sText, iInd, 2) = "%>" Then
            bCode = False
            sTextAfter &= AnalyzeCode(String.Mid$(sText, iCodeStart, iInd - iCodeStart))
            Highlight.Add(Highlight.Keyword, 2)
            sTextAfter &= "%>"
            Inc iInd
            Highlight.AlternateState = False
            iState = Highlight.Normal
            iNextState = Highlight.Normal
          Endif
          Continue
        
        Else If bMarkup Then
    
          If bQuote Then
            If sCar = Chr$(34) Then 
              bQuote = False
              iNextState = Highlight.Operator
            Endif
          Else If sCar = ">" Then
            bMarkup = False
            iState = Highlight.Keyword
            iNextState = Highlight.Normal
          Else If sCar = " " Then
            iNextState = Highlight.Operator
          Else If sCar = "=" Then
            iNextState = Highlight.String
          Else If sCar = Chr$(34) Then 
            bQuote = True
          Endif
    
        Else
    
          Select Case iState
            Case Highlight.Normal
              If sCar = "<" Then
                If String.Mid$(sText, iInd, 4) = "<!--" Then
                  iState = Highlight.Comment
                  iNextState = Highlight.Comment
                Else If String.Mid$(sText, iInd, 9) = "<![CDATA[" Then
                  iState = Highlight.Symbol
                  iNextState = Highlight.Symbol
                Else If $iStyle = STYLE_WEB And If String.Mid$(sText, iInd, 2) = "<%" Then
                  If String.Mid$(sText, iInd + 2, 1) = "=" Then
                    iCount = 3
                  Else 
                    iCount = 2
                  Endif
                  Highlight.AlternateState = True
                  Highlight.Add(Highlight.Keyword, iCount)
                  sTextAfter &= String.Mid$(sText, iInd, iCount)
                  iInd += iCount - 1
                  iState = Highlight.Normal
                  iNextState = Highlight.Normal
                  bCode = True
                  iCodeStart = iInd + 1
                  Continue
                Else
                  iState = Highlight.Keyword
                  iNextState = Highlight.Keyword
                  bMarkup = True
                  If String.Mid$(sText, iInd, 5) = "<body" Or If String.Mid$(sText, iInd, 5) = "<head" Then bLimit = True
                Endif
              Else If sCar = "&" Then
                iPos = String.InStr(sText, ";", iInd)
                If iPos = 0 Or iPos = iInd + 1 Then
                  iState = Highlight.Error
                Else
                  For J = iInd + 1 To iPos - 1
                    sCar = String.Mid$(sText, J, 1)
                    If IsLetter(sCar) Then Continue
                    If IsDigit(sCar) Then Continue
                    If InStr("_#", sCar) Then Continue
                    Break
                  Next
                  If J = iPos Then
                    Highlight.Add(Highlight.Number, iPos - iInd + 1)
                    sTextAfter &= String.Mid$(sText, iInd, iPos - iInd + 1)
                    iInd = iPos
                    Continue
                  Else
                    iState = Highlight.Error
                  Endif
                Endif
              Endif
            Case Highlight.Comment
              If sCar = ">" And If iInd > 2 And If String.Mid$(sText, iInd - 2, 2) = "--" Then
                iNextState = Highlight.Normal
              Endif
            Case Highlight.Symbol
              If sCar = ">" And If iInd > 2 And If String.Mid$(sText, iInd - 2, 2) = "]]" Then
                iNextState = Highlight.Normal
              Endif
          End Select
    
        Endif
    
        sTextAfter &= sCar
        Highlight.Add(iState)
        iState = iNextState
    
      Next
    
      If bCode Then
        sTextAfter &= AnalyzeCode(String.Mid$(sText, iCodeStart))
        iTag = TAG_CODE
      Else
        iTag = TAG_HTML
        If iNextState <> Highlight.Comment And If iNextState <> Highlight.Symbol Then
          If bMarkup Then 
            iNextState = Highlight.Keyword
          Else 
            iNextState = Highlight.Normal
          Endif
        Endif
      Endif
      
      Highlight.Text = sTextAfter
      
    Case STYLE_CSS
    
      For iInd = 1 To String.Len(sText)
    
        iNextState = iState
        sCar = String.Mid$(sText, iInd, 1)

        Select Case iState
        
          Case Highlight.Normal, Highlight.String
            If sCar = "." Or If sCar = "#" Then 
              iState = Highlight.String
              iNextState = iState
            Else If sCar = " " Then 
              iState = Highlight.Normal
              iNextState = iState
            Else If sCar = "{" Then 
              iState = Highlight.Keyword
              iNextState = iState
              iTag = Highlight.Keyword
              bLimit = True
            Else If sCar = "/" Then 
              If Mid$(sText, iInd, 2) = "/*" Then 
                iState = Highlight.Comment
                iNextState = iState
              Endif
            Endif
            
          Case Highlight.Keyword, Highlight.Number
            If sCar = ":" Then 
              iNextState = Highlight.Number
            Else If sCar = ";" Then 
              iState = Highlight.Keyword
              iNextState = iState
            Else If sCar = "}" Then 
              iNextState = Highlight.Normal
              iTag = 0
            Else If sCar = "/" Then 
              If Mid$(sText, iInd, 2) = "/*" Then 
                iState = Highlight.Comment
                iNextState = iState
              Endif
            Endif
                        
          Case Highlight.Comment
            If sCar = "/" And If iInd > 1 And If String.Mid$(sText, iInd - 1, 1) = "*" Then
              iNextState = IIf(iTag, iTag, Highlight.Normal)
            Endif
            
        End Select
        
        Highlight.Add(iState)
        iState = iNextState
    
      Next
    
  End Select 

  Highlight.State = iNextState
  Highlight.Tag = iTag
  Highlight.ShowLimit = bLimit

End

Public Sub Form_Activate()

  mnuEditor.Enabled = True

End

Public Sub Form_Deactivate()

  mnuEditor.Enabled = False

End

Private Function ReadOnly_Read() As Boolean

  Return edtEditor.ReadOnly  

End

Private Sub DrawInfo()
  
  lblEditor.Text = CStr(Editor.Line + 1) & ":" & CStr(Editor.Column + 1)
  
End

Public Sub Reload()

  edtEditor.Text = File.Load(Path)
  Editor.SetFocus
  Modify(True)

End

Public Sub mnuReload_Click()

  If IsModified() Then
    If Message.Warning(("The file has been modified.\n\nAll your changes will be lost."), ("Reload"), ("Cancel")) <> 1 Then Return
  Endif

  Reload

End

Public Sub GetState() As String
  
  Return CStr(Editor.Line) & "." & CStr(Editor.Column)
  
End

Public Sub SetState(sState As String)
  
  Dim aState As String[] = Split(sState, ".")
  
  Editor.Goto(CInt(aState[0]), CInt(aState[1]))
  
End

Private Sub InitEditor(hEditor As Editor)
  
  With hEditor
    .View = edtEditor
    .Highlight = edtEditor.Highlight
    .Flags[Editor.HighlightCurrent] = edtEditor.Flags[Editor.HighlightCurrent]
    .Flags[Editor.HighlightBraces] = edtEditor.Flags[Editor.HighlightBraces]
    .ReadOnly = edtEditor.ReadOnly
    .TabSize = edtEditor.TabSize
  End With 
  ReadConfigEditor(hEditor)
  
End

Private Sub SetViewMode(iViewMode As Integer)
  
  If $iViewMode = iViewMode Then Return 
  $iViewMode = iViewMode

  If $iViewMode <> VIEWMODE_NORMAL And If Not $hEditor1 Then 
    $hEditor1 = New Editor(Me) As "Editors"
    InitEditor($hEditor1)
    $hEditor2 = New Editor(Me) As "Editors"
    InitEditor($hEditor2)
    FFind.OnNewForm(Me)
  Endif
  
  Select Case $iViewMode
  
    Case VIEWMODE_NORMAL
      edtEditor.Show
      splHorizontal.Hide
      splVertical.Hide
      Editor = edtEditor  
      
    Case VIEWMODE_HORIZONTAL
      $hEditor1.Reparent(splHorizontal)
      $hEditor2.Reparent(splHorizontal)
      edtEditor.Hide
      splHorizontal.Show
      splVertical.Hide
      Editor = $hEditor1
  
    Case VIEWMODE_VERTICAL
      $hEditor1.Reparent(splVertical)
      $hEditor2.Reparent(splVertical)
      edtEditor.Hide
      splHorizontal.Hide
      splVertical.Show
      Editor = $hEditor1
  
  End Select   
  
  Editor.SetFocus
  Form_Arrange
  Editors_Cursor
  
End

Public Sub mnuNoSplit_Click()
  
  SetViewMode(VIEWMODE_NORMAL)

End

Public Sub mnuHorizontalSplit_Click()

  SetViewMode(VIEWMODE_HORIZONTAL)

End

Public Sub mnuVerticalSplit_Click()

  SetViewMode(VIEWMODE_VERTICAL)

End


Public Sub Editors_LostFocus()

  mnuEditor.Enabled = False

End

Public Sub mnuShowCode_Click()

  Project.OpenFile(Me.Name)

End

