' Gambas class file

Public Name As String
Public Parent As String
Public Symbols As Collection
Public Creatable As Boolean
Public AutoCreatable As Boolean
Public Component As String
Public ParentComponent As String
Public DefaultEvent As String
Public Events As String[]
Public PropertyList As String[]
Public Properties As Collection
Public VirtualControl As Boolean
Public DrawWith As String
Public Container As Boolean
Public Form As Boolean
Public MultiContainer As Boolean
Public DefaultWidth As Short
Public DefaultHeight As Short
Public Group As String
Public Family As String
Public Similars As String[]
Public Structure As Boolean
Public DeclareIn As String

Public Sub _new(sName As String, Optional sParent As String)

  Dim hSym As CSymbolInfo

  Name = sName
  {Parent} = sParent
  Symbols = New Collection(gb.IgnoreCase)

  If {Parent} Then
    'IF Parent = "GridView" THEN STOP
    ParentComponent = CComponent.Classes[sParent].Component
    'IF ERROR THEN
    '  STOP
    '  Error.Raise(Error.Text)
    'ENDIF
    For Each hSym In CComponent.Classes[sParent].Symbols
      Symbols[hSym.Name] = hSym
    Next
  Endif

End

Public Sub CopyFrom(hClass As CClassInfo, sType As String, sNewType As String) 

  Dim hSym As CSymbolInfo
  Dim hCopySym As CSymbolInfo

  With hClass
  
    Parent = .Parent
    Symbols = New Collection(gb.IgnoreCase)
    
    For Each hSym In .Symbols
      hCopySym = hSym.Copy(sType, sNewType)
      hCopySym.Class = Name
      Symbols[hSym.Name] = hCopySym
    Next
    
    Creatable = .Creatable
    AutoCreatable = .AutoCreatable
    Component = .Component
    ParentComponent = .ParentComponent
    
    If .Properties Then
      Error "Warning: cannot use "; hClass.Name; " as template class"
      Return
    Endif
  
  End With  
  
End


Public Sub InitControl()

  Dim aProp As String[]
  Dim sProp As String
  Dim sStr As String
  Dim sParent As String
  Dim hProp As CPropertyInfo
  Dim hSym As CSymbolInfo
  'DIM hCtrl AS Object
  Dim sDefVal As String
  Dim iPos As Integer
  Dim iPos2 As Integer
  Dim hClass As CClassInfo
  Dim bRemove As Boolean
  Dim aCont As String[]
  Dim sKind As String
  Dim bDoNotApply As Boolean

  'DEBUG Component;; Name

  hSym = Symbols["_Family"]
  If hSym Then Family = hSym.Value

  hSym = Symbols["_Group"]
  If hSym Then Group = hSym.Value
  If Not Group Then Group = Family

  hSym = Symbols["_IsForm"]
  If hSym Then Form = hSym.Value
  
  If Form Then CModule.Activate(Family)

  hSym = Symbols["_IsVirtual"]
  If hSym Then VirtualControl = hSym.Value

  hSym = Symbols["_IsContainer"]
  If hSym Then 
    Container = hSym.Value
  Endif
  
  hSym = Symbols["_IsMultiContainer"]
  If hSym Then 
    MultiContainer = hSym.Value
  Endif

  hSym = Symbols["_Similar"]
  If hSym Then Similars = Split(hSym.Value, ",")

  If Similars Then
    For Each sStr In Similars
      CComponent.AddSimilar(Name, sStr)
    Next
  Endif

  hSym = Symbols["_Properties"]
  If hSym Then
    If hSym.Class = Name And If hSym.Component = Component Then
      sProp = hSym.Value
    Else 
      sProp = "*"
    Endif
  Endif

  sParent = ParentComponent &/ Parent
  While Left$(sProp) = "*"
    sProp = Mid$(sProp, 3)
    sStr = ""
    Try sStr = CComponent.Classes[sParent].Symbols["_Properties"].Value 
    If sStr Then 
      If sProp Then
        sProp = sStr & "," & sProp
      Else 
        sProp = sStr
      Endif 
    Endif
    sParent = CComponent.Classes[sParent].ParentComponent &/ CComponent.Classes[sParent].Parent
  Wend

'   IF Left$(sProp) = "*" THEN
'     sProp = Mid$(sProp, 3)
'     sParent = CComponent.Classes[Parent].Symbols["_Properties"].Value
'     IF Left(sParent, Len(CPropertyInfo.EVENT_NAME)) = CPropertyInfo.EVENT_NAME THEN
'       sParent = Mid$(sParent, Len(CPropertyInfo.EVENT_NAME) + 2)
'     ENDIF
'     IF sParent THEN
'       IF sProp THEN sProp = "," & sProp
'       sProp = sParent & sProp
'     ENDIF
'   ENDIF

  Properties = New Collection
  For Each sProp In Split(sProp)

    ' Name can be "Name{Kind}=Default"
    iPos = InStr(sProp, "{")
    If iPos Then
      iPos2 = InStr(sProp, "}", iPos + 1)
      If iPos2 = 0 Then iPos2 = Len(sProp)
      sKind = Mid$(sProp, iPos + 1, iPos2 - iPos - 1)
      sProp = Left$(sProp, iPos - 1) & Mid$(sProp, iPos2 + 1)
    Else 
      sKind = ""
    Endif
    iPos = InStr(sProp, "=")
    If iPos Then
      sDefVal = Mid$(sProp, iPos + 1)
      sProp = Left$(sProp, iPos - 1)
    Else
      sDefVal = ""
    Endif

    bRemove = Left(sProp) = "-"
    If bRemove Then sProp = Mid$(sProp, 2)

    ' IF sProp = "Action" AND Name = "ToolBar" THEN 
    '   DEBUG CComponent.Classes.Count;; Component;; CComponent.Classes[Component &/ Name].Symbols[sProp]
    '   STOP
    ' ENDIF

    If bRemove Then
      Properties[sProp] = Null
    Else

      If Component Then
        'PRINT "? "; Component; ": "; Name; "."; sProp
        If Not CComponent.Classes[Component &/ Name].Symbols[sProp] Then
          Error Component; ": "; Name; "."; sProp; " declared but not implemented"
          Continue
        Endif
      Endif

      If Family <> "Form" Then 
        If MultiContainer Then
          bDoNotApply = Not CPropertyInfo.MULTI_CONTAINER_PROP.Exist(sProp)
        Else
          bDoNotApply = True
        Endif
      Else
        bDoNotApply = VirtualControl
      Endif
      
      hProp = New CPropertyInfo(Component, Name, sProp, sKind, Null, False, bDoNotApply, sDefVal)
      Properties[sProp] = hProp
    Endif

  Next

  Try DefaultEvent = Symbols["_DefaultEvent"].Value

  Events = New String[]
  For Each hSym In Symbols
    If hSym.Kind = ":" Then
      If Left$(hSym.Name) = ":" Then
        Events.Add(Mid$(hSym.Name, 2))
      Else
        Events.Add(hSym.Name)
      Endif
    Endif
  Next
  Events.Sort

  ' Taille par défaut
  
  'IF Name = "Button" THEN STOP
  Try sStr = Symbols["_DefaultSize"].Value 
  If sStr Then 
    aCont = Split(sStr)
    Try DefaultWidth = Val(aCont[0]) * Desktop.Scale
    Try DefaultHeight = Val(aCont[1]) * Desktop.Scale
  Endif
  
  ' Modification des propriétés

  PropertyList = New String[]

  For Each hProp In Properties
    PropertyList.Add(hProp.Name)
  Next

  'If VirtualControl Then

  Properties["#X"] = New CPropertyInfo("", Name, "#X", "", Null, True, True)
  Properties["#Y"] = New CPropertyInfo("", Name, "#Y", "", Null, True, True)
  If Not VirtualControl Then
    Properties["#Width"] = New CPropertyInfo("", Name, "#Width", "", Null, True, True)
    Properties["#Height"] = New CPropertyInfo("", Name, "#Height", "", Null, True, True)
  Endif

  'Endif

  If {Form} Then 
    If Family = "Form" Then
      Properties[CPropertyInfo.SCALE_NAME] = New CPropertyInfo(Component, Name, CPropertyInfo.SCALE_NAME, "", Null)
      PropertyList.Add(CPropertyInfo.SCALE_NAME, 0)
    Endif
  Else
    Properties[CPropertyInfo.PUBLIC_NAME] = New CPropertyInfo(Component, Name, CPropertyInfo.PUBLIC_NAME, "", Null)
    PropertyList.Add(CPropertyInfo.PUBLIC_NAME, 0)
  Endif

  Properties[CPropertyInfo.EVENT_NAME] = New CPropertyInfo(Component, Name, CPropertyInfo.EVENT_NAME, "", Null)
  PropertyList.Add(CPropertyInfo.EVENT_NAME, 0)

  'IF Name = "Timer" THEN
  Try DrawWith = Symbols["_DrawWith"].Value
  If Family <> "Form" And If MultiContainer And If Not DrawWith Then DrawWith = "TabStrip"
  'IF DrawWith THEN ?Me. <= CRASH!
  '  PRINT ME.Name;; "->";; DrawWith
  'ENDIF

  ' IF hCtrl <> hWin THEN
  '   TRY hCtrl.Delete
  ' ENDIF
End


Public Function GetProperties() As Collection

  If Properties Then
    If Properties.Count Then
      Return Properties
    Endif
  Endif

  If {Parent} Then
    Return CComponent.Classes[ParentComponent &/ {Parent}].GetProperties()
  Endif

End


Public Function Inherits(sClass As String) As Boolean

  Dim hClass As CClassInfo
  
  If {Parent} = sClass Then Return True
  If Not Parent Then Return False
  
  hClass = CComponent.Classes[ParentComponent &/ Parent] 
  Return hClass.Inherits(sClass)

End


Public Sub GetHelpURL() As String
  
  If Component Then Return MHelp.GetClassURL(Component, Name)
  
End

Public Sub GetSimilars() As String[]
  
  Dim cSimilar As New Collection(gb.IgnoreCase)
  Dim sSimilar As String
  Dim aSimilar As New String[]
  
  For Each sSimilar In CComponent.GetSimilars(Name)
    cSimilar[sSimilar] = True
  Next
  
  If Similars Then
    For Each sSimilar In Similars
      cSimilar[sSimilar] = True
      For Each sSimilar In CComponent.GetSimilars(sSimilar)
        If sSimilar <> Name Then cSimilar[sSimilar] = True
      Next
    Next
  Endif
  
  For Each sSimilar In cSimilar
    aSimilar.Add(cSimilar.Key)
  Next
  aSimilar.Sort(gb.IgnoreCase)
  
  Return aSimilar
  
End
