' Gambas class file

Inherits UserControl

Event Click

Property Read Key As String
Property Read Value As Boolean
Property Locked As Boolean
Property Expanded As Boolean

Static Private $iMaxWidth As Integer

'Private panName As HPanel
Private picCheck As PictureBox
Private txtName As Label
Private txtDesc As TextLabel
Private sepComp As Separator
'Private panInfo As Panel
'Private txtInfo As TextLabel
'Private panVBox As VBox

Private $bCheck As Boolean
Private $bGray As Boolean
Private $aComp As New String[]

Private $bLock As Boolean
Private $sKey As String
Private $sDesc As String
Private $sInfo As String
Private $hWatch As Observer
Private $bAnim As Boolean
Private $iLastW As Integer
Private $bExpanded As Boolean
Private $bCanArrange As Boolean

Private Sub AddInfo(aInfo As String[], sTitle As String)

  If aInfo And If aInfo.Count Then 
    If $sInfo Then $sInfo &= "<br>"
    $sInfo &= "<b>" & sTitle & " :</b> " & aInfo.Join(", ") & "."
  Endif
  
End

Static Public Sub ResizeNames(hCont As Container)
  
  Dim hCtrl As Control
  Dim hCompBox As CComponentBox
  
  For Each hCtrl In hCont.Children
    Try hCompBox = hCtrl
    If Not Error Then hCompBox._SetLabelWidth
  Next
  
End

Public Sub _new(hComp As CComponent, bDark As Boolean)

  Dim W, H As Integer
  Dim hSpace As Panel
  Dim hVBox As VBox
  
  $sKey = hComp.Key
  
  H = 3 * Desktop.Scale
  
  If hComp.ThirdParty Then
    Me.Background = IIf(bDark, Color.Lighter(Color.Pink), Color.Lighter(Color.Lighter(Color.Pink)))
  Else
    If bDark Then Me.Background = Color.Merge(Color.LightBackground, Color.TextBackground)
  Endif
  
  Me._Arrangement = Arrange.None
  
  picCheck = New PictureBox(Me) As "picCheck"
  picCheck.Alignment = Align.Top
  picCheck.Picture = Picture["img/16/unchecked.png"]
  'picCheck.Resize(24, 16)
  
  txtName = New Label(Me)
  txtName.Padding = 2
  txtName.Font.Bold = True
  txtName.Text = hComp.Key
  txtName.Alignment = Align.TopNormal
  'txtName.Background = Color.Yellow
  txtName.Adjust
  
  txtDesc = New TextLabel(Me)
  txtDesc.Expand = True
  txtDesc.Padding = 2
  txtDesc.Alignment = Align.TopNormal
  'txtDesc.Background = Color.Yellow
  txtDesc.AutoResize = True
  
  sepComp = New Separator(Me)
  
  Expanded_Write(False)

  $hWatch = New Observer(Me) As "Watcher"
  ' 
  ' panInfo = New Panel(panVBox)
  ' panInfo.Visible = False
  ' 
  ' txtInfo = New TextLabel(panInfo)
  ' txtInfo.Padding = 2
  ' txtInfo.AutoResize = True
  ' 'txtInfo.Background = Color.Yellow

  W = txtName.Font.TextWidth(txtName.Text) + 12
  If W > $iMaxWidth Then 
    $iMaxWidth = W
  Endif
  
  ' $bAnim = True
  
End

Public Sub _SetLabelWidth()
  
  txtName.Width = $iMaxWidth + 16
  $bCanArrange = True
  Watcher_Arrange
  
End


Private Sub RefreshCheck()
  
  Dim sImage As String
  
  If $bCheck Then
    If $bGray Then
      sImage = "checked-gray"
    Else
      sImage = "checked"
    Endif
  Else
    sImage = "unchecked"
  Endif
  
  picCheck.Picture = Picture["img/16/" & sImage & ".png"]
  
End

Public Sub picCheck_MouseDown()
  
  If $bLock Then Return
  If $bCheck And If Not $bGray Then
    Uncheck("")
  Else
    Check("")
  Endif
  RefreshCheck
  Raise Click
  
End

Private Function Value_Read() As Boolean

  Return $bCheck  

End

' Private Sub Value_Write(Value As Boolean)
' 
'   $bCheck = Value
'   RefreshCheck
' 
' End

Private Function Locked_Read() As Boolean

  Return $bLock

End

Private Sub Locked_Write(Value As Boolean)

  $bLock = Value

End

Private Function Key_Read() As String

  Return $sKey  

End

Static Public Sub Reset()
  
  $iMaxWidth = 0
  
End

Private Function Expanded_Read() As Boolean

  Return $bExpanded

End

Private Sub Expanded_Write(Value As Boolean)

  Dim hComp As CComponent
  Dim aInfo As String[]
  Dim I As Integer
  Dim H As Integer

  $bExpanded = Value

  hComp = CComponent.All[$sKey]

  If Not $sDesc Then
    $sDesc = hComp.Name
    Select Case hComp.State
      Case CComponent.UNSTABLE
        $sDesc &= " <b>(" & ("Experimental") & ")</b>"
      Case CComponent.STABLE_NOT_FINISHED
        $sDesc &= " <b>(" & ("Not finished but stable") & ")</b>"
    End Select 
  Endif
  
  If Value Then 
      
    If Not $sInfo Then 
    
      ' Don't load the component. We won't have all the information, but
      ' we won't mismatch the automatic completion
      ' hComp.Load
      
      AddInfo(hComp.Authors, ("Authors"))
      
      aInfo = hComp.Need.Copy()
      For I = 0 To aInfo.Max
        aInfo[I] = CComponent.Features[LCase(aInfo[I])]
      Next
      aInfo.Insert(hComp.Require)
      AddInfo(aInfo, ("Requires"))
      
      AddInfo(hComp.Exclude, ("Excludes"))
      
      aInfo = hComp.Implement.Copy()
      For I = 0 To aInfo.Max
        aInfo[I] = CComponent.Features[LCase(aInfo[I])]
      Next
      AddInfo(aInfo, ("Implements"))
      
      aInfo = hComp.Controls.Copy()
      I = 0
      While I < aInfo.Count
        If Left(aInfo[I]) = "@" Then 
          aInfo.Remove(I)
        Else 
          Inc I
        Endif
      Wend 
      aInfo.Sort
      
      AddInfo(aInfo, ("Provides"))
      $sInfo &= " "
      
    Endif
    
    txtDesc.Text = $sDesc & "<br><font size=\"-1\" color=\"#" & Hex$(Color.Merge(Color.Foreground, Color.LightForeground), 6) & "\">" & $sInfo & "</font>"
    
  Else
    
    txtDesc.Text = $sDesc
    
  Endif

  'txtInfo.Move(txtDesc.X, 0, panInfo.W - txtDesc.X - 24, 8)
  'txtInfo.Adjust
  'panInfo.H = txtInfo.H
  'H = panInfo.Height + panName.Height + panVBox.Padding * 2
  ' 
  ' If False '$bAnim Then  
  '   While Abs(Me.Height - H) >= 2
  '     If Me.Height > H Then
  '       Me.Height -= 2
  '     Else
  '       Me.Height += 2
  '     Endif
  '     Wait
  '   Wend
  ' Endif
  
  ' Me.Height = H
  
  Watcher_Arrange
  
End

Public Sub Watcher_Arrange()

  If Not $bCanArrange Then Return
  
  picCheck.Move(0, 4, 24, 16)
  txtName.Move(24, 0, $iMaxWidth, txtName.H)
  txtDesc.Move(24 + $iMaxWidth, 0, Me.W - 24 - $iMaxWidth)
  Me.H = Max(24, Max(txtName.H, txtDesc.H)) + 2
  sepComp.Move(0, Me.H - 1, Me.W, 2)

  ' If txtDesc.W = $iLastW Then Return
  ' txtDesc.Adjust
  ' $iLastW = txtDesc.W
  ' If panName.H <> txtDesc.H Then
  '   panName.H = txtDesc.H
  '   $bAnim = False
  '   Expanded_Write(panInfo.Visible)
  '   $bAnim = True
  ' Endif
  
End

Public Sub Check(Optional sComponent As String)
  
  If $aComp.Exist(sComponent) Then Return
  
  $aComp.Add(sComponent)
  If Not $bCheck Then
    $bCheck = True
    $bGray = sComponent <> ""
  Else
    If Not sComponent Then $bGray = False
  Endif
  
  RefreshCheck
  
End

Public Sub Uncheck(Optional sComponent As String)
  
  Dim iFind As Integer = $aComp.Find(sComponent)
  
  If iFind < 0 Then Return
  
  $aComp.Remove(iFind)
  
  $bCheck = $aComp.Count > 0
  If sComponent = "" Then $bGray = $bCheck
  RefreshCheck

End
