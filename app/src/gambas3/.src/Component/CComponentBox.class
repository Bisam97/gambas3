' Gambas class file

Inherits UserControl

Event Click

Property Read Key As String
Property Value As Boolean
Property Locked As Boolean
Property Expanded As Boolean

Static Private $iMaxWidth As Integer

Private panName As HPanel
Private picCheck As PictureBox
Private txtName As TextLabel
Private txtDesc As TextLabel
Private panInfo As Panel
Private txtInfo As TextLabel
Private panVBox As VBox

Private $bCheck As Boolean
Private $bLock As Boolean
Private $sKey As String
Private $sInfo As String
Private $hWatch As Observer
Private $bAnim As Boolean
Private $iLastW As Integer

Private Sub AddInfo(aInfo As String[], sTitle As String)

  If aInfo And If aInfo.Count Then 
    If $sInfo Then $sInfo &= "<br>"
    $sInfo &= "<b>" & sTitle & " :</b> " & aInfo.Join(", ") & "."
  Endif
  
End

Static Public Sub ResizeNames(hCont As Container)
  
  Dim hCtrl As Control
  Dim hCompBox As CComponentBox
  
  For Each hCtrl In hCont.Children
    Try hCompBox = hCtrl
    If Not Error Then hCompBox._SetLabelWidth
  Next
  
End


Public Sub _new(hComp As CComponent, bDark As Boolean)

  Dim W, H As Integer
  Dim hSpace As Panel
  Dim hVBox As VBox
  
  $sKey = hComp.Key
  
  H = 3 * Desktop.Scale
  If bDark Then Me.Background = Color.LightBackground
  
  panVBox = New VBox(Me)
  
  panName = New HPanel(panVBox) As "panComp"
  
  hVBox = New VBox(panName)
  hVBox.W = Desktop.Scale * 4
  
  hSpace = New Panel(hVBox)
  hSpace.H = 4
  
  picCheck = New PictureBox(hVBox) As "picCheck"
  picCheck.Alignment = Align.Top
  picCheck.Picture = Picture["img/16/unchecked.png"]
  picCheck.Resize(Desktop.Scale * 4, 16)
  
  txtName = New TextLabel(panName)
  txtName.Padding = 2
  txtName.Text = hComp.Key
  txtName.Alignment = Align.TopNormal
  txtName.Adjust 'AutoResize = True
  
  txtDesc = New TextLabel(panName)
  txtDesc.Expand = True
  txtDesc.Padding = 2
  txtDesc.Alignment = Align.TopNormal
  
  txtDesc.Text = hComp.Name
  Select Case hComp.State
    Case CComponent.UNSTABLE
      txtDesc.Text &= " <b>(" & ("Experimental") & ")</b>"
    Case CComponent.STABLE_NOT_FINISHED
      txtDesc.Text &= " <b>(" & ("Not finished but stable") & ")</b>"
  End Select 
  'txtDesc.Adjust
  
  $hWatch = New Observer(Me) As "Watcher"
  
  panInfo = New Panel(panVBox)
  panInfo.Visible = False

  txtInfo = New TextLabel(panInfo)
  txtInfo.Padding = 2
  'txtInfo.Background = Color.Yellow

  W = txtName.Font.Width(txtName.Text)
  If W > $iMaxWidth Then 
    $iMaxWidth = W
  Endif
  
  Expanded_Write(False)
  $bAnim = True
  
  Watcher_Arrange
  
End

Public Sub _SetLabelWidth()
  
  txtName.Width = $iMaxWidth + 16
  'picCheck.H = txtName.H
  
End


Private Sub RefreshCheck()
  
  picCheck.Picture = Picture[If($bCheck, "img/16/checked.png", "img/16/unchecked.png")]  
  
End

Public Sub picCheck_MouseDown()
  
  If $bLock Then Return
  $bCheck = Not $bCheck
  RefreshCheck
  Raise Click
  
End

Private Function Value_Read() As Boolean

  Return $bCheck  

End

Private Sub Value_Write(Value As Boolean)

  $bCheck = Value
  RefreshCheck

End

Private Function Locked_Read() As Boolean

  Return $bLock

End

Private Sub Locked_Write(Value As Boolean)

  $bLock = Value

End

Private Function Key_Read() As String

  Return $sKey  

End

Static Public Sub Reset()
  
  $iMaxWidth = 0
  
End

Private Function Expanded_Read() As Boolean

  Return panInfo.Visible  

End

Private Sub Expanded_Write(Value As Boolean)

  Dim hComp As CComponent
  Dim aInfo As String[]
  Dim I As Integer
  Dim H As Integer

  panInfo.Visible = Value

  If Value Then 
      
    If Not $sInfo Then 
    
      hComp = CComponent.All[$sKey]

      AddInfo(hComp.Authors, ("Authors"))
      
      aInfo = hComp.Need.Copy()
      For I = 0 To aInfo.Max
        aInfo[I] = CComponent.Features[LCase(aInfo[I])]
      Next
      aInfo.Insert(hComp.Require)
      AddInfo(aInfo, ("Requires"))
      
      AddInfo(hComp.Exclude, ("Excludes"))
      
      aInfo = hComp.Implement.Copy()
      For I = 0 To aInfo.Max
        aInfo[I] = CComponent.Features[LCase(aInfo[I])]
      Next
      AddInfo(aInfo, ("Implements"))
      
      aInfo = hComp.Controls.Copy()
      I = 0
      While I < aInfo.Count
        If Left(aInfo[I]) = "@" Then 
          aInfo.Remove(I)
        Else 
          Inc I
        Endif
      Wend 
      aInfo.Sort
      
      AddInfo(aInfo, ("Provides"))
      $sInfo &= " "
      
    Endif
    
    txtInfo.Text = $sInfo
    txtInfo.Move(txtDesc.X, 0, panInfo.W - txtDesc.X - 24, 8)
    txtInfo.Adjust
    panInfo.H = txtInfo.H
    H = panInfo.Height + panName.Height + panVBox.Padding * 2

  Else 

    H = panName.Height + panVBox.Padding * 2

  Endif

  If False '$bAnim Then  
    While Abs(Me.Height - H) >= 2
      If Me.Height > H Then
        Me.Height -= 2
      Else
        Me.Height += 2
      Endif
      Wait
    Wend
  Endif
  
  Me.Height = H
  
End

Public Sub Watcher_Arrange()

  If txtDesc.W = $iLastW Then Return
  txtDesc.Adjust
  $iLastW = txtDesc.W
  If panName.H <> txtDesc.H Then
    panName.H = txtDesc.H
    $bAnim = False
    Expanded_Write(panInfo.Visible)
    $bAnim = True
  Endif
  
End
