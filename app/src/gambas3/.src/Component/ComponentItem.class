' Gambas class file

Event Click

Property Read Key As String
Property Read Value As Boolean
Property Locked As Boolean
Property Expanded As Boolean
Property Read Picture As Picture

'Static Private $iMaxWidth As Integer

'Private panName As HPanel
'Private picCheck As PictureBox
'Private txtName As Label
'Private txtDesc As TextLabel
'Private sepComp As Separator
'Private panInfo As Panel
'Private txtInfo As TextLabel
'Private panVBox As VBox

Private $bCheck As Boolean
Private $bGray As Boolean
Private $aComp As New String[]

Private $bLock As Boolean
Private $sKey As String
Private $sDesc As String
Private $sInfo As String
'Private $hWatch As Observer
'Private $bAnim As Boolean
'Private $iLastW As Integer
Private $bExpanded As Boolean
'Private $bCanArrange As Boolean

Private Sub AddInfo(aInfo As String[], sTitle As String)

  If aInfo And If aInfo.Count Then 
    If $sInfo Then $sInfo &= "<br>"
    $sInfo &= "<b>" & sTitle & " :</b> " & aInfo.Join(", ") & "."
  Endif
  
End

' Static Public Sub ResizeNames(hCont As Container)
'   
'   Dim hCtrl As Control
'   Dim hCompItem As ComponentItem
'   
'   For Each hCtrl In hCont.Children
'     Try hCompItem = hCtrl
'     If Not Error Then hCompBox._SetLabelWidth
'   Next
'   
' End

Public Sub _new(hComp As CComponent)

  $sKey = hComp.Key
  
End

Public Sub Click()
  
  If $bLock Then Return
  If $bCheck And If Not $bGray Then
    Uncheck("")
  Else
    Check("")
  Endif
  
End

Private Function Value_Read() As Boolean

  Return $bCheck  

End

' Private Sub Value_Write(Value As Boolean)
' 
'   $bCheck = Value
'   RefreshCheck
' 
' End

Private Function Locked_Read() As Boolean

  Return $bLock

End

Private Sub Locked_Write(Value As Boolean)

  $bLock = Value

End

Private Function Key_Read() As String

  Return $sKey  

End

Private Function Expanded_Read() As Boolean

  Return $bExpanded

End

Private Sub Expanded_Write(Value As Boolean)
  
  $bExpanded = Value
  
End

Public Sub GetDescription() As String

  Dim hComp As CComponent
  Dim aInfo As String[]
  Dim I As Integer

  hComp = CComponent.All[$sKey]

  If Not $sDesc Then
    $sDesc = hComp.Name
  Endif
  
  If $bExpanded Then 
      
    If Not $sInfo Then 
    
      ' Don't load the component. We won't have all the information, but
      ' we won't mismatch the automatic completion
      ' hComp.Load
      
      Select Case hComp.State
        Case CComponent.UNSTABLE
          $sInfo = "<i>" & ("Experimental") & "</i>"
        Case CComponent.STABLE_NOT_FINISHED
          $sInfo = "<i>" & ("Not finished but stable") & "</i>"
      End Select 

      AddInfo(hComp.Authors, ("Authors"))
      
      aInfo = hComp.Need.Copy()
      For I = 0 To aInfo.Max
        aInfo[I] = CComponent.Features[LCase(aInfo[I])]
      Next
      aInfo.Insert(hComp.Require)
      AddInfo(aInfo, ("Requires"))
      
      AddInfo(hComp.Exclude, ("Excludes"))
      
      aInfo = hComp.Implement.Copy()
      For I = 0 To aInfo.Max
        aInfo[I] = CComponent.Features[LCase(aInfo[I])]
      Next
      AddInfo(aInfo, ("Implements"))
      
      aInfo = hComp.Controls.Copy()
      I = 0
      While I < aInfo.Count
        If Left(aInfo[I]) = "@" Then 
          aInfo.Remove(I)
        Else 
          Inc I
        Endif
      Wend 
      aInfo.Sort
      
      AddInfo(aInfo, ("Provides"))
      $sInfo &= " "
      
    Endif
    
    Return $sDesc & "<br><font size=\"-1\" color=\"#" & Hex$(Color.Merge(Color.Foreground, Color.LightForeground), 6) & "\">" & $sInfo & "</font>"
    
  Else
    
    Return $sDesc
    
  Endif

End

Public Sub Check(Optional sComponent As String)
  
  If $aComp.Exist(sComponent) Then Return
  
  $aComp.Add(sComponent)
  If Not $bCheck Then
    $bCheck = True
    $bGray = sComponent <> ""
  Else
    If Not sComponent Then $bGray = False
  Endif
  
End

Private Sub GetDependencies(Optional bLib As Boolean) As String[]
  
  Dim aDep As New String[]
  Dim sComp As String
  
  For Each sComp In $aComp
    
    If Not sComp Then Continue
    If Left(sComp) = "/" Then
      aDep.Add(File.Name(sComp))
    Else If Not bLib Then
      aDep.Add(sComp)
    Endif
    
  Next
  
  Return aDep
  
End


Public Sub Uncheck(Optional sComponent As String)
  
  Dim iFind As Integer = $aComp.Find(sComponent)
  Dim sMsg As String
  Dim aDep As String[]
  
  If iFind < 0 Then Return
  
  $aComp.Remove(iFind)
  
  $bCheck = $aComp.Count > 0
  If sComponent = "" Then 
    If Not $bGray And If $bCheck Then
      
      aDep = GetDependencies(True)
      
      If aDep.Count Then
        If aDep.Count = 1 Then
          sMsg = Subst(("This component is required by the following library:<p>&1"), "<b>" & aDep[0] & "</b>")
        Else
          sMsg = Subst(("This component is required by the following libraries:<p>&1"), "<b>" & aDep.Join("</b>, <b>") & "</b>")
        Endif
        Message.Warning(sMsg)
        $aComp.Add("")
        Return
      Endif
      
      aDep = GetDependencies()
      
      sMsg = Subst(("This component is required by:<p>&1"), "<b>" & aDep.Join("</b>, <b>") & "</b>")
      If Message.Warning(sMsg, ("Keep"), ("Remove all")) = 2 Then
        FProjectProperty.UncheckComponents($aComp)
        $aComp.Clear
        $bCheck = False
        Return
      Endif
      
    Endif
    $bGray = $bCheck
  Endif

End

Private Function Picture_Read() As Picture

  Dim sImage As String
  
  If $bCheck Then
    If $bGray Then
      sImage = "checked-gray"
    Else
      sImage = "checked"
    Endif
  Else
    sImage = "unchecked"
  Endif
  
  Return Picture["img/16/" & sImage & ".png"]

End
