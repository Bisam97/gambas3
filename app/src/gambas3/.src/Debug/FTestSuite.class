' Gambas class file

Private $Tests As TestCommand[]
Private $MySettings As Settings
Private $sBackuptests As String
Private Const CURRENT_TESTSUITE_KEY As String = "@Current"
Public Const IDENT_CAR As String = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789ÀÁÂÃĂÄĀÅÆĆČÇÈÉÊĔËĒÌÍÎĬÏÐŁÑÒÓÔÕÖŐØŠÙÚÛÜŰÝÞßàáâãăäāåæćčçèéêĕëēìíîĭïðłñòóôõöőøšùúûüűýÿþ0123456789$#_+-.,:;?!~!\"§$%&/(){[]}=<>|'`^°€@ "
Private $sCurrentTestSuiteCalled As String = "[" & ("current") & "]"
Private $sCurrentTestSuite As String

Public Sub _new()

  $MySettings = New Settings(Project.Dir &/ ".tests")
  Project.Compile()

  $Tests = TestRunner.List(Project.Dir)

  'just for creation and debugging
  '$Tests = TestRunner.List("~/programming/gambas/gambas/comp/src/gb.test")

  $sCurrentTestSuite = CURRENT_TESTSUITE_KEY

  FillTestSuites()
  FillTree(GetCurrentTests())

End

Private Function GetCurrentTests() As String

  Return GetTestsFromSettings(CURRENT_TESTSUITE_KEY)

End

Private Function GetTestsFromSettings(TestSuite As String) As String

  Return $MySettings["Testsuite " & Testsuite & "/Tests"]

End

Private Sub FillTestSuites()

  Dim Testsuite As String
  Dim asBuf As New String[]
  Dim sBuf As String

  lvwTestSuites.Clear
  lvwTestSuites.Add("*", "[All Tests]")
  lvwTestSuites.Add(CURRENT_TESTSUITE_KEY, $sCurrentTestSuiteCalled)
  lvwTestSuites[CURRENT_TESTSUITE_KEY].Selected = True

  For Each sBuf In $MySettings.Keys
    If sBuf Begins "Testsuite " Then
      Testsuite = Right(sBuf, Len(sBuf) - 10)

      If IsNotValid(Testsuite, True) Then
        Error.Raise(Subst(("Forbidden character in the name of a testsuite in &1. Please fix this file."), $MySettings.Path))
      Endif

      If Testsuite <> CURRENT_TESTSUITE_KEY Then
        asBuf.Add(Testsuite)
      Endif
    Endif
  Next

  asBuf.Sort
  For Each Testsuite In asBuf
    lvwTestSuites.Add(Testsuite, Testsuite)
  Next

  If $MySettings["CurrentTestsuite"] Then
    lvwTestSuites[$MySettings["CurrentTestsuite"]].Selected = True
  Endif

Catch
  Message.Error(Error.Text)
  Me.Close

End

Private Sub FillTree(Tests As String)

  Dim Command As TestCommand
  Dim sKeyModule, sModule, sMethod, sCur As String
  Dim asSelected As New String[]
  Dim i As Integer

  tvwTests.Clear
  tvwTests.Selection.Clear

  asSelected = Split(Tests, ",")

  For i = 0 To asSelected.Count - 1
    asSelected[i] = Trim(asSelected[i])
  Next

  For Each Command In $Tests
    sModule = Command.ModuleName

    If sKeyModule = Null Then
      sKeyModule = sModule
      tvwTests.Add(sKeyModule, sModule)
      sCur = sModule
      GoSub CHECK_SELECTED
    Else If sKeyModule <> sModule Then
      tvwTests.Add(sModule, sModule, Null, Null, sKeyModule)
      sKeyModule = sModule
      sCur = sModule
      GoSub CHECK_SELECTED
    Endif

    For Each sMethod In Command.Methods
      tvwTests.Add(sModule & "." & sMethod, sMethod, Null, sKeyModule)
      sCur = sModule & "." & sMethod
      GoSub CHECK_SELECTED
    Next
  Next

  FillSelected()
  Goto THE_END

CHECK_SELECTED:

  If tvwTests.MoveTo(sCur) = False Then
    tvwTests.Item.Expanded = True
    If asSelected.Exist(sCur) Then
      tvwTests.Item.EnsureVisible()
      tvwTests.Item.Selected = True
    Else
      tvwTests.Item.Selected = False
    Endif

  Endif
  Return

THE_END:

End

Private Sub FillSelected()

  Dim asBuf As New String[]
  Dim sTests As String
  Dim sKey As String

  For Each sKey In tvwTests.Keys
    If tvwTests[sKey].Selected = True Then
      asBuf.Add(sKey)
    Endif
  Next

  sTests = asBuf.Join(", ")

  ' Normalize Tests
  sTests = TestCommand.ToString(TestCommand.FromString(sTests))

  If sTests = Null Then
    sTests = "*"
    TxtSelected.Text = sTests
  Endif

  StoreTests($sCurrentTestSuite, sTests)

End

Private Sub StoreTests(TestSuite As String, Tests As String)

  Dim i As Integer

  Tests = Trim(Tests)
  Testsuite = Trim(Testsuite)
  TxtSelected.Text = Tests
  
  'remove spaces
  i = InStr(Tests, " ")
  While i > 0 
    Tests = Left(Tests, i - 1) & Right(Tests, Len(Tests) - i)
    i = InStr(Tests, " ")
  Wend
  
  $MySettings["CurrentTestsuite"] = Testsuite
  $MySettings["Testsuite " & TestSuite & "/Tests"] = Tests
  

End

Public Sub Form_KeyPress()

  'Maybe TODO: Ctrl-Z Ctrl-Y
  'ctrl-Z
  If Key.Control And If Key.Code = Key["z"] Then
    FillTree($sBackuptests)
  Endif

  If Key.code = Key.Esc Then
    Me.Close
  Endif

End

Public Sub btnSave_Click()

  Dim msg As String

  If txtNameTestSuite.Text Then

    If IsNotValid(txtNameTestSuite.Text) Then
      msg = Subst(("There are forbidden characters in the name. Allowed characters are &1 and space."), GetAllowedCharsForHumans())
      Message.Warning(msg)
      Goto THE_END
    Endif

    If Trim(txtNameTestSuite.Text) = CURRENT_TESTSUITE_KEY Then
      msg = Subst(("The name &1 is not allowed."), CURRENT_TESTSUITE_KEY)
      Message.Warning(msg)
      Goto THE_END
    Endif

    StoreTests(txtNameTestSuite.Text, TxtSelected.Text)
  Else
    Message.Info(("To save a testsuite, you must specify a name."))
  Endif
  FillTestSuites()
  txtNameTestSuite.Text = Null

THE_END:

End

Public Sub lvwTestSuites_Click()

  Dim Tests As String

  If lvwTestSuites.Key Then

    If lvwTestSuites.Key = "*" Then
      Tests = "*"
    Else
      Tests = GetTestsFromSettings(lvwTestSuites.Key)
    Endif

    'Name to store
    If lvwTestSuites.Key <> "*" And If lvwTestSuites.Key <> CURRENT_TESTSUITE_KEY Then
      txtNameTestSuite.Text = lvwTestSuites.Key
    Else
      txtNameTestSuite.Text = Null
    Endif

    FillTree(Tests)
    
    ' keep this at this position
    $MySettings["CurrentTestsuite"] = lvwTestSuites.Key
    $MySettings.Save
    
  Endif

End

Public Sub txtNameTestSuite_KeyPress()

  If Key.Code = Key.Enter Or If Key.Code = Key.Return Then
    btnSave_Click()
  Endif

End

Public Sub lvwTestSuites_KeyPress()

  If Key.Code = Key.Del Then
    DeleteTestSuite()
  Endif

  If Key.Code = Key.Enter Or If Key.Code = Key.Return Then
    lvwTestSuites_Click()
  Endif

End

Private Sub DeleteTestSuite()

  'delete Testsuite
  If lvwTestSuites.Key <> CURRENT_TESTSUITE_KEY And If lvwTestSuites.Key <> "*" Then
    If $MySettings["Testsuite " & lvwTestSuites.Key & "/Tests"] Then
      If Message.Question(Subst(("Do you really want to delete the testsuite &1?"), lvwTestSuites.Key), ("Cancel"), ("Yes")) = 2 Then
        $MySettings["Testsuite " & lvwTestSuites.Key & "/Tests"] = Null
        If $MySettings["CurrentTestsuite"] = lvwTestSuites.Key Then
          $MySettings["CurrentTestsuite"] = Null
        Endif
        $MySettings.Save()
        FillTestSuites
      Endif
    Endif
  Endif

End

Private Function IsNotValid(Name As String, Optional AllowSpecialChars As Boolean) As Boolean

  Dim sChar As String
  Dim i As Integer
  Dim sAllowedChars As String

  sAllowedChars = IDENT_CAR
  If AllowSpecialChars = True Then
    sAllowedChars &= "@*"
  Endif

  For i = 0 To Len(Name) - 1
    sChar = Name[i]
    If InStr(sAllowedChars, sChar) = 0 Then
      Return True
    Endif
  Next

End

Private Function GetAllowedCharsForHumans() As String

  Dim sBuf As String
  Dim i As Integer

  For i = 1 To String.Len(IDENT_CAR) Step 60
    sbuf &= String.Mid(IDENT_CAR, i, 60) & gb.lf
  Next

  Return sbuf

End

Public Sub tvwTests_Select()

  $sBackuptests = TxtSelected.Text

  FillSelected()

  If Not lvwTestSuites.Exist(CURRENT_TESTSUITE_KEY) Then
    lvwTestSuites.Add(CURRENT_TESTSUITE_KEY, $sCurrentTestSuiteCalled)
  Endif
  lvwTestSuites[CURRENT_TESTSUITE_KEY].Selected = True

End

Public Sub btnDeleteTestSuite_Click()

  DeleteTestSuite()

End

Public Sub btnRenameTestSuite_Click()

  Dim sOldName, sNewName, sTests As String

  If lvwTestSuites.Key <> CURRENT_TESTSUITE_KEY And If lvwTestSuites.Key <> "*" Then

    sNewName = InputBox((Subst("Please enter new name for &1", lvwTestSuites.Key)), ("Rename Test Suite"), lvwTestSuites.Key)

    If sNewName And If sNewName <> lvwTestSuites.Key Then
      sOldName = lvwTestSuites.Key

      sTests = $MySettings["Testsuite " & lvwTestSuites.Key & "/Tests"]
      $MySettings["Testsuite " & sNewName & "/Tests"] = sTests
      $MySettings["Testsuite " & lvwTestSuites.Key & "/Tests"] = Null

      If $MySettings["CurrentTestsuite"] = sOldName Then
        $MySettings["CurrentTestsuite"] = sNewName
      Endif

      $MySettings.Save()
      FillTestSuites
    Endif
  Endif

End
