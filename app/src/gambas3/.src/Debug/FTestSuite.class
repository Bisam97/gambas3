' Gambas class file

Private $Tests As TestCommand[]
Private $MySettings As Settings
Private $Backuptests As String
Public Const CURRENT_TESTSUITE_KEY As String = "43651952-d3ea-4a54-8ed2-648fef82dc49"
Private Const CURRENT_TESTSUITE_NAME As String = "[current]"
Private $CurrentTestSuite As String

Public Sub _new()

  $MySettings = New Settings(Project.Dir &/ ".tests")
  $Tests = TestRunner.List(Project.Dir)
  
  'just for creation and debugging
  '$Tests = TestRunner.List("~/programming/gambas/gambas/comp/src/gb.test")

  $CurrentTestSuite = CURRENT_TESTSUITE_KEY

  FillTestSuites()
  FillTree($MySettings["Testsuites" &/ $CurrentTestSuite])

End

Private Sub FillTestSuites()

  Dim Testsuite As String
  Dim asBuf As New String[]

  LVTestSuites.Clear
  LVTestSuites.Add("*", "*")
  LVTestSuites.Add(CURRENT_TESTSUITE_KEY, CURRENT_TESTSUITE_NAME)
  LVTestSuites[CURRENT_TESTSUITE_KEY].Selected = True

  For Each Testsuite In $MySettings.keys["Testsuites"]
    If Testsuite <> CURRENT_TESTSUITE_KEY Then
      asBuf.Add(Testsuite)
    Endif
  Next

  asBuf.Sort
  For Each Testsuite In asBuf
    LVTestSuites.Add(Testsuite, Testsuite)
  Next

  If $MySettings["CurrentTestsuite"] Then
    LVTestSuites[$MySettings["CurrentTestsuite"]].Selected = True
  Endif

End

Private Sub FillTree(Tests As String)

  Dim Command As TestCommand
  Dim sKeyModule, sModule, sMethod, sCur As String
  Dim asSelected As New String[]
  Dim i As Integer

  TreeTests.Clear
  TreeTests.Selection.Clear

  asSelected = Split(Tests, ",")

  For i = 0 To asSelected.Count - 1
    asSelected[i] = Trim(asSelected[i])
  Next

  'sort the other way round so that the last selected one is at the top
  'asSelected.Sort(gb.Descent)

  For Each Command In $Tests
    sModule = Command.ModuleName

    If sKeyModule = Null Then
      sKeyModule = sModule
      TreeTests.Add(sKeyModule, sModule)
      sCur = sModule
      GoSub CHECK_SELECTED
    Else If sKeyModule <> sModule Then
      TreeTests.Add(sModule, sModule, Null, Null, sKeyModule)
      sKeyModule = sModule
      sCur = sModule
      GoSub CHECK_SELECTED
    Endif

    For Each sMethod In Command.Methods
      'Debug "----------";; sMethod
      TreeTests.Add(sModule & "." & sMethod, sMethod, Null, sKeyModule)
      sCur = sModule & "." & sMethod
      GoSub CHECK_SELECTED
    Next
  Next

  FillSelected()
  Goto THE_END

CHECK_SELECTED:

  If TreeTests.MoveTo(sCur) = False Then
    TreeTests.Item.Expanded = True
    If asSelected.Exist(sCur) Then
      'TreeTests[sModule].Selected = True
      'TreeTests.Key = sCur
      TreeTests.Item.EnsureVisible()      
      TreeTests.Item.Selected = True
    Else
      TreeTests.Item.Selected = False
    Endif

  Endif
  Return

THE_END:

End

Private Sub FillSelected()

  Dim asBuf As New String[]
  Dim sTests As String
  Dim sKey As String

  For Each sKey In TreeTests.Keys
    If TreeTests[sKey].Selected = True Then
      asBuf.Add(sKey)
    Endif
  Next

  sTests = asBuf.Join(", ")

  ' Normalize Tests
  sTests = TestCommand.ToString(TestCommand.FromString(sTests))

  If sTests = Null Then
    sTests = "*"
    TxtSelected.Text = sTests
  Endif

  'If $CurrentTestSuite = Null Then
  '$CurrentTestSuite = CURRENT_TESTSUITE_KEY
  'Endif

  Debug "Store in ";; $CurrentTestSuite;; sTests
  StoreTests($CurrentTestSuite, sTests)

End

Private Sub StoreTests(TestSuite As String, Tests As String)

  $MySettings["CurrentTests"] = Tests
  $MySettings["Testsuites" &/ TestSuite] = Tests
  
  TxtSelected.Text = Tests

End

Public Sub TreeTests_Click()

  $Backuptests = TxtSelected.Text
  
  FillSelected()
  
  If Not LVTestSuites.Exist(CURRENT_TESTSUITE_KEY) Then
    LVTestSuites.Add(CURRENT_TESTSUITE_KEY, CURRENT_TESTSUITE_NAME)
  Endif
  LVTestSuites[CURRENT_TESTSUITE_KEY].Selected = True

End

Public Sub Form_KeyPress()

  'ctrl-Z
  If Key.Control And If Key.Code = Key["z"] Then
    FillTree($Backuptests)
  Endif

  If Key.code = Key.Esc Then
    Me.Close
  Endif

End

Public Sub BtSaveTestSuite_Click()

  If TxtNameTestSuite.Text Then
    StoreTests(TxtNameTestSuite.Text, TxtSelected.Text)
    $MySettings["CurrentTestsuite"] = TxtNameTestSuite.Text
  Else
    Message.Info("To store a testsuite you have to give a name.")
  Endif
  FillTestSuites()
  TxtNameTestSuite.Text = Null

End

Public Sub LVTestSuites_Click()

  Dim Tests As String
  
  If LVTestSuites.Key Then
    
    $MySettings["CurrentTestsuite"] = LVTestSuites.Key
    
    If LVTestSuites.Key = "*" Then
      Tests = "*"
    Else
      Tests = $MySettings["Testsuites" &/ LVTestSuites.Key] 
    Endif
    
    FillTree(Tests)
    
    'Name to store
    If LVTestSuites.Key <> "*" And If LVTestSuites.Key <> CURRENT_TESTSUITE_KEY Then
        TxtNameTestSuite.Text = LVTestSuites.Key
    Else
      TxtNameTestSuite.Text = Null
    Endif
  Endif

End

Public Sub TxtNameTestSuite_KeyPress()

  If Key.Code = Key.Enter Or If Key.Code = Key.Return Then
    BtSaveTestSuite_Click()
  Endif

End

Public Sub LVTestSuites_KeyPress()

  If Key.Code = Key.Del Then
    $MySettings["Testsuites" &/ LVTestSuites.Key] = Null
    If $MySettings["CurrentTestsuite"] = LVTestSuites.Key Then
      $MySettings["CurrentTestsuite"] = Null
    Endif
    FillTestSuites
  Endif

End
