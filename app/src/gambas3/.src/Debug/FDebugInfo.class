' Gambas class file

Class DBus
Class DBusConnection
Class DBusApplication
Class DBusProxy

Public Shown As Boolean

Private Enum TAB_CONSOLE, TAB_COMPILATION, TAB_TASK, TAB_TEST, TAB_VERSION_CONTROL, TAB_SEARCH, TAB_DBUS

Private $cRefreshTask As New Collection
Private $aTask As CTask[]

'Private $cLocal As New Collection ' key -> row
'Private $bSortLocal As Boolean

'Private $bSortObject As Boolean

Private $sLastLocal As String
Private $sLastObject As String

Private $iTestBg As Integer

Private $iChangeColor As Integer
Private $iErrorColor As Integer

Private $hHeaderFont As Font

Public Sub _new()
  
  With gvwFind
    .AddColumn(("File"))
    .AddColumn(("Location"))
    .AddColumn(("Line"))
    .AddColumn(("Column"))
    .AddColumn(("Text"))
  End With
  
  With gvwTask
    .AddColumn(("Type"))
    .AddColumn(("Class"))
    .AddColumn(("Line"))
    .AddColumn(("Text"), -1)
  End With
  
  With gvwCompilation
    .AddColumn(("Class"))
    .AddColumn(("Line"))
    '.AddColumn(("Col."))
    .AddColumn(("Message"))
  End With
  
  HideTab(TAB_COMPILATION)
  'wizDebug[TAB_SEARCH].Closable = True
  
  splDbusExplorer.MinSize = Desktop.Scale * 24
  splDbusExplorer.Layout = [1, 2]
  
  ReadConfig
  'UpdateLocal
  
End

Public Sub Form_Open()
  
  FOutput.Load(panConsole)
  HideTab(TAB_SEARCH)
  UpdateView
  'GotoConsole
  
End

Public Sub Clear()
  
End

Public Sub ReadConfig()
  
  Dim hCtrl As Control
  Dim fSize As Float
  
  $hHeaderFont = Project.GetSmallFont()
  $hHeaderFont.Bold = True
  
  wizDebug.TextFont = Project.GetSmallFont()
  
  Project.SetSmallFont(gvwTask)
  Project.SetSmallFont(gvwCompilation)
  
  fSize = Project.GetPercentFontSize("/DebuggerFontSize", 80)
  
  FDebugButton.ReadConfig
  
  Project.SetConsoleFont(trmVersionControl)
  MTheme.InitControl(trmVersionControl)
  Project.SetConsoleFont(trmTest)
  MTheme.InitControl(trmTest)

  For Each hCtrl In [panSearch, panVersionControl, panTest, panDbusExplorer, panWarning]
    Project.SetSmallFont(hCtrl)
  Next
  
  'btnChanges.Picture = Picture["img/32/modified.png"].Stretch(Stock.GetSize("small"))
  
  'H = Max(Stock.GetSize("small"), cmbWatch.Font.H) * 1.4
  'panWatch.H = H
  ' For Each hChild In panWatch.Children
  '   If hChild Is PictureBox Or If hChild Is ToolButton Then hChild.W = hChild.H
  ' Next
  
  $iChangeColor = Color.Merge(MTheme.GetColor("Highlight"), Color.Background)
  $iErrorColor = MTheme.GetColor("Error")

End

Public Sub wizDebug_Click()
  
  If Project.AboutToQuit Then Return
  
  Select Case wizDebug.Index
    Case TAB_CONSOLE
      If FMain.IsDebugVisible() Then FOutput.SetFocus
    Case TAB_TASK
      If Not Design.IsRunning() Then
        If Not $aTask Then
          UpdateTask
        Else
          timTask_Timer
        Endif
      Endif
    Case TAB_SEARCH
      If Not Design.IsRunning() Then
        FSearch.RefreshBrowse
      Endif
    Case TAB_TEST
      UpdateTestSuites
    Case TAB_DBUS
      FillDBusExplorer
      
  End Select   
  
End

' Public Sub tbvLocal_Activate()
'   
'   Dim hTable As TableView = Last
'   Dim sExpr As String 
'   Dim sVal As String 
'   Dim iCol As Integer
'   
'   If hTable[hTable.Row, 0].ColumnSpan >= 2 Then Return
'   
'   iCol = hTable.Column And Not 1
'   sExpr = hTable[hTable.Row, iCol].Text
'   sVal = hTable[hTable.Row, iCol + 1].Text
'   
'   If Left(sVal) = "(" Then 
'     Design.Command("#X" & sExpr & "\t" & sExpr)
'   Else
'     hTable.Column = iCol + 1 
'     hTable.Edit
'   Endif
'   
' End

' Public Sub tbvObject_Activate()
'   
'   tbvLocal_Activate
'   
' End

Public Sub UpdateView()
  
  Dim bUndock As Boolean = Settings["/FOutput/Undock"]
  Dim bVisible As Boolean
  
  If bUndock Then  
    If FOutput.Parent Then 
      FOutput.Reparent(Null)
      FOutput.Enabled = True
      'DEBUG "Read: "; Settings["/FOutput/Geometry"][0];; Settings["/FOutput/Geometry"][1]
      Settings.Read(FOutput)
      FOutput.OnProjectDebug
      FOutput.Show
      FMain.ShowDebug(False)
      'DEBUG FOutput.X;; FOutput.Y
      'Action["console"].Visible = TRUE
      'If Not Project.Running Then FMain.ShowDebug(False)
    Endif
    'FOutput.Stacking = If(Project.Running, Window.Above, Window.Normal)
  Endif
  
  ShowTab(TAB_CONSOLE, Not bUndock)
  ShowTab(TAB_VERSION_CONTROL, VersionControl.Enabled)
  
  ' If panStack.Visible <> Project.Running Then
  '   If Project.Running Then
  '     panStack.Visible = True
  '     Settings.Read(panDebug)
  '     'Settings.Read(splDebug,, [4, 1])
  '   Else 
  '     Settings.Write(panDebug)
  '     'Settings.Write(splDebug)
  '     panStack.Visible = False
  '   Endif
  ' Endif
  
  ' panButtonCompilation.Visible = Not Project.Running
  ' panButtonTask.Visible = Not Project.Running
  ' panButtonSearch.Visible = Not Project.Running
  
  If Not bUndock Then 
    If Not FOutput.Parent Then 
      bVisible = FOutput.Visible
      'DEBUG "Write: "; FOutput.X;; FOutput.Y
      Settings.Write(FOutput)
      FOutput.Reparent(panConsole, 0, 0)
      FOutput.Show
      'Action["console"].Value = TRUE
      'Action["console"].Visible = FALSE
      'If bVisible Then FMain.ShowDebug(True)
    Endif
    
    'SelectTab(TAB_CONSOLE)
    'FOutput.SetFocus
    
  Endif 
  
  FDebugButton.UpdateView
  FMain.UpdateConsoleAction()
  
End

Public Sub GetSearchList() As Control
  
  Return gvwFind
  
End

Public Sub ShowSearchList()
  
  FMain.ShowDebug(True)
  gvwFind.Show
  lblNotFound.Hide
  'lblBrowse.Hide
  ShowTab(TAB_SEARCH)
  SelectTab(TAB_SEARCH)
  
End

Public Sub HideSearchList()
  
  gvwFind.Hide
  lblNotFound.Show
  
End

Public Sub SetSearchListInfo(Optional sText As String)
  
  lblBrowse.Text = sText
  gvwFind.Visible = sText
  lblNotFound.Visible = Not sText
  'lblBrowse.Show
  
End

Public Sub StartSearch()
  
  spnSearch.Start
  spnSearch.Show
  
End

Public Sub StopSearch()
  
  spnSearch.Stop
  spnSearch.Hide
  
End

Public Sub btnShowSearch_Click()
  
  FSearch.WakeUp(False, True)
  
End

Public Sub btnRefreshSearch_Click()
  
  FSearch.BrowseAgain
  
End

Private Sub DisableRec(hCtrl As Control, aExcept As Control[], bOn As Boolean)
  
  Dim hCont As Container
  Dim iCount As Integer
  Dim hMulti As Object
  Dim iInd As Integer
  
  If Not aExcept.Exist(hCtrl) Then
    hCtrl.Enabled = bOn
    Return
  Endif
  
  If Not hCtrl Is Container Then Return
  
  hCont = hCtrl
  hMulti = hCtrl
  
  Try iCount = hMulti.Count
  If Not Error Then
    For iInd = 0 To iCount - 1
      If iInd <> hMulti.Index Then
        hMulti[iInd].Enabled = bOn
      Endif
    Next
  Endif
  
  For Each hCtrl In hCont.Children
    DisableRec(hCtrl, aExcept, bOn)
  Next
  
End

Private Sub DisableEverything(bOn As Boolean)
  
  Dim aCtrl As New Control[]
  Dim hCtrl As Control
  Dim hWin As Window
  
  For Each hWin In Windows
    If Not Object.IsValid(hWin) Then Continue
    If hWin = FMain.Window Or If hWin = FSearch.Window Then Continue
    hWin.Enabled = bOn
  Next
  
  hCtrl = btnCancelSearch
  While hCtrl
    aCtrl.Add(hCtrl)
    hCtrl = hCtrl.Parent
  Wend
  aCtrl.Add(lblBrowse)
  
  DisableRec(FMain.Window, aCtrl, bOn)
  
  aCtrl.Clear
  aCtrl.Add(FSearch.Window)
  
  DisableRec(FSearch.Window, aCtrl, bOn)
  
End

Public Sub EnableGUI(bOn As Boolean)
  
  'lblBrowse.Visible = Not bOn
  btnCancelSearch.Visible = Not bOn
  DisableEverything(bOn)
  
End

Public Sub btnCancelSearch_Click()
  
  FSearch.Cancel()
  
End

Public Sub IsSearchListVisible() As Boolean
  
  Return wizDebug.Index = TAB_SEARCH And FMain.IsDebugVisible()
  
End

Private Sub GotoConsole()
  
  If IsNull(FOutput.Parent) Then
    SelectTab(TAB_COMPILATION)
  Else
    SelectTab(TAB_CONSOLE)
  Endif
  
End

' Public Sub btnClearSearch_Click()
' 
'   FSearch.ResetBrowse
'   GotoConsole
'   tabDebug[TAB_SEARCH].Visible = False
' 
' End

Public Sub OnVisibilityChange()
  
  RefreshTabs()
  
End

Public Sub ShowConsole()
  
  If FOutput.Parent Then FDebugButton.SelectButton(TAB_CONSOLE)
  FOutput.SetFocus
  
End

Public Sub RefreshTabs(Optional sPath As String, (sName) As String)
  
  If Not Project.Path Or If Project.IsFake() Then Return
  If Not FMain.IsDebugVisible() Then Return 
  If sPath Then RefreshTask(sPath)
  FDebugger.RefreshBreakpoints
  If IsSearchListVisible() Then FSearch.RefreshBrowse
  
End

Public Sub RefreshTask(sPath As String)
  
  $cRefreshTask[sPath] = sPath
  If wizDebug.Index = TAB_TASK Then
    timTask.Restart
  Endif
  
End

Private Sub AfterRefreshTask()
  
  $aTask.Sort
  $cRefreshTask.Clear
  gvwTask.Rows.Count = $aTask.Count
  gvwTask_Font
  gvwTask.Refresh
  
End

Public Sub gvwTask_Font()

  Dim I As Integer
  
  For I = 0 To gvwTask.Columns.Max - 1
    gvwTask.Columns[I].W = -1
  Next

End  

Public Sub UpdateTask()
  
  Dim sPath As String
  
  If wizDebug.Index <> TAB_TASK Then Return
  
  Inc Application.Busy
  
  $aTask = New CTask[]
  For Each sPath In Project.Tree.Sources
    $aTask.Insert(CTask.ScanFile(sPath))
  Next
  
  AfterRefreshTask
  
  Dec Application.Busy
  
End

Public Sub timTask_Timer()
  
  Dim sPath As String
  Dim sClass As String
  Dim I As Integer
  
  If Not $aTask Then Return
  If $cRefreshTask.Count = 0 Then Return
  
  For Each sPath In $cRefreshTask
    
    sClass = File.BaseName(sPath)
    
    I = 0
    While I < $aTask.Count
      If $aTask[I].Class = sClass Then
        $aTask.Remove(I)
      Else
        Inc I
      Endif
    Wend
    
    $aTask.Insert(CTask.ScanFile(sPath))
    
  Next
  
  AfterRefreshTask
  
  timTask.Stop
  
End

Public Sub gvwTask_Data(Row As Integer, Column As Integer)
  
  Dim hTask As CTask
  
  If Not $aTask Then Return
  hTask = $aTask[Row]
  
  With gvwTask.Data
    
    Select Case hTask.Type
      Case CTask.TYPE_NOTE
        .Foreground = Color.Default
      Case CTask.TYPE_FIXME
        .Foreground = Color.Gradient(Color.Red, Color.TextForeground)
      Case CTask.TYPE_TODO
        .Foreground = Color.Gradient(Color.Green, Color.TextForeground)
    End Select
    
    Select Case Column
        
      Case 1
        .Text = hTask.Class
        
      Case 2
        .Text = CStr(hTask.Line)
        
      Case 0
        Select Case hTask.Type
          Case CTask.TYPE_NOTE
            .Text = "NOTE"
          Case CTask.TYPE_FIXME
            .Text = "FIXME"
          Case CTask.TYPE_TODO
            .Text = "TODO"
        End Select
        
      Case 3
        .Text = hTask.Text
        
    End Select
    
  End With
  
End

Public Sub gvwTask_Activate()
  
  Dim hTask As CTask = $aTask[gvwTask.Row]
  
  Project.OpenFile(hTask.Name, hTask.Line)
  
Catch  
  
End

Public Sub OnProjectChange()
  
  $aTask = Null
  UpdateTask
  SetCompilation()
  CloseSearch
  If Project.Dir <> Project.PreviousDir Then 
    trmVersionControl.Clear
    trmTest.Clear
  Endif
  panTestResult.Hide
  
End

Public Sub SetCompilation(Optional aOutput As String[])
  
  Dim sLine As String
  Dim aLine As String[]
  Dim I As Integer
  Dim aPos As String[]
  
  gvwCompilation.Clear
  If Not aOutput Or If aOutput.Count = 0 Then 
    HideTab(TAB_COMPILATION)
    'GotoConsole
    Return
  Endif
  
  aOutput.Sort(gb.Natural)
  gvwCompilation.Rows.Count = aOutput.Count
  
  For Each sLine In aOutput
    
    aLine = Scan(sLine, "*:*: warning: *")
    If aLine.Count <> 3 Then 
      aLine = Scan(sLine, "gbc3: warning: *")
      If aLine.Count <> 1 Then Continue
      aLine.Add("", 0)
      aLine.Add("", 0)
    Endif
    
    gvwCompilation[I, 0].Text = Trim(File.BaseName(aLine[0]))
    If InStr(aLine[1], ":") Then
      aPos = Split(aLine[1], ":")
      gvwCompilation[I, 1].Text = aPos[0]
      'gvwCompilation[I, 2].Text = aPos[1]
    Else
      gvwCompilation[I, 1].Text = aLine[1]
    Endif
    gvwCompilation[I, 2].Text = String.UCaseFirst(Project.TranslateMessage(Trim(aLine[2])))
    gvwCompilation[I, 2].Font = Project.GetEditorFont()
    Inc I
    
  Next
  
  gvwCompilation.Rows.Count = I
  gvwCompilation_Font
  
  ShowTab(TAB_COMPILATION)
  'wizDebug[TAB_COMPILATION].Text = ("Warnings") & " (" & gvwCompilation.Rows.Count & ")"
  
  Action["console"].Value = True
  SelectTab(TAB_COMPILATION)
  
End

Public Sub gvwCompilation_Font()
  
  gvwCompilation.Columns[0].Width = -1
  gvwCompilation.Columns[1].Width = -1
  
End


Public Sub gvwCompilation_Activate()
  
  Dim I As Integer = gvwCompilation.Row
  'Dim iCol As Integer
  
  'Try iCol = CInt(gvwCompilation[I, 2].Text)
  'If Error Then iCol = -1
  Project.OpenFile(gvwCompilation[I, 0].Text, CInt(gvwCompilation[I, 1].Text))
  
Catch  
  
End

Public Sub GotoFirstWarning()
  
  If gvwCompilation.Rows.Count = 0 Then Return
  gvwCompilation.Row = 0
  'gvwCompilation_Activate
  
End

' Public Sub btnLocalCopy_Click()
' 
'   Dim sText As String
'   Dim I As Integer
'   
'   For I = 0 To $aLocal.Max
'     sText &= $aLocal[I] & " = " & $aValLocal[I] & "\n"
'   Next
'   
'   Clipboard.Copy(sText)
' 
' End

Private Sub CloseSearch()
  
  FSearch.ResetBrowse
  If wizDebug[TAB_SEARCH].Enabled Then
    If wizDebug.Index = TAB_SEARCH Then GotoConsole
    HideTab(TAB_SEARCH) 
  Endif
  
End

Public Sub SelectTab(iTab As Integer)
  
  If wizDebug.Index = iTab Then Return
  
  wizDebug.Index = iTab
  FDebugButton.SelectButton(iTab)
  
End

Private Sub ShowTab(iTab As Integer, Optional bShow As Boolean = True)
  
  If bShow Then
    wizDebug[iTab].Enabled = True
    FDebugButton.ShowButton(iTab, True)
  Else
    HideTab(iTab)
  Endif
  
End

Private Sub HideTab(iTab As Integer) As Boolean
  
  wizDebug[iTab].Enabled = False
  FDebugButton.ShowButton(iTab, False)
  
End

Public Sub GetCurrentTab() As Integer
  
  Return wizDebug.Index
  
End

Public Sub btnCloseSearch_Click()
  
  CloseSearch
  FMain.ShowDebug(False)
  
End

Public Sub OnProjectDebug()
  
  Dim hCtrl As Control
  
  $sLastLocal = ""
  $sLastObject = ""
  If Settings["/ShowDebugPanelAutomatically", True] Then Action["console"].Value = True
  
  cmbTest.Enabled = Not Project.Running
  
  For Each hCtrl In [btnVcAddAll, btnVcBranch, btnVcClear, btnVcCommit, btnVcUpdate]
    hCtrl.Enabled = Not Project.Running
  Next
  
End

Public Sub ShowTest()
  
  FMain.ShowDebug(True)
  FDebugButton.SelectButton(TAB_TEST)
  
End

Public Sub cvwVariable_Rename()
  
  Dim sVar As String
  Dim hView As ColumnView
  
  hView = Last
  With hView.Current
    
    sVar = .Key
    
    Design.SetBalloon(hView, hView.Columns[1].X + Desktop.Scale, .Y + .H / 2)
    Design.Command("=V" & sVar & "\t" & .Text & " = " & .[1])
    'Design.Command("&V" & sVar & "\t" & .Text)
    
  End With
  
End

Public Sub btnVcCommit_Click()

  If Project.Compile() Then Return
  FVersionControl.Run

End

Public Sub InsertVersionControl(sText As String)
  
  If FMain.IsDebugVisible() Then FDebugButton.SelectButton(TAB_VERSION_CONTROL)
  trmVersionControl.Print(Replace(sText, "\n", "\r\n"))
  
End

Public Sub btnVcUpdate_Click()

  If Message.Question(("Do you really want to synchronize the repository?"), ("Synchronize"), ("Cancel")) = 2 Then Return
  VersionControl.Update

End

Public Sub btnVcAddAll_Click()

  FMain.mnuAddVersionAll_Click()

End

Public Sub OnVersionControlChange()

  UpdateView
  btnVcBranch.Text = VersionControl.GetCurrentBranch() & "..."
  If VersionControl.Enabled Then btnVcAddBranch.Visible = VersionControl.CanCreateBranch
  
End

Public Sub btnVcClear_Click()

  trmVersionControl.Clear

End

Public Sub GetTestTerminal() As TerminalView

  Return trmTest

End

Public Sub btnTestClear_Click()

  trmTest.Clear
  panTestResult.Hide

End

Public Sub trmTest_Link()

  FOutput.CheckTerminalLink(trmTest)

End

Public Sub trmTest_Click()

  If trmTest.Link.Type = "goto" Then
    Project.Goto(trmTest.Link.Text)
  Endif

End

Public Sub StartTest()
  
  panTestResult.Hide
  spnTest.Show
  spnTest.Start
  
End

Public Sub StopTest(iResult As Integer)

  spnTest.Stop
  spnTest.Hide
  
  Select Case iResult
  
    Case MTest.TEST_FAIL
      lblTestResult.Text = ("Test has failed.")
      picTestResult.Picture = Picture["icon:/small/emote-sad"]
      lblTestResult.Foreground = Color.Foreground
      $iTestBg = Color.Red
      
    Case MTest.TEST_ABORT
      lblTestResult.Text = ("Test has been aborted.")
      picTestResult.Picture = Picture["icon:/small/warning"]
      lblTestResult.Foreground = Color.Foreground
      $iTestBg = &HE0BE00
      
    Case Else
      lblTestResult.Text = ("Test has succeeded.")
      picTestResult.Picture = Picture["icon:/small/love"]
      lblTestResult.Foreground = Color.Foreground
      $iTestBg = &H00C000
      
  End Select
  
  $iTestBg = Color.SetAlpha($iTestBg, 128)
  
  If Application.DarkTheme Then 
    lblTestResult.Foreground = Color.Invert(lblTestResult.Foreground, True)
    $iTestBg = Color.Invert($iTestBg, True)
  Endif
  
  picTestResult.W = Stock.GetSize("small")
  panTestResult.W = picTestResult.W + lblTestResult.W + Desktop.Scale * 4
  panTestResult.Show
  panTestResult.Refresh
  
  ShowTest

End

Public Sub panTestResult_Draw()

  Dim DS As Integer

  DS = Desktop.Scale \ 2
  Paint.Rectangle(0, DS, Paint.W, Paint.H - DS * 2, DS * 4)
  Paint.Background = $iTestBg
  Paint.Fill

End

Public Sub trmTest_GotFocus()

  Project.SetCurrentPopup(Null)

End

Public Sub btnVcChanges_Click()

  FFileInfoVC.Run(Project.Dir)

End


Public Sub UpdateTestSuites()

  Dim iTestWith As Integer
  MTest.LoadSuites(ByRef iTestWith, cmbTest)

End

Public Sub cmbTest_Click()

  MTest.SaveTestWith(cmbTest.Index)

End

Public Sub btnVcBrowse_Click()

  Desktop.Open(VersionControl.GetRoot())

End

Public Sub btnDBusBus_Click()

  FillDBusExplorer

End

Private Sub RemoveIds(aList As String[])

  Dim iInd As Integer

  While iInd < aList.Count
    If Left(aList[iInd]) = ":" Then
      aList.Remove(iInd)
    Else
      Inc iInd
    Endif
  Wend

End

Private Sub GetDBus() As DBusConnection
  
  If btnDbusSystem.Value Then
    Return DBus.System
  Else
    Return DBus.Session
  Endif
  
End


Private Sub FillDBusExplorer(Optional sPath As String, sParent As String, sInterface As String, bCollapse As Boolean)

  Dim aList As String[]
  Dim aSym As String[]
  Dim hApp As DBusApplication
  Dim sSym As String
  Dim sName As String
  Dim sKey As String
  Dim hPict As Picture
  Dim hProxy As DBusProxy
  Dim hFont As Font

  If Not sPath Then

    Component.Load("gb.dbus")
    aList = GetDBus().Applications.Sort(gb.Natural)
    If Not btnDBusId.Value Then RemoveIds(aList)
    lstDbusExplorer.List = aList
    tvwDbusExplorer.Clear
    
  Else
    
    If sPath = "/" And If Not sInterface Then tvwDbusExplorer.Clear
    
    Try hApp = GetDBus()[lstDbusExplorer.Text]
    If Error Then Return
    Try hProxy = hApp[sPath, sInterface]
    If Error Then Return
    
    Inc Application.Busy
    
    aSym = hProxy._GetSymbols()
    If aSym.Count <> 1 Then bCollapse = True
    
    hFont = Project.GetEditorFont()
    
    For Each sSym In aSym
      sKey = sPath 
      If sInterface Then sKey &/= sInterface
      sKey &/= sSym
      If tvwDbusExplorer.Exist(sKey) Then Continue
      
      sName = Mid$(sSym, 3)
      
      Select Case Left(sSym)
        Case "n"
          hPict = Picture["$symbol:symbol"]
        Case "i"
          hPict = Picture["$symbol:special"]
        Case "p"
          hPict = Picture["$symbol:property"]
        Case "m"
          hPict = Picture["$symbol:method"]
        Case "s"
          hPict = Picture["$symbol:event"]
      End Select
      
      With tvwDbusExplorer.Add(sKey, "", hPict, sParent)
        If InStr("pms", Left(sSym)) Then
          Try sName = hProxy._GetSignature(sName, True)
          If Error Then 
            sName = "<b><i>" & Error.Text & "</i></b>"
          Else
            sName = TextHighlighter["gambas"].ToRichText(sName)
            .Font = hFont
          Endif
        Endif
        .RichText = sName
      End With
      
      If sSym Begins "n:" Then
        FillDBusExplorer(sPath &/ sName, sKey,, bCollapse)
      Else If sSym Begins "i:" Then
        FillDBusExplorer(sPath, sKey, sName, bCollapse)
      Endif
    Next
    
    If Not bCollapse And If sParent Then tvwDbusExplorer[sParent].Expanded = True
    
    Dec Application.Busy
    
  Endif

End

Public Sub btnDbusRefresh_Click()

  FillDBusExplorer

End

Public Sub lstDbusExplorer_Select()

  FillDBusExplorer("/")

End

Public Sub btnDBusId_Click()

  FillDBusExplorer

End

Public Sub btnRepository_Click()

  FRepository.ShowDialog

End

Public Sub tvwDbusExplorer_Activate()

  Dim sPath As String
  Dim sSym As String
  Dim hEditor As TextEditor
  
  Try hEditor = Project.ActiveForm.GetEditor()
  If Not hEditor Then Return

  Try sPath = Last.Current.Key
  If Not sPath Then Return 
  
  sSym = File.Name(sPath)
  
  Select Left(sSym)
    Case "m"
      sSym = Mid$(sSym, 3) & "()"
    Case "p"
      sSym = Mid$(sSym, 3)
    Case Else
      sSym = ""
  End Select
  
  If Not sSym Then Return
  
  sPath = File.Dir(sPath)
  
  hEditor.Insert("DBus[" & Quote(lstDbusExplorer.Current.Text) & "][" & Quote(File.Dir(sPath)) & "," & Quote(File.Name(sPath)) & "]." & sSym)
  hEditor.SetFocus

End

Public Sub btnDbusPasteSymbol_Click()

  tvwDbusExplorer_Activate

End

Public Sub btnCopyWarning_Click()

  Dim iRow As Integer
  Dim aCopy As New String[]

  With gvwCompilation
    For iRow = 0 To gvwCompilation.Rows.Max
      aCopy.Add(.[iRow, 0].Text & "." & .[iRow, 1].Text & ": " & .[iRow, 2].Text & "\n")
    Next
  End With
  
  Clipboard.Copy(aCopy.Join(""))
  
End

' Public Sub btnSelectAllWarning_Click()
' 
'   gvwCompilation.Rows.SelectAll
' 
' End
' 
' Public Sub btnUnselectAllWarning_Click()
' 
'   gvwCompilation.Rows.UnSelectAll
' 
' End

Public Sub btnVcAddBranch_Click()

  VersionControl.AddBranch()

End
