' Gambas class file

Public Shown As Boolean

Private Const TAB_CONSOLE As Integer = 0
Private Const TAB_LOCAL As Integer = 1
Private Const TAB_ME As Integer = 2
Private Const TAB_WATCH As Integer = 3
Private Const TAB_BREAK As Integer = 4

Private $cRefresh As New Collection

Public Sub Form_Open()

  ReadConfig

  With cvwLocal
    .Columns.Count = 2
    .Columns[0].Width = 192
    .Columns[0].Text = ("Name")
    .Columns[1].Text = ("Value")
  End With

  With cvwObject
    .Columns.Count = 2
    .Columns[0].Width = 192
    .Columns[0].Text = ("Name")
    .Columns[1].Text = ("Value")
  End With

  With cvwWatch
    .Columns.Count = 2
    .Columns[0].Width = 192
    .Columns[0].Text = ("Expression")
    .Columns[1].Text = ("Value")
  End With

  FOutput.Load

End


Public Sub Clear()

  cvwLocal.Clear
  cvwLocal.Tag = ""
  cvwObject.Clear
  cvwObject.Tag = ""
  lstStack.Clear
  cvwWatch.Clear
  $cRefresh.Clear

End



Public Sub EnableStack(bOn As Boolean)

  lstStack.Enabled = bOn

End


Public Sub FillStack(aPos As String[])

  Dim sPos As String

  lstStack.Clear

  For Each sPos In aPos
    If sPos = "?" Then
      lstStack.Add("(" & ("native code") & ")")
    Else
      lstStack.Add(sPos)
    Endif
  Next

End


Public Sub lstStack_Activate()

  Dim sLoc As String
  Dim iPos As Integer
  Dim sFile As String
  Dim iLine As Integer

  Design.Command("@" & lstStack.Index)
  FDebugExpr.RefreshAll
  RefreshAllWatch

  sLoc = lstStack.Current.Text
  If InStr(sLoc, "(") Then Return

  iPos = InStr(sLoc, ".")
  If iPos = 0 Then Return
  sFile = Left$(sLoc, iPos - 1)

  iPos = RInStr(sLoc, ".")
  If iPos = 0 Then Return
  iLine = Val(Mid$(sLoc, iPos + 1))

  Project.OpenFile(sFile, iLine)

Catch

End


Private Sub DefineVar(hView As ColumnView, sList As String, sCmd As String, iIndex As Integer)

  Dim sVar As String
  Dim aVar As String[]
  Dim sParent As String
  Dim bFill As Boolean

  If sList <> "*" Then

    aVar = Split(sList, " ")
  
    If sList <> hView.Tag Then 
  
      hView.Tag = sList
      bFill = True
      
    Endif
  
  Else 
  
    aVar = Split(hView.Tag, " ")
    
    bFill = True
    
  Endif
    
  If bFill Then
    
    hView.Clear
    For Each sVar In aVar
      If Right(sVar) = ":" Then 
        sVar = UCase(sVar)
        sParent = sVar
      Else
        Select Case sParent
          Case "S:"
            Try hView.Add(sParent, ("Static variables"))
          Case "D:"
            Try hView.Add(sParent, ("Dynamic variables"))
        End Select
        Try hView.Add(sVar, sVar,, sParent)
      Endif
    Next
    
    Try hView["S:"].Expanded = True
    Try hView["D:"].Expanded = True

  Endif
  
  If tabDebug.Index <> iIndex Then Return
  
  For Each sVar In aVar
    If Right(sVar) = ":" Then Continue
    Design.Command("&" & sCmd & sVar & "\t" & sVar)

  Next
    
End

Public Sub AddVar(hView As ColumnView, sVar As String, sValue As String)

  Try hView.Add(sVar, sVar)
  If Error Then 
    If hView[sVar][1] Then hView[sVar].Selected = hView[sVar][1] <> sValue
  Endif
  
  hView[sVar][1] = sValue

End

Public Sub DefineLocal(Optional sList As String = "*")
  
  DefineVar(cvwLocal, sList, "L", TAB_LOCAL)
  
End

Public Sub AddLocal(sVar As String, sValue As String)
  
  AddVar(cvwLocal, sVar, sValue)
  
End

Public Function LocalExists(sExpr As String) As Boolean
  If Not sExpr Then Return
  
  Return cvwLocal.Exist(sExpr)

End

Public Sub DefineObject(Optional sList As String = "*")
  
  DefineVar(cvwObject, sList, "O", TAB_ME)
  
End

Public Sub AddObject(sVar As String, sValue As String)
  
  AddVar(cvwObject, sVar, sValue)
  
End


' PUBLIC SUB RefreshAllLocal()
' 
'   DIM sVar AS String
' 
'   FOR EACH sVar IN $aLocal
'     Design.Command("l" & sVar, TRUE,, "L")
'   NEXT
' 
' END



Public Sub AddResultWatch(sCmd As String, sRes As String, Optional bInstant As Boolean)

  Dim sVal As String
  Dim hForm As FEditor
  
  'IF Left$(sRes, 1) = "=" THEN
  '  sVal = Mid$(sRes, 2)
  'ELSE
  '  sVal = "** " & sRes
  'ENDIF
  sVal = sRes

  If bInstant Then 
    If Right(sCmd) = ":" Then
      If FDebugExpr.Exist(Left(sCmd, Len(sCmd) - 1)) Then Return 
      
      ' TRY hForm = FDebugExpr.IsSender()
      ' IF hForm = NULL THEN 
      '   TRY hForm = Project.ActiveForm
      '   IF hForm THEN 
      '     IF Mouse.ScreenY <= hForm.Editor.ScreenY + hForm.Editor.h THEN
              ShowAsBalloon(sVal)
      '     ENDIF 
      '   ENDIF 
      ' ENDIF 
    
    Else 
      Design.Command("#X" & sCmd & "\t" & sCmd)  
    
    Endif 
  Else  
    Try cvwWatch.Add(sCmd, sCmd)
    If Left(sVal) = "!" Then sVal = Mid$(sVal, 2)
    cvwWatch[sCmd][1] = sVal
  
  Endif

End

Private Sub ShowAsBalloon(sMsg As String)

  Dim hIcon As Picture

  sMsg = Replace(sMsg, "\t", "\n")
  sMsg = Replace(sMsg, "    ", "&nbsp;")
  sMsg = Replace(sMsg, "&", "&amp;")
  sMsg = Replace(sMsg, "<", "&lt;")
  sMsg = Replace(sMsg, ">", "&gt;")
  
  If Left(sMsg) = "!" Then
    sMsg = Mid$(sMsg, 2) 
    hIcon = Picture["icon:/32/error"]
  Else
    hIcon = Picture["icon:/32/info"]
  Endif 

  'Balloon(sMsg, objForm, hIcon, Mouse.ScreenX - objForm.ScreenX, Mouse.ScreenY - objForm.ScreenY)
  Balloon(sMsg, Design.BalloonControl, hIcon, Design.BalloonX, Design.BalloonY)

End

Public Sub RefreshAllWatch()

  If Not cvwWatch.MoveFirst() Then

    Do

      Design.Command("?W" & cvwWatch.Item.Text & "\t" & cvwWatch.Item.Text)
      If cvwWatch.MoveNext() Then Return

    Loop

  Endif

End


Public Sub AddWatch(sExpr As String)

  If cmbWatch.Find(sExpr) < 0 Then
    cmbWatch.Add(sExpr)
  Endif

  Design.Command("?W" & sExpr & "\t" & sExpr)
  tabDebug.Index = TAB_WATCH

End

Public Sub InstantWatch(sExpr As String, hCtrl As Control, X As Integer, Y As Integer)
  
  If Not sExpr Then Return
  Design.SetBalloon(hCtrl, X, Y)
  Design.Command("?I" & sExpr & "\t" & sExpr)
  
End



Public Sub cmbWatch_Activate()

  Dim sExpr As String

  sExpr = Trim(cmbWatch.Text)
  If Not sExpr Then Return

  AddWatch(sExpr)

End


Public Sub btnWatch_Click()

  cmbWatch_Activate

End


Public Sub btnKillWatch_Click()

  Try cvwWatch.Remove(cvwWatch.Key)

End

Public Sub btnKillAllWatch_Click()

  If Message.Question(("Do you want to clear the expression list ?"), ("Clear"), ("Cancel")) = 2 Then Return

  cvwWatch.Clear

End

Public Sub cmbWatch_Click()

  btnWatch_Click

End

Public Sub cvwWatch_Activate()

  Dim sText As String = cvwWatch.Item.Text

  If Right(sText) = ":" Then Return
  If Left(cvwWatch.Item[1]) = "(" Then
    Design.Command("#X" & sText & "\t" & sText)  
  Endif

  cmbWatch.Text = Last.Item.Text

End

Public Sub ClearWatchpoint()
  
  cmbWatch.Clear
  
End


Public Sub ReadConfig()

  Dim hButton As ToolButton

  tabDebug.Font.Grade = - Settings["/TabStripFont", 0]
  cvwLocal.Font.Grade = - Settings["/GlobalFont", 0]
  cvwObject.Font = cvwLocal.Font
  lstStack.Font = cvwLocal.Font
  cvwWatch.Font = cvwLocal.Font
  lstBreak.Font = cvwLocal.Font

  For Each hButton In [btnClearBreak, btnKillAllWatch, btnKillWatch, btnRemoveBreak, btnShowME, btnWatch]
    hButton.AutoResize = False
    hButton.W = 8
    hButton.AutoResize = True
  Next

End

Public Sub AddBreakpoint(sName As String, sProc As String, iLine As Integer, bOn As Boolean)
  
  Dim sText As String
  Dim iInd As Integer

  sText = sName & "." & sProc & "." & CStr(iLine + 1)
  iInd = lstBreak.Find(sText)
  
  If bOn Then
    If iInd < 0 Then
      lstBreak.Add(sText)
    Endif
  Else
    If iInd >= 0 Then    
      lstBreak.Remove(iInd)
    Endif 
  Endif
  
End

Public Sub btnRemoveBreak_Click()

  Dim aText As String[]
  Dim hEdit As FEditor
  
  If lstBreak.Index < 0 Then Return
  
  aText = Scan(lstBreak.Text, "*.*.*")
  Design.SetBreakpoint(aText[0], CInt(aText[2]) - 1, False)

End

Public Sub btnClearBreak_Click()

  While lstBreak.Count
    lstBreak.Index = 0
    btnRemoveBreak_Click
  Wend  

End

Public Sub lstBreak_Activate()

  Dim aText As String[]
  
  aText = Scan(lstBreak.Text, "*.*.*")
  Project.OpenFile(aText[0], CInt(aText[2]))

Catch

End

Public Sub Message(sMsg As String)
  
  'lstDebugMsg.Add(sMsg)
  
End

Public Sub chkSortLocal_Click()

  If chkSortLocal.Value Then 
    cvwLocal.Sorted = True
  Else 
    cvwLocal.Sorted = False
    DefineLocal
  Endif    

End

Public Sub chkSortObject_Click()

  If chkSortObject.Value Then 
    cvwObject.Sorted = True
  Else 
    cvwObject.Sorted = False
    DefineObject
  Endif    

End

Public Sub tabDebug_Click()

  If Design.IsRunning() Then Return

  Select Case tabDebug.Index
    Case TAB_LOCAL
      DefineLocal
    Case TAB_ME
      DefineObject
    Case TAB_CONSOLE
      FOutput.SetFocus
    Case TAB_BREAK
      timBreakpoint_Timer
  End Select   

End

Public Sub cvwObject_Collapse()

  cvwObject.Item.Expanded = True  

End

Public Sub cvwLocal_Activate()

  Dim sText As String = cvwLocal.Item.Text

  If Right(sText) = ":" Then Return
  If Left(cvwLocal.Item[1]) <> "(" Then Return
  Design.Command("#X" & sText & "\t" & sText)

End

Public Sub cvwObject_Activate()

  Dim sText As String = cvwObject.Item.Text

  If Right(sText) = ":" Then Return
  If Left(cvwObject.Item[1]) <> "(" Then Return
  Design.Command("#X" & sText & "\t" & sText)  

End

Public Sub WriteWatchSettings()

  Dim iInd As Integer
  Dim sFlag As String

  sFlag = "/Watches"
  iInd = 0
  Project.Config.Clear(sFlag)

  Project.Config[sFlag &/ "Count"] = cvwWatch.Count
  If Not cvwWatch.MoveFirst() Then

    Do
      Inc iInd
      Project.Config[sFlag &/ "Watch[" & CStr(iInd) & "]"] = cvwWatch.item.Text
      If cvwWatch.MoveNext() Then Break 

    Loop

  Endif

End

Public Sub ReadWatchSettings()

  Dim iCount As Integer
  Dim iInd As Integer
  Dim sString As String
  Dim sFlag As String

  sFlag = "/Watches"
  iInd = 0
  iCount = Project.Config[sFlag &/ "Count", "0"]
  ClearWatchpoint()
  For iInd = 1 To iCount
    sString = Project.Config[sFlag &/ "Watch[" & CStr(iInd) & "]"]
    'IF sString THEN 
      'IF cmbWatch.Find(sString) < 0 THEN
        'cmbWatch.Add(sString)
      Try cvwWatch.Add(sString, sString)
      'ENDIF
    'ENDIF 
  Next
  
End

Public Sub UpdateView()
  
  Dim bUndock As Boolean = Settings["/FOutput/Undock"]
  Dim bVisible As Boolean
  
  If bUndock Then  
    If FOutput.Parent Then 
      FOutput.Reparent(Null)
      'DEBUG "Read: "; Settings["/FOutput/Geometry"][0];; Settings["/FOutput/Geometry"][1]
      Settings.Read(FOutput)
      FOutput.OnProjectDebug
      FOutput.Show
      'DEBUG FOutput.X;; FOutput.Y
      'Action["console"].Visible = TRUE
      'If Not Project.Running Then FMain.ShowDebug(False)
    Endif
    'FOutput.Stacking = If(Project.Running, Window.Above, Window.Normal)
  Endif
  
  tabDebug[TAB_CONSOLE].Visible = Not bUndock
  tabDebug[TAB_LOCAL].Visible = Project.Running
  tabDebug[TAB_ME].Visible = Project.Running
  tabDebug[TAB_WATCH].Visible = Project.Running
  tabDebug[TAB_BREAK].Visible = True 'Project.Running

  If panStack.Visible <> Project.Running Then
    If Project.Running Then
      panStack.Visible = True
      Settings.Read(splDebug,, "4,1")
    Else 
      Settings.Write(splDebug)
      panStack.Visible = False
    Endif
  Endif 
        
  If Not bUndock Then 
    If Not FOutput.Parent Then 
      bVisible = FOutput.Visible
      'DEBUG "Write: "; FOutput.X;; FOutput.Y
      Settings.Write(FOutput)
      FOutput.Reparent(panConsole, 0, 0)
      FOutput.Show
      'Action["console"].Value = TRUE
      'Action["console"].Visible = FALSE
      'If bVisible Then FMain.ShowDebug(True)
    Endif
    tabDebug.Index = TAB_CONSOLE
    FOutput.SetFocus
  Endif 
  
  FMain.UpdateConsoleAction(Project.Running)
  
End


Public Sub btnShowME_Click()

  Design.Command("#XME\tME")    

End

Public Sub RefreshBreakPoint(sClass As String)
  
  $cRefresh[sClass] = sClass
  If tabDebug.Index = TAB_BREAK Then 
    timBreakpoint.Stop
    timBreakpoint.Start
  Endif
  'timBreakpoint.Start
  
End

Public Sub timBreakpoint_Timer()

  Dim sClass As String
  Dim iInd As Integer
  Dim hEditor As FEditor
  
  For Each sClass In $cRefresh
    
    iInd = 0
    While iInd < lstBreak.Count
      If lstBreak[iInd].Text Like (sClass & ".*") Then
        lstBreak.Remove(iInd)
      Else
        Inc iInd
      Endif
    Wend
    
    hEditor = Project.Files[Project.FindPath(sClass)]
    If Not hEditor Then Continue
    For Each iInd In hEditor.GetBreakpoints()
      lstBreak.Add(sClass & "." & hEditor.GetProcAt(iInd) & "." & CStr(iInd + 1))
    Next
    
  Next
  
  $cRefresh.Clear
  timBreakpoint.Stop

End

Public Sub GetBreakpoints() As String[]

  Dim iInd As Integer
  Dim aBreak As String[]
  Dim aBreakPoint As New String[]

  timBreakpoint_Timer
  
  For iInd = 0 To lstBreak.Count - 1
    aBreak = Split(lstBreak[iInd].Text, "*.*.*")
    aBreakPoint.Add(aBreak[0] & "." & CStr(CInt(aBreak[2])))
  Next
  
  Return aBreakPoint
  
End
