' Gambas class file

Private $cSuites As New Collection
Private $bNoSelect As Boolean

Public Sub btnClose_Click()

  SaveSuites
  Me.Close

End

Public Sub Form_Open()

  LoadTests
  LoadSuites

End

Private Sub LoadTestWith()

  Dim sText As String
  Dim sKey As String

  sText = cmbTestWith.Text

  cmbTestWith.Clear
  lvwSuite.MoveFirst
  While lvwSuite.Available
    sKey = lvwSuite.Item.Key
    If sKey = "$" Then
      cmbTestWith.Add(("Default"))
    Else
      cmbTestWith.Add(sKey)
    Endif
    lvwSuite.MoveNext
  Wend
  
  Try cmbTestWith.Text = sText
  If cmbTestWith.Index < 0 Then cmbTestWith.Index = 0

End

Private Sub LoadSuites()

  Dim hSettings As Settings
  Dim iCount As Integer
  Dim I As Integer
  Dim sKey As String
  Dim sName As String

  hSettings = New Settings(Project.Dir &/ ".test")
  iCount = hSettings["/TestSuites/Count", 0]
  
  lvwSuite.Clear
  
  With lvwSuite.Add("$", "")
    .RichText = "<i>" & ("Default") & "</i>"
    .Editable = False
  End With
  
  $cSuites.Clear

  cmbTestWith.Add(("Default"))
  $cSuites["$"] = SuiteToSelection(hSettings["/TestSuites/Default"])
  
  For I = 1 To iCount
    
    sKey = "/TestSuites/Suite" & CStr(I)
    sName = hSettings[sKey &/ "Name"]
    lvwSuite.Add(sName, sName)
    cmbTestWith.Add(sName)
    $cSuites[sName] = SuiteToSelection(hSettings[sKey &/ "Tests"])
    
  Next
  
  lvwSuite["$"].Selected = True
  
  LoadTestWith
  cmbTestWith.Text = hSettings["/TestSuites/TestWith", ("Default")]
  
End

Private Sub LoadTests()

  Dim sClass As String
  Dim sPath As String
  Dim cSymbol As Collection
  Dim hSymbol As CSymbolInfo
  Dim sName As String

  tvwSuite.Clear

  For Each sPath In Project.Tree.GetTestModules()
    
    sClass = File.BaseName(sPath)
    tvwSuite.Add(sClass, sClass, Picture["icon:/small/directory"])
    
    cSymbol = Project.Documentation.GetClassSymbols(sClass)
    If Not cSymbol Then Continue
    
    For Each hSymbol In cSymbol
      
      If Not hSymbol.IsFunction Or If hSymbol.NotPublic Or If hSymbol.IsHidden Then Continue
      sName = hSymbol.Name
      
      tvwSuite.Add(sClass & "." & sName, sName, Picture["$symbol:s-method"], sClass)
      
    Next
    
  Next

End

Public Sub lvwSuite_Select()

  If $cSuites.Exist(lvwSuite.Key) Then
    tvwSuite.Selection = $cSuites[lvwSuite.Key]
  Else
    tvwSuite.UnselectAll
  Endif

End

Private Sub SuiteToSelection(sSuite As String) As String[]

  Dim aSelection As New String[]
  Dim sTest As String
  Dim iPos As Integer
  Dim aMethod As String[]
  Dim sMethod As String
  
  If Not sSuite Then Return
  
  For Each sTest In Split(sSuite)
    
    iPos = InStr(sTest, ".")
    
    If iPos Then
      aMethod = Split(Mid$(sTest, iPos + 1), ";")
      sTest = Left(sTest, iPos - 1)
      aSelection.Add(sTest)
      For Each sMethod In aMethod
        aSelection.Add(sTest & "." & sMethod)
      Next
    Else
      aSelection.Add(sTest)
    Endif
    
  Next
  
  Return aSelection

End

Public Sub btnNew_Click()

  Dim I As Integer
  Dim sName As String

  Do
    Inc I
    sName = Subst(("Test suite #&1"), I)
    If Not lvwSuite.Exist(sName) Then Break
  Loop

  lvwSuite.Add(sName, sName).Selected = True
  lvwSuite.Key = sName
  
  LoadTestWith

  btnRename_Click
  
End

Public Sub btnRename_Click()

  Try lvwSuite.Current.Rename()

End

Public Sub lvwSuite_Rename()

  Dim sNewName As String
  Dim sOldName As String

  sNewName = lvwSuite.Item.Text
  sOldName = lvwSuite.Item.Key
  
  If sNewName = sOldName Then Return
  
  If lvwSuite.Exist(sNewName) Then
    Balloon.Warning(("This test suite already exists."), lvwSuite, lvwSuite.Current.X + Desktop.Scale, lvwSuite.Current.Y)
    Stop Event
    Return
  Endif
  
  $cSuites[sNewName] = $cSuites[sOldName]
  $cSuites.Remove(sOldName)
  
  lvwSuite.Remove(sOldName)
  lvwSuite.Add(sNewName, sNewName).Selected = True
  
  LoadTestWith
  
End

Public Sub btnReset_Click()

  LoadSuites

End

Public Sub tvwSuite_Select()

  Dim bSelect As Boolean
  
  If $bNoSelect Then Return
  If Not tvwSuite.Key Then Return

  $bNoSelect = True
  
  If tvwSuite.Current.ParentKey Then
    If tvwSuite.Current.Selected Then
      tvwSuite[tvwSuite.Current.ParentKey].Selected = True
    Endif
  Else If tvwSuite.Current.Children Then
    bSelect = tvwSuite.Current.Selected
    'tvwSuite.Current.Expanded = True
    tvwSuite.MoveTo(tvwSuite.Key)
    tvwSuite.MoveChild()
    While tvwSuite.Available
      tvwSuite.Item.Selected = bSelect
      tvwSuite.MoveNext()
    Wend
  Endif

  $bNoSelect = False

  $cSuites[lvwSuite.Key] = tvwSuite.Selection

End

Private Sub SelectionToSuite(aSel As String[]) As String

  Dim aSelection As New String[]
  Dim iPos As Integer
  Dim sMethod As String
  Dim sLastClass As String
  Dim sSuite As String
  Dim bMethod As Boolean
  Dim sKey As String
  Dim sClass As String
  
  If Not aSel Then Return
  
  For Each sKey In aSel.Sort(gb.Natural)
    
    iPos = InStr(sKey, ".")
    If iPos Then
      sMethod = Mid$(sKey, iPos + 1)
      sClass = Left(sKey, iPos - 1)
    Else
      sClass = sKey
      sMethod = ""
    Endif
    
    If sClass <> sLastClass Then
      If sSuite Then sSuite &= ","
      sSuite &= sClass
      sLastClass = sClass
      bMethod = False
    Endif
    
    If sMethod Then 
      sSuite &= If(bMethod, ";", ".") & sMethod
      bMethod = True
    Endif
    
  Next
  
  Return sSuite
  
  Return aSelection

End

Private Sub SaveSuites()

  Dim sKey As String
  Dim hSettings As Settings
  Dim iCount As Integer
  Dim sSlot As String

  hSettings = New Settings(Project.Dir &/ ".test")
  
  hSettings.Clear("/TestSuites")

  lvwSuite.MoveFirst
  While lvwSuite.Available
    sKey = lvwSuite.Item.Key
    
    If sKey = "$" Then
      hSettings["/TestSuites/Default"] = SelectionToSuite($cSuites[sKey])
    Else
      Inc iCount
      sSlot = "/TestSuites/Suite" & CStr(iCount)
      hSettings[sSlot &/ "Name"] = sKey
      hSettings[sSlot &/ "Tests"] = SelectionToSuite($cSuites[sKey])
    Endif
    
    lvwSuite.MoveNext 
  Wend

  hSettings["/TestSuites/Count"] = iCount
  hSettings["/TestSuites/TestWith"] = cmbTestWith.Text
  hSettings.Save

End

Public Sub btnDelete_Click()

  Dim sKey As String

  sKey = lvwSuite.Key
  If Not sKey Or If sKey = "$" Then Return
  If Message.Warning(("Do you really want to remove this test suite?"), ("Remove"), ("Cancel")) = 2 Then Return
  $cSuites.Remove(sKey)
  lvwSuite.Remove(sKey)
  lvwSuite["$"].Selected = True
  LoadTestWith

End

Public Sub lvwSuite_Cancel()

  lvwSuite.Item.Text = lvwSuite.Item.Key

End

Public Sub btnSelectAll_Click()

  tvwSuite.SelectAll

End

Public Sub btnUnselectAll_Click()

  tvwSuite.UnselectAll

End
