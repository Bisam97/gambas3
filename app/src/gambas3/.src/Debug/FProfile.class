' Gambas class file

Private $sPath As String
Private $iTime As Long
Private $aFunc As New CProfile[]
Private $cFunc As New Collection

Private $iLevel As Integer
Private $aLevel As New String[]
Private $aLevelTime As New Long[]

Private $hCurrent As CProfile

Private $bPercent As Boolean

Private $aHistory As New String[]
Private $iHistory As Integer
Private $iNoHistory As Integer

Private $iFirstLine As Integer

Static Public Sub Open(sPath As String)
  
  Dim hProf As FProfile
  
  If Not Exist(sPath) Then Return
  
  hProf = New FProfile
  hProf.Init(sPath)
  
End

Private Sub EnterFunction(sFunc As String, iTime As Long) As CProfile
  
  Dim hProf As CProfile
  
  hProf = $cFunc[sFunc]
  If Not hProf Then
    hProf = New CProfile
    $cFunc[sFunc] = hProf
    hProf.Name = sFunc
    $aFunc.Add(hProf)
  Endif
  
  $aLevel.Add(sFunc)
  $aLevelTime.Add(iTime)
  
  Inc hProf.Count
  
  Return hProf
  
End

Private Sub ExitFunction(sFunc As String, iTime As Long) As CProfile
  
  Dim hProf As CProfile
  Dim hCaller As CProfile
  
  hProf = $cFunc[sFunc]
  
  $aLevel.Remove($aLevel.Max)
  iTime -= $aLevelTime[$aLevelTime.Max]
  $aLevelTime.Remove($aLevelTime.Max)
  
  hProf.Time += iTime
  
  If $aLevel.Count Then
    hCaller = $cFunc[$aLevel[$aLevel.Max]]
    'hCaller.Time -= iTime
    hCaller.AddCalled(sFunc, iTime)
    hProf.AddCaller(hCaller.Name)
    Return hCaller
  Else
    $iTime += iTime
  Endif
  
End

Public Sub Init(sPath As String)
  
  Dim hFile As File
  Dim sLine As String
  Dim iPos As Integer
  Dim hCurrent As CProfile
  
  Inc Application.Busy
  
  $sPath = sPath
  
  hFile = Open sPath
  While Not Eof(hFile)
    
    Line Input #hFile, sLine
    If IsDigit(Left(sLine)) Then 
      If hCurrent Then
        iPos = InStr(sLine, " ")
        hCurrent.AddLine(CInt(Left(sLine, iPos - 1)), CLong(Mid$(sLine, iPos + 1)))
      Endif
      Continue
    Endif
    
    iPos = InStr(sLine, " ")
    If Left(sLine) = "+" Then
      hCurrent = EnterFunction(Mid$(sLine, 2, iPos - 2), CLong(Mid$(sLine, iPos + 1)))
    Else
      hCurrent = ExitFunction(Mid$(sLine, 2, iPos - 2), CLong(Mid$(sLine, iPos + 1)))
    Endif
    
  Wend
  
  Me.Title = Subst(("Profile &1"), File.Name(sPath)) & " - " & Str(Stat(sPath).LastModified) & " - " & Subst(("Total time &1 μs"), Format($iTime, "#,##0"))

  gvwProfile.Rows.Count = $aFunc.Count
  
  Object.Lock(gvwProfile)
  gvwProfile.Columns.Sort = 2
  gvwProfile.Columns.Ascending = True
  Object.Unlock(gvwProfile)
  gvwProfile_Sort
  
  Me.Show
  
  Dec Application.Busy
  
Catch
  
  Dec Application.Busy
  Message.Error(Subst(("Unable to load profile file: &1"), File.Name(sPath)) & "\n\n" & Error.Text)
  
End

Public Sub gvwProfile_Data(Row As Integer, Column As Integer)

  Dim hProf As CProfile

  With gvwProfile.Data

    hProf = $aFunc[Row]

    Select Case Column
      Case 0
        .Text = hProf.Name
      Case 1
        .Text = hProf.Count
      Case 2
        If $bPercent Then
          .Text = Format(hProf.Time / $iTime * 100, "0.00")
        Else
          .Text = hProf.Time
        Endif
      Case 3
        If $bPercent Then
          .Text = Format(hProf.Self / $iTime * 100, "0.00")
        Else
          .Text = hProf.Self
        Endif
      'Case 4
      '  .Text = Format(hProf.Time / hProf.Count, "0.##")
    End Select
    
  End With

End

Public Sub gvwProfile_Sort()

  Dim sCurrent As String

  Try sCurrent = $aFunc[gvwProfile.Row].Name

  CProfile.Sort = gvwProfile.Columns.Sort
  CProfile.Ascending = gvwProfile.Columns.Ascending
  $aFunc.Sort
  
  If sCurrent Then gvwProfile.Row = $aFunc.Find($cFunc[sCurrent])

End

Private Sub GotoFunction(sFunc As String, Optional bNoHistory As Boolean)
  
  Dim hEditor As FEditor
  Dim aWhere As String[]
  Dim sPath As String
  
  aWhere = Split(sFunc, "*.*")
  
  sPath = Project.FindPath(aWhere[0])
  If Not Exist(sPath) Then Return
  
  Try hEditor = Project.OpenFile(sPath)
  If IsNull(hEditor) Then Return
  
  hEditor.GotoFunction(hEditor.GetFunctionLine(aWhere[1]))
  
End

Private Sub LoadCurrentSourceCode() As String
  
  Dim hEditor As FEditor
  Dim aWhere As String[]
  Dim sPath As String
  Dim sSource As String
  
  aWhere = Split($hCurrent.Name, "*.*")
  
  sPath = Project.FindPath(aWhere[0])
  If Not Exist(sPath) Then Return
  
  Try hEditor = Project.LoadFile(sPath)
  If IsNull(hEditor) Then Return
  
  If $hCurrent.StartLine = 0 Then
    $hCurrent.StartLine = hEditor.GetFunctionLine(aWhere[1])
    $hCurrent.Code = hEditor.GetFunctionSource(aWhere[1])
  Endif
  
  $iFirstLine = $hCurrent.StartLine
  edtSource.Text = $hCurrent.Code
  
  gvwSource.Rows.Height = edtSource.LineHeight
  gvwSource.Rows.Count = edtSource.Lines.Count
  
End


Public Sub gvwProfile_Activate()

  GotoFunction($aFunc[gvwProfile.Row].Name)

End

Public Sub Form_Close()

  Try Kill $sPath

  Settings.Write(Me)
  Settings.Write(splProfile)

End

Public Sub ReadConfig()
  
  Project.SetSmallFont(gvwProfile)
  Project.SetSmallFont(tabInfo)
  edtSource.ReadConfig
  edtSource.Flags[Editor.HideMargin] = True
  panSepSource.Background = edtSource.Styles[Highlight.Background].Color
  Project.SetEditorFont(gvwSource)
  gvwSource.Width = gvwSource.Font.TextWidth("9999999999")
  
End

Public Sub Form_Open()

  Settings.Read(Me)
  Settings.Read(splProfile)
  ReadConfig

  With gvwProfile
    .Columns.Count = 4
    .Columns[0].Text = ("Function")
    .Columns[0].Width = -1
    .Columns[1].Text = ("Calls")
    .Columns[1].Alignment = Align.Right
    .Columns[2].Text = ("Duration")
    .Columns[2].Alignment = Align.Right
    .Columns[3].Text = ("Self")
    .Columns[3].Alignment = Align.Right
    '.Columns[4].Text = ("Mean (μs)")
    '.Columns[4].Alignment = Align.Right
  End With

  With gvwCalled
    .Columns.Count = 3
    .Columns[0].Text = ("Function")
    .Columns[0].Width = -1
    .Columns[1].Text = ("Calls")
    .Columns[1].Alignment = Align.Right
    .Columns[2].Text = ("Duration")
    .Columns[2].Alignment = Align.Right
    '.Columns[3].Text = ("Mean (μs)")
    '.Columns[3].Alignment = Align.Right
  End With
  
  With gvwCaller
    .Columns.Count = 2
    .Columns[0].Text = ("Function")
    .Columns[0].Width = -1
    .Columns[1].Text = ("Calls")
    .Columns[1].Alignment = Align.Right
    '.Columns[2].Text = ("Duration")
    '.Columns[2].Alignment = Align.Right
    '.Columns[3].Text = ("Mean (μs)")
    '.Columns[3].Alignment = Align.Right
  End With
  
  gvwSource.Columns.Count = 1
  gvwSource.Columns[0].Alignment = Align.Right
  
  gvwProfile.Row = 0
  
End

Private Sub AddHistory(sFunc As String)
  
  If $iNoHistory Then Return
  
  $aHistory.Resize($iHistory)
  If $aHistory.Count >= 32 Then $aHistory.Remove(0)
  $aHistory.Add(sFunc)
  Inc $iHistory
  
End


Public Sub gvwProfile_Select()

  If gvwProfile.Row < 0 Then Return
  
  $hCurrent = $aFunc[gvwProfile.Row]
  AddHistory($hCurrent.Name)
  RefreshCurrent

End

Private Sub RefreshCurrent()
  
  If $hCurrent Then
    
    gvwCalled.Rows.Count = $hCurrent.CalledList.Count
    Object.Lock(gvwCalled)
    gvwCalled.Columns.Sort = 2
    gvwCalled.Columns.Ascending = True
    Object.Unlock(gvwCalled)
    gvwCalled_Sort
    gvwCalled.Columns[0].Width = -1
    
    gvwCaller.Rows.Count = $hCurrent.CallerList.Count
    Object.Lock(gvwCaller)
    gvwCalled.Columns.Sort = 1
    gvwCalled.Columns.Ascending = True
    Object.Unlock(gvwCaller)
    gvwCaller_Sort
    gvwCaller.Columns[0].Width = -1
    
    LoadCurrentSourceCode
    
    lblCurrent.Text = $hCurrent.Name
    Try gvwCalled.Row = 0
    Try gvwCaller.Row = 0
    panCurrent.Show
    
    
  Else
    
    panCurrent.Hide
    'gvwCalled.Rows.Count = 0
    'gvwCalled.Header = gvwCalled.None
    lblCurrent.Text = ""
    
  Endif
  
End

Public Sub gvwCalled_Sort()

  Dim sCurrent As String

  If Not $hCurrent Then Return
  
  Try sCurrent = $hCurrent.CalledList[gvwProfile.Row].Name

  CProfile.Sort = gvwCalled.Columns.Sort
  CProfile.Ascending = gvwCalled.Columns.Ascending
  $hCurrent.CalledList.Sort
  
  If sCurrent Then gvwCalled.Row = $hCurrent.CalledList.Find($hCurrent.Called[sCurrent])

End

Public Sub gvwCalled_Data(Row As Integer, Column As Integer)

  Dim hProf As CProfile
  
  If Not $hCurrent Then Return

  With gvwCalled.Data

    hProf = $hCurrent.CalledList[Row]

    Select Case Column
      Case 0
        .Text = hProf.Name
      Case 1
        .Text = hProf.Count
      Case 2
        If $bPercent Then
          .Text = Format(hProf.Time / $iTime * 100, "0.00")
        Else
          .Text = hProf.Time
        Endif
      'Case 3
      '  .Text = Format(hProf.Time / hProf.Count, "0.##")
    End Select
    
  End With

End

Public Sub gvwCalled_Activate()

  If Not $hCurrent Then Return
  gvwProfile.Row = $aFunc.Find($cFunc[$hCurrent.CalledList[gvwCalled.Row].Name])

End

Public Sub btnPercent_Click()

  $bPercent = Not $bPercent
  gvwProfile.Refresh
  gvwCalled.Refresh
  gvwCaller.Refresh
  gvwSource.Refresh

End

Public Sub btnPrev_Click()

  If $iHistory >= 2 Then
    Dec $iHistory
    Inc $iNoHistory
    gvwProfile.Row = $aFunc.Find($cFunc[$aHistory[$iHistory - 1]])
    Dec $iNoHistory
  Endif

End

Public Sub btnNext_Click()

  If $iHistory <= $aHistory.Max Then
    Inc $iHistory
    Inc $iNoHistory
    gvwProfile.Row = $aFunc.Find($cFunc[$aHistory[$iHistory - 1]])
    Dec $iNoHistory
  Endif

End

Public Sub gvwCaller_Sort()

  Dim sCurrent As String

  If Not $hCurrent Then Return
  
  Try sCurrent = $hCurrent.CallerList[gvwProfile.Row].Name

  CProfile.Sort = gvwCaller.Columns.Sort
  CProfile.Ascending = gvwCaller.Columns.Ascending
  $hCurrent.CallerList.Sort
  
  If sCurrent Then gvwCaller.Row = $hCurrent.CallerList.Find($hCurrent.Caller[sCurrent])

End

Public Sub gvwCaller_Data(Row As Integer, Column As Integer)

  Dim hProf As CProfile
  
  If Not $hCurrent Then Return

  With gvwCaller.Data

    hProf = $hCurrent.CallerList[Row]

    Select Case Column
      Case 0
        .Text = hProf.Name
      Case 1
        .Text = hProf.Count
      ' Case 2
      '   If $bPercent Then
      '     .Text = Format(hProf.Time / $iTime * 100, "0.00")
      '   Else
      '     .Text = hProf.Time
      '   Endif
      ' Case 3
      '  .Text = Format(hProf.Time / hProf.Count, "0.##")
    End Select
    
  End With

End

Public Sub gvwCaller_Activate()

  If Not $hCurrent Then Return
  gvwProfile.Row = $aFunc.Find($cFunc[$hCurrent.CallerList[gvwCaller.Row].Name])

End

Public Sub gvwSource_Data(Row As Integer, Column As Integer)
  
  Dim iTime As Long
  'If Not $hCurrent Then Return
  'Debug $hCurrent.Name; "."; Row + $iFirstLine; ": "; $hCurrent.Lines[Row + $iFirstLine]
  Try iTime = $hCurrent.Lines[Row + $iFirstLine + 1]
  If iTime = 0 Then Return
  
  With gvwSource.Data
    If $bPercent Then
      .Text = Format(iTime / $hCurrent.Self * 100, "0.00")
    Else
      .Text = iTime
    Endif
  End With
  'If Row And 1 Then gvwSource.Data.Background = Color.LightForeground
  
End

Public Sub edtSource_Scroll()

  gvwSource.ScrollY = edtSource.ScrollY

End
