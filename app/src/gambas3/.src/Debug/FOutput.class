' Gambas class file

'PUBLIC Shown AS Boolean

Private $iCol As Integer
Private $iLine As Integer
Private $bWelcome As Boolean
Private $bOpened As Boolean

Public Sub _new()

  'Config.LoadWindow(ME, "/FOutput")
  Settings.Read(Me)
  ReadConfig
  
  chkCharset.Visible = System.Charset <> Desktop.Charset
  sepCharset.Visible = chkCharset.Visible
  btnUndock.Value = Settings["/FOutput/Undock"]
  btnAbove.Value = Settings["/FOutput/KeepAbove"]
  OnProjectDebug

End


Public Sub Clear()

  edtOutput.Clear
  $iLine = 0

  If Not $bWelcome Then

    edtOutput.Text = ("Welcome to the Gambas console.\nTo evaluate any expression, type '?' followed by\nthe expression, then hit return.\n\n")
    edtOutput.Goto(edtOutput.Lines.Count, 0)
    $iCol = edtOutput.Column
    $iLine = edtOutput.Line

    $bWelcome = True

  Endif

End


Public Sub Insert(sText As String, Optional bCurrent As Boolean)

  If chkCharset.Value Then  
    Try sText = DConv$(sText)
  Endif

  If Not bCurrent Then 
    'edtOutput.Line = edtOutput.Lines.Count
    'edtOutput.Goto(edtOutput.Lines.Count, 10000)
  Endif
  
  edtOutput.Print(sText)
  
  $iLine = edtOutput.Line
  $iCol = edtOutput.Column

  If Not Action["console"].Value Then Action["console"].Value = True

End

Public Sub ReadConfig()

  edtOutput.ReadConfig
  edtOutput.Font = Font[Settings["/ConsoleFont", Project.DEFAULT_FONT]]

  MTheme.InitEditor(edtOutput)

  edtOutput.Flags[Editor.ShowCurrentLine] = False
  edtOutput.Flags[Editor.ShowModifiedLines] = False
  edtOutput.Flags[Editor.ShowLineNumbers] = False

End

Public Sub edtOutput_KeyPress()

  Dim sText As String
  Dim iPos As Integer
  Dim sVal As String
  Dim bSemiColon As Boolean

  If Key.Code = Key.Enter Or Key.Code = Key.Return Then

    sText = edtOutput.Lines[edtOutput.Line].Text
    If chkCharset.Value Then
      Try sText = SConv$(sText)
    Endif

    If Design.IsRunning() Then

      If $iLine = edtOutput.Line Then
        sText = Mid$(sText, $iCol + 1)
      Endif

      edtOutput.Insert("\n")
      Design.Send(sText & "\n")
      'Debug
      Stop Event

    Else If Left$(sText) = "?" Then

      sText = Mid$(sText, 2)
      If Not sText Then Return

      If Project.Running Then

        edtOutput.Insert("\n")
        Design.Command("!\t" & sText)
        Stop Event

      Else

        If Right(sText) = ";" Then 
          sText = Left$(sText, -1)
          bSemiColon = True
        Endif

        Try sVal = Str(Eval(sText & "\n"))
        If Error Then sVal = Error.Text
        sVal = "\n" & DConv$(sVal)
        If Not bSemiColon Then sVal &= "\n"
        Insert(sVal)
        Stop Event

      Endif

    Endif

  Else If Key.Code = Key.Escape Then 
  
    Action["console"].Value = False

  Else If Key.Control Then

    If Key.Code = Key["L"] Then
      Clear
    Else If Key.Code = Key["G"] Then 
      edtOutput.Print(Chr$(7))
    Endif

  Endif

End

Public Sub Form_Close()

  If Not Me.Parent Then 
    'DEBUG "Write: "; ME.X;; ME.Y
    Settings.Write(Me)
  Endif
  'Action["console"].Value = FALSE
  'Settings.Write(ME)

End

Public Sub Form_Show()

  'Action["console"].Value = TRUE

End

Public Sub Form_GotFocus()

  edtOutput.SetFocus

End

Public Sub btnClear_Click()

  Clear
  edtOutput.SetFocus

End

Public Sub btnCut_Click()

  edtOutput.Cut

End

Public Sub btnCopy_Click()

  edtOutput.Copy

End

Public Sub btnPaste_Click()

  edtOutput.Paste

End

Public Sub Form_Activate()

  'edtOutput.SetFocus

End

Public Sub btnUndock_Click()

  Settings["/FOutput/Undock"] = btnUndock.Value
  OnProjectDebug
  FDebugInfo.UpdateView

End

' PUBLIC SUB Toggle(bShow AS Boolean)
'   
'   IF NOT btnUndock.Value THEN
'     'IF NOT Project.Running THEN 
'       FMain.ShowDebug(bShow)
'     'ENDIF 
'   ELSE 
'     ME.Visible = bShow
'   ENDIF
'   
' END

Public Sub OnProjectDebug()
  
  btnAbove.Visible = Project.Running And btnUndock.Value
  If btnUndock.Value Then Me.Stacking = If(Project.Running And btnAbove.Value, Window.Above, Window.Normal)
  'panControl.Visible = Project.Running
  
End


Public Sub btnAbove_Click()

  Settings["/FOutput/KeepAbove"] = btnAbove.Value
  OnProjectDebug
  
End

Public Sub Form_Open()

  If Not Me.Parent Then 
    Settings.Read(Me)
    'DEBUG "Read: "; ME.X;; ME.Y
  Endif
  
End

Public Sub edtOutput_Menu()

  mnuEditor.Popup

End

Public Sub btnUndo_Click()
  
  edtOutput.Undo
  
End

Public Sub btnRedo_Click()
  
  edtOutput.Redo
  
End

Public Sub edtOutput_GotFocus()

  Project.SetCurrentPopup(mnuEditor)
  FSearch.Update
  
End

Public Sub txtFind_KeyPress()

  If Key.Code = Key.F3 
    If Key.Normal Then 
      FSearch.FindNext
    Else If Key.Shift Then 
      FSearch.FindPrevious
    Endif
    Stop Event 
  Endif

End

Public Sub edtOutput_LostFocus()

  If Project.AboutToQuit Then Return
  FSearch.Update

End


Public Sub GetText() As String
  
  Return edtOutput.Text
  
End

Public Sub GetPosition() As Integer
  
  Return edtOutput.GetPosition()

End

Public Sub SetPosition(hResult As CFindResult, Optional bJustCheck As Boolean) As Boolean
  
  Return edtOutput.SetPosition(hResult, bJustCheck)
  
End

Public Sub Replace(sReplace As String)
  
  edtOutput.Replace(sReplace)
  
End

Public Sub GetSelection() As String
  
  Return edtOutput.GetSelection()
  
End

Public Sub btnSearch_Click()

  edtOutput.SetFocus
  FSearch.WakeUp(False)

End


' Public Sub btnControl_Click()
' 
'   Design.Send(Chr$(Asc(Right$(Last.Text)) - 64))
' 
' End
' 
' Public Sub btnCtrlD_Click()
' 
'   Print #Design.GetProcess(), Chr$(4);
' 
' End
