' Gambas class file

Const YW_DUMMY_INFO As String = "@"
Const YW_NOT_AVAILABLE As String = ("not available")

Static Private $cAll As New Collection
Static Private $sYWindow As String
Static Private $sLastExpr As String
Static Private $iChangeColor As Integer
Static Private $iErrorColor As Integer
Static Private $sTempImage As String

Private Enum TYPE_NORMAL, TYPE_ARRAY, TYPE_COLLECTION, TYPE_IMAGE

Private $sExpr As String
Private $sKey As String
Private $sInfo As String
Private $sLastGood As String
Private $iType As Integer

Private $aSym As String[]

Private $cVal As New Collection
Private $cOldVal As New Collection

Private $cValContents As New Collection
Private $cOldValContents As New Collection

Private $iRowStatic As Integer
Private $iRowDynamic As Integer

Private $sClass As String
Private $sRealClass As String
Private $sCollectionKey As String
Private $aDim As Integer[]
Private $aKeys As String[]

Private $sCurrentExpr As String
Private $hCurrentView As TableView

Static Public Sub Add(sExpr As String, sInfo As String)
  
  Dim hWin As FDebugExpr
  
  If Not sInfo Then Return
  
  If Not $cAll.Exist(sExpr) Then
    hWin = New FDebugExpr(sExpr, sInfo)
    If Object.IsValid(hWin) Then
      $cAll[sExpr] = hWin
      hWin.Show()
      hWin.Raise()
    Endif
  Else 
    hWin = $cAll[sExpr]
    hWin.RefreshInfo(sInfo) 
  Endif 
  
End

Static Public Sub AddResult(sWindow As String, sValue As String, Optional bAssign As Boolean)
  
  Dim iPos As Integer
  Dim hWin As FDebugExpr
  
  iPos = RInStr(sWindow, "#")
  
  hWin = $cAll[Left(sWindow, iPos - 1)]
  If Not hWin Then Return
  
  sWindow = Mid$(sWindow, iPos + 1)
  If Left(sWindow) = "I" Then
    hWin.SetImage()
  Else
    hWin.SetValue(CInt(Mid(sWindow, 2)), Left(sWindow), sValue, bAssign)
  Endif
  
End

Static Public Sub Clear()
  
  Dim hWin As FDebugExpr
  
  For Each hWin In $cAll
    Try hWin.Close
  Next
  
  $cAll.Clear
  
End

Public Sub _new(sExpr As String, sInfo As String)
  
  $sExpr = sExpr
  $sKey = Replace(sExpr, "/", "|")
  $sInfo = sInfo
  
  UpdateConfig
  
  'Project.Config.Read(ME, $sKey)
  btnShowAll.Value = Project.Config["DebugWindow" &/ $sKey &/ "ShowHidden", False]
  
  If sInfo = YW_DUMMY_INFO Then
    Me.Enabled = False
    Me.Title = sExpr & " (" & YW_NOT_AVAILABLE & ")"
    tabExpr.Hide
    Me.H = Desktop.Scale * 8
  Else 
    If Init(sInfo, True) Then
      Me.Close
      Return
    Endif
  Endif 
  
  $sLastGood = sExpr
  txtExpr.Text = sExpr
  
End 

Private Sub GetIndiceFromRow(iRow As Integer) As String
  
  Dim sSym As String
  Dim iDim As Integer
  
  If $aDim Then
    
    For Each iDim In $aDim
      sSym &= ", " & CStr(iRow Mod iDim)
      iRow \= iDim
    Next
    sSym = Mid(sSym, 3)
    
  Else
    
    sSym = CStr(iRow)
    
  Endif
  
  Return sSym
  
End

Public Sub gvwExpr_Data(Row As Integer, Column As Integer)
  
  Dim sSym As String
  Dim sVal As String
  Dim bChange As Boolean
  Dim cVal As Collection
  Dim cOldVal As Collection
  Dim hGridView As GridView
  
  hGridView = Last
  
  If Column = 0 Then hGridView.Data.Foreground = Color.Gradient(Color.TextBackground, Color.TextForeground, 0.7)
  
  If hGridView = gvwContents Then
    
    cVal = $cValContents
    cOldVal = $cOldValContents
    
    sVal = cVal[Row]
    
    If $iType = TYPE_ARRAY Then 
      
      sSym = GetIndiceFromRow(Row)
      
      If Column = 0 Then 
        hGridView.Data.Text = sSym
        hGridView.Data.Alignment = Align.Right
      Else 
        If sVal Then 
          hGridView.Data.Text = sVal
        Else  
          Design.Command("?X" & $sExpr & "#@" & CStr(Row) & "\t" & $sExpr & "[" & sSym & "]")
        Endif
      Endif
      
    Else If $iType = TYPE_COLLECTION Then
      
      sSym = Chr$(34) & $aKeys[Row] & Chr$(34)
      
      If Column = 0 Then 
        hGridView.Data.Text = sSym
      Else 
        If sVal Then 
          hGridView.Data.Text = sVal
        Else  
          Design.Command("?X" & $sExpr & "#@" & CStr(Row) & "\t" & $sExpr & "[" & sSym & "]")
          Design.Command("=" & "\t" & $sExpr & ".Key = " & Quote($sCollectionKey))
        Endif
      Endif
      
    Endif
    
  Else
    
    cVal = $cVal
    cOldVal = $cOldVal
    
    sVal = cVal[Row]
    
    sSym = $aSym[Row]
    
    If Right(sSym) = ":" Then 
      hGridView.Data.Background = Color.LightForeground
      Return 
    Endif
    
    If Column = 0 Then
      hGridView.Data.Text = sSym
      If $iRowStatic >= 0 Then 
        If $iRowDynamic < 0 Or If Row < $iRowDynamic Then hGridView.Data.Font.Bold = True
      Endif
    Else
      If sVal Then 
        hGridView.Data.Text = sVal
      Else 
        If Left($sClass) = "." Or If Not $sRealClass Then
          Design.Command("?X" & $sExpr & "#!" & CStr(Row) & "\t" & $sExpr & "." & sSym)
        Else 
          Design.Command("?X" & $sExpr & "#!" & CStr(Row) & "\t" & $sRealClass & "(" & $sExpr & ")." & sSym)
        Endif
      Endif
      
    Endif
    
  Endif
  
  If Left(sVal) <> "!" Then
    
    If cOldVal.Exist(Row) Then
      If sVal <> cOldVal[Row] Then 
        bChange = True
      Endif
    Else
      bChange = True
    Endif
    
  Endif
  
  If Column <> 0 Then 
    
    hGridView.Data.Font = txtExpr.Font
    
    If Left(sVal) = "!" Then
      
      hGridView.Data.Text = Mid$(sVal, 2)
      hGridView.Data.Background = $iErrorColor
      hGridView.Data.Font.Bold = True
      
    Endif
    
  Else
    
    hGridView.Data.Text &= "  "
    
  Endif 
  
  If bChange Then hGridView.Data.Background = $iChangeColor 'Color.Lighter(Color.Yellow)
  
Catch
  
End

Public Sub SetImage()
  
  imvContents.Image = Image.Load($sTempImage)
  imvContents.ZoomFit(Desktop.Scale)
  
End

Public Sub SetValue(iRow As Integer, sType As String, sVal As String, Optional bAssign As Boolean)
  
  Dim vVal As Variant
  Dim sHex As String
  Dim hGridView As TableView
  Dim cVal As Collection
  
  If sType = "@" Then
    hGridView = gvwContents
    cVal = $cValContents
  Else
    hGridView = gvwExpr
    cVal = $cVal
  Endif
  
  If bAssign Then
    
    If Left(sVal) = "!" Then
      Message.Error(Mid$(sVal, 2))
    Endif
    
  Else
    
    If btnHexa.Value Then
      
      vVal = Val(sVal)
      
      Select Case TypeOf(vVal)
        Case gb.Integer
          sHex = Hex$(vVal, 8)
        Case gb.Long
          sHex = Hex$(vVal, 16)
      End Select 
      
      If sHex Then 
        While Left(sHex) = "0"
          sHex = Mid$(sHex, 2)
        Wend
        If sHex Then sVal = "&H" & sHex
      Endif
      
    Endif
    
    cVal[iRow] = sVal
    
  Endif
  
  hGridView[iRow, 1].Refresh
  
End

Private Sub OpenExpr(sExpr As String, Optional sRealExpr As String)
  
  $sYWindow = $sExpr
  $sLastExpr = $sExpr
  If Not sRealExpr Then sRealExpr = sExpr
  Design.Command("#X" & sExpr & "\t" & sRealExpr)   
  
End

Public Sub gvwExpr_Select()
  
  Dim sText As String
  Dim hGridView As GridView
  
  $sCurrentExpr = ""
  hGridView = Last
  If hGridView.Row < 0 Then Return
  
  If hGridView = gvwExpr Then
    If Left($aSym[hGridView.Row]) = ":" Then Return
  Endif
  
  sText = Trim(hGridView[hGridView.Row, 0].Text)
  If Not sText Then Return
  
  If hGridView = gvwExpr Then
    If Left($sClass) = "." Or If Not $sRealClass Then
      sText = $sExpr & "." & sText
    Else 
      'sText = $sExpr & "." & sText
      sText = $sRealClass & "(" & $sExpr & ")." & sText
    Endif
  Else
    sText = $sExpr & "[" & sText & "]"
  Endif 
  
  $sCurrentExpr = sText
  
End

Private Sub OpenCurrentExpr(hGridView As TableView)
  
  Dim sVal As String
  
  If Not $sCurrentExpr Then Return
  
  sVal = hGridView[hGridView.Row, 1].Text
  
  If Left(sVal) = "(" Then
    
    ' With hGridView[gvwExpr.Row, 1]
    '   Design.SetBalloon(gvwExpr, .X + .W / 2, .Y + .H / 2)
    ' End With
    OpenExpr($sCurrentExpr)
    
  Else
    
    hGridView.Column = 1
    hGridView.Edit
    
  Endif
  
End

Public Sub gvwExpr_Activate()
  
  OpenCurrentExpr(Last)
  
End

Private Sub Init(sInfo As String, bNew As Boolean) As Boolean
  
  Dim aStatic As New String[]
  Dim aDynamic As New String[]
  Dim sSym As String
  Dim sType As String
  Dim nRow As Integer
  Dim iSize As Integer
  Dim nRowAsArray As Integer = -1
  Dim bShowHidden As Boolean = btnShowAll.Value
  Dim bHasHidden As Boolean
  Dim nVal As Integer
  Dim aGeom As Variant[]
  Dim H As Integer
  
  If sInfo = YW_DUMMY_INFO Then Return True
  
  $aSym = Split(sInfo, " ", Chr$(34))
  If $aSym.Count < 3 Then
    Debug "???";; sInfo
    Return True
  Endif
  
  $sClass = $aSym[0]
  $sRealClass = $aSym[1]
  sType = $aSym[2]
  
  $iRowStatic = -1
  $iRowDynamic = -1
  
  If sType = "C:" Then
    
    $iType = TYPE_COLLECTION
    $aSym.Remove(0, 3) ' Remove the class names and the data type
    nVal = Val(Mid$($aSym[0], 2, -1))
    $sCollectionKey = $aSym[1]
    $aSym.Remove(0, 2)
    $aKeys = $aSym.Extract(0, nVal)
    
  Else If sType = "A:" Then
    
    $iType = TYPE_ARRAY
    $aSym.Remove(0, 3) ' Remove the class names and the data type
    
    sSym = Mid$($aSym[0], 2, -1)
    If InStr(sSym, ",") Then
      nVal = 1
      $aDim = New Integer[]
      For Each sSym In Split(sSym, ",")
        iSize = CInt(sSym)
        $aDim.Add(iSize)
        nVal *= iSize
      Next
    Else
      nVal = CInt(sSym)
      $aDim = Null
    Endif
    
  Else If $sClass = "Image" Or If $sClass = "Picture" Then
    
    $iType = TYPE_IMAGE
    
  Else
    
    $iType = TYPE_NORMAL
    
  Endif
  
  While $aSym.Count
    If $aSym[0] = "S:" Or If $aSym[0] = "D:" Then Break
    $aSym.Remove(0)
  Wend
  
  ' If $bArray Then 
  ' 
  '   $aSym = Null
  ' 
  ' Else If $bCollection Then  
  ' 
  '   $sCollectionKey = $aSym[1] ' Current collection key
  '   $aSym.Remove(0, 2) ' Remove the count and the current key
  ' 
  ' Else 
  
  ' Sort symbols
  
  For Each sSym In $aSym
    If Right(sSym) = ":" Then   
      sType = UCase(sSym)
    Else
      If Left(sSym) = "_" Then 
        bHasHidden = True
        If Not bShowHidden Then Continue
        If sSym Begins "_@" Then Continue
      Endif
      If Left(sSym) = "[" Then
        nRowAsArray = CInt(Mid$(sSym, 2, -1))
        Continue
      Endif
      If sType = "S:" Then 
        aStatic.Add(sSym)
      Else 
        aDynamic.Add(sSym)
      Endif
    Endif
  Next
  
  If aDynamic.Count Then 
    If aStatic.Count Then
      bHasHidden = True
      If Not bShowHidden Then aStatic.Clear
    Endif
  Endif
  
  aStatic.Sort
  aDynamic.Sort
  
  $aSym.Clear
  
  If aStatic.Count Then
    $iRowStatic = $aSym.Count 
    'IF aDynamic.Count THEN $aSym.Add("S:")
    $aSym.Insert(aStatic)
  Endif
  
  If aDynamic.Count Then 
    $iRowDynamic = $aSym.Count 
    If aStatic.Count Then $aSym.Add("D:")
    $aSym.Insert(aDynamic)
  Endif
  
  nRow = $aSym.Count
  
  ' If aStatic.Count = 1 And If aDynamic.Count = 0 And If aStatic[0] = "Count" And If nRowAsArray >= 0 Then 
  '   nRow = nRowAsArray
  '   $bArray = True
  '   $aSym = Null
  ' Else If aDynamic.Count = 1 And If aStatic.Count = 0 And If aDynamic[0] = "Count" And If nRowAsArray >= 0 Then 
  '   nRow = nRowAsArray
  '   $bArray = True
  '   $aSym = Null
  ' Endif
  
  ' Endif
  
  If Left$($sClass) = "." Or If Not $sRealClass Then
    Me.Title = $sExpr & " (" & $sClass & ")"
  Else 
    Me.Title = $sExpr & " (" & $sRealClass & ")"
  Endif
  
  If nRow = 0 Then 
    tabExpr.Hide
    gvwExpr.Rows.Count = 0
    lblVoid.Show
    Return
  Endif
  
  tabExpr.Show
  lblVoid.Hide
  
  If tabExpr.Index = 0 Then
    
    gvwExpr.Clear
    With gvwExpr
      
      .Columns.Count = 2
      'If nRow > 1024 Then Stop
      .Rows.Count = nRow
      
      .Columns[0].Text = ("Symbol")
      '.Columns[0].Width = .Font.Width("Symbol") + 16
      .Columns[1].Text = ("Value")
      
      .Columns[0].Width = Desktop.Scale
      
    End With
    
    If $iRowDynamic >= 0 And If $iRowStatic >= 0 Then gvwExpr.Rows[$iRowDynamic].Height = 2
    
    gvwExpr.Columns[0].Width = -1
    
    H = gvwExpr.ScrollH
    
  Else If tabExpr.Index = 1 Then
    
    gvwContents.Clear
    With gvwContents
      .Columns.Count = 2
      .Rows.Count = nVal
      
      If $iType = TYPE_ARRAY Then
        .Columns[0].Text = ("Index")
        .Columns[1].Text = ("Value")
      Else If $iType = TYPE_COLLECTION Then
        .Columns[0].Text = ("Key")
        .Columns[1].Text = ("Value")
      Endif
      
    End With
    
    Try gvwContents.Columns[0].Width = -1
    
    If $iType = TYPE_IMAGE Then
      
      If Not $sTempImage Then $sTempImage = File.SetExt(Temp$(), "png")
      Design.Command("?X" & $sExpr & "#I" & "\t" & $sExpr & ".Save(" & Quote($sTempImage) & ")")
      H = Desktop.Scale * 8
      
    Else
      
      H = gvwContents.ScrollH
      
    Endif
    
  Endif
  
  tabExpr.ShowTabBar = $iType <> TYPE_NORMAL
  imvContents.Visible = $iType = TYPE_IMAGE
  gvwContents.Visible = $iType = TYPE_COLLECTION Or $iType = TYPE_ARRAY
  
  H = Max(Desktop.Scale * 4, Min(Desktop.Scale * 64, H)) + tabExpr.TabBarSize + txtExpr.H + 2
  
  If bNew Then
    
    aGeom = Project.Config["DebugWindow" &/ $sKey &/ "Geometry"]
    Try Me.Move(aGeom[0], aGeom[1], aGeom[2], H)
    If Error Then
      Me.H = H
      Me.Center
    Endif
    
  Else
    
    Me.H = Max(Me.H, H)
    
  Endif
  
End

Public Sub RefreshInfo(sInfo As String)
  
  Dim sStr As String
  
  $sInfo = sInfo
  Me.Enabled = True
  
  For Each sStr In $cVal
    $cOldVal.Add(sStr, $cVal.Key)
  Next 
  
  For Each sStr In $cValContents
    $cOldValContents.Add(sStr, $cValContents.Key)
  Next 
  
  $cVal.Clear
  $cValContents.Clear
  
  Init(sInfo, False) 
  
End

Public Sub Form_Close()
  
  WriteSetting
  $cAll.Remove($sExpr)
  
Catch
  
End

Static Public Sub RefreshAll()
  
  Dim xObj As Object
  
  For Each xObj In $cAll
    Design.Command("#X" & $cAll.Key & "\t" & $cAll.Key)
  Next 
  
End

Static Public Function Exist(sExpr As String) As Boolean
  
  If Not sExpr Then Return
  Return $cAll.Exist(sExpr)
  
End

Static Public Sub Disable(sExpr As String, sError As String)
  
  Dim hWin As FDebugExpr
  
  If Not sError Then Return 
  
  hWin = $cAll[sExpr]
  hWin.Enabled = False
  hWin.Title = sExpr & " (" & YW_NOT_AVAILABLE & ")"
  
End

Public Sub WriteSetting()
  
  Project.Config.Clear("DebugWindow" &/ $sKey)
  If btnShowAll.Value Then Project.Config["DebugWindow" &/ $sKey &/ "ShowHidden"] = True  
  Project.Config["DebugWindow" &/ $sKey &/ "Geometry"] = [Me.X, Me.Y, Me.W, Me.H]  
  
End

Static Public Sub WriteSettings()
  
  Dim iInd As Integer
  Dim sFlag As String
  Dim hExpr As FDebugExpr
  
  sFlag = "/DebugWindow"
  iInd = 0
  Project.Config.Clear(sFlag)
  
  Project.Config[sFlag &/ "Count"] = $cAll.Count  
  
  For Each hExpr In $cAll
    Inc iInd
    Project.Config[sFlag &/ "DebugWindow[" & CStr(iInd) & "]"] = $cAll.Key
    hExpr.WriteSetting
  Next 
  
End

Static Public Sub ReadSettings()
  
  Dim iCount As Integer
  Dim iInd As Integer
  Dim sString As String
  Dim sFlag As String
  
  sFlag = "/DebugWindow"
  iInd = 0
  iCount = Project.Config[sFlag &/ "Count", "0"]
  For iInd = 1 To iCount
    sString = Project.Config[sFlag &/ "DebugWindow[" & CStr(iInd) & "]"]
    If sString Then 
      If Not $cAll.Exist(sString) Then
        Add(sString, YW_DUMMY_INFO) 
      Endif 
    Endif 
  Next
  
End

' PUBLIC SUB txtExpr_Change()
' 
'   DIM sExpr AS String
' 
'   IF NOT $sLastGood THEN 
'     $sLastGood = txtExpr.Text
'   ELSE IF NOT (txtExpr.Text LIKE ($sExpr & "*")) THEN 
'     sExpr = $sLastGood
'     $sLastGood = ""
'     txtExpr.Text = sExpr
'   ENDIF  
' 
' END

Public Sub txtExpr_Activate()
  
  Dim sExpr As String = Trim(txtExpr.Text)
  
  If sExpr Then 
    Design.SetBalloon(txtExpr)
    OpenExpr(sExpr)
    gvwExpr.SetFocus
  Endif
  
End

Public Sub txtExpr_LostFocus()
  
  txtExpr.Text = $sExpr
  
End

Public Sub txtExpr_KeyPress()
  
  If Key.Code = Key.Escape And If txtExpr.Text <> $sExpr Then 
    txtExpr.Text = $sExpr
    Stop Event
  Endif
  
End

Public Sub Form_Open()
  
  If $sLastExpr Then 
    If $cAll.Exist($sLastExpr) Then 
      With $cAll[$sLastExpr]
        Me.Move(.X + Desktop.Scale * 2, .Y + Desktop.Scale * 2)
      End With 
    Endif 
    $sLastExpr = ""
  Endif
  
  ' As the first Init() is called inside _new(), the 'Data' event is never raised.
  Try gvwExpr.Columns[0].W = -1
  gvwExpr.SetFocus
  
  If tabExpr.ShowTabBar Then tabExpr.Index = 1
  
End

Public Sub UpdateConfig()
  
  Project.SetSmallFont(tabExpr)
  tabExpr.TextFont = Project.GetSmallFont()
  Project.SetSmallFont(lblVoid)
  Project.SetEditorFont(txtExpr)
  
End

Public Sub btnShowAll_Click()
  
  $cVal.Clear
  Init($sInfo, False)
  
End

Public Sub Form_KeyPress()
  
  If Key.Code = Key.Escape Then 
    If gvwExpr.Editor Or If gvwContents.Editor Then Return
    Me.Close
  Endif
  
End

Static Public Sub ReadConfig()
  
  Dim hWin As FDebugExpr
  
  $iChangeColor = Color.SetAlpha(MTheme.GetColor("Highlight"), 128)
  $iErrorColor = Color.SetAlpha(Color.SoftRed, 128)
  
  For Each hWin In $cAll
    hWin.UpdateConfig
  Next
  
End

Public Sub gvwExpr_Save(Row As Integer, (Column) As Integer, Value As String)
  
  Dim sSym As String
  Dim hGridView As TableView
  
  Value = Trim(Value)
  If Value Then
    
    hGridView = Last
    
    If hGridView = gvwContents Then
      
      Select Case $iType
          
        Case TYPE_ARRAY
          
          $cValContents[Row] = Null
          Design.Command("=X" & $sExpr & "#@" & CStr(Row) & "\t" & $sExpr & "[" & GetIndiceFromRow(Row) & "] = " & Value)
          
        Case TYPE_COLLECTION
          
          sSym = Chr$(34) & $aKeys[Row] & Chr$(34)
          $cValContents[Row] = Null
          Design.Command("=X" & $sExpr & "#@" & CStr(Row) & "\t" & $sExpr & "[" & sSym & "] = " & Value)
          
      End Select
      
    Else
      
      sSym = $aSym[Row]
      $cVal[Row] = Null
      
      If Left($sClass) = "." Or If Not $sRealClass Then
        Design.Command("=X" & $sExpr & "#!" & CStr(Row) & "\t" & $sExpr & "." & sSym & " = " & Value)
      Else 
        Design.Command("=X" & $sExpr & "#!" & CStr(Row) & "\t" & $sRealClass & "(" & $sExpr & ")." & sSym & " = " & Value)
      Endif
      
    Endif
    
  Endif
  
  gvwExpr.Cancel
  
End

' Public Sub gvwExpr_Draw(X As Integer, Y As Integer, Width As Integer, Height As Integer, Row As Integer, Column As Integer)
' 
'   If Column = 1 And If Row = gvwExpr.Row Then
'     
'     Paint.DrawPicture(Picture["img/16/watch.png"], X + Width - 16, Y + (Height - 16) / 2)
'     
'   Endif
' 
' End

Public Sub gvwExpr_Menu()
  
  If Not $sCurrentExpr Then Return
  $hCurrentView = Last
  mnuPopup.Popup
  $hCurrentView = Null
  
End

Public Sub mnuEdit_Click()
  
  OpenCurrentExpr($hCurrentView)
  
End

Public Sub mnuWatch_Click()
  
  If Not $sCurrentExpr Then Return
  FDebugger.AddWatch($sCurrentExpr)
  
End

Public Sub mnuPrint_Click()
  
  If Not $sCurrentExpr Then Return
  FOutput.PrintExpr($sCurrentExpr)
  
End

Public Sub btnHexa_Click()
  
  $cVal.Clear
  Init($sInfo, False)
  
End

Public Sub tabExpr_Click()
  
  Init($sInfo, False)
  
End
