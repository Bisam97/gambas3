' Gambas class file

Static Private $aTheme As String[] = ["amethyst", "amber", "emerald", "ruby", "sapphire", "visual", "obsidian", "quest", "quick"]
Static Private $aThemeName As String[] = [("Amethyst"), ("Amber"), ("Emerald"), ("Ruby"), ("Sapphire"), ("Visual"), ("Obsidian"), ("Quest"), ("Quick")]
Static Private $aBrowser As String[] = ["konqueror", "firefox", "epiphany", "seamonkey", "opera"]
Static Private $aTerminal As String[] = ["konsole", "gnome-terminal", "Terminal", "xterm"]
Static Private $aImageEditor As String[] = ["gimp", "kolourpaint", "krita"]

Private $cLast As Collection
Private $cCurrent As Collection
Private $bNoChange As Boolean
Private $aConfig As Variant[][]
Private $sStyle As String
Private $hDraw As DrawingArea

Private Sub ReadConfig()
  
  Dim aParam As Variant[]
  Dim hCtrl As Object
  Dim vVal As Variant
  
  For Each aParam In $aConfig
  
    hCtrl = aParam[0]
    vVal = Settings[aParam[1], aParam[2]]
    
    Select Case Object.Type(hCtrl)
    
      Case "FontChooser"
        hCtrl.SelectedFont = vVal
      Case "ComboBox"
        If TypeOf(vVal) = gb.Boolean Then 
          hCtrl.Index = If(vVal, 1, 0)
        Else
          hCtrl.Index = vVal
        Endif
      Case "SpinBox"
        hCtrl.Value = vVal
      Case "ButtonBox"
        hCtrl.Text = vVal
      Default 
        Debug "Unmanaged type: "; Object.Type(hCtrl)
    
    End Select
  
  Next
  
End


Public Sub _new()

  Dim iInd As Integer
  Dim hHBox As HBox
  Dim hColor As DrawingArea
  Dim hButton As Button

  cmbTheme.List = $aThemeName.Copy().Sort(gb.Language)
  cmbTheme.Add(("Select a theme"), 0)
  cmbIconTheme.List = [("Desktop"), "Gnome", "KDE"]
  cmbBrowser.List = [("(Default)"), "Konqueror", "Firefox", "Epiphany", "SeaMonkey", "Opera"]
  cmbTerminal.List = [("(Default)"), "Konsole", "Gnome Terminal", "XFCE Terminal", "XTerm"]
  cmbImageEditor.List = [("(Default)"), "GIMP", "Kolour Paint", "Krita"]
  
  $cLast = MTheme.ReadSettings(Settings, "/Highlight", True)
  $cCurrent = MTheme.Copy($cLast)
  
  $aConfig = [
    [txtEditorFont, "/Editor/Font", Project.DEFAULT_FONT],
    [txtConsoleFont, "/ConsoleFont", Project.DEFAULT_FONT],
    [cmbGlobalFont, "/GlobalFont", 0],
    [cmbTabStripFont, "/TabStripFont", 0],
    [cmbToolbox, "/ToolboxSize", 0],
    [cmbSortProperty, "/SortProperties", 1],
    [txtTabSize, "/DefaultTabSize", 2],
    [cmbProcLimit, "/Editor/ProcedureLimit", 2],
    [cmbLineNumber, "/Editor/ShowLineNumbers", 0],
    [cmbShowChange, "/Editor/ShowChange", 1],
    [cmbShowCurrent, "/Editor/ShowCurrent", 1],
    [cmbShowDots, "/Editor/ShowDots", 1],
    [cmbFoldProc, "/Editor/Fold", 0],
    [cmbOutput, "/QuietExternalCommands", 0],
    [cmbUtility, "/UseUtilityWindows", 1],
    [cmbOptional, "/AlwaysDisplayOptionalMessages", 0],
    [cmbTooltip, "/ShowTooltip", 0],
    [cmbIntegratedHelp, "/PropertyHelp", 1],
    [cmbHelpCompletion, "/ShowHelpInPopup", 1],
    [cmbMinimize, "/MinimizeOnRun", 0],
    [cmbUpperCaseKeywords, "/Editor/KeywordsUseUpperCase", 0],
    [cmbControlStructCompletion, "/Editor/ControlStructCompletion", 1]]
  
  $bNoChange = True
  ReadConfig
  cmbIconTheme.Index = ["gnome", "kde"].Find(Settings["/Theme"]) + 1
  cmbBrowser.Index = $aBrowser.Find(Settings["/Browser"]) + 1
  cmbTerminal.Index = $aTerminal.Find(Settings["/Terminal"]) + 1
  cmbImageEditor.Index = $aImageEditor.Find(Settings["/ImageEditor"]) + 1
  $bNoChange = False
  
  For iInd = 0 To MTheme.ColorKeys.Max
  
    hHBox = New HBox(svwTheme)
    hHBox.Tag = MTheme.ColorKeys[iInd]
    hHBox.Height = 4 * Desktop.Scale
    hHBox.Spacing = 4
    hColor = New DrawingArea(hHBox) As "dwgStyle"
    hColor.Expand = True
    hButton = New Button(hHBox) As "btnStyle"
    hButton.Text = ("Define...")
    hButton.Width = Desktop.Scale * 16
  
  Next
  
  RefreshStyle
  
  chkSnippet.Value = Settings["Editor/CodeSnippet", 1]
  
  gvwSnippet.Columns.Count = 2
  gvwSnippet.Columns[0].Width = Desktop.Scale * 8
  
  Me.Utility = Settings["/UseUtilityWindows", 1]
  
End

Public Sub Form_KeyPress()
  
  If Key.Code = Key.Esc Then Me.Close
  
End

Public Sub cmbTheme_Click()

  Dim cColor As Collection

  If cmbTheme.Index <= 0 Then Return

  $cCurrent = MTheme.ReadFile($aTheme[$aThemeName.Find(cmbTheme.Text)])
  RefreshEditor
  
End

Public Sub btnExport_Click()

  Dialog.Path = Settings["/FOption/ThemePath", System.User.Home &/ System.User.Name & ".gambas.theme"]
  Dialog.Filter = ["*.gambas.theme", ("Gambas highlight theme files")]
  Dialog.Title = ("Export a theme file")
  Dialog.AutoExt = True
  If Dialog.SaveFile() Then Return
  Settings["/FOption/ThemePath"] = Dialog.Path
  
  MTheme.WriteFile(Dialog.Path, $cCurrent)
  
End

Private Sub RefreshStyle()
  
  Dim hHBox As HBox
  
  svwTheme.Background = CStyle[$cCurrent["Background"]].Foreground
  
  For Each hHBox In svwTheme.Children
    hHBox.Children[0].Refresh
  Next  
  
End



Private Sub RefreshEditor()
  
  Dim hFile As Object

  If $bNoChange Then Return

  RefreshStyle
  
  MTheme.WriteSettings(Settings, "Highlight", $cCurrent)
  Settings["/Editor/Font"] = txtEditorFont.Text
  
  Project.RefreshBreakpointPicture
  
  For Each hFile In Project.Files
    If hFile Is FEditor Or hFile Is FTextEditor Then hFile.ReadConfig()
  Next  
  
  FSearch.ReadConfig
  FMain.ReadConfig
  FProperty.ReadConfig
  FFormStack.ReadConfig

End

Private Sub RefreshConsole()
  
  If $bNoChange Then Return
  
  Settings["/ConsoleFont"] = txtConsoleFont.Text
  FOutput.ReadConfig
  
End


Public Sub btnUndo_Click()

  $cCurrent = MTheme.Copy($cLast)
  cmbTheme.Index = 0
  RefreshEditor

End

Private Sub RefreshWindow()
  
  Dim hFile As Object
  
  If $bNoChange Then Return

  FProperty.ReadConfig
  FMain.ReadConfig
  FDebugInfo.ReadConfig
  FSearch.ReadConfig
  FFormStack.ReadConfig
  FToolBox.ReadConfig
  FDebugExpr.ReadConfig
  For Each hFile In Project.Files
    Try hFile.ReadConfig
  Next

End

Public Sub cmbGlobalFont_Click()

  Settings["/GlobalFont"] = cmbGlobalFont.Index
  RefreshWindow

End

Public Sub cmbTabStripFont_Click()

  Settings["/TabStripFont"] = cmbTabStripFont.Index
  RefreshWindow

End

Public Sub cmbTooltip_Click()

  Settings["/ShowTooltip"] = cmbTooltip.Index = 1
  Application.Tooltip.Enabled = cmbTooltip.Index = 1
  
End

Public Sub txtTabSize_Change()

  Settings["/DefaultTabSize"] = txtTabSize.Value

End

Public Sub cmbProcLimit_Click()

  Settings["/Editor/ProcedureLimit"] = cmbProcLimit.Index
  RefreshEditor

End

Public Sub cmbLineNumber_Click()

  Settings["/Editor/ShowLineNumbers"] = cmbLineNumber.Index = 1
  RefreshEditor

End

Public Sub cmbShowChange_Click()

  Settings["/Editor/ShowChange"] = cmbShowChange.Index = 1
  RefreshEditor

End

Public Sub cmbShowCurrent_Click()

  Settings["/Editor/ShowCurrent"] = cmbShowCurrent.Index = 1
  RefreshEditor

End

Public Sub cmbShowDots_Click()

  Settings["/Editor/ShowDots"] = cmbShowDots.Index = 1
  RefreshEditor

End

' Public Sub cmbCompletion_Click()
' 
'   Settings["/Editor/Completion"] = cmbCompletion.Index = 1
'   RefreshEditor
' 
' End

Public Sub btnImport_Click()

  Dialog.Path = Settings["/FOption/ThemePath", System.User.Home]
  Dialog.Filter = ["*.gambas.theme", ("Gambas highlight theme files")]
  Dialog.Title = ("Select a theme file")
  If Dialog.OpenFile() Then Return
  
  'Enhanced Dialog.OpenFile() is buggy 
  If Not Dialog.Path Or If IsDir(Dialog.Path) Then Return
  
  Settings["/FOption/ThemePath"] = Dialog.Path 
  
  $cCurrent = MTheme.ReadFile(Dialog.Path)
  cmbTheme.Index = 0
  RefreshEditor

End

Public Sub cmbSortProperty_Click()

  Settings["/SortProperties"] = cmbSortProperty.Index = 1
  FProperty.ReadConfig

End

Private Sub NeedRestart(hCtrl As Control)
  
  Balloon.Warning(("You need to restart the application to see your changes."), hCtrl)  
  
End


Public Sub cmbIconTheme_Click()

  If cmbIconTheme.Index > 0
    Settings["/Theme"] = LCase(cmbIconTheme.Text)
  Else 
    Settings["/Theme"] = ""
  Endif
  
  NeedRestart(cmbIcontheme)
  
End

Public Sub cmbBrowser_Click()

  If cmbBrowser.Index > 0 Then 
    Settings["/Browser"] = $aBrowser[cmbBrowser.Index - 1]
  Else   
    Settings["/Browser"] = ""
  Endif
  
  Project.Browser = ""

End

Public Sub cmbTerminal_Click()

  If cmbTerminal.Index > 0 Then 
    Settings["/Terminal"] = $aTerminal[cmbTerminal.Index - 1]
  Else   
    Settings["/Terminal"] = ""
  Endif
  
End

Public Sub cmbImageEditor_Click()

  If cmbImageEditor.Index > 0 Then 
    Settings["/ImageEditor"] = $aTerminal[cmbImageEditor.Index - 1]
  Else   
    Settings["/ImageEditor"] = ""
  Endif
  
End

' PUBLIC SUB cmbImageEditor_Click()
' 
'   IF cmbImageEditor.Index > 0 THEN 
'     Settings["/ImageEditor"] = LCase(cmbImageEditor.Text)
'   ELSE   
'     Settings["/ImageEditor"] = ""
'   ENDIF
'   
'   Project.ImageEditor = ""
' 
' END

Public Sub cmbToolbox_Click()

  Settings["/ToolboxSize"] = cmbToolbox.Index
  FToolBox.ReadConfig

End

Public Sub cmbOutput_Click()

  Settings["/QuietExternalCommands"] = cmbOutput.Index = 1

End

Public Sub cmbUtility_Click()

  Settings["/UseUtilityWindows"] = cmbUtility.Index = 1
  NeedRestart(cmbUtility)

End

Public Sub cmbOptional_Click()

  Settings["/AlwaysDisplayOptionalMessages"] = cmbOptional.Index = 1

End

Public Sub btnClose_Click()

  Me.Close

End

' Public Sub cmbMessage_Click()
' 
'   Settings["/ShowMessages"] = cmbMessage.Index
'   FMain.ReadConfig
' 
' End

Public Sub cmbIntegratedHelp_Click()

  Settings["/PropertyHelp"] = cmbIntegratedHelp.Index = 1
  FProperty.CheckIntegratedHelpSetting
  
End

Public Sub cmbHelpCompletion_Click()

  Settings["/ShowHelpInPopup"] = cmbHelpCompletion.Index = 1
  
End

Public Sub cmbMinimize_Click()

  Settings["/MinimizeOnRun"] = cmbMinimize.Index = 1
  
End

Public Sub dwgStyle_Draw()
  
  Dim hDraw As DrawingArea = Last
  Dim sKey As String = hDraw.Parent.Tag
  Dim hStyle As CStyle = CStyle[$cCurrent[sKey]]
  Dim hStyle2 As CStyle
  Dim sName As String
  Dim iForeground As Integer
  Dim iBackground As Integer

  sName = MTheme.ColorNames[MTheme.ColorKeys.Find(sKey)]

  Draw.Font = Font[txtEditorFont.Text]
  If hStyle.Underline Then Draw.Font.Underline = True
  If hStyle.Italic Then Draw.Font.Italic = True
  
  If MTheme.IsBackgroundStyle(sKey) Then 
    iBackground = hStyle.Foreground
    iForeground = CStyle[$cCurrent["Normal"]].Foreground
  Else 
    iBackground = hStyle.Background
    iForeground = hStyle.Foreground
  Endif
  
  If iBackground <> Color.Default Then 
    Draw.FillColor = iBackground
    Draw.FillStyle = Fill.Solid
    Draw.LineStyle = Line.None
    Draw.Rect(0, 0, hDraw.Width, hDraw.Height)
  Endif
  Draw.Foreground = iForeground
  Draw.Text(sName, 4, 0, hDraw.Width - 8, hDraw.Height, Align.Normal)
  If hStyle.Bold Then Draw.Text(sName, 5, 0, hDraw.Width - 8, hDraw.Height, Align.Normal)
  
End

Public Sub btnStyle_Click()

  $hDraw = Last.Parent.Children[0]
  $sStyle = Last.Parent.Tag  
  mnuPopup.Popup
  
End

Public Sub mnuPopup_Show()
  
  With CStyle[$cCurrent[$sStyle]]
  
    mnuBold.Checked = .Bold
    mnuItalic.Checked = .Italic
    mnuUnderline.Checked = .Underline

    If MTheme.IsBackgroundStyle($sStyle) Then 
      mnuForeground.Hide
      mnuBackground.Checked = False
    Else
      mnuForeground.Show
      mnuBackground.Checked = .Background <> Color.Default
    Endif
  
  End With 
  
End

Private Sub UpdateStyle()
  
  Dim hStyle As New CStyle($cCurrent[$sStyle])
  
  With hStyle
    .Bold = mnuBold.Checked
    .Italic = mnuItalic.Checked
    .Underline = mnuUnderline.Checked
  End With
  
  $cCurrent[$sStyle] = hStyle.ToString()
  RefreshEditor
  
End

Public Sub mnuBold_Click()
  
  mnuBold.Checked = Not mnuBold.Checked
  UpdateStyle
  
End

Public Sub mnuItalic_Click()
  
  mnuItalic.Checked = Not mnuItalic.Checked
  UpdateStyle
  
End

Public Sub mnuUnderline_Click()
  
  mnuUnderline.Checked = Not mnuUnderline.Checked
  UpdateStyle
  
End

Public Sub mnuForeground_Click()
  
  Dim hStyle As New CStyle($cCurrent[$sStyle])
  Dim iColor As Integer = hStyle.Foreground
  
  If FColorChooser.Run("&H" & Hex$(iColor, 6) & "&") Then Return
  
  hStyle.Foreground = FColorChooser.Value
  $cCurrent[$sStyle] = hStyle.ToString()
  RefreshEditor
  
End

Public Sub mnuBackground_Click()
  
  Dim hStyle As New CStyle($cCurrent[$sStyle])
  Dim iColor As Integer = hStyle.Background
  Dim iDefault As Integer
  
  If MTheme.IsBackgroundStyle($sStyle) Then 
    mnuForeground_Click
    Return 
  Endif
  
  iDefault = CStyle[$cCurrent["Background"]].Foreground
  If iColor = Color.Default Then iColor = iDefault

  If FColorChooser.Run("&H" & Hex$(iColor, 6) & "&") Then Return
  
  If FColorChooser.Color = "" Or If FColorChooser.Value = iDefault Then 
    hStyle.Background = Color.Default
  Else
    hStyle.Background = FColorChooser.Value
  Endif
  $cCurrent[$sStyle] = hStyle.ToString()
  RefreshEditor
  
End

Public Sub cmbUpperCaseKeywords_Click()

  Settings["/Editor/KeywordsUseUpperCase"] = cmbUpperCaseKeywords.Index = 1
  RefreshEditor

End

Public Sub cmbControlStructCompletion_Click()

  Settings["/Editor/ControlStructCompletion"] = cmbControlStructCompletion.Index = 1
  FEditor.StructControlCompletion = cmbControlStructCompletion.Index = 1

End

Public Sub cmbFoldProc_Click()

  Settings["/Editor/Fold"] = cmbFoldProc.Index = 1  

End

Public Sub Form_Open()

  Me.Center

End


Public Sub btnClearCache_Click()

  If Message.Question(("Do you really want to clear the documentation cache?"), ("Clear"), ("Cancel")) <> 1 Then Return
  Inc Application.Busy
  Shell "rm -rf " & Shell$(WebSettings.Cache.Path) &/ "*" Wait
  Dec Application.Busy

End

Public Sub txtEditorFont_Click()

  Dim sFont As String

  sFont = FFontChooser.Run(txtEditorFont.Text)
  If Not sFont Then Return
  txtEditorFont.Text = sFont
  RefreshEditor

End

Public Sub txtConsoleFont_Click()

  Dim sFont As String

  sFont = FFontChooser.Run(txtConsoleFont.Text)
  If Not sFont Then Return
  txtConsoleFont.Text = sFont
  RefreshConsole

End

' Public Sub svwOption_Arrange()
' 
'   panOption.Width = svwOption.ClientWidth - Desktop.Scale
' 
' End

Private Sub RefreshSnippet()
  
  CSampleCode.Init
  gvwSnippet.Rows.Count = CSampleCode.All.Count
  gvwSnippet.Rows.Height = Font[txtEditorFont.Text].Height + 8
  gvwSnippet.Refresh
  
End


' Public Sub tabOption_Click()
' 
'   If tabOption.Index = 2 Then
'     If gvwSnippet.Rows.Count = 0 Then
'       RefreshSnippet
'       UpdateSnippet
'     Endif
'   Endif
' 
' End

Private Sub GetSnippet(Optional iRow As Integer = -1) As CSampleCode

  Dim hSampleCode As CSampleCode
  
  If iRow < 0 Then 
    iRow = gvwSnippet.Row
    If iRow < 0 Then Return
    If Not gvwSnippet.Rows[iRow].Selected Then Return
  Endif
  Try hSampleCode = CSampleCode.All[CSampleCode.List[iRow]]
  Return hSampleCode

End

Public Sub gvwSnippet_Data(Row As Integer, Column As Integer)

  Dim hSampleCode As CSampleCode = GetSnippet(Row)
  
  If Not hSampleCode Then Return
  
  With gvwSnippet
    .Data.Padding = 4
    .Data.Font = Font[txtEditorFont.Text]
    If Column = 0 Then
      .Data.Text = hSampleCode.Trigger
      If hSampleCode.Default Then .Data.Font.Italic = True
    Else
      .Data.Text = Mid$(Quote(hSampleCode.Pattern), 2, -1)
    Endif
  End With

End

Private Sub UpdateSnippet()

  Dim hSampleCode As CSampleCode = GetSnippet()
  
  If Not hSampleCode Then
    btnRemoveSnippet.Enabled = False
    btnEditSnippet.Enabled = False
  Else
    btnRemoveSnippet.Enabled = Not hSampleCode.Default
    btnEditSnippet.Enabled = True 'Not hSampleCode.Default
  Endif

End

Public Sub gvwSnippet_Select()

  UpdateSnippet

End

Public Sub chkSnippet_Click()

  Settings["/Editor/CodeSnippet"] = If(chkSnippet.Value, 1, 0)

End

Public Sub btnInsertSnippet_Click()

  If FSnippet.Run() Then Return
  RefreshSnippet
  CSampleCode.Save
  gvwSnippet.Row = CSampleCode.List.Find(FSnippet.NewTrigger)

End

Public Sub btnEditSnippet_Click()

  Dim hSampleCode As CSampleCode = GetSnippet()
  
  If Not hSampleCode Then Return
  If FSnippet.Run(hSampleCode.Trigger) Then Return
  RefreshSnippet
  CSampleCode.Save

End

Public Sub gvwSnippet_Activate()

  btnEditSnippet.Value = True

End

Public Sub btnRemoveSnippet_Click()

  Dim hSampleCode As CSampleCode = GetSnippet()
  
  If Not hSampleCode Then Return

  If Message.Warning(("Do you really want to delete this snippet?"), ("Delete"), ("Cancel")) = 2 Then Return

  hSampleCode.Delete
  RefreshSnippet
  CSampleCode.Save

End

' Public Sub btnUndoSnippet_Click()
' 
'   If Message.Warning(("Do you really want to reset snippets to their default value?"), ("Reset"), ("Cancel")) = 2 Then Return
'   
'   CSampleCode.Reset
'   RefreshSnippet
' 
' End

' Public Sub expOption_Show()
' 
'   Dim hLast As Expander = Last
'   Dim hOther As Expander
'   
'   For Each hOther In svwOption.Children
'     If hOther <> hLast Then hOther.Hidden = True
'   Next
' 
' End

Public Sub ipnOption_Click()

  If ipnOption.Text = ("Code snippets") Then
    If gvwSnippet.Rows.Count = 0 Then
      RefreshSnippet
      UpdateSnippet
    Endif
  Endif
  
End
