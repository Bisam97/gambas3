' Gambas module file

Public Path As String
Public ChangeLog As String

Private RPMBUILD_PROG As String
Private DKPG_PROG As String
Private TAR_1_13_PROG As String
Private AUTOCONF_PROG As String
Private AUTOMAKE_PROG As String
Private MAKEPKG_PROG As String

Private $sOutput As String
Private $bEnd As Boolean
Private $bChecked As Boolean

Private $sName As String            ' Project name
Private $sPrefix As String          ' Prefix
Private $sPackageName As String     ' Package name, i.e project name with prefix
Private $sCategories As String      ' Categories list
Private $sHome As String            ' Home user directory
Private $sVersion As String
Private $sDescription As String
Private $sSavePath As String

Private Const MIN_VERSION As String = "3.0.90"
Private Const MAX_VERSION As String = "3.99.0"

Private $sFormatSingle As String
Private $sFormatMin As String
Private $sFormatMax As String
Private $sFormatMinMax As String
Private $sFormatEqual As String

Public Sub CheckProgram()
  
  'IF $bChecked THEN RETURN

  '$bChecked = TRUE
  
  If Not Project.CheckProgram("dh_install") Then DKPG_PROG = "dh_install"
  If Not Project.CheckProgram("rpmbuild") Then RPMBUILD_PROG = "rpmbuild"
  If Not Project.CheckProgram("tar-1.13") Then 
    TAR_1_13_PROG = "tar-1.13"
  Else If Not Project.CheckProgram("tar") Then 
    TAR_1_13_PROG = "tar"
  Endif
  If Not Project.CheckProgram("autoconf") Then AUTOCONF_PROG = "autoconf"
  If Not Project.CheckProgram("automake") Then AUTOMAKE_PROG = "automake"
  If Not Project.CheckProgram("makepkg") Then MAKEPKG_PROG = "makepkg"
  
End

Public Sub CheckSystem(sSys As String) As String
  
  Dim sProg As String
  
  'CheckProgram
  
  Select Case sSys
  
    Case "mageia", "mandriva", "fedora", "suse"
      If Not RPMBUILD_PROG Then Return Subst(("'&1' is missing."), "rpmbuild")
      
    Case "debian", "ubuntu"
      If Not DKPG_PROG Then Return Subst(("'&1' is missing."), "debhelper")

    Case "slackware"
      If Not TAR_1_13_PROG Then Return Subst(("'&1' is missing."), "tar-1.13")

    Case "autotools"
      If Not AUTOCONF_PROG And If Not AUTOMAKE_PROG Then Return Subst(("'&1' and '&2' are missing."), "autoconf", "automake")
      If Not AUTOCONF_PROG Then Return Subst(("'&1' is missing."), "autoconf")
      If Not AUTOMAKE_PROG Then Return Subst(("'&1' is missing."), "automake")
      
    Case "archlinux"
      If Not MAKEPKG_PROG Then Return Subst(("'&1' is missing."), "makepkg")

    Case Else
      Return
      
  End Select
  
End

Private Sub AddLog(sText As String)

  FMakeInstall.AddLog(sText)

End

Private Sub RemoveEmptyLines(sText As String) As String
  
  Return Split(sText, "\n", "", True).Join("\n")
  
End

Private Sub GetVersion() As String

  Return Project.MajorVersion & "." & Project.MinorVersion & "." & Project.ReleaseVersion
        
End  

Private Sub InitMake(sSys As String)
  
  If Project.Prefix Then 
    If Project.Vendor Then 
      $sPrefix = Replace(String.LCase(Project.Vendor), " ", "_") & "-"
    Else 
      $sPrefix = "gambas" & System.Version & "-"
    Endif
  Else 
    $sPrefix = "" 
  Endif

  If Project.CreateEachDirectory Then
    Path = $sSavePath &/ sSys
    Try Mkdir $sSavePath
    Try Mkdir Path
  Else 
    Path = $sSavePath
    Try Mkdir Path
  Endif

  $sName = Project.Name

  $sPackageName = $sPrefix & String.LCase($sName)
  $sPackageName = Replace$($sPackageName, "_", "-")
  $sPackageName = Replace$($sPackageName, ".", "-")

  $sHome = System.User.Home
  
  $sCategories = Project.Categories[sSys]
  If $sCategories Then $sCategories &= ";"

  $sVersion = GetVersion()
  
  $sDescription = RemoveEmptyLines(Project.Description)

End

Public Function Make() As Boolean

  Dim sSys As String
  Dim sMacro As String
  Dim bAdd As Boolean
  Dim sPath As String

  If Project.Systems.Exist("slackware") Then 
    If Project.MakeExecutable(True, True) Then Return True
  Endif  
  
  ' Save old rpm macro file
  sMacro = User.Home &/ ".rpmmacros"
  Try Move sMacro To sMacro & ".save"
  Try Kill sMacro

  $sSavePath = Path
  For Each sSys In Project.Systems
    If MakePackage(sSys) Then Return True
  Next

  ' Restore old rpm macro file
  Try Kill sMacro
  Try Move sMacro & ".save" To sMacro

  AddLog("\n" & String(40, "=") & "\n")
  AddLog(("Saving CHANGELOG file."))
  sPath = Project.Dir &/ ".hidden" &/ "CHANGELOG"
  bAdd = Not Exist(sPath)
  'Try Mkdir Project.Dir &/ ".hidden"
  File.Save(sPath, ChangeLog)
  Project.RefreshKey(sPath)
  If bAdd Then VersionControl.AddFile(sPath)
  
  ' sPath = Project.Dir &/ ".extratest"
  ' bAdd = Not Exist(sPath)
  ' If Len(ExtraTest) > 0 Then
  '   AddLog(("Saving extra tests settings."))
  '   File.Save(sPath, ExtraTest)
  '   If bAdd Then VersionControl.AddFile(sPath)
  ' Else
  '   If Not bAdd Then VersionControl.RemoveFile(sPath)
  ' Endif
  
  AddLog(("The packages have been successfully created.") & "\n")

End

Public Function GetChangeDate() As String

  Dim sLang As String
  Dim sDate As String

  sLang = System.Language
  System.Language = "C"
  sDate = Format$(Now, "ddd mmm dd yyyy") & " " & Project.Maintainer & " "
  If Project.Address Then sDate = sDate & "<" & Project.Address & "> "
  'sDate = sDate & Subst("&1.&2-&3", Project.MajorVersion, Project.MinorVersion, Project.ReleaseVersion)
  sDate &= GetVersion()
  System.Language = sLang
  Return sDate

End


Private Function IsConsoleProject() As Boolean

  Dim sLib As String
  Dim hComp As CComponent

  For Each sLib In Project.Components
    hComp = CComponent.All[sLib]
    If hComp.IsForm() Then Return False
  Next

  Return True

End

Private Sub ComponentToPackageName(sComp As String) As String
      
  Return "gambas" & System.Version & "-" & Replace(sComp, ".", "-")

End

Private Function GetDependencies() As String
  
  Dim sRes As String
  Dim sComp As String
  Dim hLib As CLibraryInfo
  Dim aVer As String[]
  
  For Each sComp In Project.Components
    If sComp = "gb.debug" Or If sComp = "gb.eval" Then Continue 
    sRes &= GetDependency(sComp)
    'If sComp = "gb.form" Then sRes &= GetDependency("gb.form.stock")
  Next
  
  For Each sComp In Project.Libraries
    sRes &= GetDependency(sComp)
  Next
  
  Return sRes
  
End

Private Function GetExtraDependencies(sSys As String) As String
  
  Dim iIndex As Integer
  Dim sDep As String
  Dim aDep As String[]
  Dim sRes As String
  Dim sFormat As String
  
  If Project.SameDependencies Then sSys = Project.Systems[0]
  
  'If Not sFormatMinMax Then sFormatMinMax = sFormatMin & sFormatMax
  
  For Each sDep In Split(Project.ExtraDependencies[sSys], "\n")
    
    aDep = Split(sDep, "\t")
    aDep.Resize(3)
    
    If aDep[1] And If aDep[2] Then
      If aDep[1] = aDep[2] Then
        sFormat = $sFormatEqual
      Else
        sFormat = $sFormatMinMax
      Endif
    Else If aDep[1] Then
      sFormat = $sFormatMin
    Else If aDep[2] Then
      sFormat = $sFormatMax
    Else
      sFormat = $sFormatSingle
    Endif
    
    sRes &= Subst(sFormat, aDep[0], aDep[1], aDep[2])
    
  Next
  
  Return sRes
  
End

Private Function GetExtraFiles(sSys As String, sFormat As String, Optional sFormatDir As String) As String
  
  Dim iIndex As Integer
  Dim sFile As String
  Dim aFile As String[]
  Dim sRes As String
  Dim sFmt As String
  
  If Project.SameFiles Then sSys = Project.Systems[0]
  
  For Each sFile In Split(Project.ExtraFiles[sSys], "\n")
    aFile = Split(sFile, "\t")
    aFile.Resize(2)
    
    sFmt = If(IsDir(Project.Dir &/ ".hidden" &/ aFile[0]), sFormatDir, sFormat)
    sRes &= Subst(sFmt, Shell$(aFile[0]), Shell$(aFile[1]), Shell$(Mid$(aFile[0], RInStr(aFile[0], "/") + 1))) & "\n"
    
  Next
  
  Return sRes
  
End

Private Sub FormatFileInList(sFile As String, Optional bDebian As Boolean) As String
  
  If InStr(sFile, " ") Then
    If bDebian Then
      sFile = Replace(sFile, " ", "[!#-~.\"!]")
    Else
      sFile = Chr$(34) & Replace(sFile, Chr$(34), "\\\"") & Chr$(34)
    Endif
  Endif
  Return sFile
  
End


Private Function GetExtraFilesList(sSys As String, sPrefix As String, sFormat As String, Optional bDebian As Boolean) As String
  
  Dim iIndex As Integer
  Dim sFile As String
  Dim aFile As String[]
  Dim sRes As String
  Dim sSrc, sDest, sDestDir As String
  
  If Project.SameFiles Then sSys = Project.Systems[0]
  
  For Each sFile In Split(Project.ExtraFiles[sSys], "\n")
    aFile = Split(sFile, "\t")
    aFile.Resize(2)
    
    sSrc = FormatFileInList(sPrefix &/ aFile[0], bDebian)
    sDest = FormatFileInList(aFile[1] &/ File.Name(aFile[0]), bDebian)
    sDestDir = FormatFileInList(aFile[1], bDebian)
    sRes &= Subst(sFormat, sSrc, sDest, sDestDir) & "\n"
    
  Next
  
  Return sRes
  
End


Private Function CopyExtraFiles(sSys As String, sBuildDir As String)
  
  Dim iIndex As Integer
  Dim sFile As String
  Dim aFile As String[]
  Dim sRes As String
  Dim sSrc As String
  Dim sDst As String
  
  If Project.SameFiles Then sSys = Project.Systems[0]
  
  For Each sFile In Split(Project.ExtraFiles[sSys], "\n")
    aFile = Split(sFile, "\t")
    'aFile.Resize(2)
    sSrc = Project.Dir &/ ".hidden" &/ aFile[0]
    sDst = File.Dir(sBuildDir &/ aFile[1] &/ File.Name(aFile[0]))

    Project.MakeDir(sDst)
    If IsDir(sSrc) Then
      Shell "cp -R --preserve=timestamp " & Shell$(sSrc) & " " & Shell$(sDst) Wait
    Else
      Shell "cp --preserve=timestamp " & Shell$(sSrc) & " " & Shell$(sDst) Wait
      'Copy sSrc To sBuildDir &/ aFile[1] &/ File.Name(aFile[0])
    Endif
  Next
  
End

Private Function GetExtraFilesDir(sSys As String, sFormat As String) As String
  
  Dim iIndex As Integer
  Dim sFile As String
  Dim aFile As String[]
  Dim sRes As String
  
  If Project.SameFiles Then sSys = Project.Systems[0]
  
  For Each sFile In Split(Project.ExtraFiles[sSys], "\n")
    
    aFile = Split(sFile, "\t")
    aFile.Resize(2)
    
    sRes &= Subst(sFormat, Shell$(aFile[1]))
    
  Next
  
  Return sRes
  
End

Private Function GetDependency(sLib As String) As String
        
  Dim hComponent As CComponent
  Dim hLibrary As CLibraryInfo
  Dim sVersion As String
  Dim aMinVersion As String[]
  Dim aMaxVersion As String[]
  Dim sPackageName As String
  
  If Left(sLib) = "/" Then
    
    ' The package name dependency must not include the version!
    
    hLibrary = CLibraryInfo[sLib]
    sPackageName = hLibrary.GetDependencyName()
    sVersion = hLibrary.Version
    
    aMinVersion = Split(sVersion, ".")
    If aMinVersion[1] = "0" Then
      If aMinVersion[0] <> "0" Then
        aMinVersion[0] = CStr(CInt(aMinVersion[0]) - 1)
        aMinVersion[1] = "90"
      Endif
    Else
      aMinVersion[1] = CStr(CInt(aMinVersion[1]) - 1)
    Endif
    aMinVersion.Resize(3)
    aMinVersion[2] = "0"
    
    aMaxVersion = Split(sVersion, ".")
    aMaxVersion.Resize(3)
    aMaxVersion[2] = "90"
    
  Else
    
    hComponent = CComponent.All[sLib]
    sPackageName = ComponentToPackageName(sLib)
    
    aMinVersion = Split(MIN_VERSION, ".")
    aMaxVersion = Split(MAX_VERSION, ".")
    
  Endif
       
  Return Subst($sFormatMinMax, sPackageName, aMinVersion.Join("."), aMaxVersion.Join("."))

End

Private Sub PrintOnlyShowIn(hFile As File, sCategories As String)
  
  Dim aCat As String[] = Split(sCategories, ";", "", True)
  Dim sCat As String
  Dim aOnly As New String[]
  
  If aCat.Exist("Screensaver") Or If aCat.Exist("TrayIcon") Or If aCat.Exist("Applet") Or If aCat.Exist("Shell") Then
  
    For Each sCat In aCat
      If sCat = "KDE" Or If sCat = "GNOME" Or If sCat = "ROX" Or If sCat = "XFCE" Then
        aOnly.Add(sCat)
      Endif
    Next
    
    If aOnly.Count Then Print #hFile, "ShowOnlyIn="; aOnly.Join(";"); ";"
    
  Endif
  
End

Private Sub PrintDesktopFile(hFile As File, sExec As String, sIcon As String, Optional sExtraCat As String)
  
  Print #hFile, "[Desktop Entry]"
  Print #hFile, "Version=1.0"
  Print #hFile, "Name=";    
  If Project.Title Then
   Print #hFile, Project.Title
  Else
    Print #hFile, Project.Name
  Endif
  Print #hFile, "Comment=";    
  If $sDescription Then
    Print #hFile, Replace($sDescription, "\n", " ")
  Else
    Print #hFile, Project.Name
  Endif
  Print #hFile, "Exec="; sExec '/usr/bin/"; $sName & ".gambas"
  Print #hFile, "Icon="; sIcon '/usr/share/pixmaps/" & sIcon
  Print #hFile, "Terminal="; IIf(IsConsoleProject(), "true", "false")
  Print #hFile, "Type=Application"
  Print #hFile, "StartupNotify=true"
  Print #hFile, "Categories="; sExtraCat; $sCategories
  If Project.MimeTypes.Count Then Print #hFile, "MimeType="; Project.MimeTypes.Join(";")
  PrintOnlyShowIn(hFile, $sCategories)
  If Trim(Project.ExtraDesktop) Then Print #hFile, Trim(Project.ExtraDesktop)
  
End


Private Sub RunCommand(sCmd As String, Optional sDir As String)
  
  $sOutput = ""
  $bEnd = False
  If sDir Then
    AddLog("cd " & Shell$(sDir))
    AddLog(sCmd)
    Shell "(cd " & SConv(Shell$(sDir)) & ";" & sCmd & ") 2>&1" For Read As "Process"
  Else
    AddLog(sCmd)
    Shell sCmd & " 2>&1" For Read As "Process"
  Endif
  Repeat
    Sleep 0.01 
    Wait
  Until $bEnd
  
End

Private Function MakePackage(sSys As String) As Boolean

  AddLog("\n" & String(40, "=") & "\n")
  AddLog(Subst(("Creating package for &1."), FMakeInstall.GetSystemName(sSys)))
  AddLog("\n" & String(40, "=") & "\n")

  InitMake(sSys)
  
  Select Case sSys
  
    Case "mageia", "mandriva", "fedora", "suse"
      MakeRpmPackage(sSys)
  
    Case "debian", "ubuntu"
      MakeDebPackage(sSys)
      
    Case "slackware"
      MakeTgzPackage(sSys)
   
    Case "autotools"
      MakeAutotoolsPackage(sSys)
       
    Case "archlinux"
      MakeArchPackage(sSys)

    Default
      Return True
    
  End Select
  
Catch

  AddLog(("The package build has failed.") & "\n" & Error.Where & ": " & Error.Text)
  FMakeInstall.ShowError(("The package build has failed."))
  Application.Busy = 0
  Return True

End

Private Function MakeDebPackage(sSys As String)

  Dim sBuildDir As String
  Dim hFile As File
  Dim sPrefix As String
  Dim sCmd As String
  Dim sIcon As String
  Dim sData As String
  Dim sLib As String
  Dim sPackage As String
  Dim sArch As String
  Dim sPackagePath As String
  Dim aLine As String[]
  Dim n As Integer
  Dim aVer As String[]
      
  Inc Application.Busy
  
  $sFormatSingle = ", &1"
  $sFormatMin = ", &1 (>= &2)"
  $sFormatMax = ", &1 (<< &3)"
  $sFormatMinMax = $sFormatMin & $sFormatMax
  $sFormatEqual = $sFormatMinMax
  
  '$sName = Replace$($sName, "_", "-")
  sIcon = $sPackageName & ".png"

  ' Step 1. Create the build directory

  AddLog(("Making build directory.")) 
  sPackagePath = Path &/ Subst("&1-&2", $sPackageName, $sVersion)
  Try Shell "mkdir -p " & Shell$(sPackagePath &/ "src") Wait
  
  sArch = sPackagePath &/ "src/raw.tar.gz"
  Project.StretchIcon(Project.Dir &/ Project.Icon, 48).Save(Project.Dir &/ sIcon)
  
  Project.MakeSourcePackageTo(sArch)
  
  sCmd = "cd " & Shell$(sPackagePath &/ "src") & "; tar xzf raw.tar.gz >/dev/null" 
  Shell sCmd Wait 
  
  ' Rename the source archive project directory to the package name
  'TRY MOVE Path &/ (sPrefix & Subst("&1", Project.Name)) TO sPackagePath
  Try Kill sArch
  Try Shell "cp -Rf " & Shell(sPackagePath) & " " & Shell(sPackagePath & ".orig") Wait

  Try Mkdir sPackagePath &/ "debian"

  ' Step 2. Make the desktop file
  If Project.Type = Project.TYPE_NORMAL Then
    AddLog(("Creating desktop file..."))
    hFile = Open sPackagePath &/ "debian/" & $sPackageName & ".desktop" For Create
    PrintDesktopFile(hFile, "/usr/bin/" & $sName & ".gambas", "/usr/share/pixmaps/" & sIcon)
    Close #hFile
  Endif 
  
  'Step 3. Create debianization needed files: control, rules
  'debian/copyright
  AddLog(("Sources are being debianizated."))
  hFile = Open sPackagePath &/ "debian/copyright" For Create 
  Print #hFile, "This package was debianized by " & Project.Maintainer & " <" & Project.Address & "> on"
  Print #hFile, Format$(Date, "ddd, dd mmm yyyy hh:nn:ss") & "+0000"
  Print #hFile
  Print #hFile, "Copyright Holder: " & Project.Maintainer & " <" & Project.Address & ">"
  Print #hFile
  Print #hFile, "License:"
  Print #hFile
  Print #hFile, If(Project.License, Project.License, "GNU General Public License") 
  Close #hFile
  
  'debian/changelog
  hFile = Open sPackagePath &/ "debian/changelog" For Create 
  Print #hFile, ChangelogToDebChangelog()
  Close #hFile

  'debian/compat
  hFile = Open sPackagePath &/ "debian/compat" For Create 
  Print #hFile, "5"
  Close #hFile
    
  'debian/menu
  If Project.Type = Project.TYPE_NORMAL Then
    hFile = Open sPackagePath &/ "debian/menu" For Create 
    Print #hFile, "?package("; $sPackageName; "):needs=\""; IIf(IsConsoleProject(), "text", "X11"); "\" section=\""; Project.Menus[sSys]; "\"\\"
    Print #hFile, "title=\""; IIf(Project.Title <> "", Project.Title, Project.Name); "\"\\" 
    Print #hFile, "command=\"/usr/bin/"; $sPackageName; ".gambas\"\\"
    Print #hFile, "icon=\"/usr/share/pixmaps/"; sIcon; "\""
    Close #hFile
  Endif 
  
  'debian/dirs
  hFile = Open sPackagePath &/ "debian/dirs" For Create
  If Project.Type <> Project.TYPE_NORMAL Then
    Print #hFile, "usr/share/gambas"; System.Version; "/info\nusr/lib/gambas"; System.Version 
    If Exist(Project.Dir &/ ".hidden/control") Then Print #hFile, "usr/share/gambas"; System.Version; "/control/"; Shell$($sName)
  Else 
    Print #hFile, "usr/bin\nusr/share/applications\nusr/share/pixmaps"  
  Endif 
  Print #hFile, GetExtraFilesDir(sSys, "\n&1")
  Close #hFile
  
  'debian/install
  hFile = Open sPackagePath &/ "debian/install" For Create
  If Project.Type = Project.TYPE_COMPONENT Then 
    Print #hFile, "src/"; $sName; "/"; $sName; ".gambas usr/lib/gambas" & System.Version
    If Exist(Project.Dir &/ ".hidden/control") Then Print #hFile, "src/"; $sName; "/control/*.png usr/share/gambas" & System.Version &/ "control" &/ Shell$($sName)    
  Else 
    Print #hFile, "src/"; $sName; "/"; $sName; ".gambas usr/bin"
    If Project.Type = Project.TYPE_NORMAL Then 
      Print #hFile, "src/"; $sName; "/"; sIcon; " usr/share/pixmaps"
      Print #hFile, "debian/"; $sPackageName; ".desktop usr/share/applications"
    Endif
  Endif
  Print #hFile, GetExtraFilesList(sSys, "src/" & $sName & "/.hidden", "&1 &3", True)
  Close #hFile  
 
  'debian/control
  hFile = Open sPackagePath &/ "debian/control" For Create
  Print #hFile, "Source: "; $sPackageName
  Print #hFile, "Section: contrib/"; Project.Groups[sSys]
  Print #hFile, "Priority: optional"
  Print #hFile, "Maintainer: "; Project.Maintainer; " <"; Project.Address; ">"
  Print #hFile, "Build-Depends: debhelper (>= 5.0.0), gambas"; System.Version; "-dev (>= "; MIN_VERSION; "), gambas"; System.Version; "-dev (<< "; MAX_VERSION; ")";
  ' For Each sLib In GetDependencies()
  '   aVer = GetComponentMinMaxVersion(sLib)
  '   sLib = ComponentToPackageName(sLib)
  '   Print #hFile, ", "; sLib; " (>= "; aVer[0]; "), "; sLib; " (<< "; aVer[1]; ")";
  ' Next 
  Print #hFile, GetDependencies();
  Print #hFile, GetExtraDependencies(sSys);
  Print #hFile

  Print #hFile, "Standards-Version: 3.7.2"
  Print #hFile
  Print #hFile, "Package: "; $sPackageName
  Print #hFile, "Architecture: all"
  Print #hFile, "Depends: gambas"; System.Version; "-runtime (>= "; MIN_VERSION; "), gambas"; System.Version; "-runtime (<< "; MAX_VERSION; ")";
  
  If Project.Type <> Project.TYPE_COMPONENT Then
    Print #hFile, GetDependencies();
    Print #hFile, GetExtraDependencies(sSys);
  Endif 
  Print #hFile
  aLine = Split($sDescription, "\n")
  If aline.Count = 0 Then 
    Print #hFile, "Description: This is ";
    If Project.Title Then 
      Print #hFile, Project.Title
    Else 
      Print #hFile, Project.Name
    Endif 
  Else 
    Print #hFile, "Description:"; IIf(Len(aLine[0]) > 60, Left$(aLine[0], 60), aLine[0])
    For n = 1 To aLine.Count - 1  
      Print #hFile, " "; Trim(aLine[n])
    Next 
  Endif
  Select Case Project.Type
    Case Project.TYPE_NORMAL
      Print #hFile, " This program is written in Gambas"
    Case Project.TYPE_LIBRARY
      Print #hFile, " This is a Gambas library"
    Case Project.TYPE_COMPONENT
      Print #hFile, " This is a Gambas component written in Gambas"
  End Select
  Close #hFile
  
  'debian/rules
  hFile = Open sPackagePath &/ "debian/rules" For Create
  Print #hFile, "#!/usr/bin/make -f"
  Print #hFile, "build: build-stamp\nbuild-stamp:"
  Print #hFile, "\tdh_testdir\n\ttouch build-stamp"
  Print #hFile, "\t"; Project.GetCompileCommand(True, Not Project.KeepDebugInfo, True, False) & " src" &/ $sName
  Print #hFile, "\tgba"; System.Version & " src" &/ $sName
  Print #hFile
  Print #hFile, "clean:"
  Print #hFile, "\tdh_testdir\n\tdh_testroot\n\trm -Rf `find . -name \".gambas\"`"  
  Print #hFile, "\trm -Rf `find . -name \"*.gambas\"`\n"
  Print #hFile, "\trm -f build-stamp install-stamp\n\tdh_clean"
  Print #hFile 
  Print #hFile, "install: build\n\tdh_testdir\n\tdh_testroot\n\tdh_clean -k\n"
  Print #hFile, "\tdh_installdirs\n" 
  If Project.Type = Project.TYPE_COMPONENT Then 
      Print #hFile, "\tcp src" &/ $sName & "/.component  $(CURDIR)/debian/" & $sPackageName & "/usr/lib/gambas" & System.Version & "/" & Shell$($sName) & ".component"
      Print #hFile, "\tcp src" &/ $sName & "/.info  $(CURDIR)/debian/" & $sPackageName & "/usr/share/gambas" & System.Version & "/info/" & Shell$($sName) & ".info " ""
      Print #hFile, "\tcp src" &/ $sName & "/.list  $(CURDIR)/debian/" & $sPackageName & "/usr/share/gambas" & System.Version & "/info/" & Shell$($sName) & ".list"
  Endif 
  Print #hFile, "\ttouch install-stamp"
  Print #hFile
  Print #hFile, "binary-arch: build install\n\tdh_testdir"
  Print #hFile
  Print #hFile, "binary-indep: build install"
  Print #hFile, "\tdh_testdir -i\n\tdh_testroot -i\n\tdh_installdocs -i"
  Print #hFile, "\tdh_installchangelogs -i\n\tdh_install -i\n\tdh_installmenu"
  Print #hFile, "\tdh_compress -i\n\tdh_fixperms -i"
  Print #hFile, "\tdh_installdeb -i\n\tdh_gencontrol -i"
  Print #hFile, "\tdh_md5sums -i\n\tdh_builddeb -i"
  Print #hFile
  Print #hFile, "binary: binary-indep binary-arch"
  Print #hFile, ".PHONY: build clean binary-indep binary-arch binary install"
  Close #hFile
  Try Shell "chmod +x " & Shell(sPackagePath &/ "debian/rules") Wait

  ' Step 4. Build package

  AddLog(("Creating package..."))
  'sCmd = "cd " & Shell$(sPackagePath) & "; fakeroot dpkg-buildpackage -d"
  sCmd = "fakeroot dpkg-buildpackage -d"
  'Shell sCmd Wait
  RunCommand(sCmd, sPackagePath)
  
  Dec Application.Busy

  If Process.LastValue > 2 Then Error.Raise(("'dpkg-buildpackage' has failed."))

  Try Shell "rm -Rf " & Shell$(sPackagePath) Wait
  Try Shell "rm -f " & Shell$(Path) &/ "*.dsc.asc" Wait 

End

Private Sub ChangelogToDebChangelog() As String
 
  Dim aLine As String[]
  Dim sLine As String
  Dim debChangelog As String
  Dim sDate As String
  Dim sVersion As String
  Dim sBits As String[]
  Dim previousLine As String
  
  aLine = Split(ChangeLog, "\n")  
  For Each sLine In aLine
    If Left$(sLine, 1) = "*" Then 
      If sDate <> "" Then
        'Debian packages don't accept an empty changelog line for the release:
        If previousLine = $sPackageName & " (" & sVersion & ") unstable; urgency=low" & "\n\n" Then 
          debChangelog = debChangelog & "  * New release version\n"
        Endif   
        debChangelog = debChangelog & "\n -- " & Project.Maintainer & " <" & Project.Address & ">  " & sDate & "\n\n"
      Endif
      sbits = Split(Trim$(sLine), " ")
      sDate = sbits[1] & ", " & sbits[3] & " " & sbits[2] & " " & sbits[4] & " 12:00:00 +0000"
      'sVersion = GetDebVersion()
      sVersion = $sVersion & "-1"
      previousLine = $sPackageName & " (" & sVersion & ") unstable; urgency=low" & "\n\n"
      debChangelog = debChangelog & previousLine
    Else 
      If Trim$(sLine) <> "" Then
        previousLine = "  * " & Right$(sLine, Len(sLine) - 2) & "\n" 
        debChangelog = debChangelog & previousLine    
      Endif
    Endif   
  Next 
  
  debChangelog = debChangelog & "\n -- " & Project.Maintainer & " <" & Project.Address & ">  " & sDate & "\n"
   
  Return debChangelog 

End


Private Function MakeRpmPackage(sSys As String) 

  Dim sSrc As String
  Dim sDir As String
  Dim sCmd As String
  Dim hFile As File
  Dim sArch As String
  Dim sOutput As String
  Dim sLang As String
  Dim sPackage As String
  Dim sIcon As String
  Dim sDistribution As String
  Dim sVendor As String
  Dim sRelease As String
  Dim sLib As String
  Dim sMacro As String
  Dim aVer As String[]

  Inc Application.Busy

  $sFormatSingle = ",&1"
  $sFormatMin = ",&1 >= &2"
  $sFormatMax = ",&1 < &3"
  $sFormatMinMax = $sFormatMin & $sFormatMax
  $sFormatEqual = $sFormatMinMax

  Select Case sSys

    Case "mageia"
      sDistribution = "Mageia"
      sVendor = "Mageia"
      sRelease = "1mga"

    Case "mandriva"
      sDistribution = "Mandriva"
      sVendor = "MandrivaSoft"
      sRelease = "1mdv"

    Case "fedora"
      sDistribution = "Fedora"
      sVendor = "Fedora"
      sRelease = "1"

    Case "suse"
      sDistribution = "OpenSUSE"
      sVendor = "Novell"
      sRelease = "1suse"

  End Select
  
    ' step 1, set up RPM dirs and macros if they're not there already

  AddLog(("Initializing ~/RPM directory."))

  For Each sCmd In ["RPM/", "RPM/BUILD/", "RPM/RPMS/", "RPM/SOURCES/", "RPM/SPECS/", "RPM/SRPMS/", "RPM/tmp/"]
    Try Mkdir $sHome &/ sCmd
  Next

  hFile = Open $sHome &/ ".rpmmacros" For Create
  Print #hFile, "%_topdir " & $sHome &/ "RPM"
  Print #hFile, "%_tmppath " & $sHome &/ "RPM/tmp"
    'PRINT #hFile, "%_signature gpg"
    'PRINT #hFile, "%_gpg_name Mandrivalinux"
    'PRINT #hFile, "%_gpg_path ~/.gnupg"
  Print #hFile, "%packager "; Project.Maintainer & "<" & SConv(Project.Address) & ">"
  Print #hFile, "%buildhost "; System.Host
  Print #hFile, "%distribution "; sDistribution
  Print #hFile, "%vendor "; If(Project.Vendor, Project.Vendor, sVendor)
  Close #hFile

    ' step 2, write source tarball (with bzip) to SOURCES dir

  AddLog(("Creating source package."))

  sSrc = $sHome &/ "RPM/SOURCES"

  sDir = Project.Dir &/ ".icon"
  Shell "rm -rf " & Shell$(sDir) Wait
  Try Mkdir sDir

    ' IF Project.Icon THEN
    '   hIcon = Image.Load(Project.Dir &/ Project.Icon)
    ' ELSE
    '   hIcon = Image.Load("img/32/gambas.png")
    ' ENDIF

  Project.StretchIcon(Project.Dir &/ Project.Icon, 16).Save(sDir &/ "16.png")
  Project.StretchIcon(Project.Dir &/ Project.Icon, 32).Save(sDir &/ "32.png")
  Project.StretchIcon(Project.Dir &/ Project.Icon, 48).Save(sDir &/ "48.png")
  Project.StretchIcon(Project.Dir &/ Project.Icon, 64).Save(sDir &/ "64.png")

  sArch = sSrc &/ Subst("&1-&2.tar.bz2", $sPackageName, $sVersion)
  Project.MakeSourcePackageTo(sArch)

  Shell "rm -rf " & Shell$(sDir) Wait

  AddLog(("Creating .spec file."))

  hFile = Open $sHome &/ "RPM/SPECS" &/ $sPackageName & ".spec" For Create

  Print #hFile, "%define name " & $sPackageName
  Print #hFile, "%define version " & $sVersion
  Print #hFile, "%define release "; sRelease
  
  Print #hFile
  Print #hFile, "Summary: " & IIf(Project.Title, Project.Title, "Gambas project " & Project.Name)
  Print #hFile, "Name: %{name}"
  Print #hFile, "Version: %{version}"
  Print #hFile, "Release: %{release}"
  Print #hFile, "Source0: %{name}-%{version}.tar.bz2"
  Print #hFile, "License: "; If(Project.License, Project.License, "GPL")
  Print #hFile, "Group: " & Project.Groups[sSys]
  Print #hFile, "BuildRoot: %{_tmppath}/%{name}-%{version}-${release}-buildroot"
  Print #hFile, "Prefix: %{_prefix}"
    'PRINT #hFile, "BuildRequires: gambas2-ide"
  Print #hFile, "BuildArch: noarch"

  Print #hFile, "Requires: gambas"; System.Version; "-runtime >= "; MIN_VERSION; ",gambas"; System.Version; "-runtime < "; MAX_VERSION;

  If Project.Type <> Project.TYPE_COMPONENT Then 
  
    Print #hFile, GetDependencies();
    Print #hFile, GetExtraDependencies(sSys);
  
  Endif

  Print #hFile

  Print #hFile, "AutoReqProv: no"

  Print #hFile, "\n%description\n" & $sDescription & "\nThis program is written in Gambas, so you will need Gambas to be installed."

  Print #hFile, "\n%prep"
  Print #hFile, "rm -rf %{buildroot}"

  Print #hFile, "\n%setup -q -n " & Shell$($sName)

  If Project.Type = Project.TYPE_COMPONENT Then

    ' Components must be installed in Gambas prefix, which is not known at package creation time.
    ' How can we do that? Hardcode installation path according to the distribution?

    Print #hFile, "\n%build"
    Print #hFile, Project.GetCompileCommand(True, Not Project.KeepDebugInfo, True, False) & "\ngba"; System.Version
     
    Print #hFile, "\n%install"
    Print #hFile, GetExtraFilesDir(sSys, "install -d %{buildroot}/&1")
    Print #hFile, GetExtraFiles(sSys, "install -p .hidden/&1 %{buildroot}/&2/&1", "cp -R --preserve=timestamp .hidden/&1 %{buildroot}/&2/&1")
    Print #hFile, "install -d %{buildroot}/%{_libdir}/gambas"; System.Version
    Print #hFile, "install -p "; Shell$($sName); ".gambas %{buildroot}/%{_libdir}/gambas" & System.Version; "/"; Shell$($sName); ".gambas"
    Print #hFile, "install -p .component %{buildroot}/%{_libdir}/gambas"; System.Version; "/"; Shell$($sName); ".component"

    Print #hFile, "install -d %{buildroot}/%{_datadir}/gambas"; System.Version; "/info"
    Print #hFile, "install -p .info %{buildroot}/%{_datadir}/gambas"; System.Version; "/info/"; Shell$($sName); ".info"
    Print #hFile, "install -p .list %{buildroot}/%{_datadir}/gambas"; System.Version; "/info/"; Shell$($sName); ".list"

    If Exist(Project.Dir &/ ".hidden/control") Then 
      Print #hFile, "install -d %{buildroot}/%{_datadir}/gambas"; System.Version; "/control/"; Shell$($sName)
      Print #hFile, "install -p "; "control/*.png %{buildroot}/%{_datadir}/gambas" & System.Version &/ "control" &/ Shell$($sName)
    Endif

  Else 
  
    Print #hFile, "\n%build"
    Print #hFile, Project.GetCompileCommand(True, Not Project.KeepDebugInfo, True, False) & "\ngba"; System.Version
  
    Print #hFile, "\n%install"
  
    Print #hFile, "install -d %{buildroot}/%{_bindir}"
    Print #hFile, "install -p "; Shell$($sName); ".gambas %{buildroot}/%{_bindir}" &/ Shell$($sName)
    
    Print #hFile, GetExtraFilesDir(sSys, "install -d %{buildroot}/&1")
    Print #hFile, GetExtraFiles(sSys, "install -p .hidden/&1 %{buildroot}/&2/&1", "cp -R --preserve=timestamp .hidden/&1 %{buildroot}/&2/&1")
    
    If Project.Type = Project.TYPE_NORMAL
    
      sIcon = Shell$($sName) & ".png"
    
      ' NOTE: There are explicit references to /usr/share.
      '       I must find a way to use the rpm macros instead.
    
      Select Case sSys
    
        Case "mandriva", "mageia"
    
          Print #hFile, "install -d %{buildroot}/%{_miconsdir}"
          Print #hFile, "install -d %{buildroot}/%{_iconsdir}"
          Print #hFile, "install -d %{buildroot}/%{_liconsdir}"
          Print #hFile, "install -p .icon/16.png %{buildroot}/%{_miconsdir}" &/ sIcon
          Print #hFile, "install -p .icon/32.png %{buildroot}/%{_iconsdir}" &/ sIcon
          Print #hFile, "install -p .icon/48.png %{buildroot}/%{_liconsdir}" &/ sIcon
  
          Print #hFile, "install -d %{buildroot}/%{_datadir}/applications"
          Print #hFile, "cat << EOF > %{buildroot}/%{_datadir}/applications/%{name}.desktop"
        
          PrintDesktopFile(hFile, "%{_bindir}/" & Shell$($sName), sIcon, "X-MandrivaLinux-" & Replace(Replace(Project.Menus[sSys], " ", ""), "/", "-") & ";")
        
          Print #hFile, "EOF"
          Print #hFile, "\n%post"
          Print #hFile, "%{update_menus}"
    
          Print #hFile, "\n%postun"
          Print #hFile, "%{clean_menus}"
    
        Case "fedora"
    
          Print #hFile, "install -d %{buildroot}/%{_datadir}/pixmaps"
          Print #hFile, "install -d %{buildroot}/%{_datadir}/applications"
          Print #hFile, "install -p .icon/48.png %{buildroot}/%{_datadir}/pixmaps" &/ sIcon
    
          Print #hFile, "cat << EOF > %{buildroot}%{_datadir}/applications/%{name}.desktop"
          
          PrintDesktopFile(hFile, "%{_bindir}/" & Shell$($sName), sIcon, "X-RedHat-Extra;")
          
          Print #hFile, "EOF"
    
        Case "suse"
    
          Print #hFile, "install -d %{buildroot}/%{_datadir}/pixmaps"
          Print #hFile, "install -d %{buildroot}/%{_datadir}/applications"
          Print #hFile, "install -p .icon/48.png %{buildroot}/%{_datadir}/pixmaps" &/ sIcon
    
          Print #hFile, "cat << EOF > %{buildroot}%{_datadir}/applications/%{name}.desktop"
          
          PrintDesktopFile(hFile, "%{_bindir}/" & Shell$($sName), sIcon)
          
          Print #hFile, "EOF"
          
      End Select
      
    Endif
    
  Endif

  Print #hFile, "\n%clean"
  Print #hFile, "rm -rf %{buildroot}"

  Print #hFile, "\n%files"
  Print #hFile, "%defattr(-,root,root)"
  
  If Project.Type = Project.TYPE_COMPONENT Then
  
    Print #hFile, "%{_libdir}/gambas"; System.Version; "/"; Shell$($sName); ".gambas"
    Print #hfile, "%{_libdir}/gambas"; System.Version; "/"; Shell$($sName); ".component"  
    
    Print #hFile, "%{_datadir}/gambas"; System.Version; "/info/"; Shell$($sName); ".info"
    Print #hFile, "%{_datadir}/gambas"; System.Version; "/info/"; Shell$($sName); ".list"

    If Exist(Project.Dir &/ ".hidden/control") Then 
      Print #hFile, "%{_datadir}/gambas"; System.Version; "/control/"; Shell$($sName); "/*.png"
    Endif
    Print #hFile, GetExtraFilesList(sSys, "", "&2");

  Else
  
    Print #hFile, "%{_bindir}" &/ Shell$($sName)
    Print #hFile, GetExtraFilesList(sSys, "", "&2");
  
    If Project.Type = Project.TYPE_NORMAL Then
      
      Select Case sSys
    
        Case "mandriva", "mageia"
    
          Print #hFile, "/%{_miconsdir}" &/ sIcon
          Print #hFile, "/%{_iconsdir}" &/ sIcon
          Print #hFile, "/%{_liconsdir}" &/ sIcon
                'PRINT #hFile, "/%{_menudir}" &/ sName
          Print #hFile, "/%{_datadir}/applications/%{name}.desktop"
        
        Case "fedora"
    
          Print #hFile, "%{_datadir}/pixmaps" &/ sIcon
          Print #hFile, "%{_datadir}/applications/%{name}.desktop"
    
        Case "suse"
    
          Print #hFile, "%{_datadir}/pixmaps" &/ sIcon
          Print #hFile, "%{_datadir}/applications/%{name}.desktop"
    
      End Select
      
    Endif
    
  Endif

  Print #hFile, "\n%changelog\n"
  Print #hFile, ChangeLog

  Close #hFile

    ' and step 4.... build that sucker.

  AddLog(("Creating package...") & "\n")

  sLang = System.Language
  System.Language = "C"

  sCmd = RPMBUILD_PROG & " -ba " & Shell$($sHome &/ "RPM/SPECS" &/ $sPackageName & ".spec")
  AddLog(sCmd)

    'sTemp = Temp$
  $sOutput = ""
  $bEnd = False
  Shell sCmd & " 2>&1" Wait For Read As "Process" 'TO sOutput
    ' REPEAT
    '   SLEEP 0.01
    '   WAIT
    ' UNTIL $bEnd
  
  AddLog("")
  
  sOutput = Replace($sOutput, "\r", "")
  Try sOutput = DConv(sOutput)

  Try Kill $sHome &/ ".rpmmacros"

  System.Language = sLang

  Dec Application.Busy

  If Process.LastValue Then Error.Raise(("'rpmbuild' has returned the following error code:") & " " & Process.LastValue)

  For Each sCmd In Split(sOutput, "\n")
    If Left(sCmd, 6) = "Wrote:" And Right$(sCmd, 10) = "noarch.rpm" Then

      sPackage = Subst("&1-&2-&3.noarch.rpm", $sPackageName, $sVersion, sRelease)
            ' IF sSys = "debian" THEN
            '   SHELL "cd " & Shell$(sHome &/ "RPM/RPMS/noarch") & "; fakeroot " & ALIEN_PROG & " --to-deb -k " & Shell$(sPackage) WAIT
            '   sPackage = sPrefix & Subst("&1_&2.&3-&4_all.deb", LCase(Project.Name), Project.MajorVersion, Project.MinorVersion, sRelease)
            '   IF NOT Exist(sHome &/ "RPM/RPMS/noarch" &/ sPackage) THEN Error.Raise("alien command has failed")
            ' ENDIF
      MoveFile($sHome &/ "RPM/RPMS/noarch" &/ sPackage, Path &/ sPackage)
      AddLog(sPackage)

      sPackage = Subst("&1-&2-&3.src.rpm", $sPackageName, $sVersion, sRelease)
            ' IF sSys = "debian" THEN
            '   SHELL "cd " & Shell$(sHome &/ "RPM/SRPMS") & "; fakeroot alien --to-deb -k " & Shell$(sPackage) WAIT
            '   sPackage = sPrefix & Subst("&1_&2.&3-&4_all.deb", LCase(Project.Name), Project.MajorVersion, Project.MinorVersion, sRelease)
            '   IF NOT Exist(sHome &/ "RPM/SRPMS" &/ sPackage) THEN Error.Raise("alien command has failed")
            '   MoveFile(sHome &/ "RPM/SRPMS" &/ sPackage, Path &/ File.BaseName(sPackage) & ".src.deb")
            ' ELSE
      MoveFile($sHome &/ "RPM/SRPMS" &/ sPackage, Path &/ sPackage)
      AddLog(sPackage)
            ' ENDIF

    End If
  Next

End

Private Sub PrintSlackDescRuler(hFile As File)
  
  Dim sLine As String
  
  sLine = Space(Len($sPackageName)) & "|-----handy-ruler" & String$(76, "-")
  sLine = Left(sLine, 75) & "|"
  Print #hFile, sLine
  
End

Private Sub PrintSlackDesc(hFile As File, sLine As String)
  
  sLine = $sPackageName & ": " & sLine
  sLine = Left(sLine, 76)
  Print #hFile, sLine
  
End


Private Sub PrintSlackDescContents(hFile As File, sData As String, nLine As Integer)

  Dim sLine As String
  Dim iPos As Integer
    
  While nLine
    If sData Then
      sLine = Left(sData, 76 - Len($sPackageName) - 2)
      iPos = RInStr(sLine, " ")
      If iPos Then sLine = RTrim(Left(sLine, iPos - 1))
      sData = LTrim(Mid$(sData, Len(sLine) + 1))
    Else
      sLine = ""
    Endif
    PrintSlackDesc(hFile, sLine)
    Dec nLine
  Wend
  
End

Private Sub MakeTgzPackage(sSys As String)

  Dim sDistribution As String
  Dim sVendor As String
  Dim sBuildDir As String
  Dim hFile As File
  Dim sPrefix As String
  Dim sCmd As String
  Dim sIcon As String
  Dim sData As String
  Dim sLib As String
  Dim sTempPackage As String
  Dim sPackage As String
  Dim sFile As String 
  Dim aVer As String[]
      
  Inc Application.Busy

  $sFormatSingle = "&1\n"
  $sFormatMin = "&1 >= &2\n"
  $sFormatMax = "&1 < &3\n"
  $sFormatMinMax = $sFormatMin & $sFormatMax
  $sFormatEqual = $sFormatMinMax

  sDistribution = "Slackware"
  sVendor = "Slackware"
  
  ' 1. Create the temporary build directory

  AddLog(("Making build directory."))

  sBuildDir = File.SetExt(Temp$("slackware"), "")
  Shell "rm -rf " & Shell(sBuildDir) Wait
  Mkdir sBuildDir

  If Project.Type = Project.TYPE_COMPONENT Then 
  
    For Each sCmd In ["/usr", "/usr/lib", "/usr/lib/gambas" & System.Version, "/usr/share", "/usr/share/gambas" & System.Version, "/usr/share/gambas" & System.Version & "/info", "/install"]
      Try Mkdir sBuildDir &/ sCmd
    Next

  Else

    For Each sCmd In ["/usr", "/usr/bin", "/usr/share", "/usr/share/applications", "/usr/share/pixmaps", "/install"]
      Try Mkdir sBuildDir &/ sCmd
    Next
  
  Endif
  
  CopyExtraFiles(sSys, sBuildDir)
  
  If Project.Type = Project.TYPE_COMPONENT Then 
  
    ' 2. Copy the library, the information files and the controls
  
    Copy Project.GetExecPath() To sBuildDir &/ "/usr/lib/gambas" & System.Version &/ $sName & ".gambas"
    Copy Project.Dir &/ ".component" To sBuildDir &/ "/usr/lib/gambas" & System.Version &/ $sName & ".component"
    Copy Project.Dir &/ ".info" To sBuildDir &/ "/usr/share/gambas" & System.Version &/ "info/" & $sName & ".info"
    Copy Project.Dir &/ ".list" To sBuildDir &/ "/usr/share/gambas" & System.Version &/ "info/" & $sName & ".list"
  
    If Exist(Project.Dir &/ ".hidden/control") Then 
      Try Mkdir sBuildDir &/ "/usr/share/gambas" & System.Version & "/control"
      Try Mkdir sBuildDir &/ "/usr/share/gambas" & System.Version & "/control/" & $sName
      For Each sFile In Dir(Project.Dir &/ ".hidden/control", "*.png") 
        Copy Project.Dir &/ ".hidden/control" &/ sFile To sBuildDir &/ "/usr/share/gambas" & System.Version & "/control/" & $sName &/ sFile
      Next
    Endif
  
  Else

    ' 2. Copy the executable
  
      'COPY Project.Dir &/ Project.Name & ".gambas" TO sBuildDir &/ "/usr/bin" &/ Project.Name
      Copy Project.GetExecPath() To sBuildDir &/ "/usr/bin" &/ $sName
      Shell "chmod a+x " & Shell$(sBuildDir &/ "/usr/bin" &/ $sName) Wait
      
    If Project.Type = Project.TYPE_NORMAL Then
      
      ' 3. Copy the icon
    
      ' IF Project.Icon THEN
      '   hIcon = Image.Load(Project.Dir &/ Project.Icon)
      ' ELSE
      '   hIcon = Image.Load("img/gambas.png")
      ' ENDIF
    
      Project.StretchIcon(Project.Dir &/ Project.Icon, 48).Save(sBuildDir &/ "/usr/share/pixmaps" &/ Project.Name & ".png")
    
      ' 4. Make the desktop file
      
      sIcon = Shell$($sName) & ".png"
    
      hFile = Open sBuildDir &/ "/usr/share/applications/" & $sPackageName & ".desktop" For Create
    
      PrintDesktopFile(hFile, "/usr/bin/" & $sName, "/usr/share/pixmaps/" & $sName & ".png")
    
      Close #hFile
      
    Endif
  
  Endif
  
  ' 5. Description file

  hFile = Open sBuildDir &/ "/install/slack-desc" For Create
  
  Print #hFile, File.Load("install/slack-desc-header");    
  PrintSlackDescRuler(hFile)
  PrintSlackDesc(hFile, Subst("&1 &2 &3", $sPackageName, $sVersion, Project.Title))
  PrintSlackDesc(hFile, "")
  sData = Replace($sDescription, "\n", " ")
  PrintSlackDescContents(hFile, sData, 7)
  PrintSlackDesc(hFile, "Package created by: " & Project.Maintainer)
  PrintSlackDesc(hFile, "EMail address: " & Project.Address)

  Close #hFile
  
  ' 6. Dependencies
  
  hFile = Open sBuildDir &/ "/install/slack-required" For Create
  
  Print #hFile, "gambas"; System.Version; "-runtime >= "; MIN_VERSION
  Print #hFile, "gambas"; System.Version; "-runtime < "; MAX_VERSION

  If Project.Type <> Project.TYPE_COMPONENT Then

    Print #hFile, GetDependencies();
    Print #hFile, GetExtraDependencies(sSys);

  Endif
  
  Close #hFile
  
  ' 7. Create package
  
  AddLog(("Creating package...") & "\n")

  sTempPackage = File.SetExt(Temp$("slackware"), "tgz")
  sCmd = TAR_1_13_PROG & " --exclude=slackware.tgz --owner=root --group=root -c -z -f " & Shell$(sTempPackage) & " ."
  RunCommand(sCmd, sBuildDir)
  ' AddLog(sCmd)
  ' $sOutput = ""
  ' $bEnd = FALSE
  ' SHELL "(cd " & SConv(Shell$(sBuildDir)) & ";" & sCmd & ") 2>&1" FOR READ 'TO sOutput
  ' REPEAT
  '   SLEEP 0.01 
  '   WAIT
  ' UNTIL $bEnd
  
  Dec Application.Busy

  If Process.LastValue Then Error.Raise(("'tar' has returned the following error code:") & " " & Process.LastValue)

  AddLog("")
  sPackage = sPrefix & Subst("&1-&2-noarch-1.tgz", $sPackageName, $sVersion)
  MoveFile(sTempPackage, Path &/ sPackage)
  AddLog(sPackage)
  
End

Private Sub MakeAutotoolsPackage(sSys As String)

  Dim sBuildDir As String
  Dim sFile As String
  Dim hFile As File
  Dim sCmd As String
  Dim sPackage As String
  
  ' 1. Create the temporary build directory

  AddLog(("Making build directory."))
  Inc Application.Busy

  sBuildDir = File.SetExt(Temp$("autotools"), "")
  Shell "rm -rf " & Shell(sBuildDir) Wait
  Mkdir sBuildDir
  
  ' 2. Copy needed files 

  Try sCmd = Scan(Project.GetCompileCommand(True, Not Project.KeepDebugInfo, True, False), "*/bin/gbc" & System.Version & " *")[1]

  'Mkdir sBuildDir &/ Project.Name
  Shell "cp -rL " & Shell$(Project.Dir) & " " & Shell$(sBuildDir &/ Project.Name) Wait 
  sFile = Replace(File.Load("install/acinclude.m4"), "$(VERSION)", CStr(System.Version))
  sFile = Replace(sFile, "$(PACKAGE_VERSION)", $sVersion)
  sFile = Replace(sFile, "$(EXTRA_TEST)", Project.ExtraAutoconfTest)
  File.Save(sBuildDir &/ "acinclude.m4", sFile)
  sFile = Replace(File.Load("install/Makefile.am"), "$(VERSION)", CStr(System.Version))  
  sFile = Replace(sFile, "$(COMPILE_FLAGS)", sCmd)
  File.Save(sBuildDir &/ "Makefile.am", sFile)
  
  ' 3. Create needed files (AUTHORS, README, COPYING, NEWS, ChangeLog, configure.ac)
  
  If Exist(sBuildDir &/ Project.Name &/ "CHANGELOG") Then 
    Move sBuildDir &/ Project.Name &/ "CHANGELOG" To sBuildDir &/ "ChangeLog"
  Endif  

  File.Save(sBuildDir &/ "ChangeLog", ChangeLog)
  File.Save(sBuildDir &/ "AUTHORS", Project.Maintainer & " <" & Project.Address & ">")
  File.Save(sBuildDir &/ "README", Project.Description)
  File.Save(sBuilddir &/ "COPYING", "This program is under : " & Project.License)
  File.Save(sBuilddir &/ "NEWS", "")
  
  hFile = Open sBuildDir &/ "configure.ac" For Create
    Print #hFile, "dnl -- package generated with gambas3 ide --"
    Print #hFile, ""
    Print #hFile, "AC_INIT(configure.ac)"
    Print #hFile, "GB_INIT_PROJECT(" & Project.Name & ")"
    Print #hFile, ""
    Print #hFile, "dnl -- create makefile --"
    Print #hFile, ""
    Print #hFile, "AC_OUTPUT(Makefile)"
  Close #hFile

  ' 4. create the package
  
  AddLog(("Creating package...") & "\n")

  For Each sCmd In ["aclocal", AUTOCONF_PROG, AUTOMAKE_PROG & " -a", "./configure", "make dist"]
    RunCommand(sCmd, sBuildDir)
  Next 
  
  Dec Application.Busy
  AddLog("")

  sPackage = Dir(sBuildDir, Project.Name & "*" & $sVersion & "*")[0]
  MoveFile(sBuildDir &/ sPackage, Path &/ $sPrefix & sPackage)
  AddLog(sPackage)
  
  ' Remove build dir
  Shell "rm -rf " & Shell(sBuildDir) Wait
  
End

Private Function MakeArchPackage(sSys As String)

  Dim sBuildDir As String
  Dim sPkgTgz As String
  Dim hFile As File
  Dim sLib As String
  Dim sCmd As String
  Dim sDependencies As String
  Dim sPkgDesc As String
  
  Inc Application.Busy

  sPkgDesc = Replace($sDescription, "\n", " ")
  
  If sPkgDesc = "" Then sPkgDesc = "a software done with Gambas3"
  
  $sFormatMinMax = "'&1>=&2' '&1<=&3' "
  $sFormatMin = "'&1>=&2' "
  $sFormatMax = "'&1<=&3' "
  $sFormatSingle = "'&1' "
  $sFormatEqual = "'&1=&2' "
  sDependencies = GetDependencies() & GetExtraDependencies(sSys)
  
  ' 1. Create the temporary build directory

  AddLog(("Making build directory."))

  sBuildDir = File.SetExt(Temp$("archlinux"), "")
  Shell "rm -rf " & Shell$(sBuildDir) Wait
  Mkdir sBuildDir

  ' 2. Copy needed files 
  
  sPkgTgz = $sName & "-" & $sVersion & ".tar.bz2"
  Project.MakeSourcePackageTo(sBuildDir &/ sPkgTgz)

  File.Save(sBuilddir &/ "license.txt", "This program is under : " & Project.License)
  
  If Project.Type = Project.TYPE_NORMAL Then

    Project.StretchIcon(Project.Dir &/ Project.Icon, 48).Save(sBuildDir &/ Project.Name & ".png")

    hFile = Open sBuildDir &/ $sPackageName & ".desktop" For Create
    PrintDesktopFile(hFile, "/usr/bin/" & $sName, "/usr/share/pixmaps/" & $sName & ".png")
    Close #hFile
    
  Endif 
   
  hFile = Open sBuildDir &/ "PKGBUILD" For Create
    Print #hFile, "# generated by the gambas3 ide"
    Print #hFile, "# Maintainer : " & Project.Maintainer & " <" & Project.Address & ">"
    Print #hFile, ""
    Print #hFile, "pkgname=" & String.LCase$($sName)
    Print #hFile, "_realname=" & $sName
    Print #hFile, "pkgdesc=\"" & sPkgDesc & "\""
    Print #hFile, "pkgver=" & $sVersion
    Print #hFile, "pkgrel=1"
    Print #hFile, "arch=('any')"
    Print #hFile, "url=\"" & Project.Url & "\""
    If Me.ChangeLog Then 
      File.Save(sBuildDir &/ "ChangeLog", Me.ChangeLog)
      Print #hFile, "changelog=ChangeLog"
    Endif  
    Print #hFile, "license=('custom')"
    If Len(sDependencies) > 0 Then
      Print #hFile, "depends=(" & Left$(sDependencies, -1) & ")"
    Endif
    Print #hFile, "makedepend=('gambas3-devel')"
    Print #hFile, "source=(${_realname}-$pkgver.tar.bz2 license.txt";
    If Project.Type = Project.TYPE_NORMAL Then
      Print #hFile, "\\\n        '" & $sPackageName & ".desktop'";
      Print #hFile, " '" & Project.Name & ".png'";
    Endif 
    Print #hFile, ")"
  Close #hFile
  RunCommand("makepkg -g >> PKGBUILD", sBuildDir)
  hFile = Open sBuildDir &/ "PKGBUILD" For Append
    Print #hFile, ""
    Print #hFile, "build() {"
    Print #hFile, "  cd ${srcdir}/${_realname}"
    Print #hFile, ""
    Print #hFile, Subst("  gbc&1 &&& gba&1", System.Version)
    Print #hFile, "}"
    Print #hFile, ""
    Print #hFile, "package() {"
    Print #hFile, "  cd ${srcdir}/${_realname}"
    Print #hFile, ""
    If Project.Type = Project.TYPE_COMPONENT Then 
      Print #hFile, "  install -d ${pkgdir}/usr/lib/gambas" & System.Version
      Print #hFile, "  install -d ${pkgdir}/usr/share/gambas" & System.Version &/ "info"
      Print #hFile, "  install -m755 " & $sName & ".gambas ${pkgdir}/usr/lib/gambas" & System.Version
      Print #hFile, "  install .component ${pkgdir}/usr/lib/gambas" & System.Version &/ $sName & ".component"
      Print #hFile, "  chmod a-x ${pkgdir}/usr/lib/gambas" & System.Version &/ $sName & ".component" 
      Print #hFile, "  install .info ${pkgdir}/usr/share/gambas" & System.Version &/ "info" &/ $sName & ".info"
      Print #hFile, "  chmod a-x ${pkgdir}/usr/share/gambas" & System.Version &/ "info" &/ $sName & ".info" 
      Print #hFile, "  install .list ${pkgdir}/usr/share/gambas" & System.Version &/ "info" &/ $sName & ".list"
      Print #hFile, "  chmod a-x ${pkgdir}/usr/share/gambas" & System.Version &/ "info" &/ $sName & ".list" 
      Print #hFile, "  if test -d control; then"
      Print #hFile, "    install -d ${pkgdir}/usr/share/gambas" & System.Version &/ "control" &/ $sName
      Print #hFile, "    install control/*.png ${pkgdir}/usr/share/gambas" & System.Version &/ "control" &/ $sName
      Print #hFile, "    chmod a-x ${pkgdir}/usr/share/gambas" & System.Version &/ "control" &/ $sName &/ "*.png"
      Print #hFile, "  fi"
    Else  
      Print #hFile, "  install -d ${pkgdir}/usr/bin"
      Print #hFile, "  install -m755 " & $sName & ".gambas ${pkgdir}/usr/bin" &/ $sName
      If Project.Type = Project.TYPE_NORMAL Then
        Print #hFile, "  install -D .." &/ Project.Name & ".png \\"
        Print #hFile, "    ${pkgdir}/usr/share/pixmaps" &/ Project.Name & ".png"
        Print #hFile, "  install -D .." &/ $sPackageName & ".desktop \\"
        Print #hFile, "    ${pkgdir}/usr/share/applications" &/ $sPackageName & ".desktop"
      Endif
    Endif
    Print #hFile, GetExtraFilesDir(sSys, "  install -d ${pkgdir}&1\n");
    Print #hFile, GetExtraFiles(sSys, "  install -p ${srcdir}/${_realname}/.hidden/&1 ${pkgdir}&2/&1", "  cp -R --preserve=timestamp ${srcdir}/${_realname}/.hidden/&1 ${pkgdir}&2/&1");
    Print #hFile, "  install -Dm644 ${srcdir}/license.txt ${pkgdir}/usr/share/licenses" &/ $sPackageName &/ "license.txt"
    Print #hFile, "}"
  Close #hFile
  
  ' 4. create the packages
  
  AddLog(("Creating package...") & "\n")
  
  For Each sCmd In ["makepkg --allsource", "makepkg -d"]
     RunCommand(sCmd, sBuildDir)
  Next 

  RunCommand("cp " & String.LCase$($sName) & "-" & $sVersion & "-1*.tar.* " & Shell$(Path) &/ "", sBuildDir)

  ' Remove build dir
  Shell "rm -rf " & Shell(sBuildDir) Wait

  Dec Application.Busy

End 

Private Sub MoveFile(sSrc As String, sDst As String)

  Try Kill sDst
  Try Move sSrc To sDst
  If Error Then
    Copy sSrc To sDst
    Try Kill sSrc
  Endif
  
End

Public Sub Process_Kill()
  
  $bEnd = True
  
End

Public Sub Process_Read()
  
  Dim sData As String
  
  sData = Read #Last, -256
  $sOutput &= sData
  FMakeInstall.AddLog(sData, True)
  
End

Public Sub Process_Error(sData As String)

  FMakeInstall.AddLog(sData, True)

End

