' Gambas class file

Private $sTool As String

Private Const WIDTH As Integer = 40

Private $cToolBar As New Collection
Private $sToolBar As String
Private $sLastToolBar As String

Private $W As Integer
Private $H As Integer

Private $sLastLib As String
Private $iSize As Integer
'PRIVATE $bAnimate AS Boolean

Private $aOrder As New String[]

Public Sub _new()
  
  Settings.Read(Me)
  
End


Public Sub Form_Open()

  Dim iInd As Integer
  Dim hCtrl As Control

  $aOrder = ["Form", "Dialog", "Container", "Data", "Network", "Special"]

  ReadConfig
  SetTool
  'MoveToolBar

End


Private Function AddToolBar(sToolBar As String, sType As String) As FToolPanel

  Dim hToolBar As FToolPanel

  If Not $cToolBar.Exist(sToolBar) Then

    If $cToolBar.Count Then Inc tabTool.Count
    tabTool.Index = tabTool.Count - 1
    tabTool.Text = sToolBar

    hToolBar = New FToolPanel(sToolBar, sType, tabTool) As "ToolBar"
    $cToolBar[sToolBar] = hToolBar

    If Not $sToolbar Then $sToolbar = sToolBar

  Endif

  Return $cToolBar[sToolBar]

End


' PRIVATE SUB MoveToolbar(OPTIONAL bAnim AS Boolean)
' 
'   DIM hToolBar AS FToolBar
'   DIM Y AS Integer
'   DIM H AS Integer
'   DIM iInd AS Integer
'   DIM bCurrent AS Boolean
' 
'   RETURN
' 
'   FOR EACH hToolBar IN $cToolBar
' 
'     bCurrent = $cToolBar.Key = $sToolBar
'     hToolBar.ShowToolBar(TRUE)
' 
'     IF bAnim AND $bAnimate THEN
'       IF ((hToolBar.Y < Y) AND $cToolBar.Key = $sLastToolBar) OR ((hToolBar.Y > Y) AND bCurrent) THEN
'         FOR iInd = hToolBAR.Y TO Y STEP 8 * Sgn(Y - hToolBAR.Y)
'           hToolBar.Y = iInd
'           WAIT 0.001
'         NEXT
'       ENDIF
'     ENDIF
' 
'     IF $cToolBar.Key = $sToolBar THEN
'       H = ME.ClientH - $cToolBar.Count * FToolBar.HEIGHT + FToolBar.HEIGHT
'     ELSE
'       H = FToolBar.HEIGHT
'     ENDIF
' 
'     hToolBar.Move(0, Y, ME.ClientW, H)
'     Y += H
' 
'   NEXT
' 
'   FOR EACH hToolBar IN $cToolBar
' 
'     bCurrent = $cToolBar.Key = $sToolBar
'     hToolBar.ShowToolBar(bCurrent)
' 
'   NEXT
' 
' END


Public Sub RefreshToolbar(Optional bForce As Boolean)

  Dim hToolBar As FToolPanel
  Dim sLib As String
  Dim sCtrl As String
  Dim sNewLib As String
  Dim aLib As String[]
  Dim hComp As CComponent
  Dim sGroup As String
  Dim aToolBar As New String[]
  Dim cToolBar As New Collection
  Dim iOrder As Integer
  Dim iLast As Integer
  Dim bExist As Boolean
  Dim sOldTab As String
  Dim iInd As Integer

  If Project.Libraries Then

    For Each sLib In Project.Libraries
      sNewLib = sNewLib & sLib & " "
    Next
    sNewLib = Trim(sNewLib)

  Endif

  If Not bForce Then
    If $sLastLib Then
      If sNewLib = $sLastLib Then Return
    Endif
  Endif

  tabTool.Hide
  
  sOldTab = tabTool.Text

  For Each hToolBar In $cToolBar
    hToolBar.Hide
    hToolBar.Reparent(Me)
    hToolBar.Delete
  Next
  
  $cToolBar.Clear
  tabTool.Count = 1

  $sToolBar = ""

  'AddTool(SELECT_TOOL)
  'SetTool()

  If Project.Libraries Then

    ' Get all toolbars

    For Each hComp In CComponent.All

      With hComp

        If .Key <> "gb" And If Project.Libraries.Find(.Key) < 0 Then Continue

        sGroup = "?"
        For Each sCtrl In .Controls
          If Left(sCtrl) = "@" Then
            sGroup = Mid$(sCtrl, 2)
            Continue
          Endif
          cToolBar[sGroup] = sGroup
        Next

      End With

    Next
    
    iLast = $aOrder.Count
    For Each sGroup In cToolBar
      iOrder = $aOrder.Find(sGroup)
      If iOrder < 0 Then
        iOrder = iLast
        Inc iLast
      Endif
      aToolBar.Add(Format(iOrder, "00") & sGroup)
    Next
    
    aToolBar.Sort
    
    For Each sGroup In aToolBar
      AddToolBar(Mid$(sGroup, 3), "Not yet implemented")
    Next
    
    For Each hComp In CComponent.All

      With hComp

        If .Key <> "gb" And If Project.Libraries.Find(.Key) < 0 Then Continue

        sGroup = "?"
        For Each sCtrl In .Controls
          If Left(sCtrl) = "@" Then
            sGroup = Mid$(sCtrl, 2)
            Continue
          Endif
          bExist = False
          For Each hToolBar In $cToolBar
            If hToolBar.Exist(sCtrl) Then 
              bExist = True
              Break
            Endif
          Next
          If Not bExist Then $cToolBar[sGroup].Add(sCtrl, hComp.Key)
        Next

      End With

    Next

    Try SelectToolbar($sToolBar)
    'IF ERROR THEN MoveToolbar

  Endif

  tabTool.Index = 0
  
  For iInd = 0 To tabTool.Count - 1
    If tabTool[iInd].Text = sOldTab Then 
      tabTool.Index = iInd
      Break 
    Endif
  Next
  
  tabTool.Show

  $sLastLib = sNewLib

End


Private Sub ClearToolBar()

  $sLastLib = ""
  RefreshToolBar

End



Public Sub Form_Close()

  'Config.SaveWindow(ME, "/FToolBox")
  'DEBUG ME.x;; ME.y
  Settings.Write(Me)

End


Private Sub SelectToolBar(sToolBar As String)

  If Not $cToolBar.Exist(sToolBar) Then Return
  $sLastToolBar = $sToolBar
  $sToolBar = sToolBar
  SetTool
  'MoveToolBar(ME.Visible)

End



Public Sub Form_Resize()

  'MoveToolbar

End


Public Function GetTool() As String

  If Not $sToolBar Then Return
  Return $cToolBar[$sToolBar].GetTool()

End


Public Sub SetTool()

  If Not $sToolBar Then Return
  $cToolBar[$sToolBar].SetTool()

End


' PUBLIC SUB ToolBar_Change()
'
'   PRINT "ToolBar_Change: "; LAST.Name
'
' END


Public Sub ReadConfig()

  Dim iSize As Integer

  tabTool.Font.Grade = - Settings["/TabStripFont", 0]

  If Settings["/ToolboxSize", 0] Then
    iSize = 24
  Else 
    iSize = 32
  Endif
  
  If iSize <> $iSize Then
    $iSize = iSize
    ClearToolBar
  Endif

  '$bAnimate = Settings["/Toolbar/Animate", TRUE]

End

Public Sub tabTool_Click()

  SelectToolbar(tabTool.Text)

End
