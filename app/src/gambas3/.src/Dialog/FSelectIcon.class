' Gambas class file

'STATIC PRIVATE $aImgExt AS String[] = ["png", "jpeg", "jpg", "gif", "xpm"]

Public Const SELECT_STOCK As Integer = 1
Public Const SELECT_IMAGE As Integer = 2
Public Const SELECT_SVGIMAGE As Integer = 4
Public Const SELECT_PUBLIC As Integer = 8
Public Const SELECT_AUDIO As Integer = 16

Private $sIcon As String
Private $sSize As String
Private $iOption As Integer
Private $aSizes As String[]
Private $bNoRefreshStock As Boolean
Private $sSelectKey As String

Public Sub Run(sIcon As String, Optional iOption As Integer = SELECT_IMAGE + SELECT_STOCK, aSizes As String[]) As String
  
  $sIcon = sIcon
  'If Not Project.IsStockAllowed() Then iOption = iOption And Not SELECT_STOCK
  $iOption = iOption
  $aSizes = aSizes
  If Not Me.ShowModal() Then Return
  Return $sIcon
  
End


Public Sub Form_Open()

  Dim iPos As Integer
  Dim aFilter As String[]
  Dim sIcon As String
  Dim hIconView As IconView

  Inc Application.Busy
  
  Settings.Read(Me)

  aFilter = New String[]
  If $iOption And SELECT_IMAGE Then aFilter.Insert(["*.png;*.jpg;*.jpeg;*.xpm;*.gif;*.mng", ("Image files")])
  If $iOption And SELECT_SVGIMAGE Then aFilter.Insert(["*.svg", ("SVG image files")])
  If $iOption And SELECT_AUDIO Then aFilter.Insert(["*.mp3;*.ogg;*.oga;*.wav;*.aac;*.flac", ("Audio files")])

  If $iOption And SELECT_PUBLIC Then
    fchIcon.Root = Project.Dir &/ ".public"
  Else
    fchIcon.Root = Project.Dir
  Endif
  
  fchIcon.Filter = aFilter

  $bNoRefreshStock = True
  
  If $aSizes And If $iOption And SELECT_STOCK Then
    cmbSize.List = $aSizes
    tabIcon[1].Visible = True
    tabIcon[2].Visible = True
  Else
    tabIcon[1].Visible = False
    tabIcon[2].Visible = False
  Endif
  
  If $sIcon Begins "icon:/" Then
    tabIcon.Index = 1
  Else If $sIcon Begins "flag:/" Then
    tabIcon.Index = 2
  Else If $sIcon Then 
    tabIcon.Index = 0
  Endif
  
  If $sIcon Begins "icon:/" Or If $sIcon Begins "flag:/" Then 
    sIcon = Mid$($sIcon, InStr($sIcon, "/") + 1)
    iPos = InStr(sIcon, "/")
    If iPos Then 
      SetSize(Left$(sIcon, iPos - 1))
    Else 
      SetSize("medium") 'Settings["FSelectIcon/Size", "medium"])
    Endif
    $sSelectKey = Mid$(sIcon, iPos + 1)
    hIconView = GetIconView()
  Else If $sIcon Then
    $sSelectKey = fchIcon.Root &/ $sIcon
  Endif

  txtFilter.Text = ""
  chkUseSize.Value = Settings["FSelectIcon/PreviewSize", 0]
  If Not $sSize Then SetSize("medium") 'Settings["FSelectIcon/Size", "medium"])
  
  $bNoRefreshStock = False
  RefreshStock
  
  Dec Application.Busy
  
End

' PUBLIC SUB fchIcon_Icon(Path AS String)
' 
'   IF $aImgExt.Find(File.Ext(Path)) < 0 THEN RETURN
'   IF Stat(Path).Size > 8192 THEN RETURN 
'   fchIcon.Icon = Picture.Load(Path)
' 
' END

Public Sub btnCancel_Click()

  Me.Close

End

Public Sub cmbSize_Activate()

  SetSize(cmbSize.Text)

End

Public Sub cmbSize_Click()

  SetSize(cmbSize.Text)

End

Private Sub GetIconView() As IconView

  If tabIcon.Index = 1 Then Return icwStock
  If tabIcon.Index = 2 Then Return icwFlag

End

Private Sub RefreshStock(Optional bClear As Boolean)
  
  Dim sIcon As String
  Dim sKey As String
  Dim sFilter As String
  Dim bPreviewSize As Boolean
  Dim aIcons As String[]
  Dim hPict As Picture
  Dim hIconView As IconView
  Dim sLastIcon As String
  
  If $bNoRefreshStock Then Return
  If tabIcon.Index = 0 Then Return
  
  hIconView = GetIconView()
  sLastIcon = hIconView.Key

  If bClear Then
    icwStock.Clear
    icwFlag.Clear
  Endif
  
  If hIconView.Count Then Return
  
  Inc Application.Busy

  sFilter = Trim(txtFilter.Text)
  bPreviewSize = chkUseSize.Value

  If tabIcon.Index = 1 Then
    aIcons = Stock.Icons
  Else 
    aIcons = Stock.Flags
  Endif
  
  hIconView.Clear
  hIconView.Sorted = False

  For Each sIcon In aIcons
    If sFilter And If InStr(sIcon, LCase(sFilter)) = 0 Then Continue
    sKey = If(bPreviewSize, $sSize, "32") &/ sIcon
    If tabIcon.Index = 1 Then
      hPict = Stock[sKey]
    Else 
      hPict = Stock.GetFlag(sKey)
    Endif
    hIconView.Add(sIcon, sIcon, hPict)
  Next
  
  hIconView.Sorted = True
  
  If hIconView.Exist(sLastIcon) Then
    hIconView[sLastIcon].Selected = True
    hIconView[sLastIcon].EnsureVisible
  Endif
  
  Dec Application.Busy
  
  txtFilter.SetFocus
  
End

Private Sub SetSize(sSize As String) As Boolean

  Dim iSize As Integer
  
  sSize = LCase(sSize)
  Try iSize = CInt(sSize)
  If Error Then 
    If cmbSize.Find(sSize) < 0 Then 
      cmbSize.Text = $sSize
      Return True
    Endif
  Else 
    If iSize < 8 Or iSize > 256 Then 
      cmbSize.Text = $sSize
      Return True
    Endif
    sSize = CStr(iSize)
  Endif
  
  $sSize = sSize
  Object.Lock(cmbSize)
  cmbSize.Text = sSize
  Object.Unlock(cmbSize)
  RefreshStock(True)
  
End


Public Sub btnOK_Click()

  Dim sKey As String
  
  Select Case tabIcon.Index
  
    Case 0
      $sIcon = Mid$(fchIcon.SelectedPath, Len(fchIcon.Root) + 1)
      If Left($sIcon) = "/" Then $sIcon = Mid$($sIcon, 2)
  
    Case 1
      sKey = icwStock.Key
      If Not sKey Then Return
      $sIcon = "icon:/" &/ $sSize &/ sKey
      Settings["FSelectIcon/Size"] = $sSize
      
    Case 2
      sKey = icwFlag.Key
      If Not sKey Then Return
      $sIcon = "flag:/" &/ $sSize &/ sKey
      Settings["FSelectIcon/Size"] = $sSize
      
  End Select 
  
  If Not $sIcon Then Return

  Me.Close(True)

End

Public Sub icwStock_Activate()

  btnOK.Value = True

End

Public Sub fchIcon_Activate()

  btnOK.Value = True

End

Public Sub Form_Close()

  Settings.Write(Me)  

End

Public Sub tabIcon_Click()

  If tabIcon.Index Then 
    
    panStock.Show
    panStock.Raise
    
    txtFilter.SetFocus
    icwStock.Visible = tabIcon.Index = 1
    icwFlag.Visible = tabIcon.Index = 2
    
    RefreshStock
    
  Else 
    
    panStock.Hide
    
  Endif 

End

Public Sub txtFilter_Filter()

  RefreshStock(True)

End

Public Sub chkUseSize_Click()

  Settings["FSelectIcon/PreviewSize"] = chkUseSize.Value
  RefreshStock(True)

End

Public Sub tabIcon_Arrange()

  panStock.Move(tabIcon.X + tabIcon.ClientX, tabIcon.Y + tabIcon.ClientY, tabIcon.ClientW, tabIcon.ClientH)

End

Public Sub Form_Activate()

  Dim hIconView As IconView
  
  If Not $sSelectKey Then Return
  
  If $sIcon Begins "icon:/" Or If $sIcon Begins "flag:/" Then 
    hIconView = GetIconView()
    Try hIconView[$sSelectKey].Selected = True
    If Not Error Then hIconView[$sSelectKey].EnsureVisible
  Else
    fchIcon.SelectedPath = fchIcon.Root &/ $sIcon
  Endif
  
  $sSelectKey = ""

End
