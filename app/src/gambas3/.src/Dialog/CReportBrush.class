' Gambas class file
Export

Public Enum TYPE_COLOR, TYPE_IMAGE, TYPE_LINEAR_GRADIENT, TYPE_RADIAL_GRADIENT

Public _Type As Integer
Public _X As Float
Public _Y As Float
Public _X2 As Float
Public _Y2 As Float
Public _radius As Float
Public _Image As Image
Public _Color As Integer[] = [0, &HFFFFFF&]
Public _Pos As Float[] = [0, 1]
Private _ImageDir As String

Public Function _PaintBrush(X1 As Integer, Y1 As Integer, X2 As Integer, Y2 As Integer) As PaintBrush
  
  Dim hBrush As PaintBrush
  Dim fradius As Float
  Dim Width As Integer = X2 - X1
  Dim Height As Integer = Y2 - Y1
  
  Select Case Me._Type
    Case TYPE_COLOR
      hBrush = Paint.Color(_Color[0])
    Case TYPE_IMAGE
      hBrush = paint.Image(_Image, X1, Y1)
    Case TYPE_LINEAR_GRADIENT
      hBrush = paint.LinearGradient(Width * _X, Height * _Y, Width * _X2, Height * _Y2, _Color, _Pos)
    Case TYPE_RADIAL_GRADIENT
      fradius = Width * _radius
      hBrush = paint.RadialGradient(Width * _X, Height * _Y, fradius, Width * _X2, Height * _Y2, _Color, _Pos)
  End Select
  Return hBrush
  
End

Static Public Sub _get(sValue As String) As CReportBrush
  
  Dim hBrush As New CReportBrush
  Dim iPos As Integer
  Dim sType As String
  
  Dim ars As String[]
  Dim i, j As Integer
  Dim hLabel As Label
  
  sValue = Trim(sValue)
  
  iPos = InStr(sValue, "(")
  
  If iPos Then 
    If Right(sValue) <> ")" Then Error.Raise("Bad brush")
    sType = Left(sValue, iPos - 1)
    sValue = Mid$(sValue, iPos + 1, -1)
    ars = Split(sValue, ",", "[]")
  Else
    If Left(sValue) <> "#" Then Error.Raise("Bad brush")
    ars = [sValue]
  Endif
  
  Select Case LCase(sType)
    
    Case "image"
      
      hBrush._Type = TYPE_IMAGE
      hBrush._Image = Image.Load(ars[0])
      hBrush._ImageDir = ars[0]
      
    Case "radialgradient"
      
      hBrush._Type = TYPE_RADIAL_GRADIENT
      hBrush._X = CFloat(ars[0])
      hBrush._Y = CFloat(ars[1])
      hBrush._Radius = CFloat(ars[2])
      hBrush._X2 = CFloat(ars[3])
      hBrush._Y2 = CFloat(ars[4])
      hBrush._Color = GetColorArray(ars[5])
      hBrush._Pos = GetFloatArray(ars[6])
      
    Case "lineargradient"
      
      hBrush._Type = TYPE_LINEAR_GRADIENT
      hBrush._X = CFloat(ars[0])
      hBrush._Y = CFloat(ars[1])
      hBrush._X2 = CFloat(ars[2])
      hBrush._Y2 = CFloat(ars[3])
      hBrush._Color = GetColorArray(ars[4])
      hBrush._Pos = GetFloatArray(ars[5])
      
    Case Else
      'correction de l'hexon
      hBrush._Color[0] = StringToColor(ars[0])
      'CChooser.Value = IIf(Len(ars[0]) = 8, Val(ars[0]), Val(ars[0] & "FF"))
  End Select
  
Finally
  
  If hBrush._Color.Count = 0 Then hBrush._Color = [0, &hFFFFFF&]
  If hBrush._Color.Count < 2 Then hBrush._Color.Add(&hFFFFFF&)
  
  If hBrush._Pos.Count < 2 Then hBrush._Pos = [0.0, 1.0]
  
  Return hBrush
  
Catch
  
  Error.Raise("Bad brush")
  
End

Static Private Function GetColorArray(sValue As String) As Integer[]
  
  Dim ari As New Integer[]
  Dim s As String
  
  For Each s In Split(sValue)
    ari.Add(StringToColor(s))
  Next
  
  Return ari
  
End

Static Private Function GetFloatArray(sValue As String) As Float[]
  
  Dim arf As New Float[]
  Dim s As String
  
  For Each s In Split(sValue)
    arf.Add(CFloat(s))
  Next
  
  Return arf
  
End

Static Public Sub ColorToString(iColor As Integer) As String
  
  If iColor And &HFF000000 Then
    Return "#" & Hex$(iColor, 8)
  Else
    Return "#" & Hex$(iColor, 6)
  Endif
  
End

Static Public Sub StringToColor(sColor As String) As Integer
  
  Return Val("&H" & Mid$(sColor, 2) & "&")
  
End



Public Function ToString() As String
  
  Dim i As Integer
  Dim f As Float
  Dim sValue As String
  
  Select Case _Type
    
    Case TYPE_COLOR
      
      sValue = ColorToString(_Color[0])
      
    Case TYPE_LINEAR_GRADIENT, TYPE_RADIAL_GRADIENT
      
      If _Type = TYPE_RADIAL_GRADIENT Then
        sValue = "RadialGradient(" & _X & "," & _Y & "," & _Radius & "," & _X2 & "," & _Y2 & ",["
      Else
        sValue = "LinearGradient(" & _X & "," & _Y & "," & _X2 & "," & _Y2 & ",["
      Endif
      
      For Each i In _Color
        sValue &= ColorToString(i) & ","
      Next
      
      sValue = Left(sValue, -1)
      
      sValue &= "],["
      
      For Each f In _Pos
        sValue &= f & ","
        
      Next
      sValue = Left(sValue, -1)
      
      sValue &= "])"
    
    Case TYPE_IMAGE
      
      sValue = "Image(" & Quote(_ImageDir) & ")"
      
  End Select
  
  Return svalue
  
End
