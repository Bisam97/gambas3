' Gambas class file

Private $sKey As String
Private $bCtrl As Boolean
Private $bTool As Boolean
Private $bLock As Boolean
Private $sKeyDrag As String
Private $sDeleteKey As String

Private $bUpdateRecentMenu As Boolean
Private $bInTreeView As Boolean
Private $bInRename As Boolean
Private $sKeyInfo As String

Public Sub _new()

  Project.ProjectTree = tvwProject
  Project.Workspace = wrkProject

  tvwProject.Columns.Count = 2
  tvwProject.Columns[0].Width = Desktop.Width 
  
  Design.Init

  FDebugInfo.Load(panDebug)
  'Design.Load(panToolbar)  
  FToolbox.Load(panTool)
  'FIconTool.Load(panIcon)
  FProperty.Load(panFrame)
  FFormStack.Load(panFrame)
  
  FFind.Load(panCentral)
  FFind.Next = panDebug
  FFind.Hide
  
  'FProject.Load(splProject)
  'splProject.Layout = "80,10"
  
  'PRINT 1 / 0
  
  FOption.Load
  
  'tvwProject.Columns.Count = 1
  
End


Public Sub Form_Open()

  'DEBUG

  Settings.Read(Me)
  Settings.Read(panProject, "panProject")
  Settings.Read(panProperty, "panProperty")
  Settings.Read(panTool, "panTool")
  'Settings.Read(panStack, "panStack")
  Settings.Read(panDebug, "panDebug")

  'ShowTool(FALSE)

  ReadConfig

  FDebugInfo.UpdateView

  tvwProject_Select
  tabProperty_Click
  btnShowMenu_Click
  
  mnuOpenExample.Tag = "."

  Try Project.ActiveForm.SetFocus
  
End


Public Sub Form_Close()

  Dim bRet As Boolean

  If Project.Close() Then
    Stop Event
  Else
    Settings.Write(Me)
    Settings.Write(panProject, "panProject") 
    Settings.Write(panProperty, "panProperty") 
    Settings.Write(panTool, "panTool") 
    'Settings.Write(panStack, "panStack") 
    Settings.Write(panDebug, "panDebug") 
    
    ' We must close them now, otherwise the Close event is raised when the embedded forms
    ' are destroyed, and then the Settings.Save() method gets no TopLevel form anymore for generating the
    ' settings key !
    FProperty.Close
    FDebugInfo.Close
    
    Design.Exit
    Project.Exit
  Endif

End


Private Sub OpenProject()

  Dim sPath As String

  sPath = FOpenProject.Run(True)
  If Not sPath Then Return

  If FOpenProject.InAnotherWindow Then
    'DEBUG Application.Path &/ Application.Name & ".gambas";; sPath
    Exec [Application.Path &/ Application.Name & ".gambas", sPath]
  Else
    Project.Open(sPath)
    UpdateRecentMenu
  Endif

End


Public Sub tvwProject_Activate()

  Dim sKey As String
  Dim hModule As CModule

  sKey = tvwProject.Key

  If sKey Then
    If CanEdit(sKey) Then
      If $bCtrl Then
        If File.Ext(sKey) <> "module" Then
          sKey = File.SetExt(sKey, "class")
        Endif
      Endif
      Project.OpenFile(sKey)
    Endif
  Endif

End


Public Sub mnuEditFile_Click()

  tvwProject_Activate()

End


Public Sub mnuEditClass_Click()

  $bCtrl = True
  tvwProject_Activate()

End

Public Sub mnuQuit_Click()

  Me.Close

End

Public Sub mnuSaveFile_Click()

  Dim sPath As String
  Dim hForm As Object

  sPath = GetCurrent()
  If Not sPath Then Return

  hForm = Project.Files[sPath]
  If Not hForm Then Return

  hForm.Save

End


Public Sub mnuView_Show()

  'mnuViewTool.Checked = Project.ToolForm.Visible
  'mnuViewProperty.Checked = Project.PropertyForm.Visible
  'mnuViewMessage.Checked = Project.MessageForm.Visible

End


Public Sub mnuAbout_Click()

  FAbout.Run

End


Public Sub mnuDeleteFile_Click()

  Dim sPath As String
  Dim sName As String

  sPath = GetCurrent()
  If Not sPath Then Return

  If IsDir(sPath) Then

    If Message.Delete(File.Name(sPath) & "\n\n" & ("Do you really want to delete this directory ?"), ("Delete"), ("Cancel")) <> 1 Then Return
    Project.DeleteDir(sPath)

  Else

    If Project.IsSourcePath(sPath) Then
      sName = File.BaseName(sPath)
    Else
      sName = File.Name(sPath)
    Endif

    If Message.Delete(sName & "\n\n" & ("Do you really want to delete this file ?"), ("Delete"), ("Cancel")) <> 1 Then Return

    Project.DeleteFile(sPath)

  Endif

Catch

  FGambas.Error(("Cannot delete file or directory") & "\n\n" & Error.Text)

End


Public Sub tvwProject_Menu()

  'mnuPopup.Enabled = TRUE
  mnuPopup.Popup
  'mnuPopup.Enabled = FALSE

End


Private Function GetCurrent() As String

  $sKey = ""
  If Not tvwProject.Key Then Return
  If Not tvwProject.Current.Selected Then Return
  $sKey = tvwProject.Key
  If Left$($sKey) = "$" Then Return
  If IsProject($sKey) Then Return
  Return $sKey

End


Private Function GetCurrentDir(Optional sKey As String) As String

  If sKey Then 
    $sKey = sKey
  Else
    GetCurrent
  Endif
  If Not $sKey Then Return Project.Dir
  If $sKey = Project.KEY_MISC Then Return Project.Dir
  If $sKey = Project.KEY_PROJECT Then Return Project.Dir &/ ".hidden"
  If Project.SourceDir <> Project.Dir
    If $sKey = Project.KEY_SOURCE Then Return Project.SourceDir
  Endif
  If Left$($sKey) = "$" Then Return

  If IsDir($sKey) Then
    Return $sKey
  Else
    Return File.Dir($sKey)
  Endif

End


Public Sub mnuPopup_Show()

  Dim sCurrent As String
  Dim bCurrent As Boolean
  Dim bFile As Boolean
  Dim bCanStoreFile As Boolean
  Dim hMenu As Menu
  Dim sParent As String

  sCurrent = GetCurrent()
  bCurrent = sCurrent

  UpdateMenu

  If $sKey = Project.KEY_SOURCE Or If sCurrent Like (Project.SourceDir &/ "*") Then
  
    mnuRenameFile.Visible = mnuRenameFile.Visible And bCurrent And Not Project.Running
    mnuDeleteFile.Visible = mnuDeleteFile.Visible And CanDelete(sCurrent) And Not Project.Running

    mnuEditFile.Visible = mnuEditFile.Visible And CanEdit(sCurrent)
    mnuEditClass.Visible = mnuEditFile.Visible And Project.IsFormPath(sCurrent)
  
    mnuStartup.Visible = mnuEditFile.Visible 
    If mnuStartup.Visible Then
      mnuStartup.Checked = (Project.Startup = File.BaseName(sCurrent))
      mnuStartup.Enabled = Not Project.Running
    Endif
    
    If mnuCut.Visible Then
    
      mnuCut.Visible = bCurrent
      mnuCopy.Hide
      mnuPaste.Visible = True
      
      sParent = tvwProject[$sKey].ParentKey
      
      mnuPaste.Enabled = False
      mnuCut.Enabled = False
      
      If Not Project.Running Then
      
        If Clipboard.Format = MMime.CLASS Then
          If IsDir(sParent) Or If Not Project.IsSourcePath(sParent) Then mnuPaste.Enabled = True
        Endif
        
        If IsDir(sParent) Or If Not Project.IsSourcePath(sParent) Then mnuCut.Enabled = True
        
      Endif
      
    Endif
  
    mnuEditWith.Visible = False
    mnuCopyPath.Visible = mnuCopy.Visible
  
    If mnuNew.Visible Then
      mnuAddDirectory.Visible = Project.Dir <> Project.SourceDir
    
      mnuNewFile.Visible = False
      mnuNewImage.Visible = False
      mnuNewModule.Visible = True
      mnuNewClass.Show
    
      For Each hMenu In mnuNew.Children
        If Not hMenu.Tag Then Continue
        If Not CModule.All.Exist(hMenu.Tag) Then Continue
        hMenu.Visible = CModule[hMenu.Tag].Used
      Next
      
    Endif
    
  Else

    mnuRenameFile.Visible = mnuRenameFile.Visible And bCurrent
    mnuDeleteFile.Visible = mnuDeleteFile.Visible And CanDelete(sCurrent)
    
    mnuEditFile.Visible = mnuEditFile.Visible And CanEdit(sCurrent)
    mnuEditClass.Visible = False
  
    mnuStartup.Visible = False
  
    bCanStoreFile = $sKey = Project.KEY_MISC Or $sKey = Project.KEY_PROJECT
    bFile = bCurrent
    
    If mnuCut.Visible Then
      mnuCut.Visible = bFile And Not IsDir($sKey)
      mnuCopy.Visible = bFile And Not IsDir($sKey)
      mnuPaste.Visible = bFile Or bCanStoreFile
      mnuPaste.Enabled = Clipboard.Format = MMime.FILE
    Endif
  
    mnuEditWith.Visible = Project.IsImagePath(sCurrent) And mnuEditFile.Visible
    mnuCopyPath.Visible = mnuCopy.Visible
    
    If mnuNew.Visible Then 

      mnuNewFile.Visible = bFile Or bCanStoreFile
      mnuNewImage.Visible = mnuNewFile.Visible
      mnuNewModule.Hide
      mnuNewClass.Hide
    
    For Each hMenu In mnuNew.Children
      If Not hMenu.Tag Then Continue
      hMenu.Hide
    Next
    
    Endif

  Endif
End


Private Function FormatFile(sPath As String) As String

  Dim sText As String

  sText = File.Name(sPath)

  If Left$(sPath, Len(User.Home)) = User.Home Then
    sPath = "~" &/ Mid$(sPath, Len(User.Home) + 1)
  Endif

  Return sText & "  (" & File.Dir(sPath) & ")"

End


Public Sub UpdateRecentMenu()

  Dim hMenu As Menu
  Dim sPath As String
  Dim aList As String[]
  Dim bSort As Boolean

  Inc Application.Busy

  mnuOpenRecent.Children.Clear
  mnuOpenRecent.Enabled = Project.GetRecentFiles().Count > 0

  If mnuOpenRecent.Enabled Then

    hMenu = New Menu(mnuOpenRecent) As "mnuClearRecent"
    hMenu.Text = ("&Clear history")
    hMenu.Picture = Picture["icon:/small/trash"]
  
    bSort = Settings["/FWelcome/SortRecent", False]
  
    hMenu = New Menu(mnuOpenRecent) As "mnuSortRecent"
    hMenu.Text = ("&Sort by path")
    hMenu.Toggle = True
    Object.Lock(hMenu)
    hMenu.Checked = bSort
    Object.Unlock(hMenu)
    'hMenu.Picture = Picture["icon:/small/trash"]
  
    aList = Project.GetRecentFiles(bSort)
  
    hMenu = New Menu(mnuOpenRecent)
  
    For Each sPath In aList
      hMenu = New Menu(mnuOpenRecent) As "mnuOpenRecentFile"
      hMenu.Tag = sPath
      hMenu.Text = FormatFile(sPath)
      hMenu.Picture = Project.GetIcon(hMenu.Tag, 16)
    Next
    
  Endif

  Dec Application.Busy

End

Public Sub mnuSortRecent_Click()
  
  Settings["/FWelcome/SortRecent"] = Not Settings["/FWelcome/SortRecent", False]
  UpdateRecentMenu
  
End


' PUBLIC SUB UpdateRunWithMenu()
'   
'   DIM hMenu AS Menu
'   DIM iInd AS Integer
'   DIM sArg AS String
' 
'   mnuRunWith.Children.Clear
'   'mnuOpenRecent.Enabled = Project.Recent.Count > 0
' 
'   'IF Project.Recent.Count = 0 THEN RETURN
' 
'   mnuRunWithNoArg = NEW Menu(mnuRunWith) AS "mnuRunWithArg"
'   mnuRunWithNoArg.Text = ("(&None)")
'   mnuRunWithNoArg.Tag = 0
'   
'   hMenu = NEW Menu(mnuRunWith)
' 
'   FOR EACH sArg IN Project.Arguments
'     hMenu = NEW Menu(mnuRunWith) AS "mnuRunWithArg"
'     sArg = Replace(sArg, "\n", " ")
'     sArg = Replace(sArg, "&", "&&")
'     INC iInd
'     hMenu.Tag = iInd
'     IF Len(sArg) > 64 THEN sArg = Left(sArg, 64) & "..."
'     hMenu.Text = sArg
'   NEXT  
'   
'   hMenu = NEW Menu(mnuRunWith)
' 
'   hMenu = NEW Menu(mnuRunWith) AS "mnuEditArgument"
'   hMenu.Text = ("&Edit arguments...")
'   hMenu.Picture = Picture["icon:/small/edit"]
' 
'   SetArgument
'   
' END


Private Sub UpdateExampleMenu(Optional hParent As Menu)

  Dim hMenu As Menu
  Dim aList As String[]
  Dim iInd As Integer
  Dim sPath As String
  Dim sParent As String
  Dim sDir As String

  If Not hParent Then hParent = mnuOpenExample
  
  If Not hParent.Tag Then Return
  
  Inc Application.Busy 

  hParent.Children.Clear

  aList = Project.GetExamples(hParent.Tag)
  hParent.Tag = ""

  If aList Then 
  
    For Each sPath In aList
  
      ' IF InStr(sPath, "/") THEN
      '   sDir = File.Dir(sPath)
      '   IF sDir <> sParent THEN
      '     sParent = sDir
      '     hParent = NEW Menu(mnuOpenExample)
      '     hParent.Text = Project.ExampleTitle[sParent]
      '     IF NOT hParent.Text THEN hParent.Text = sParent
      '   ENDIF
      ' ELSE
      '   hParent = mnuOpenExample
      '   sParent = ""
      ' ENDIF
  
      If Exist(Project.EXAMPLES_DIR &/ sPath &/ ".project") Then
        hMenu = New Menu(hParent) As "mnuOpenRecentFile"
        hMenu.Tag = Project.EXAMPLES_DIR &/ sPath
        hMenu.Text = File.Name(sPath) 'FormatFile(sPath)
        hMenu.Picture = Project.GetIcon(hMenu.Tag, 16)
      Else 
        hMenu = New Menu(hParent) As "mnuOpenExample"
        hMenu.Tag = sPath
        hMenu.Text = Project.ExampleTitle[File.Name(sPath)]
        hMenu = New Menu(hMenu)
      Endif
  
    Next
    
  Endif
    
  Dec Application.Busy

End


Public Sub mnuOpenRecentFile_Click()

  Project.Open(Last.Tag)
  UpdateRecentMenu

End


Public Sub mnuClearRecent_Click()

  Project.ClearRecent
  UpdateRecentMenu

End



Private Sub NewProject()

  Dim sPath As String

  sPath = FCreateProject.Run()
  If Not sPath Then Return

  Project.Open(sPath)
  UpdateRecentMenu

End


Public Sub mnuTip_Click()

  FTips.Run

End


' PUBLIC SUB mnuAddIcon_Click()
' 
'   IF FNewIcon.Run(GetCurrentDir()) THEN RETURN
'   Project.InsertFile(FNewIcon.Name, FNewIcon.DestDir, FNewIcon.Template)
' 
' END
' 
' 
' PUBLIC SUB mnuAddText_Click()
' 
'   IF FNewText.Run(GetCurrentDir()) THEN RETURN
'   Project.InsertFile(FNewText.Name, FNewText.DestDir, FNewText.Template)
' 
' END

Private Sub Rename(sKey As String)
  
  $bInRename = True
  tvwProject[sKey].Rename
  
End


Public Sub mnuAddDirectory_Click()

  Dim sPath As String
  Dim iInd As Integer = 1

  sPath = GetCurrentDir() &/ ("New folder")
  While Exist(sPath)
    Inc iInd
    sPath = GetCurrentDir() &/ ("New folder") & " (" & iInd & ")"
  Wend
  
  If Not Project.InsertDirectory(sPath, True) Then Return
  $sDeleteKey = sPath

  Rename(sPath)  
  'IF FNewDirectory.Run(GetCurrentDir()) THEN RETURN
  'Project.InsertDirectory(FNewDirectory.ParentDir &/ FNewDirectory.Name)

End


Private Function CanEdit(sPath As String) As Boolean

  If Not sPath Then Return
  If Left$(sPath) = "$" Then Return
  Return Not IsDir(sPath)

End


Private Function CanDelete(sPath As String) As Boolean

  If Not sPath Then Return
  If Left$(sPath) = "$" Then Return
  Return tvwProject[sPath].Count = 0

End


Public Sub UpdateTranslate()

  Action["translate"].Visible = Project.Localize And Not Project.ReadOnly
  Action["translate"].Enabled = Not Project.Running
  'Action["component"].Visible = Project.CreateComponent 'AND NOT (Project.ReadOnly OR Project.Running)

End

Public Sub UpdateConsoleAction(bDebug As Boolean)
  
  'DIM bVal AS Boolean

  'HideDebug(Not bDebug)

  'bVal = Action["console"].Value
  panDebug.Action = If(FOutput.Parent, "console", "")
  FOutput.Action = If(FOutput.Parent, "", "console")

  If FOutput.Parent Then 
    Action["console"].Value = Not panDebug.Hidden
  Else 
    Action["console"].Value = FOutput.Visible
  Endif

  'Action["console"].Value = bVal  

End


Private Sub Translate()

  If Project.Running Then Return
  If Project.Compile() Then Return
  
  If Project.CheckProgram("msgmerge") Or If Project.CheckProgram("msgfmt") Then
    Message.Warning(("The GNU translation tools are not installed on your system.\n\nPlease install them to be able to do the translation."))
    Return
  Endif
  
  FTranslate.Run

End


Public Sub mnuDatabaseManager_Click()

  'Project.RunTool("gambas" & System.Version & "-database-manager")
  Project.RunTool("gambas-database-manager")

End



Public Sub mnuStartup_Click()

  If mnuStartup.Checked Then Return
  mnuStartup.Checked = True
  Project.DefineStartup(GetCurrent())

End


Private Function IsProject(sKey As String) As Boolean

  Return sKey = Project.Dir

End


Public Sub mnuCopy_Click()

  Dim sPath As String
  Dim sType As String

  sPath = GetCurrent()
  If Project.IsSourcePath(sPath) Then
    sType = MMime.CLASS
  Else
    sType = MMime.FILE
  Endif
  Clipboard.Copy("C" & sPath, sType)

  mnuPopup_Show

End

Public Sub mnuCopyPath_Click()
  
  Dim sPath As String

  sPath = GetCurrent()
  If Left(sPath, Len(Project.Dir)) = Project.Dir Then
    sPath = Mid$(sPath, Len(Project.Dir) + 2)
    'IF Left(sPath) = "/" THEN sPath = Mid$(sPath, 2)
  Endif

  Clipboard.Copy(sPath)
  
End



Public Sub mnuCut_Click()

  Dim sPath As String
  Dim sType As String

  sPath = GetCurrent()
  If Project.IsSourcePath(sPath) Then
    sType = MMime.CLASS
  Else
    sType = MMime.FILE
  Endif
  Clipboard.Copy("X" & sPath, sType)

  mnuPopup_Show

End


Public Sub mnuPaste_Click()

  Dim sFile As String
  Dim sAction As String
  Dim sSrc As String
  Dim sDst As String
  Dim sType As String
  Dim bSource As Boolean

  sDst = GetCurrentDir()
  bSource = Project.IsSourcePath(sDst)
  If bSource Then
    sType = MMime.CLASS
  Else
    sType = MMime.FILE
  Endif
  
  sFile = Clipboard.Paste(sType)
  If Not sFile Then Return
  
  sAction = Left$(sFile)
  sSrc = Mid$(sFile, 2)
  sDst &/= File.Name(sFile)

  Select Case sAction

    Case "C"
      Project.CopyFile(sSrc, sDst)
      Rename(tvwProject.Key)
      
    Case "X"
      If sSrc = sDst Then Return
      Project.MoveFile(sSrc, sDst, sType = MMime.CLASS)
      Clipboard.Clear

  End Select

End


Public Sub tvwProject_Select()

  Dim sKey As String
  Dim sSave As String
  Dim aKey As String[]
  Dim hEdit As Editor
  Dim iLine As Integer
  Dim iCol As Integer
  Dim iLen As Integer

  sKey = tvwProject.Key
  ' WITH tvwProject.Current
  '   DEBUG .X;; .Y;; .W;; .H
  ' END WITH

  mnuPopup_Show
  
  If tvwProject.Current.Children Then tvwProject.Current.Expanded = True

End

' PUBLIC SUB tvwProject_Expand()
' 
'   IF tvwProject.Item.Picture = Picture["img/16/close.png"] THEN
'     tvwProject.Item.Picture = Picture["img/16/open.png"]
'   ENDIF
' 
' END

' PUBLIC SUB tvwProject_Collapse()
' 
'   IF tvwProject.Item.Picture = Picture["img/16/open.png"] THEN
'     tvwProject.Item.Picture = Picture["img/16/close.png"]
'   ENDIF
' 
' END

Public Sub mnuCloseAll_Click()

  Project.CloseAllWindows

End

Public Sub ReadConfig()

  Dim bShow As Boolean

'   DIM hFont AS Font
'
'   IF Settings["/UseSmallFont", FALSE] THEN
'     hFont = Font["8"]
'   ELSE
'     hFont = Font["10"]
'   ENDIF
'
'   tvwProject.Font = hFont

  tvwProject.Font.Grade = - Settings["/GlobalFont", 0]
  lblMessage.Font = tvwProject.Font
  tabProperty.Font.Grade = - Settings["/TabStripFont", 0]
  wrkProject.Font = tabProperty.Font
  'wrkProject.Font = tvwProject.Font
  'tabProperty.Font = tvwProject.Font
  panMessage.Height = lblMessage.Font.Height("") + 2
  '$bCanShowBalloon = Settings["/ShowBalloon", TRUE]
  'IF NOT $bCanShowBalloon THEN HideBalloon
  bShow = Settings["/ShowMessages", True]
  panMessage.Visible = bShow
  mnuStatusBar.Value = bShow

  tabProperty.H = tabProperty.ClientY - 2

End

' PUBLIC SUB mnuViewDebug_Click()
' 
'   HideOrShow(FDebugInfo)
' 
' END

Private Sub UpdateMenu()

  Dim bVisible As Boolean
  Dim bEnabled As Boolean
  Dim sAction As String

  bVisible = Not Project.ReadOnly
  bEnabled = Not Project.Running

  UpdateTranslate

  For Each sAction In ["exec", "install", "compile", "compile-all", "property"]
    Action[sAction].Visible = bVisible
    Action[sAction].Enabled = bEnabled
  Next

  mnuStartup.Visible = bVisible
  mnuRenameFile.Visible = bVisible
  mnuCut.Visible = bVisible
  mnuCopy.Visible = bVisible
  mnuPaste.Visible = bVisible
  mnuDeleteFile.Visible = bVisible
  mnuClean.Visible = bVisible
  mnuNew.Visible = bVisible
  mnuEditFile.Visible = bVisible
  
  mnuClearDebugWindows.Enabled = Project.Running

End


Public Sub OnProjectChange()

  UpdateMenu
  'UpdateTranslate
  'RefreshInfo
  'IF $bHidden THEN HideAll

End


Public Sub OnProjectDebug()

  UpdateMenu

End



Public Sub tvwProject_MouseDown()

  $bCtrl = Mouse.Control
  
End 

' PUBLIC SUB Form_Show()
' 
'   Project.Activate(NULL)  
' 
' END


Public Sub ShowTool(bShow As Boolean)

  If bShow <> panProperty.Hidden Then Return

  If Not bShow Then $bTool = Not panTool.Hidden
  
  Action["property"].Value = bShow
  'Action["control"].Value = bShow And $bTool
  
End


Public Sub ShowDebug(bShow As Boolean)
  
  panDebug.Hidden = Not bShow
  'FDebugInfo.UpdateView
  
End

Public Sub HideDebug(bHide As Boolean)
  
  panDebug.Visible = Not bHide
  
End


' PUBLIC SUB mnuHideAll_Click()
' 
'   HideAll  
' 
' END
' 
' PRIVATE SUB HideAll()
'   
'   IF FOption.Visible THEN RETURN
'   
'   IF $bHidden THEN
'     
'     panProject.Hidden = $aHiddenState["panProject"]
'     panProperty.Hidden = $aHiddenState["panProperty"]
'     panTool.Hidden = $aHiddenState["panTool"]
'     
'   ELSE
'     
'     $aHiddenState.Clear
'     $aHiddenState["panProject"] = panProject.Hidden
'     $aHiddenState["panProperty"] = panProperty.Hidden
'     $aHiddenState["panTool"] = panTool.Hidden
'     
'     panProject.Hidden = TRUE
'     panProperty.Hidden = TRUE
'     panTool.Hidden = TRUE
'     
'   ENDIF
'   
'   $bHidden = NOT $bHidden
'   
' END

Public Sub wrkProject_Activate()

  Project.Activate(wrkProject.ActiveWindow)

End

Public Sub ActivateCurrentWindow()
  
  Try wrkProject.ActiveWindow.SetFocus
  wrkProject_Activate ' If it already has the focus
  
End


Public Sub Action_Activate(Key As String) As Boolean

  Dim hEditor As FEditor

  'DEBUG Key
  
  Select Key

    Case "project"
      panProject.Hidden = Not Action[Key].Value
    Case "start"
      Project.Run(False)
    Case "pause"
      Design.Pause
    Case "stop"
      Design.Stop
    Case "forward"
      Project.Run(False, 2)
    Case "step"
      Project.Run(False, 1)
    Case "return"
      Project.Run(False, 3)

    Case "new-project"
      NewProject
    Case "open-project"
      OpenProject
    Case "save-project"
      Project.Save
    Case "save-project-as"
      Project.SaveAs
    Case "refresh-project"
      Project.Refresh
    Case "project-property"
      FPropertyProject.Run
    Case "translate"
      Translate
    Case "compile"
      Project.Compile()
    Case "compile-all"
      Project.Compile(True)
    Case "archive"
      Project.MakePackage
    Case "exec"
      Project.MakeExecutable
    Case "install"
      Project.MakeInstall
    Case "shortcut"
      Action.Configure
      
    Case "find-next"
      FFind.FindNext
    Case "find-previous"
      FFind.FindPrevious
    Case "replace"
      FFind.Replace
    Case "replace-all"
      FFind.ReplaceAll
    Case "find-all"
      FFind.FindAll
    
    Case "help"
      MHelp.Open
    Case "console"
      Try FOutput.SetFocus
      'FOutput.Toggle(Action["console"].Value)
    
    Case "break"
      'Debug Action["break"].Value
      hEditor = Project.ActiveForm
      If Not Error Then Design.SetBreakpoint(hEditor.Name, hEditor.Editor.Line, Action["break"].Value)
    Case "watch"
      hEditor = Project.ActiveForm
      If Not Error Then hEditor.WatchExpression
    Case "until"
      hEditor = Project.ActiveForm
      If Not Error Then hEditor.RunUntil
    Case "info"
      FInfo.Run

  End Select 
  
End

Public Sub tvwProject_GotFocus()

  'Debug
  mnuPopup.Enabled = True

End

Public Sub tvwProject_LostFocus()

  'Debug
  mnuPopup.Enabled = False

End

Public Sub wrkProject_WindowMenu()

  'DEBUG

End

Public Sub mnuUpdateForm_Click()

  Dim sForm As String
  Dim hForm As FForm
  
  If Message.Warning(("Do you really want to update all forms?"), ("Update"), ("Cancel")) <> 1 Then Return

  Inc Application.Busy
  
  For Each sForm In Dir(Project.Dir, "*.form")
    hForm = Project.LoadFile(Project.Dir &/ sForm)
    hForm.Modify
    hForm.Save
  Next
  
  Dec Application.Busy

Catch 
  
  Dec Application.Busy
  FGambas.Error(("Unable to update all forms.") & "\n\n" & Error.Text)

End

Public Sub tvwProject_Rename()

  Dim sPath As String
  Dim sNew As String

  $bInRename = False
  sPath = GetCurrent()
  If Not sPath Then Return

  'DEBUG Before;; tvwProject.Item.Text
  If $sDeleteKey Then
    sNew = File.Dir($sDeleteKey) &/ tvwProject.Item.Text
    Project.DeleteDir(sPath, True)
    Project.InsertDirectory(sNew)
    $sDeleteKey = ""
  Else
    Project.RenameFile(sPath, tvwProject.Item.Text)
  Endif

End

Public Sub mnuRenameFile_Click()
  
  Rename(tvwProject.Key)
  
End

Private Sub IsDataKey(sKey As String) As Boolean

  Dim sPrevious As String
  
  tvwProject.MoveTo(sKey)
  Do
    tvwProject.MoveParent
    If Not tvwProject.Available Then Break
    sPrevious = sKey
    sKey = tvwProject.Item.Key
  Loop 
  
  Return sPrevious = Project.KEY_MISC Or sPrevious = Project.KEY_PROJECT
  
End


Public Sub tvwProject_DragMove()

  Dim sKey As String

  If Not tvwProject.Find(Drag.X, Drag.Y) Then 
    $sKey = tvwProject.Item.Key
    If Drag.Format = MMime.DATA Then 
      If Not IsDataKey($sKey) Then Goto STOP_EVENT
    Else If Drag.Format = MMime.CLASS Then
      If $sKey <> Project.KEY_SOURCE Then
        If Not Project.IsSourcePath($sKey) Then Goto STOP_EVENT
      Endif
    Endif
    With tvwProject[$sKey] 
      If .Children Then 
        If Not timOpen.Enabled Or $sKey <> $sKeyDrag Then 
          $sKeyDrag = $sKey
          timOpen.Enabled = True
        Endif
      Else  
        timOpen.Enabled = False
      Endif
      Drag.Show(tvwProject, .X, .Y, Min(.W, tvwProject.W - .X - 4), .H)
      'Drag.Show(tvwProject)
    End With
    Return
  Endif
  
STOP_EVENT:

  Stop Event

End

Public Sub tvwProject_Drop()

  Dim sSrc As String = Drag.Data
  
  'DEBUG Drag.Format;; Drag.Data
  
  If Drag.Action = Drag.Move Then
    Project.MoveFile(sSrc, GetCurrentDir($sKey) &/ File.Name(sSrc), Drag.Format = MMime.CLASS)
  Else If Drag.Action = Drag.Copy Then
    If Drag.Format <> MMime.CLASS Then
      Project.CopyFile(sSrc, GetCurrentDir($sKey) &/ File.Name(sSrc))
    Endif
  Else If Drag.Action = Drag.Link Then
    If Drag.Format <> MMime.CLASS Then
      Project.LinkFile(sSrc, GetCurrentDir($sKey) &/ File.Name(sSrc))
    Endif
  Endif

End


Public Sub tvwProject_MouseDrag()

  Dim sKey As String
  
  If Not Mouse.Left Then Return
  
  If tvwProject.Find(Mouse.StartX, Mouse.StartY) Then Return
  sKey = tvwProject.Item.Key
  If tvwProject.Key <> sKey Then Return
  'If Project.IsSourcePath(sKey) Then Return
  If Left(sKey) = "$" Then Return

  mnuPopup_Show
  If Not mnuCut.Visible Or If Not mnuCut.Enabled Then Return
  
  Drag.Icon = tvwProject.Item.Picture
  tvwProject[sKey].Selected = True
  Drag(tvwProject, sKey, If(Project.IsSourcePath(sKey), MMime.CLASS, MMime.DATA))
  
End

Public Sub timOpen_Timer()

  If Drag.Pending Then Try tvwProject[$sKeyDrag].Expanded = True
  timOpen.Enabled = False

End

Public Sub mnuNewFile_Click()
  
  FCreateFile.Run(GetCurrent(), GetCurrentDir(), Last.Tag)
  
End

Public Sub tvwProject_Cancel()

  Dim sPath As String

  $bInRename = False
  sPath = GetCurrent()
  If Not sPath Then Return
  
  If sPath = $sDeleteKey Then Project.DeleteDir(sPath, True)
  $sDeleteKey = ""

End

Public Sub tvwProject_Expand()
  
  Dim sKey As String = tvwProject.Item.Key
  If Not sKey Then Return
  If Left(sKey) = "$" Then Return
  Project.FillDir(sKey)  
    
End


Public Sub tvwProject_Collapse()

  Dim sKey As String = tvwProject.Item.Key
  If Not sKey Then Return
  If File.Dir(sKey) = Project.Dir And If Not IsDir(sKey) Then tvwProject[sKey].Expanded = True

End

Public Sub mnuClean_Click()

  If Message.Warning(("All backup or generated files will be removed from the project directory."), ("Clean"), ("Cancel")) = 2 Then Return 
  
  Project.CleanUp

End

Public Sub mnuClearBreakpoints_Click()
  
  Design.ClearBreakpoints
  
End

Public Sub panInfo_Show()

  'RefreshInfo  
  
End


Public Sub mnuOpenRecent_Show()

  If $bUpdateRecentMenu Then Return
  UpdateRecentMenu
  $bUpdateRecentMenu = True
  
End

Public Sub OnUpdateRecent()
  
  $bUpdateRecentMenu = False
  
End

Public Sub mnuOpenExample_Show()
  
  UpdateExampleMenu(Last)
  
End

Public Sub tabProperty_Click()

  With tabProperty

  Select Case .Index
  
    Case 0
      FFormStack.Hide
      'FProperty.Move(.X, .Y + .ClientY - 2, .W, .ClientH + 2)
      FProperty.Show
    
    Case 1
      FProperty.Hide
      'FFormStack.Move(.X, .Y + .ClientY - 2, .W, .ClientH + 2)
      FFormStack.Show
  
  End Select 
  
  End With
  
End

Public Sub panProperty_Arrange()

  tabProperty_Click  

End

Public Sub tvwProject_Leave()

  $bInTreeView = False

End

Public Sub tvwProject_Enter()

  $bInTreeView = True  

End

Public Sub HidePanels()
  
  If FOutput.HandleEscape() Then Return
  If FFind.HandleEscape() Then Return
  
  Action["find"].Value = False
  Action["console"].Value = False
  Balloon.Hide
  
End


Public Sub Form_KeyPress()
  
  If Key.Code = Key.Escape Then 
    HidePanels
    FProperty.HideProperty
  Else If Key.Code = Key["M"] And If Key.Control And If Key.Alt Then
    If Me.Menus.Visible Then
      mnuHideMenu_Click
    Else
      btnShowMenu_Click
    Endif
  Endif
  
End

Public Sub ActivatePropertyTab()
  
  tabProperty.Index = 0
  
End

Public Sub SetMessage(sMsg As String)
  
  lblMessage.Text = sMsg
  timMessage.Stop
  timMessage.Start
  'Wait
  
End

Public Sub timMessage_Timer()

  lblMessage.Text = ""
  timMessage.Stop

End

Public Sub mnuBrowse_Click()

  Desktop.Open(Project.Dir)

End

Public Sub mnuEditWith_Show()
  
  Dim sApp As String
  Dim hMenu As Menu
  
  mnuEditWith.Children.Clear
  For Each sApp In Project.ImageEditors
    hMenu = New Menu(mnuEditWith) As "mnuEditWithProg"
    hMenu.Caption = sApp
  Next
  
End

Public Sub mnuEditWithProg_Click()
  
  Dim sKey As String = tvwProject.Key

  If sKey Then
    If CanEdit(sKey) Then
      Project.OpenImage(sKey, Last.Text)
    Endif
  Endif

End


Public Sub mnuClearDebugWindows_Click()

  FDebugExpr.Clear

End

Public Sub mnuFind_Click()

  FFind.Find

End

Public Sub ToolButton6_Click()

  'Desktop.SendKeys("ù£æ")
  tvwProject.MoveFirst
  tvwProject.MoveLast
  While tvwProject.Item.Children
    tvwProject.MoveChild
    tvwProject.MoveLast
  Wend
  While tvwProject.Available
    Print tvwProject.Item.Key
    tvwProject.MoveAbove
  Wend

End

Public Sub mnuTerminal_Click()

  Desktop.OpenTerminal(Project.Dir)  

End

Public Sub mnuHideMenu_Click()

  Me.Menus.Hide
  btnShowMenu.Show

End

Public Sub btnShowMenu_Click()

  Me.Menus.Show
  btnShowMenu.Hide

End


Public Sub tvwProject_Drag()

  

End

Public Sub mnuStatusBar_Click()

  Settings["/ShowMessages"] = mnuStatusBar.Value
  ReadConfig

End
