' Gambas module file

Private $bSVN As Boolean
Private $bCVS As Boolean
Private $bEnd As Boolean
Private $hEditor As Editor

Public Sub Enabled() As Boolean
  
  Return $bSVN Or $bCVS
  
End


Public Sub Refresh()

  $bSVN = Exist(Project.Dir &/ ".svn")
  $bCVS = Exist(Project.Dir &/ "CVS") Or Exist(Project.Dir &/ "CVSROOT")

End

Private Sub Insert(sText As String)
  
  If $hEditor Then 
    $hEditor.Print(DConv(sText))
  Else 
    If Not Settings["/QuietExternalCommands", False] Then FOutput.Insert(sText)
  Endif
  
End


Private Sub Run(sCmd As String, Optional sRemove As String)

  $bEnd = False
  Shell sCmd & " 2>&1" For Read As "Process" 'TO sOutput
  
  If sRemove Then sCmd = Replace(sCmd, sRemove, "")
  
  Insert(sCmd & "\n")  
  
  Repeat
    Sleep 0.1 
    Wait
  Until $bEnd
  
End

Public Sub Process_Read()
  
  Dim sData As String
  
  Read #Last, sData, -64
  Insert(sData)
  
End


Public Sub Process_Kill()
  
  $bEnd = True
  
End


Public Sub AddFile(sPath As String)

  If $bSVN Then
    Run("svn add " & Shell$(sPath))
  Endif
  If $bCVS Then
    'NB: For CVS file must already exist
    Run("cvs add " & Shell$(sPath))
  Endif

End

Public Sub AddDir(sPath As String)

  If $bSVN Then
    Run("svn add " & Shell$(sPath))
  Endif
  If $bCVS Then
    'NB: For CVS, directory must already exist
    Run("cvs add " & Shell$(sPath))
  Endif

End

' Must be called *after* the file has been deleted

Public Sub RemoveFile(sPath As String, Optional bForce As Boolean)

  If $bSVN Then
    Run("svn remove " & IIf(bForce, "--force ", "") & Shell$(sPath))
  Endif
  If $bCVS Then
    'NB: For CVS do 'cvs remove file' first then delete file
    Run("cvs remove " & Shell$(sPath))
  Endif
  
End

' Must be called *after* the directory has been deleted
' The directory must be empty

Public Sub RemoveDir(sPath As String)

  If $bSVN Then
    RemoveFile(sPath, True)
  Endif
  If $bCVS Then
    'NB: For CVS do 'cvs remove dirname' first then delete dirname
    Run("cvs remove " & Shell$(sPath))
  Endif

End

' Must be called *after* the file has been moved

Public Sub MoveFile(sOld As String, sNew As String)

  If $bSVN Then
    'SHELL "svn move " & Shell$(sOld) & " " & Shell$(sNew) WAIT
    AddFile(sNew)
    RemoveFile(sOld, True)
    'RemoveFile(sOld)
  Endif
  If $bCVS Then
    'NB: make sure the file is added BEFORE
    AddFile(sNew)
    'NB: make sure the file deleted AFTER
    RemoveFile(sOld)
  Endif

End

Public Sub MoveDir(sOld As String, sNew As String)

  Dim sDir As String

  If $bSVN Then
    'SHELL "svn move " & Shell$(sOld) & " " & Shell$(sNew) WAIT
    'AddFile(sNew)
    For Each sDir In RDir(sNew, "*", gb.Directory)
      If File.Name(sDir) <> ".svn" Then Continue
      Shell "rm -rf " & Shell$(sNew &/ sDir) Wait
    Next
    AddFile(sNew)
    RemoveFile(sOld, True)
    'RemoveFile(sOld)
  Endif
  If $bCVS Then
    'NB: make sure the file is added BEFORE
    AddFile(sNew)
    'NB: make sure the file deleted AFTER
    RemoveFile(sOld)
  Endif

End

Public Sub Status() As String
  
  Dim sStatus As String
  
  If $bSVN Then 
    Shell "cd " & Shell$(Project.Dir) & "; svn status -q" To sStatus
    Return sStatus
  Endif
  
  If $bCVS Then
    Shell "cd " & Shell$(Project.Dir) & "; cvs status" To sStatus
    Return sStatus
  Endif
  
End


Public Sub Commit(sUser As String, sPassword As String, sChange As String) As Boolean
  
  Dim hFile As File
  Dim sCmd As String
  
  If $bSVN Then 
    hFile = Open Temp$("commit") For Create 
    Print #hFile, sChange;
    Close #hFile
    sCmd = "svn commit --username " & Shell$(sUser) 
    If sPassword Then 
      sPassword = " --password " & Shell$(sPassword)
      sCmd &= sPassword
    Endif
    sCmd &= " --file " & Shell$(Temp$("commit")) & " " & Shell$(Project.Dir)
    sCmd &= " --non-interactive"
    Run(sCmd, sPassword)
    Return Process.LastValue
  Endif    
  
End


Public Sub Update() As Boolean
  
  If $bSVN Then 
    Run("svn update --non-interactive " & Shell$(Project.Dir))
    Return Process.LastValue
  Endif
  
End


Public Sub Revert() As Boolean
  
  If $bSVN Then 
    Run("svn -R revert " & Shell$(Project.Dir))
    Return Process.LastValue
  Endif
  
End


Public Sub CheckoutSVN(sPath As String, sDir As String, hEditor As Editor) As Boolean

  $hEditor = hEditor
  Run("cd " & Shell$(sDir) & "; svn checkout " & Shell$(sPath))
  $hEditor = Null
  
End

Public Sub InConflict(sPath As String) As Boolean
  
  If $bSVN Then 
    'IF Exist(sPath & ".mine") THEN RETURN TRUE
    If Not Exist(sPath) Then
      Debug sPath; ": does not exist"
      Return False
    Endif
    If Dir(File.Dir(sPath), File.Name(sPath) & ".r*").Count Then Return True
  Endif
  
End

Public Sub Resolve(sPath As String) As Boolean
  
  If $bSVN Then 
    Run("svn resolved " & Shell$(sPath))
    Return Process.LastValue
  Endif  
  
End

Public Sub HasConflict() As Boolean

  If $bSVN Then
    If Dir(Project.Dir, "*.module.r*").Count Then Return True  
    If Dir(Project.Dir, "*.class.r*").Count Then Return True  
    If Dir(Project.Dir, "*.form.r*").Count Then Return True  
  Endif  
 
End


Public Sub GetVersion(sDir As String) As String
  
  Dim sRes As String
  
  If Exist(sDir &/ ".svn") Then
    Shell "cd " & Shell$(sDir) & "; LC_ALL=C svn info" To sRes
    Try sRes = Scan(sRes, "*\nRevision: *\n*")[1]
    Return sRes
  Endif
  
End

Private Sub RemoveFirstLines(sStr As String, iCount As Integer) As String
  
  Dim iPos As Integer
  
  While iCount
    iPos = InStr(sStr, "\n", iPos + 1)
    If iPos = 0 Then Return
    Dec iCount
  Wend
  
  Return Mid$(sStr, iPos + 1)
  
End


Public Sub Diff(sPath As String) As String
  
  Dim sDiff As String
  
  If $bSVN Then
    Shell "svn diff " & Shell$(sPath) To sDiff
    Return sDiff
  Endif
  
End
