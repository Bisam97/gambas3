' Gambas module file

'{
Private Const ERR_001 As String = ("&1 cannot be static")
Private Const ERR_002 As String = ("&1 declaration does not match")
Private Const ERR_003 As String = ("&1 expected")
Private Const ERR_004 As String = ("&1 is declared but is not a function")
Private Const ERR_005 As String = ("&1 is not declared")
Private Const ERR_006 As String = ("&1 must be static")
Private Const ERR_007 As String = ("&1: not in archive")
Private Const ERR_008 As String = ("&1: syntax error")
Private Const ERR_009 As String = ("&1: syntax error in form file")
Private Const ERR_010 As String = ("&1: too many nested containers")
Private Const ERR_011 As String = ("'&1' already declared")
Private Const ERR_012 As String = ("A module cannot raise events")
Private Const ERR_013 As String = ("A property implementation cannot be public")
Private Const ERR_014 As String = ("A property must be public")
Private Const ERR_015 As String = ("Alias name must be a string")
Private Const ERR_016 As String = ("Ambiguous expression. Please use brackets")
Private Const ERR_017 As String = ("Array declaration is forbidden with typed collection")
Private Const ERR_018 As String = ("Arrays are forbidden here")
Private Const ERR_019 As String = ("Bad character constant in string")
Private Const ERR_020 As String = ("Bad constant type")
Private Const ERR_021 As String = ("Bad form file version")
Private Const ERR_022 As String = ("Bad subscript range")
Private Const ERR_023 As String = ("Cannot create .startup file")
Private Const ERR_024 As String = ("Cannot create action file: &1")
Private Const ERR_025 As String = ("Cannot create class information: &1: &2")
Private Const ERR_026 As String = ("Cannot create file: &1")
Private Const ERR_027 As String = ("Cannot create temporary archive file: &1")
Private Const ERR_028 As String = ("Cannot inherit twice")
Private Const ERR_029 As String = ("Cannot instanciate native types")
Private Const ERR_030 As String = ("Cannot make executable: &1")
Private Const ERR_031 As String = ("Cannot mix NEW and array declaration")
Private Const ERR_032 As String = ("Cannot open file: &1")
Private Const ERR_033 As String = ("Cannot raise events in static function")
Private Const ERR_034 As String = ("Cannot read file: &1")
Private Const ERR_035 As String = ("Cannot read file: &1: &2")
Private Const ERR_036 As String = ("Cannot set file owner: &1: &2")
Private Const ERR_037 As String = ("Cannot use NEW operator there")
Private Const ERR_038 As String = ("Cannot use TRY twice")
Private Const ERR_039 As String = ("Dynamic symbols cannot be used in static function")
Private Const ERR_040 As String = ("Expression too complex")
Private Const ERR_041 As String = ("Expression too complex. Too many operands")
Private Const ERR_042 As String = ("Forbidden GOTO")
Private Const ERR_043 As String = ("Invalid assignment")
Private Const ERR_044 As String = ("Label '&1' not declared")
Private Const ERR_045 As String = ("Library name must be a string")
Private Const ERR_046 As String = ("Loop variable already in use")
Private Const ERR_047 As String = ("Loop variable must be local")
Private Const ERR_048 As String = ("ME cannot be used in a static function")
Private Const ERR_049 As String = ("Missing &1")
Private Const ERR_050 As String = ("NEW cannot have arguments passed by reference")
Private Const ERR_051 As String = ("Non terminated string")
Private Const ERR_052 As String = ("Not enough argument to New()")
Private Const ERR_053 As String = ("Not enough arguments to &1()")
Private Const ERR_054 As String = ("Out of memory")
Private Const ERR_055 As String = ("Out of range")
Private Const ERR_056 As String = ("Return value datatype not specified in function declaration")
Private Const ERR_057 As String = ("SUPER cannot be used alone")
Private Const ERR_058 As String = ("Subroutine arguments cannot be passed by reference")
Private Const ERR_059 As String = ("Syntax error")
Private Const ERR_060 As String = ("Syntax error at function declaration")
Private Const ERR_061 As String = ("Syntax error in event name")
Private Const ERR_062 As String = ("Syntax error in file open mode")
Private Const ERR_063 As String = ("Syntax error in return type")
Private Const ERR_064 As String = ("Syntax error. &1 expected")
Private Const ERR_065 As String = ("Syntax error. '...' must be the last argument")
Private Const ERR_066 As String = ("Syntax error. Bad property type")
Private Const ERR_067 As String = ("Syntax error. CASE or DEFAULT expected after SELECT")
Private Const ERR_068 As String = ("Syntax error. CLASS needs an identifier")
Private Const ERR_069 As String = ("Syntax error. Cannot use this syntax in assignment")
Private Const ERR_070 As String = ("Syntax error. Duplicated array declaration")
Private Const ERR_071 As String = ("Syntax error. INHERITS needs a class name")
Private Const ERR_072 As String = ("Syntax error. Invalid identifier in function name")
Private Const ERR_073 As String = ("Syntax error. Invalid identifier in property name")
Private Const ERR_074 As String = ("Syntax error. Invalid optional parameter")
Private Const ERR_075 As String = ("Syntax error. Invalid return type")
Private Const ERR_076 As String = ("Syntax error. Invalid type description of &1 argument")
Private Const ERR_077 As String = ("Syntax error. Missing &1")
Private Const ERR_078 As String = ("Syntax error. Needless arguments")
Private Const ERR_079 As String = ("Syntax error. Point syntax used outside of WITH / END WITH")
Private Const ERR_080 As String = ("Syntax error. The &1 argument is not a valid identifier")
Private Const ERR_081 As String = ("Syntax error. VarPtr() takes only one identifier")
Private Const ERR_082 As String = ("The '!' operator must be followed by an identifier")
Private Const ERR_083 As String = ("The '.' operator must be followed by an identifier")
Private Const ERR_084 As String = ("The special method &1 cannot be a function")
Private Const ERR_085 As String = ("The special method &1 cannot be implemented")
Private Const ERR_086 As String = ("The special method &1 cannot be static")
Private Const ERR_087 As String = ("The special method &1 must be a function")
Private Const ERR_088 As String = ("The special method &1 must be public")
Private Const ERR_089 As String = ("The special method &1 must be static")
Private Const ERR_090 As String = ("The special method &1 must take a variable number of arguments only")
Private Const ERR_091 As String = ("The special method &1 must take at least one argument")
Private Const ERR_092 As String = ("The special method &1 takes no arguments")
Private Const ERR_093 As String = ("The special method must return an integer")
Private Const ERR_094 As String = ("The special method must take exactly one argument")
Private Const ERR_095 As String = ("The special method must take exactly two arguments")
Private Const ERR_096 As String = ("The special method signature is incorrect")
Private Const ERR_097 As String = ("This expression cannot be a statement")
Private Const ERR_098 As String = ("This expression cannot be passed by reference")
Private Const ERR_099 As String = ("Too many arguments")
Private Const ERR_100 As String = ("Too many arguments to &1()")
Private Const ERR_101 As String = ("Too many array declarations")
Private Const ERR_102 As String = ("Too many constants")
Private Const ERR_103 As String = ("Too many different classes used")
Private Const ERR_104 As String = ("Too many dimensions")
Private Const ERR_105 As String = ("Too many dynamic variables")
Private Const ERR_106 As String = ("Too many events")
Private Const ERR_107 As String = ("Too many expressions in CASE")
Private Const ERR_108 As String = ("Too many external functions")
Private Const ERR_109 As String = ("Too many functions")
Private Const ERR_110 As String = ("Too many nested control structures.")
Private Const ERR_111 As String = ("Too many static variables")
Private Const ERR_112 As String = ("Too many unknown symbols")
Private Const ERR_113 As String = ("Type mismatch")
Private Const ERR_114 As String = ("Unexpected &1")
Private Const ERR_115 As String = ("Unknown error")
Private Const ERR_116 As String = ("Unknown event")
Private Const ERR_117 As String = ("Unknown file extension")
Private Const ERR_118 As String = ("Unknown identifier: &1")
Private Const ERR_119 As String = ("Unknown operator")
Private Const ERR_120 As String = ("Useless LOCK")
Private Const ERR_121 As String = ("VarPtr() argument must be a dynamic, a static or a local variable")
Private Const ERR_122 As String = ("Write error")
'}

Public Sub Main()
  
  Dim aErr As New String[]
  Dim hFile As File
  Dim sDir As String
  Dim sFile As String
  Dim sLine As String
  Dim iPos, iPos2 As Integer
  Dim sGrep As String
  Dim iInd As Integer
  Dim sData As String
  Dim sPath As String
  
  sDir = "~/gambas/3.0/trunk/main/gbc"
  
  hFile = Open sDir &/ "gb_error.c"
  While Not Eof(hFile)
    Line Input #hFile, sLine
    If Trim(sLine) = "static const char *_message[] =" Then Break
  Wend
  
  Line Input #hFile, sLine
  Do
    Line Input #hFile, sLine
    iPos = InStr(sLine, Chr$(34))
    If iPos = 0 Then Break
    iPos2 = InStr(sLine, Chr$(34), iPos + 1)
    aErr.Add(Mid$(sLine, iPos + 1, iPos2 - iPos - 1))
  Loop
  
  Close #hFile
  
  Shell "cd " & Shell$(sDir) & "; grep -h \"THROW(\" *.c" To sGrep
  
  For Each sLine In Split(sGrep, "\n")
    sLine = Trim(sLine)
    If Left(sLine, 2) = "//" Then Continue
    iPos = InStr(sLine, Chr$(34))
    If iPos < 2 Then Continue
    If Mid$(sLine, iPos - 1, 1) <> "(" Then Continue
    iPos2 = InStr(sLine, Chr$(34), iPos + 1)
    sLine = Mid$(sLine, iPos + 1, iPos2 - iPos - 1)
    If Not sLine Then Continue
    If aErr.Exist(sLine) Then Continue
    aErr.Add(sLine)
  Next
  
  aErr.Sort
  
  For iInd = 0 To aErr.Max
    aErr[iInd] = "Private Const ERR_" & Format(iInd + 1, "000") & " As String = (" & Quote(aErr[iInd]) & ")"
    Print aErr[iInd]
  Next
  
  sPath = "~/gambas/3.0/trunk/app/src/gambas3/.src/MErrorMessage.module"
  sData = File.Load(sPath)
  iPos = InStr(sData, "\n'{\n")
  If iPos = 0 Then Return
  iPos2 = InStr(sData, "\n'}\n", iPos + 1)
  If iPos = 0 Then Return
  sData = Left(sData, iPos + 3) & aErr.Join("\n") & Mid$(sData, iPos2)
  File.Save(sPath, sData)
  
End

