' Gambas class file

Private $sPath As String

Private Sub GetCount(sName As String, sExt As String, Optional sSub As String) As String
  
  Dim sPath As String
  Dim iCount As Integer
  
  iCount = Project.GetCount(sExt)
  If sSub Then iCount -= Project.GetCount(sSub)
  Return Subst(("&1: &2"), sName, iCount) & "<br>"
  
End

Private Sub FormatPath(sPath As String) As String
  
  If sPath Begins System.User.Home & "/" Then   
    sPath = "~" &/ Mid$(sPath, Len(System.User.Home) + 2)
  Endif 
  
  Return sPath
  
End

Private Sub GetInfo(sPath As String)
  
  Dim sLink As String
  Dim sType As String
  Dim sSize As String
  Dim sTime As String
  Dim sInfo As String
  Dim iSize As Long
  Dim bLine As Boolean
  Dim sLine As Integer
  Dim sOutput As String
  Dim sName As String
  Dim hPict As Picture
  Dim sFile As String
  
  If Left(sPath) = "$" Then sPath = Project.Dir
  If Not sPath Then sPath = Project.Dir
 
  If sPath = Project.Dir Then
    lblName.Text = Project.Name
  Else
    lblName.Text = Project.ProjectTree.Current.Text
  Endif
  lblName.Adjust
  
  lblDir.Text = FormatPath(File.Dir(sPath))
  'lblDir.Pos = 0
  
  With Stat(sPath)
  
    If .Type = gb.Link Then 
      sLink = .Link
    Endif
  
  End With
    
  With Stat(sPath, True)
  
    If .Type = gb.Directory Then
      If sPath = Project.Dir Then 
        sType = ("Gambas project")
        sInfo = GetCount(("Modules"), "module")
        sInfo &= GetCount(("Classes"), "class", "form")
        sInfo &= GetCount(("Forms"), "form")
        sInfo &= Subst(("Lines of code: &1"), CStr(Project.GetLinesOfCode()))
      Else 
        sType = ("Directory")
      Endif
      iSize = 0
      For Each sFile In RDir(sPath)
        iSize += Stat(sPath &/ sFile).Size
      Next
    Else
      Select Case File.Ext(sPath)
        Case "module"
          sType = ("Module")
          bLine = True
          sInfo = "UTF-8 Gambas module file"
        Case "class"
          sType = ("Class")
          bLine = True
          sInfo = "UTF-8 Gambas class file"
        Case "form"
          sType = ("Form")
          bLine = True
          sInfo = "UTF-8 Gambas form file"
        Case "png", "jpg", "gif", "jpeg", "svg"
          sType = ("Picture")
        Case "txt"
          sType = ("Text file")
          bLine = True
        Case "htm", "html"
          sType = ("HTML file")
          bLine = True
        Case "css"
          sType = ("CSS file")
          bLine = True
        Case "xml"
          sType = ("XML file")
          bLine = True
        Case Else 
          If UCase(File.Name(sPath)) = "CHANGELOG" Then
            sType = ("ChangeLog")
            bLine = True
          Else
            sType = ("File")
          Endif
      End Select
  
      iSize = .Size
      If Not sInfo Then 
        If sLink Then 
          sInfo = sLink
          If Left(sInfo) <> "/" Then sInfo = File.Dir(sPath) &/ sLink
        Else 
          sInfo = sPath
        Endif
        Shell "file -b " & Shell$(sInfo) To sInfo
      Endif
      
    Endif 
    
    If bLine Then 
      Shell "wc -l " & Shell$(sPath) To sOutput
      Try sLine = Split(sOutput, " ")[0]
    Endif
    If sLine Then
      sSize = Subst(("&1, &2 line(s)"), Project.GetFileSize(iSize), sLine)
    Else
      sSize = Project.GetFileSize(iSize)
    Endif

    If sLink Then 
      If sLink Begins Project.Dir &/ "/" Then 
        sLink = Mid$(sLink, Len(Project.Dir) + 2)
      Endif
      If sLink Begins System.User.Home &/ "/" Then 
        sLink = "~" &/ Mid$(sLink, Len(System.User.Home) + 1)
      Endif
    Endif

    sTime = Str(.LastModified)

  End With 

  If sPath = Project.Dir Then 
    hPict = Project.GetIcon(Project.Dir, 32)
  Else 
    hPict = Project.GetFileIcon(sPath, 32)
  Endif
  
  picInfo.Picture = hPict
  picInfo.Resize(hPict.Width, hPict.Height)
  panInfo.Height = Max(lblName.Height, hPict.Height) + panInfo.Padding * 2 + 4
  picInfo.Show
  
Finally 

  lblLink.Text = FormatPath(sLink)
  lblLink.Visible = sLink
  lblLinkLabel.Visible = sLink
  'lblLink.Pos = 0
  lblType.Text = sType
  'lblType.Parent.Visible = sType
  lblSize.Text = sSize
  'lblSize.Parent.Visible = sSize
  lblTime.Text = sTime
  'lblTime.Parent.Visible = sTime
  lblInfo.Text = sInfo
  'lblInfo.Parent.Visible = sInfo
  
Catch

  lblInfo.Text = "ERROR: " & Error.Text & "\n" & sPath
  lblInfo.Parent.Show
  
End

Public Sub Run(sKey As String)

  $sPath = sKey
  GetInfo(sKey)
  Me.ShowDialog
  
End

Public Sub btnClose_Click()

  Me.Close

End

Public Sub ShowInfo(sPath As String)
  
  GetInfo(sPath)
  'panButton.Hide
  
End

Public Sub Form_Open()

  tabInfo[1].Visible = VersionControl.Enabled() And Not IsDir($sPath)
  tabInfo.Index = 0
  edtChange.Clear
  FTextEditor.ReadConfigEditor(edtChange)

End

Public Sub tabInfo_Click()

  Dim sDiff As String

  If tabInfo.Index = 1 Then
    If edtChange.Length = 0 Then
      edtChange.Font = Font[Settings["/Editor/Font", Project.DEFAULT_FONT]]
      sDiff = VersionControl.Diff($sPath)
      If Project.IsFormPath($sPath) Then
        sDiff &= "\n" & VersionControl.Diff(File.SetExt($sPath, "class"))
      Endif
      sDiff = Trim(sDiff)
      If sDiff Then
        edtChange.Text = sDiff
        edtChange.Show
        lblVersioning.Hide
      Else
        edtChange.Hide
        If Project.IsLocked($sPath) Then
          lblVersioning.Text = ("This file is locked, and will be deleted on the next commit.")
        Else If Project.IsAdded($sPath) Then
          lblVersioning.Text = ("This file is not versioned, and must be added to the repository.")
        Else
          lblVersioning.Text = ("This file has not been modified since the last commit.")
        Endif
        lblVersioning.Show
      Endif
    Endif
  Endif

End
