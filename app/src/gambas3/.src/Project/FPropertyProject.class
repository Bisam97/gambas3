' Gambas class file

Static Private $bShowUsed As Boolean
Static Private $bShowBeta As Boolean

Private $cCheckBox As New Collection

Private $hCheck As Picture
Private $hUncheck As Picture

Private $sLibName As String

'PRIVATE $hProcess AS Process
Private $sTemp As String
Private $sIcon As String

Private $bCanInitComponents As Boolean
'PRIVATE $bLibModify AS Boolean

Private $iRow As Integer
Private $iCol As Integer

Private $aArg As String[]
Private $aEnv As String[]

Private $cComp As New Collection
Private $hLastComp As CComponentBox
Private $bLockComp As Boolean
Private $sVerCtrlStatus As String
Private $sVerCtrlDiff As String

Private $aLibraries As String[]

Private $iDoNotRefreshComponent As Integer

'Private Const LIBRARY_TAB As Integer = 2
Private Const VERSION_TAB As Integer = 5

Static Public Function Run() As Boolean

  Return Not FPropertyProject.ShowModal()

End

Public Sub Form_Open()

  Dim sClass As String
  Dim sLib As String
  Dim sLang As String

  Me.Title = ("Project properties") & " - " & Project.Name

  ' lblName.Text = Project.Name
  ' lblPath.Text = File.Dir(Project.Dir)
  ' lblPath.Tooltip = File.Dir(Project.Dir)
  txtName.Text = "<font size=\"+2\"><b>" & Project.Name & "</b></font><br>" & File.Dir(Project.Dir)

  'cmbStackSize.List = [("(Default)"), "1 K", "2 K", "4 K", "8 K", "16 K", "32 K", "64 K"]
  
  'cmbComponent_Click

  With Project

    txtTitle.Text = .Title
    txtDesc.Text = .Description
    txtAuthor.Text = .Authors
    cmbControlPublic.Index = If(.ControlPublic, 0, 1)
    cmbModulePublic.Index = If(.ModulePublic, 0, 1)
    txtMajor.Value = .MajorVersion
    txtMinor.Value = .MinorVersion
    txtRelease.Value = .ReleaseVersion
    cmbTranslate.Index = If(.Localize, 0, 1)
    cmbType.Index = .Type
    ' Select Case .Type
    '   Case .TYPE_NORMAL
    '     radTypeNormal.Value = True
    '   Case .TYPE_LIBRARY
    '     radTypeLibrary.Value = True
    '   Case .TYPE_COMPONENT
    '     radTypeComponent.Value = True
    ' End Select
    $sIcon = .Icon
    UpdateIcon
    txtTabSize.Value = .TabSize
    'cmbStackSize.Index = 0
    'If .Stack Then cmbStackSize.Text = .Stack & " K"
    'cmbStackTrace.Index = If(.StackTrace, 0, 1)
    chkGetVersionFromFile.Value = .VersionFile
    'chkVersion.Value = NOT IsNull(.VersionProgram)
    cmbTerminal.Index = If(.UseTerminal, 0, 1)
    cmbProfile.Index = If(.Profiling, 0, 1)
    $aLibraries = .Libraries.Copy()

  End With
  
  $hCheck = Picture["img/16/checked.png"]
  $hUncheck = Picture["img/16/unchecked.png"]

  chkShowUsed.Value = $bShowUsed
  'chkShowBeta.Value = $bShowBeta
  $bCanInitComponents = True

  tabProject[VERSION_TAB].Visible = VersionControl.Enabled()
  If tabProject[VERSION_TAB].Visible Then
    edtDiff.ReadConfig
  Endif
  tabProject.Index = 0

  RefreshComponents
  RefreshLibraries
  InitEnvironment

  btnOK.Enabled = Not Project.ReadOnly And Not Project.Running
  tabProject[VERSION_TAB].Enabled = btnOK.Enabled

  cmbDefaultLanguage.Clear
  cmbDefaultLanguage.Add(("Not translatable"))
  For Each sLang In Language.GetAll()
    cmbDefaultLanguage.Add(Language.ToName(sLang))
  Next
  
  cmbTranslate_Click
  
End

Private Sub InitEnvironment()
  
  $aArg = Project.Arguments.Copy()
  $aEnv = Project.Environment.Copy()

  tvwArg.Rows.Count = $aArg.Count
  tvwArg.Rows.Resizable = False
  tvwArg.Columns.Count = 1
  tvwArg.Columns.Resizable = True
  'tvwArg.Columns[0].Text = ("Argument")
    
  tvwEnv.Rows.Count = $aEnv.Count
  tvwEnv.Rows.Resizable = False
  tvwEnv.Columns.Count = 2
  tvwEnv.Columns[0].Text = ("Variable")
  tvwEnv.Columns[0].Width = -1
  tvwEnv.Columns[0].Width = Max(tvwEnv.Columns[0].Width, Desktop.Scale * 20)
  tvwEnv.Columns[1].Text = ("Value")
  
End

Private Sub SaveEnvironment()
  
  Dim iInd As Integer
  
  tvwArg.Save
  tvwEnv.Save
  
  While iInd < $aEnv.Count
    If Not Trim(Scan($aEnv[iInd], "*=*")[0]) Then 
      $aEnv.Remove(iInd)
    Else 
      Inc iInd
    Endif
  Wend

  Project.Arguments = $aArg
  Project.Environment = $aEnv
  
End

Public Sub btnCancel_Click()

  Me.Close

End


Private Function DoApply() As Boolean

  Dim bCheck As Boolean
  Dim vVal As Variant
  Dim bRefreshForm As Boolean
  Dim bRefreshEditor As Boolean
  Dim hFile As Object

'   IF chkSnap.Value THEN
'
'     vVal = Val(txtGrid.Text)
'     IF NOT IsInteger(vVal) THEN vVal = 0
'     IF vVal < 2 OR vVal > 64 THEN
'       txtGrid.SetFocus
'       GOTO BAD_GRID
'     ENDIF
'
'   ENDIF

  If CheckComponentConfig() Then Return True

  With Project

    .Title = Trim(txtTitle.Text)
    .Description = Trim(txtDesc.Text)
    .Authors = Trim(txtAuthor.Text)
    .Icon = $sIcon
    'If cmbStackSize.Index = 0 Then 
    '  .Stack = 0
    'Else
    '  .Stack = Val(Left(cmbStackSize.Text, -1))
    'Endif
    '.StackTrace = cmbStackTrace.Index = 0
    .UseTerminal = cmbTerminal.Index = 0

    If .ControlPublic <> (cmbControlPublic.Index = 0) Or If .ModulePublic <> (cmbModulePublic.Index = 0) Then
      Project.ResetScan
      Project.DeleteCompiledFiles
    Endif

    .ControlPublic = cmbControlPublic.Index = 0
    .ModulePublic = cmbModulePublic.Index = 0
    .MajorVersion = txtMajor.Value
    .MinorVersion = txtMinor.Value
    .ReleaseVersion = txtRelease.Value
    .VersionFile = chkGetVersionFromFile.Value
    '.SnapToGrid = chkSnap.Value

    'IF chkShowGrid.Value <> .ShowGrid OR .Snap <> txtGrid.Value THEN
    '  bRefreshForm = TRUE
    'ENDIF

    '.ShowGrid = chkShowGrid.Value
    '.Snap = txtGrid.Value
    If cmbTranslate.Index = 0 And Not .Localize Then
      Project.DeleteCompiledFiles()
    Endif
    .Localize = cmbTranslate.Index = 0
    If .Localize Then
      .Language = Language.FromName(cmbDefaultLanguage.Text)
    Else 
      .Language = ""
    Endif
    
    .Type = cmbType.Index
    ' If radTypeNormal.Value Then
    '   .Type = .TYPE_NORMAL
    ' Else If radTypeLibrary.Value Then
    '   .Type = .TYPE_LIBRARY
    ' Else If radTypeComponent.Value Then
    '   .Type = .TYPE_COMPONENT
    ' Endif

    If .TabSize <> txtTabSize.Value Then
      bRefreshEditor = True
    Endif

    .TabSize = txtTabSize.Value
    
    .Libraries = $aLibraries

  End With

  SaveComponents
  SaveEnvironment

  Project.WriteProject
  If Project.Type <> Project.TYPE_NORMAL Then FPropertyComponent.UpdateComponent
  Project.MakeDirectoryIcon
  Project.Compile

  Project.RefreshRoot
  If bRefreshForm Then Project.RefreshForm
  If bRefreshEditor Then Project.RefreshEditor
  
  Project.SetMessage(("OK"))

  Return

BAD_GRID:

  Message.Error(("Snapping value is incorrect."))
  Return True

End


Public Sub btnOK_Click()

  If DoApply() Then Return
  
  Me.Close(True)

End


Private Sub SaveComponents()

  Dim sLib As String
  Dim bCheck As Boolean
  Dim hComp As CComponent

  Project.Components.Clear

  For Each hComp In CComponent.All

    sLib = CComponent.All.Key
    bCheck = False

    Try bCheck = $cComp[sLib].Value

    If bCheck Then
      If sLib <> "gb" Then Project.Components.Add(sLib)
    Endif

  Next

  Project.Components.Sort

  Project.RefreshComponents

End


' PRIVATE FUNCTION CountChr(sStr AS String, sChr AS String) AS Integer
'
'   DIM iPos AS Integer
'   DIM iCpt AS Integer
'
'   DO
'
'     iPos = Instr(sStr, sChr, iPos + 1)
'     IF iPos = 0 THEN RETURN iCpt
'
'     iCpt = iCpt + 1
'
'   LOOP
'
' END

Private Sub GetRequire(sComp As String) As String[]
  
  Dim hComp As CComponent = CComponent.All[sComp]
  
  Return hComp.Require
  
End


Private Sub RefreshComponents()

  Dim sLib As String
  Dim sDep As String
  Dim hComp As CComponent
  Dim hSep As Label
  Dim aRemove As New String[]
  Dim sParent As String
  Dim hCompBox As CComponentBox
  Dim aComp As New String[]
  Dim bDark As Boolean
  Dim hOld As ListContainer
  Dim iUser As Integer
  Dim hLibInfo As CLibraryInfo
  Dim aNotFound As New String[]

  If $iDoNotRefreshComponent Then Return

  'If Not $bCanInitLibrary Then Return

  lstComponent.Clear
  
  $cComp.Clear
  $hLastComp = Null
  
  For Each hComp In CComponent.All
    If hComp.Library Then Continue
    If hComp.Key = CComponent.PROJECT_NAME Then Continue
    aComp.Add(hComp.Key)
  Next 
  aComp.Sort
  
  lstComponent.Lock
  CComponentBox.Reset

  For Each sLib In aComp
    hComp = CComponent.All[sLib]
    If hComp.Hidden Then Continue
    'If $bShowUsed Then
    '  If sLib <> "gb" And If Not Project.Components.Exist(hComp.Key) Then Continue
    'Endif
    hCompBox = New CComponentBox(lstComponent, hComp, bDark) As "Component"
    'bDark = Not bDark
    $cComp[hComp.Key] = hCompBox 
    hCompBox.Locked = sLib = "gb" Or $bShowUsed
  Next
  
  For Each sLib In Project.Components
    $cComp[sLib].Check("")
    For Each sDep In GetRequire(sLib)
      If Not $cComp.Exist(sDep) Then
        aNotFound.Add(sDep)
      Else
        $cComp[sDep].Check(sLib)
      Endif
    Next
  Next
  
  For Each sLib In $aLibraries
    hLibInfo = CLibraryInfo[sLib]
    For Each sDep In hLibInfo.Require
      If Not $cComp.Exist(sDep) Then
        aNotFound.Add(sDep)
      Else
        $cComp[sDep].Check(sLib)
      Endif
    Next
  Next
  
  $cComp["gb"].Check("") 
  
  If $bShowUsed Then
    For Each hCompBox In lstComponent.Children
      If Not hCompBox.Value Then hCompBox.Hide
    Next
  Endif
  
  CComponentBox.ResizeNames(lstComponent)
  
  lstComponent.Unlock

  If aNotFound.Count Then
    Message.Warning(Subst(("Some components are missing: &1"), aNotFound.Join(", ")))
  Endif

  'IF hOld THEN hOld.Delete

End


Private Function IsChecked(sKey As String) As Boolean
  
  Try Return $cComp[sKey].Value
  
End

Private Sub CheckComponentConfig() As Boolean
  
  Dim aComp As New String[]
  Dim hComp As CComponent
  Dim sComp As String
  Dim aExclude As String[]
  Dim aNeed As String[]
  Dim sImpl As String
  Dim sExcl As String
  Dim sNeed As String
  Dim bFound As Boolean

  If $bShowUsed Then Return
  
  ' Makes the list of all checked components
  
  For Each hComp In CComponent.All
    If IsChecked(hComp.Key) Then aComp.Add(hComp.Key)
  Next
  
  For Each sComp In aComp
  
    aNeed = New String[]
    aExclude = New String[]

    For Each sImpl In CComponent.All[sComp].Implement
    
      For Each hComp In CComponent.All
      
        If hComp.Key = sComp Then Continue
        If hComp.Implement.Find(sImpl) >= 0 Then
          If Not aComp.Exist(hComp.Key) Then Continue
          If aExclude.Find(hComp.Key) < 0 Then aExclude.Add(hComp.Key)
        Endif
      
      Next
    
    Next

    For Each sExcl In CComponent.All[sComp].Exclude
      If Not aComp.Find(sExcl) Then Continue
      If Not aExclude.Exist(sExcl) Then aExclude.Add(sExcl)
    Next
    
    ' IF aExclude.Count = 1 THEN
    '   Message.Warning(Subst(("The &2 component is incompatible with the &1 component."), "<b>" & sComp & "</b>", "<b>" & aExclude[0] & "</b>"))
    '   RETURN TRUE
    ' ELSE IF aExclude.Count > 1 THEN
    '   Message.Warning(Subst(("These components are incompatible with the &1 component:\n&2"), "<b>" & sComp & "</b>", "<b>" & aExclude.Join("</b>, <b>") & "</b>"))
    '   RETURN TRUE
    ' ENDIF

    If aExclude.Count Then
      Message.Warning(Subst(("These components are incompatible:<br>&1."), "<b>" & sComp & "</b>, <b>" & aExclude.Join("</b>, <b>") & "</b>"))
      Return True
    Endif

    For Each sNeed In CComponent.All[sComp].Need
      bFound = False
      For Each hComp In CComponent.All
        If hComp.Implement.Exist(sNeed) Then
          If Not aNeed.Exist(hComp.Key) Then aNeed.Add(hComp.Key)
          If aComp.Exist(hComp.Key) Then bFound = True
        Endif
      Next
      If Not bFound Then
        Message.Warning(Subst(("The &1 component needs one of the following components:<br>&2."), "<b>" & sComp & "</b>", "<b>" & aNeed.Join("</b>, <b>") & "</b>"))
        Return True
      Endif 
    Next
      
    For Each sNeed In CComponent.All[sComp].Require
      If Not aComp.Exist(sNeed) Then 
        Message.Warning(Subst(("The &1 component needs the &2 component."), "<b>" & sComp & "</b>", "<b>" & sNeed & "</b>"))
        Return True
      Endif
    Next
  
  Next  
  
End


' Private Function CheckComponent(sKey As String, bCheck As Boolean) As Boolean
' 
'   Dim bBefore As Boolean
'   Dim sDep As String
' 
'   bBefore = IsChecked(sKey)
'   If bBefore = bCheck Then Return 
' 
'   If bCheck Then
'     $cComp[sKey].Check("")
'     For Each sDep In GetRequire(sKey)
'       $cComp[sDep].Check(sKey)
'     Next
'   Else
'     $cComp[sKey].Uncheck("")
'   Endif
'   
' End

Public Sub Component_Click()
  
  Dim hCompBox As CComponentBox = Last
  Dim sDep As String
  
  For Each sDep In GetRequire(hCompBox.Key)
    If hCompBox.Value Then
      $cComp[sDep].Check(hCompBox.Key)
    Else
      $cComp[sDep].Uncheck(hCompBox.Key)
    Endif
  Next

End


' PRIVATE FUNCTION CheckComponent(sKey AS String, bCheck AS Boolean) AS Boolean
' 
'   DIM hComp AS CComponent
'   DIM sComp AS String
'   DIM aExclude AS NEW String[]
'   DIM aNeed AS NEW String[]
'   DIM sImpl AS String
'   DIM sNeed AS String
'   DIM bFound AS Boolean
' 
'   WITH cvwComponent
' 
'     IF NOT .Available THEN RETURN
' 
'     IF bCheck THEN
' 
'       FOR EACH sImpl IN CComponent.All[sKey].Implement
'       
'         FOR EACH hComp IN CComponent.All
'         
'           IF hComp.Key = sKey THEN CONTINUE
'           IF hComp.Implement.Find(sImpl) >= 0 THEN
'             IF NOT IsChecked(hComp.Key) THEN CONTINUE
'             IF aExclude.Find(hComp.Key) < 0 THEN aExclude.Add(hComp.Key)
'           ENDIF
'         
'         NEXT
'       
'       NEXT
' 
'       FOR EACH sComp IN CComponent.All[sKey].Exclude
'         IF NOT IsChecked(sComp) THEN CONTINUE
'         IF aExclude.Find(sComp) < 0 THEN aExclude.Add(sComp)
'       NEXT
'       
'       IF aExclude.Count = 1 THEN
'         IF Message.Warning(Subst(("The &2 component is incompatible with &1 component.\nIt will be disabled."), sKey, aExclude[0]), ("Continue"), ("Cancel")) = 2 THEN RETURN TRUE
'       ELSE IF aExclude.Count > 1 THEN
'         IF Message.Warning(Subst(("These components are incompatible with &1 component:\n&2\n\nThey will be disabled."), sKey, aExclude.Join(", ")), ("Continue"), ("Cancel")) = 2 THEN RETURN TRUE
'       ENDIF
' 
'       FOR EACH sNeed IN CComponent.All[sKey].Need
'         bFound = FALSE
'         FOR EACH hComp IN CComponent.All
'           IF hComp.Implement.Find(sNeed) >= 0 THEN
'             aNeed.Add(hComp.Key)
'             IF IsChecked(hComp.Key) THEN bFound = TRUE
'           ENDIF
'         NEXT
'         IF NOT bFound THEN
'           Message.Warning(Subst(("The &1 component needs one of the following components:\n&2."), sKey, aNeed.Join(", ")))
'           RETURN TRUE
'         ENDIF 
'       NEXT
'       
'       FOR EACH sComp IN aExclude
'         IF CheckComponent(sComp, FALSE) THEN RETURN TRUE
'       NEXT
' 
'       FOR EACH sComp IN CComponent.All[sKey].Require
'         IF CheckComponent(sComp, TRUE) THEN RETURN TRUE
'       NEXT
' 
'       .MoveTo(sKey)
'       .Item.Picture = $hCheck
' 
'     ELSE
' 
'       .MoveTo(sKey)
'       .Item.Picture = $hUncheck
' 
'       FOR EACH hComp IN CComponent.All
'         IF hComp.Require.Find(sKey) < 0 THEN CONTINUE
'         CheckComponent(hComp.Key, FALSE)
'       NEXT
' 
'     ENDIF
' 
'   END WITH
' 
' END


Public Sub chkShowUsed_Click()

  $bShowUsed = chkShowUsed.Value
  RefreshComponents

End


' PRIVATE SUB FillLibrary(sLib AS String)
' 
'   DIM sText AS String
' 
'   WITH CComponent.All[sLib]
' 
'     sText = "<h2>" & sLib & "</h2>" & .Name & "<p>"
' 
'     IF .Alpha THEN
'       sText = sText & "<table bgcolor=#43C7FF cellspacing=0 cellpadding=2><tr><td><img src=\"img/32/warning.png\"></td><td>" & ("WARNING! This component is in BETA version.") & " " &
'         ("It is under development and may change without notice.") & "</td></tr></table><br>"
'     ELSE
'       'sText = sText & "<p>"
'     ENDIF
' 
'     sText = sText & "<b>" & ("Authors:") & "</b> " & .Authors.Join(", ")
' 
'     IF .Controls THEN
'       IF .Controls.Count THEN
'         sText = sText & "<p><b>" & ("Controls:") & "</b> " & .Controls.Join(", ")
'       ENDIF
'     ENDIF
' 
'     txtComponent.Text = sText
' 
'   END WITH
' 
' END

' PUBLIC SUB clvLibrary_Select()
' 
'   FillLibrary(clvLibrary.Key)
'   'lblLibrary.Visible = TRUE
'   'clvLibrary.Height = 200
'   'clvLibrary.Current.EnsureVisible
' 
' END


Public Sub btnIcon_Click()

  Dim sIcon As String
  Dim hImage As Image
  Dim hBackground As Image

  sIcon = FSelectIcon.Run($sIcon, True)
  If Not sIcon Then Return

  $sIcon = sIcon
  UpdateIcon
  
End

' Public Sub chkShowBeta_Click()
' 
'   $bShowBeta = chkShowBeta.Value
'   RefreshComponents
' 
' End

Private Sub AboutComponent()
  
  Dim hCompBox As CComponentBox
  Dim sKey As String
  
  hCompBox = CComponentBox(lstComponent.Current)
  Try sKey = hCompBox.Key
  If Not sKey Then Return 
  'MHelp.GotoComponent(sKey)
  MHelp.InitWebViewWith(webAboutComponent, MHelp.TYPE_COMPONENT, sKey)
  
End


Public Sub btnHelp_Click()

  If panAboutComponent.Visible Then
    
    panAboutComponent.Hide
    btnHelp.Picture = Picture["icon:/small/up"]
  
  Else
  
    AboutComponent
    panAboutComponent.Show
    lstComponent.EnsureVisible
    btnHelp.Picture = Picture["icon:/small/down"]
    
  Endif

End


' Public Sub cmbComponent_Click()
' 
'   Dim bComp As Boolean = cmbComponent.Index = 0
' 
'   If bComp Then InitRequires
' 
'   tabProject[REQUIRES_TAB].Visible = bComp
'   'tabProject[COMPONENT_TAB + 1].Visible = bComp
'   cmbComponentState.Enabled = bComp
' 
' End

' Private Sub GetParent(sPath As String) As String
'   
'   Dim hFile As File
'   Dim sLine As String
'   Dim sParent As String
'   
'   hFile = Open sPath
'   While Not Eof(hFile)
'     Line Input #hFile, sLine
'     sLine = Trim(sLine)
'     If Not sLine Then Continue
'     If Left(sLine) = "'" Then Continue
'     If sLine Like "INHERITS *" Then 
'       Try sParent = Trim(Scan(sLine, "INHERITS *")[0])
'       Return sParent
'     Endif
'     If sLine Like "EXPORT" Then Continue
'     If sLine Like "CREATE" Then Continue
'     If sLine Like "EXPORT *" Then Continue
'     If sLine Like "CREATE *" Then Continue
'     Break
'   Wend 
'   
' End





' PUBLIC SUB cmbRequire_Click()
' 
'   btnAdd_Click
' 
' END


' PUBLIC SUB chkVersion_Click()
' 
'   txtVersionProg.Enabled = chkVersion.Value
'   TRY txtVersionProg.SetFocus  
' 
' END
' 
Public Sub tabProject_Click()

  If tabProject.Index = VERSION_TAB Then 
    If VersionControl.Enabled() Then 
      Inc Application.Busy
      $sVerCtrlStatus = VersionControl.Status()
      $sVerCtrlDiff = VersionControl.Diff(Project.Dir)
      If $sVerCtrlStatus Then
        edtDiff.Text = String$(76, "=") & "\n" & $sVerCtrlStatus & String$(76, "=") & "\n\n" & $sVerCtrlDiff
        edtDiff.Show
        sepCommit.Show
        lblDiff.Text = ("Changes since last commit")
        lblDiff.Font.Italic = False
        lblDiff.Font.Bold = True
        lblDiff.Expand = False
        'lblNoDiff.Hide
      Else
        edtDiff.Hide
        sepCommit.Hide
        lblDiff.Text = ("There is no change to commit.")
        lblDiff.Font.Italic = True
        lblDiff.Font.Bold = False
        lblDiff.Expand = True
        'lblNoDiff.Show
      Endif
      lblDiff.Padding = Desktop.Scale
      btnCommit.Enabled = Len($sVerCtrlStatus)
      btnRevert.Enabled = btnCommit.Enabled
      Dec Application.Busy
    Endif
  'ELSE IF tabProject.Index = LIBRARY_TAB THEN 
  '  IF NOT lstComponent THEN InitLibrary
  Endif   

End

Public Sub btnCommit_Click()

  If FCommit.Run($sVerCtrlStatus, $sVerCtrlDiff) Then Return
  tabProject_Click
  
End

Public Sub btnUpdate_Click()

  Dim bErr As Boolean

  Inc Application.Busy
  bErr = VersionControl.Update()
  Project.Refresh
  Dec Application.Busy
  tabProject_Click

  If bErr Then  
    Message.Error(("Unable to update project from repository."))
  Else
    Message.Info(("Project has been updated from repository successfully."))
  Endif
    
End

Public Sub btnRevert_Click()

  If Message.Warning(("You are going to cancel your changes!"), ("Continue"), ("Cancel")) = 2 Then Return

  Inc Application.Busy
  
  VersionControl.Revert
  Project.Refresh
  Project.ReloadAll
  
  Dec Application.Busy
  tabProject_Click  

End

' PUBLIC SUB btnSwap_Click()
' 
'   IF IsChecked("gb.qt") THEN 
'     cvwComponent["gb.qt"].Picture = $hUncheck
'     cvwComponent["gb.gtk"].Picture = $hCheck
'   ELSE IF IsChecked("gb.gtk") THEN 
'     cvwComponent["gb.gtk"].Picture = $hUncheck
'     cvwComponent["gb.qt"].Picture = $hCheck
'   ENDIF
' 
' END

Public Sub btnUndo_Click()

  RefreshComponents

End

Public Sub tvwArg_Data(Row As Integer, Column As Integer)

  tvwArg.Data.Text = $aArg[Row]  

End

Public Sub btnInsertArg_Click()

  If $aArg.Count >= 255 Then Return
  $aArg.Add("")
  Inc tvwArg.Rows.Count
  tvwArg.MoveTo($aArg.Max, 0)
  tvwArg.Edit  

End

Public Sub btnRemoveArg_Click()
  
  If $aArg.Count = 0 Then Return
  If tvwArg.Row < 0 Then Return
  tvwArg.Save
  $aArg.Remove(tvwArg.Row)
  Dec tvwArg.Rows.Count
  tvwArg.Refresh
  tvwArg.Edit
  
End


Public Sub tvwArg_Save(Row As Integer, Column As Integer, Value As String)

  $aArg[Row] = Value  

End

Public Sub tvwArg_Insert()
  
  btnInsertArg_Click
  
End


Public Sub tvwArg_Click()

  tvwArg.Edit  

End

Public Sub btnMoveUpArg_Click()

  If tvwArg.Row <= 0 Then Return 
  tvwArg.Save
  Swap $aArg[tvwArg.Row], $aArg[tvwArg.Row - 1]
  tvwArg.Refresh
  Dec tvwArg.Row
  tvwArg.Edit  

End

Public Sub btnMoveDownArg_Click()

  If tvwArg.Row >= (tvwArg.Rows.Count - 1) Then Return 
  tvwArg.Save
  Swap $aArg[tvwArg.Row], $aArg[tvwArg.Row + 1]
  tvwArg.Refresh
  Inc tvwArg.Row
  tvwArg.Edit

End

Public Sub tvwEnv_Click()

  tvwEnv.Edit

End

Public Sub tvwEnv_Data(Row As Integer, Column As Integer)

  Dim aEnv As String[] = Scan($aEnv[Row], "*=*")
  
  Try tvwEnv.Data.Text = aEnv[Column]
  
Catch

End

Public Sub tvwEnv_Save(Row As Integer, Column As Integer, Value As String)

  Dim aEnv As String[] = Scan($aEnv[Row], "*=*")
  
  If Column = 0 Then 
    $aEnv[Row] = Trim(Value) & "=" & aEnv[1]
    tvwEnv.Columns[0].Width = -1
  Else 
    $aEnv[Row] = aEnv[0] & "=" & Value
  Endif
  
End

Public Sub tvwEnv_Insert()
  
  If Key.Normal Then
    btnOK.Value = True
  Else If Key.Control Then 
    btnInsertEnv_Click
  Endif
  
End

Public Sub btnInsertEnv_Click()

  If $aEnv.Count >= 255 Then Return
  $aEnv.Add("=")
  Inc tvwEnv.Rows.Count
  tvwEnv.MoveTo($aEnv.Max, 0)
  tvwEnv.Edit      

End

Public Sub mnuInsertEnv_Click()
  
  Dim sNewEnv As String = Last.Tag
  Dim iInd As Integer
  Dim aNewEnv As String[]
  Dim aEnv As String[]
  
  For Each sNewEnv In Split(sNewEnv)
  
    aNewEnv = Scan(sNewEnv, "*=*")
    For iInd = 0 To $aEnv.Max
      aEnv = Scan($aEnv[iInd], "*=*")
      If aEnv[0] = aNewEnv[0] Then
        aEnv[1] = aNewEnv[1]
        $aEnv[iInd] = aEnv[0] & "=" & aEnv[1]
        tvwEnv.Refresh
        sNewEnv = ""
        Break
      Endif
    Next
  
    If sNewEnv Then
      $aEnv.Add(sNewEnv)
      Inc tvwEnv.Rows.Count
    Endif
    
  Next
  
End


Public Sub btnRemoveEnv_Click()
  
  If $aEnv.Count = 0 Then Return
  If tvwEnv.Row < 0 Then Return
  tvwEnv.Save
  $aEnv.Remove(tvwEnv.Row)
  Dec tvwEnv.Rows.Count
  tvwEnv.Refresh
  
End


Public Sub cvwComponent_Collapse()

  Last.Item.Expanded = True

End


' Public Sub lstComponent_Click()
' 
'   Dim hCurrent As CComponentBox = lstComponent.Current
'   If $hLastComp Then $hLastComp.Expanded = False
'   $hLastComp = hCurrent
'   
'   If $hLastComp.Find(Mouse.ScreenX - $hLastComp.ScreenX, Mouse.ScreenY - $hLastComp.ScreenY) Is PictureBox Then Return
'   
'   $hLastComp.Expanded = True
'     
' End

Public Sub lstComponent_Activate()

  Dim hCurrent As CComponentBox = lstComponent.Current
  
  If hCurrent.Find(Mouse.ScreenX - hCurrent.ScreenX, Mouse.ScreenY - hCurrent.ScreenY) Is PictureBox Then Return
  'lstComponent.Lock
  hCurrent.Expanded = Not hCurrent.Expanded
  'lstComponent.Unlock
  lstComponent.EnsureVisible
    
End

Public Sub cmbTranslate_Click()

  If cmbTranslate.Index = 0 Then 
    cmbDefaultLanguage.Enabled = True
    cmbDefaultLanguage.Text = Language.ToName(System.Language)
    Try cmbDefaultLanguage.Text = Language.ToName(Project.Language)
  Else 
    cmbDefaultLanguage.Index = 0
    cmbDefaultLanguage.Enabled = False
  Endif

End

Private Sub UpdateIcon()
  
  btnIcon.Picture = Project.StretchIcon(Project.Dir &/ $sIcon, btnIcon.Width - 16).Picture
  btnIcon.ToolTip = $sIcon
  
End

Public Sub lstComponent_Click()

  If panAboutComponent.Visible Then AboutComponent

End

Public Sub btnInsertLib_Click()

  Dim hLib As CLibraryInfo
  Dim sPath As String

  Dialog.Title = ("Select a Gambas application")
  Dialog.Filter = ["*.gambas", ("Gambas applications")]
  Dialog.Path = Settings["/FPropertyProject/Library"]

  If Dialog.OpenFile() Then Return
  
  sPath = Dialog.Path

  Settings["/FPropertyProject/Library"] = File.Dir(sPath)

  If $aLibraries.Exist(sPath) Then
    Message.Warning(Subst(("<b>&1</b> is already used as a library."), File.Name(sPath)))
    Return
  Endif
  
  hLib = CLibraryInfo[sPath]
  If hLib.Classes.Count = 0 Then
    Message.Warning(Subst(("<b>&1</b> does not export any class."), File.Name(sPath)))
    Return
  Endif
  
  $aLibraries.Add(sPath)
  
  Project.UpdateLibraries($aLibraries)
  RefreshLibraries
  RefreshComponents

End

Private Sub RefreshLibraries()
  
  Dim sPath As String
  Dim hLib As LibraryItem
  Dim hSep As Separator
  
  If $iDoNotRefreshComponent Then Return
  
  lstLibraries.Lock
  lstLibraries.Clear
  
  For Each sPath In $aLibraries
    hLib = New LibraryItem(lstLibraries)
    hLib.Path = sPath
    hSep = New Separator(lstLibraries)
    hSep.H = 4
  Next
  
  lstLibraries.Unlock
  
End

Private Sub RemoveLibrary(sPath As String)
  
  Dim iPos As Integer
  
  iPos = $aLibraries.Find(sPath)
  If iPos >= 0 Then
    $aLibraries.Remove(iPos)
    Project.UpdateLibraries($aLibraries)
    RefreshLibraries
    RefreshComponents
  Endif
  
End


Public Sub btnRemoveLib_Click()

  Dim hLib As LibraryItem = lstLibraries.Current

  If Not hLib Then Return
  RemoveLibrary(hLib.Path)
  
End

Public Sub btnMoveUpLib_Click()

  Dim hLib As LibraryItem = lstLibraries.Current
  Dim iPos As Integer

  If Not hLib Then Return
  
  iPos = $aLibraries.Find(hLib.Path)
  If iPos < 1 Then Return
  
  Swap $aLibraries[iPos], $aLibraries[iPos - 1]
  RefreshLibraries
  lstLibraries.Index = (iPos - 1) * 2
  
End

Public Sub btnMoveDownLib_Click()

  Dim hLib As LibraryItem = lstLibraries.Current
  Dim iPos As Integer

  If Not hLib Then Return
  
  iPos = $aLibraries.Find(hLib.Path)
  If iPos < 0 Or If iPos >= $aLibraries.Max Then Return
  
  Swap $aLibraries[iPos], $aLibraries[iPos + 1]
  RefreshLibraries
  lstLibraries.Index = (iPos + 1) * 2

End

Public Sub btnUndoLib_Click()

  $aLibraries = Project.Libraries.Copy()
  RefreshLibraries
  RefreshComponents

End

Public Sub chkGetVersionFromFile_Click()

  txtMajor.Enabled = Not chkGetVersionFromFile.Value
  txtMinor.Enabled = Not chkGetVersionFromFile.Value
  txtRelease.Enabled = Not chkGetVersionFromFile.Value

End

Public Sub UncheckComponents(aComp As String[])
  
  Dim sComp As String
  Dim bLib As Boolean
  
  For Each sComp In aComp
    If Left(sComp) <> "/" Then $cComp[sComp].Uncheck("")
  Next
  
End
