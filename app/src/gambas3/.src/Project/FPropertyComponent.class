' Gambas class file

' Component
'Private $cComp As Collection
Private $aNeed As String[]
Private $aRequire As String[]
Private $aImplement As String[]

Public Sub Run() As Boolean

  Return Not Me.ShowModal()

End

Public Sub btnOK_Click()

  If WriteComponent() Then Return 

  Me.Close(True)

End

Public Sub btnCancel_Click()

  Me.Close

End

Private Sub ReadComponentFile()

  Dim cComp As Collection
  Dim aVer As String[]
  
  $aNeed = New String[]
  $aRequire = New String[]
  $aImplement = New String[]
  
  cComp = Project.ReadComponentFile()
  If Not cComp Then Return
  
  If cComp.Exist("Need") Then $aNeed = cComp["Need"]
  If cComp.Exist("Require") Then $aRequire = cComp["Require"]
  If cComp.Exist("Implement") Then $aRequire = cComp["Implement"]
  cmbComponentState.Index = cComp["State"]
  cmbHidden.Index = If(cComp["Hidden"], 0, 1)

  Try aVer = Split(cComp["CompatibleUntil"], ".")
  If aVer And If aVer.Count = 3 Then
    chkCompat.Value = True
    Try txtMajor.Value = CInt(aVer[0])
    Try txtMinor.Value = CInt(aVer[1])
    Try txtRelease.Value = CInt(aVer[2])
  Else
    chkCompat.Value = False
  Endif
  
End

Private Sub WriteFeatures(hCont As Container, aFeature As String[])
  
  Dim hCtrl As CheckBox
  
  For Each hCtrl In hCont.Children
    If hCtrl.Value Then aFeature.Add(hCtrl.Tag)
  Next
  
End

Private Sub WriteComponent() As Boolean

  Dim cComp As New Collection

  cComp["State"] = cmbComponentState.Index

  $aNeed.Clear
  WriteFeatures(panNeed, $aNeed)
  WriteFeatures(panNeed2, $aNeed)

  cComp["Hidden"] = cmbHidden.Index = 0
  cComp["Implement"] = $aImplement
  cComp["Need"] = $aNeed
  cComp["Require"] = $aRequire
  If chkCompat.Value Then cComp["CompatibleUntil"] = CStr(txtMajor.Value) & "." & CStr(txtMinor.Value) & "." & CStr(txtRelease.Value)
  
  Project.WriteComponentFile(cComp)

End

Private Sub ReadComponent()

  Dim aComp As String[]
  Dim hComp As CComponent
  Dim sComp As String
  Dim hMenu As Menu
  
  ReadComponentFile
  
  aComp = New String[]
  For Each hComp In CComponent.All
    If hComp.Hidden Then Continue
    If hComp.Key = CComponent.PROJECT_NAME Then Continue
    If hComp.Key = Project.Name Then Continue 
    If hComp.Key = "gb" Then Continue
    If $aRequire.Exist(hComp.Key) Then Continue
    aComp.Add(hComp.Key)
  Next
  aComp.Sort
  
  mnuAdd.Children.Clear
  For Each sComp In aComp
    hMenu = New Menu(mnuAdd) As "mnuAddRequire"
    hMenu.Text = sComp
  Next

  lstRequire.List = $aRequire
  
  ReadFeatures(panNeed, $aNeed)
  ReadFeatures(panNeed2, $aNeed)
  
End

Private Sub ReadFeatures(hCont As Container, aFeature As String[])
  
  Dim hCtrl As CheckBox
  
  For Each hCtrl In hCont.Children
    hCtrl.Value = aFeature.Find(hCtrl.Tag, gb.IgnoreCase) >= 0
  Next
  
End

Private Sub AddRequire(sComp As String)

  If sComp = Project.Name Then Return  
  If $aRequire.Find(sComp) >= 0 Then Return 
  $aRequire.Add(sComp)
  lstRequire.Add(sComp)
  
End


Public Sub btnRemove_Click()

  If lstRequire.Index < 0 Then Return 
  $aRequire.Remove($aRequire.Find(lstRequire.Text))
  lstRequire.Remove(lstRequire.Index)

End

Public Sub btnRemoveAll_Click()

  lstRequire.Clear
  $aRequire.Clear

End

Public Sub Form_Open()

  Dim aClass As String[]
  Dim iInd As Integer

  If Project.Type = Project.TYPE_LIBRARY Then
    Me.Title = ("Library properties")
    panCompatible.Show
  Else
    panCompatible.Hide
  Endif

  ReadComponent

  'Me.Title = 
  'lblTitle.Text = Project.Name
  
  Try aClass = Split(File.Load(Project.Dir &/ ".list"), "\n", "", True)
  If Not Error Then
    For iInd = 0 To aClass.Max
      If Left(aClass[iInd]) = "?" Then aClass[iInd] = Mid$(aClass[iInd], 2)
    Next
  Endif
  lstExport.List = aClass
  
End

Public Sub chkCompat_Click()

  txtMajor.Enabled = chkCompat.Value
  txtMinor.Enabled = chkCompat.Value
  txtRelease.Enabled = chkCompat.Value

End

Public Sub mnuAddRequire_Click()

  AddRequire(Last.Text)

End
