' Gambas module file

Private $hForm As HttpForm
Private $sFarm As String
Private $sGoodMsg As String
Private $sBadMsg As String
Private $hWin As Object

Private Sub GetCheckSum(sPath As String) As String
  
  Dim sChecksum As String
  Dim iPos As Integer
  
  Exec ["sha256sum", sPath] To sChecksum
  iPos = InStr(sChecksum, " ")
  sChecksum = Left(sChecksum, iPos - 1)
  Return sChecksum
  
Catch
  
  Error.Raise("Unable to compute checksum")
  
End

Public Sub RegisterUser(hWin As Window, sFarm As String, sLogin As String, sPassword As String, sFullName As String, sEmail As String)
  
  Dim sErr As String

  $hWin = hWin

  $sFarm = sFarm

  $hForm = New HttpForm As "FarmClient"
  $hForm.URL = "http://" & sFarm &/ "farm/register"
  $hForm.Async = True
  
  $hForm.Add("login", sLogin)
  $hForm.Add("password", sPassword)
  $hForm.Add("name", sFullName)
  $hForm.Add("email", sEmail)
  
  $sGoodMsg = ("You have been successfully registered.\n\nYou will receive a confirmation e-mail soon.")
  $sBadMsg = ("Unable to register user.")
  
  'SetMessage(("Connecting..."))
  $hForm.Submit()

Catch
  
  sErr = Error.Text
  Message.Error($sBadMsg & "\n\n" & sErr)
  
End

' Private Sub SetMessage(sMsg As String)
' 
'   Try $hWin.SetMessage(sMsg)
' 
' End


Public Sub PublishSoftware(hWin As Window, sFarm As String, sScreenshot As String, sLogin As String, sPassword As String, sGambasVersion As String, aTag As String[], aRequire As String[], sURL As String)

  Dim sSource As String
  Dim sIcon As String
  Dim sChecksum As String
  Dim aGambasVersion As String[]
  
  If sGambasVersion Then 
    aGambasVersion = Split(sGambasVersion, ".")
    sGambasVersion = CStr(CInt(aGambasVersion[0]) * 100 + CInt(aGambasVersion[1]))
  Endif
  
  $hWin = hWin
  
  'SetMessage(("Making source package..."))
  Wait

  sSource = Temp$()
  sSource = File.Dir(sSource) &/ File.BaseName(sSource) & ".tar.bz2" 'Project.GetDefaultArchiveBaseName() & ".tar.bz2"
  Project.MakeSourcePackageTo(sSource)
  
  sChecksum = GetCheckSum(sSource)
  
  If Project.Icon Then sIcon = Project.Dir &/ Project.Icon
  If Not sIcon Or If Not Exist(sIcon) Then
    sIcon = "img/logo/project.png"
  Endif
  
  If Not Exist(sIcon) Then sIcon = ""
  
  $sFarm = ""

  $sGoodMsg = ("The project has been successfully published.")
  $sBadMsg = ("Unable to publish project.")

  $hForm = New HttpForm As "FarmClient"
  $hForm.URL = "http://" & sFarm &/ "/farm/publish"
  $hForm.Async = True
  
  $hForm.Add("login", sLogin)
  $hForm.Add("password", sPassword)
  $hForm.Add("name", Project.Name)
  $hForm.Add("version", Project.MajorVersion * 10000 + Project.MinorVersion)
  $hForm.Add("release", Project.ReleaseVersion)
  $hForm.Add("desc", Project.Description)
  $hForm.Add("gambas", sGambasVersion)
  $hForm.Add("checksum", sChecksum)
  $hForm.AddFile("icon", sIcon, "icon.png")
  $hForm.AddFile("source", sSource, Project.GetDefaultArchiveBaseName() & ".tar.bz2")
  $hForm.Add("tags", aTag.Join(","))
  $hForm.Add("dependencies", aRequire.Join(","))
  $hForm.Add("url", sURL)
  If sScreenshot Then $hForm.AddFile("screenshot", sScreenshot, "screenshot." & File.Ext(sScreenshot))

  'SetMessage(("Connecting..."))
  $hForm.Submit()
  
Catch
  
  PublishEnd
  Message.Error($sBadMsg & "\n\n" & Error.Text & "\n\n" & Error.Backtrace.Join(" "))

End

Public Sub FarmClient_Connect()
  
  'SetMessage(("Connected."))
  
End

' Public Sub FarmClient_Progress()
'   
'   Debug $hForm.Uploaded; " / "; $hForm.TotalUploaded
'   lblMessage.Text = Subst(("Sending project (&1)"), Format($hForm.Uploaded / $hForm.TotalUploaded, "0%"))
'   
' End

Private Sub PublishEnd()

  If Not $hForm Then Return
  If $sFarm And If $hForm["login"] Then Settings["/Publish" &/ $sFarm &/ "Login"] = $hForm["login"]
  'SetMessage("")
  Try $hWin.OnPublishEnd()
  $hForm = Null
  $hWin = Null

End

Public Sub FarmClient_Error()
  
  Message.Error($sBadMsg & "\n\n" & $hForm.ErrorText)
  PublishEnd
  
End

Public Sub FarmClient_Progress()
  
  
  
End


Public Sub FarmClient_Finished()
  
  Dim iPos As Integer
  Dim sResult As String
  
  sResult = $hForm.Peek()
  
  PublishEnd
  
  If sResult Then
    If sResult Not Begins "10 OK" Then
      iPos = InStr(sResult, " ")
      sResult = Mid$(sResult, iPos + 1)
      Message.Error($sBadMsg & "\n\n" & sResult)
    Else
      Message($sGoodMsg)
    Endif
  Endif
  
End

Public Sub Abort()
  
  $hForm.Stop
  
End

Public Sub GetDate(sDate As String) As Date
  
  Dim dDate As Date

  If Len(sDate) = 14 Then
    Try dDate = Date(CInt(Mid(sDate, 1, 4)), CInt(Mid(sDate, 5, 2)), CInt(Mid(sDate, 7, 2)), CInt(Mid$(sDate, 9, 2)), CInt(Mid$(sDate, 11, 2)), CInt(Mid$(sDate, 13, 2)))
  Else If Len(sDate) = 8 Then
    Try dDate = Date(CInt(Mid(sDate, 1, 4)), CInt(Mid(sDate, 5, 2)), CInt(Mid(sDate, 7, 2)))
  Endif

  Return dDate
  
End

Public Sub GetResult(sResult As String) As Collection
  
  Dim cResult As New Collection
  Dim aResult As String[]
  Dim sLine As String
  Dim iPos As Integer
  
  Print sResult
  
  aResult = Split(sResult, "\r\n", "", True)
  If aResult[0] <> "10 OK" Then 
    iPos = InStr(aResult[0], " ")
    'cResult["Error"] = Mid$(aResult[0], iPos + 1)
    cResult["Error"] = Replace(Mid$(sResult, iPos + 1), "\r", "")
    Return cResult
  Endif
  aResult.Remove(0)
  For Each sLine In aResult
    iPos = InStr(sLine, "=")
    If iPos = 0 Then Continue
    cResult[Trim(Left(sLine, iPos - 1))] = Trim(Mid$(sLine, iPos + 1))
  Next
  
  Return cResult
  
End
