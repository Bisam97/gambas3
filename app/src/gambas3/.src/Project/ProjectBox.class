' Gambas class file

Inherits UserControl

Event Click
Event DblClick
Event ButtonClick
Event RemoveClick

Static Public ShowButton As Boolean

Property ShowPath As Boolean
Property Path As String
Property Highlight As Boolean
Property Selected As Boolean
Property ShowAuthors As Boolean
Property Read Info As CProjectInfo
Property Read Deleted As Boolean
Property Border As Boolean

Public ShowRemove As Boolean
Public Group As String ' for examples
Public Template As Boolean

Static Private $hRemove As Image
Static Private $hRemoveGray As Image

Private $hDrawingArea As DrawingArea
Private $sPath As String
Private $hProjectInfo As CProjectInfo
Private $hIcon As Image
Private $bShowPath As Boolean
Private $bShowAuthors As Boolean
Private $bBorder As Boolean = True

Private ICON_SIZE As Integer = Desktop.Scale * 4

Private $bCanHighlight As Boolean = True
Private $bHighlight As Boolean

Private $hObs As Observer

'Private $iIdealH As Integer
Private $iIdealW As Integer
Private $bSelected As Boolean
Private $sToolTip As String

Private Enum BUTTON_NONE, BUTTON_REMOVE, BUTTON_OPEN
Private $iInside As Integer
Private $iPressed As Integer

Private $hPopup As Menu

Public Sub _new()
  
  $hDrawingArea = New DrawingArea(Me) As "DrawingArea"
  $hDrawingArea.Mouse = Mouse.Pointing
  $hDrawingArea.Focus = True
  $hDrawingArea.Tracking = True
  
  $hObs = New Observer(Me) As "ProjectItem"
  
  If Not $hRemove Then
    $hRemove = Picture["icon:/small/close"].Image
    $hRemoveGray = $hRemove.Copy().Desaturate().Lightness(0.5)
  Endif
  
  ' If Not $hGradient Then
  '   
  '   $hGradient = New Image(128, 128)
  '   
  '   Paint.Begin($hGradient)
  '   Paint.Brush = Paint.RadialGradient(0, 0, 64, 0, 0, [Color.Merge(Color.LightForeground, Color.TextBackground, 0.8), Color.TextBackground], [0.0, 1.0])
  '   Paint.Rectangle(0, 0, 128, 128)
  '   Paint.Fill
  '   Paint.End
  '   
  ' Endif
  
End

Private Sub SetPath(sPath As String)
  
  $sPath = sPath
  $hProjectInfo = New CProjectInfo(sPath)
  $hIcon = Null
  
  $sToolTip = Replace(File.Dir($sPath), System.User.Home, "~")
  $iIdealW = 0
  'Me.H = Me.IdealHeight
  Me.Refresh
  
End

' Private Sub GetTitle() As String
'   
'   Dim sTitle As String
'   Dim bSelected As Boolean
'   
'   bSelected = Me.Background = Color.SelectedBackground
' 
'   With $hProjectInfo
'     sTitle = .Title
'     If Not sTitle Then sTitle = .Name
'     sTitle = "<b>" & .Name & "</b>&nbsp;" & .Version
'     sTitle &= Subst("<br><font size=\"-1\" color=\"#&1\">", Hex$(If(bSelected, Color.SelectedForeground, Color.Gradient(Color.TextBackground, Color.TextForeground, 0.75)), 6)) & .Title
'     If $bShowAuthors And If .Authors And If .Authors.Count Then
'       If .Title Then sTitle &= " - "
'       sTitle &= "<i>" & If(.Authors.Count = 1, ("Author"), ("Authors")) & " : " & .Authors.Join(", ") & "</i>"
'     Endif
'     sTitle &= "</font>"
'     If $bShowPath Then sTitle &= Subst("<br><font size=\"-1\" color=\"&1\"><b>", If(bSelected, "white", "gray")) & Replace($sPath, System.User.Home, "~") & "</b></font>"
'   End With
'   
'   Return sTitle
' 
' End

Public Sub DrawingArea_MouseMove()
  
  Dim DS As Integer = Desktop.Scale
  Dim sTooltip As String
  Dim iInside As Integer
  
  If Rect(DS, $hDrawingArea.H - DS * 3, $hDrawingArea.W - DS * 2, DS * 2).Contains(Mouse.X, Mouse.Y) Then sTooltip = $sToolTip
  If sTooltip <> $hDrawingArea.Tooltip Then $hDrawingArea.Tooltip = sTooltip
  
  If ShowButton And If Rect(0, $hDrawingArea.H - DS * 4, $hDrawingArea.W, DS * 4).Contains(Mouse.X, Mouse.Y) Then
    iInside = BUTTON_OPEN
  Else If ShowRemove And If Rect($hDrawingArea.W - DS - $hRemove.W, DS, $hRemove.W, $hRemove.H).Contains(Mouse.X, Mouse.Y) Then
    iInside = BUTTON_REMOVE
  Else
    iInside = BUTTON_NONE
  Endif
  
  If iInside <> $iInside Then
    $iInside = iInside
    $hDrawingArea.Refresh
  Endif
  
End

Public Sub DrawingArea_Draw()
  
  Dim X, Y, W, H, HT As Integer
  Dim XS, YS, WS, HS As Integer
  Dim sText As String
  Dim P As Integer
  Dim bSmall As Boolean
  Dim WT As Integer
  Dim iCol As Integer
  Dim iBg As Integer
  Dim XB, WB As Integer
  Dim YB As Integer
  Dim HB As Integer
  Dim hExt As PaintExtents
  
  If Not $hProjectInfo Then Return
  
  P = Desktop.Scale
  bSmall = $hDrawingArea.H <= P * 12
  
  X = 1
  Y = 1
  W = Paint.W - 1
  H = Paint.H - 1
  
  ' If Me.Parent Is ScrollView Then
  '   hScrollView = Me.Parent
  '   If hScrollView.Arrangement = Arrange.Vertical And If hScrollView.ScrollH > hScrollView.ClientH Then
  '     W -= P
  '   Endif
  ' Endif
  
  XS = X
  YS = Y
  WS = W
  HS = H
  
  With $hProjectInfo
    
    If Not $hIcon Then
      $hIcon = Project.StretchIcon(.GetIconPath(), ICON_SIZE)
    Endif
    
    Paint.AntiAlias = False
    Paint.Rectangle(X + 1, Y + 1, W - 3, H - 3)
    
    If $bSelected Then 'Or If $bHighlight Then
      iBg = Color.Merge(Color.LightBackground, Color.TextBackground)
    Else If $bHighlight Then
      iBg = Color.Merge(Color.LightBackground, Color.TextBackground, 0.9)
    Else
      iBg = Color.TextBackground 'Color.Merge(Color.TextForeground, Color.TextBackground, 0.97)
    Endif
    Paint.Background = iBg
    Paint.Fill(True)
    
    'Paint.Brush = Paint.RadialGradient(X, Y, Desktop.Scale * 24, X, Y, [Color.Merge(Color.LightForeground, Color.TextBackground, 0.6), Color.Merge(Color.TextForeground, Color.TextBackground, 0.97)], [0.0, 1.0])
    'Paint.Fill(True)
    'Paint.Brush = Null
    'Paint.DrawImage($hGradient, X, Y, W, W)
    
    If $hDrawingArea.HasFocus Or If $bHighlight Then
      
      Paint.AntiAlias = True
      Paint.Background = Color.SetAlpha(Color.SelectedBackground, 128)
      Paint.LineWidth = 2
      Paint.Rectangle(X, Y, W, H)
      Paint.Stroke
      
    Else 
      
      If $bBorder Then
        Paint.Background = Color.LightForeground
        Paint.Stroke
      Endif
      Paint.AntiAlias = True
      
    Endif
    
    Paint.Save
    
    X += P
    Y += P
    W -= P * 2
    H -= P * 4
    If Template Then H += P * 2
    
    Paint.Rectangle(X, Y, W, H)
    Paint.Clip
    
    Paint.DrawImage($hIcon, X, Y)
    
    iCol = Color.Foreground 'If($bSelected, Color.SelectedForeground, Color.Foreground)
    
    X += ICON_SIZE + P
    
    If Template Then
      sText = .GetTranslatedTitle()
    Else
      sText = .Name
    Endif
    
    Paint.Background = iCol 'Color.SetAlpha(iCol, 128)
    Paint.Font.Bold = True
    
    If Template Then sText = Paint.TrimText(sText, W, Paint.Font.Height * 2 + 2)
    Paint.DrawText(sText, X, Y, W, H, Align.TopLeft)
    
    WT = Paint.Font.TextWidth(sText)
    Paint.Font.Bold = False
    
    If Template Then
      
      X -= ICON_SIZE + P
      
      sText = .GetTranslatedDescription()
      Paint.Font = Font["-1"]
      
      HT = Paint.Font.Height * 2
      
      W = W - X - P * 2
      H = H - Y - HT - P * 2
      sText = Paint.TrimText(sText, W, H)
      Paint.DrawText(sText, X, Y + HT + P * 2, W, H)
      
    Else If bSmall Then
      
      Paint.Font.Bold = False
      
      sText = " • " & .Version
      hExt = Paint.TextExtents(sText)
      HT = Paint.Font.Height
      Paint.DrawText(sText, X + WT, Y, Paint.W, Paint.H, Align.TopLeft)
      WT += Paint.Font.TextWidth(sText)
      
      If .Branch Then
        
        XB = X + WT + P
        YB = Y
        HB = HT
        
        GoSub DRAW_BRANCH
        
      Endif
      
      sText = .GetTranslatedDescription()
      If Not sText Then sText = .GetTranslatedTitle()
      Paint.Font = Font["-1"]
      
      W = W - X - P * 2
      H = H - HT 'Y - ICON_SIZE
      Paint.DrawText(Paint.TrimText(sText, W, H), X, Y + HT + 3, W, H)
      
    Else
      
      Paint.Font.Bold = False
      
      Y += 6
      
      sText = .Version
      hExt = Paint.TextExtents(sText)
      HT = Paint.Font.H
      Paint.DrawText(sText, X, Y + HT, Paint.W, HT, Align.Left)
      
      If .Branch Then
        
        XB = X + hExt.Width + P
        YB = Y + HT 
        HB = HT 'Ceil(hExt.H) + 4
        
        GoSub DRAW_BRANCH
        
      Endif
      
      X -= ICON_SIZE + P
      
      sText = .GetTranslatedDescription()
      If Not sText Then sText = .GetTranslatedTitle()
      Paint.Font = Font["-1"]
      
      W = W - X - P * 2
      H = H - Y - ICON_SIZE
      sText = Paint.TrimText(sText, W, H)
      Paint.DrawText(sText, X, Y + ICON_SIZE + P, W, H)
      
    Endif
    
    Paint.Restore
    
  End With
  
  If ShowRemove And If $bHighlight Then
    Paint.FillRect(Paint.W - $hRemove.W - P - P \ 2, P \ 2, $hRemove.W + P, $hRemove.H + P, iBg)
    Paint.DrawImage(If($iInside = BUTTON_REMOVE, $hRemove, $hRemoveGray), Paint.W - $hRemove.W - P, P)
  Endif
  
  If ShowButton And If $bHighlight Then
    X = 0
    Y = Paint.H - P * 4
    W = Paint.W
    H = P * 4
    Paint.Font.Grade = -1
    'Style.PaintButton(X + 2, Y + 2, W - 4, H - 4, Mouse.Button = Mouse.Left, Style.Normal, Not $bInsideButton, Color.ButtonBackground)
    Paint.Background = Color.ButtonForeground
    If $iInside = BUTTON_OPEN Then
      Paint.FillRect(X + 4, Y + 4, W - 8, H - 8, If($iPressed = $iInside, Color.LightBackground, Color.Merge(Color.LightBackground, Color.TextBackground)))
      'Paint.Background = Color.SelectedBackground
      Paint.DrawTextShadow(("Open in another window") & "…", X + P, Y, W - P * 2, H, Align.Center)
    Else
      Paint.DrawRect(X + 4, Y + 4, W - 8, H - 8, Color.LightBackground, 1)
    Endif
    Paint.DrawText(("Open in another window") & "…", X + P, Y, W - P * 2, H, Align.Center)
  Else If Not Template Then
    Paint.Font.Grade = -1
    Paint.Background = Color.LightForeground
    Paint.Save
    Paint.ClipRect = Rect(P, Paint.H - P * 3, Paint.W - P * 2, P * 2)
    Paint.DrawText($sToolTip, P, Paint.H - P * 3, Paint.W - P * 2, P * 2, Align.Right)
    Paint.Restore
  Endif
  
  Me.Enabled = Not $hProjectInfo.Deleted
  
  If Not Me.Enabled Then Paint.FillRect(0, 0, Paint.W, Paint.H, Color.SetAlpha(Style.BackgroundOf($hDrawingArea), 64))
  
  ' If Template And If $sPath = GetParent().Current Then
  '   Paint.FillRect(0, 0, Paint.W, Paint.H, Color.SetAlpha(Color.SelectedBackground, 128))
  ' Endif
  ' 
  Return
  
DRAW_BRANCH:
  
  Paint.Font.Grade = -2
  WB = Paint.TextSize($hProjectInfo.Branch).Width + P * 2
  
  Paint.Rectangle(XB, YB, WB, HB, P * 2)
  Paint.Background = VersionControl.GetBranchColor($hProjectInfo.Branch)
  Paint.Fill
  Paint.Background = Color.TextBackground
  Paint.DrawText($hProjectInfo.Branch, XB, YB, WB, HB, Align.Center)
  Paint.Background = Color.TextForeground
  
  Paint.Font.Grade = 0
  
  Return
  
End

Public Sub DrawingArea_Enter()
  
  If $bCanHighlight And If Me.Enabled Then
    'If not $bHighlight Then 
    '$hDrawingArea.Background = Color.LightBackground
    $bHighlight = True
    $hDrawingArea.Refresh
    'Endif
  Endif
  
End

Public Sub DrawingArea_Leave()
  
  If $bHighlight And If Me.Enabled Then 
    '$hDrawingArea.Background = Color.Default
    $bHighlight = False
    $hDrawingArea.Refresh
  Endif
  
End

Public Sub DrawingArea_KeyPress()
  
  If Key.Code = Key.Space Then Raise Click
  
End

' Private Function Background_Read() As Integer
' 
'   Return Super.Background
' 
' End
' 
' Private Sub Background_Write(Value As Integer)
' 
'   Super.Background = Value
'   $hDrawingArea.Background = Color.Default
' 
' End

Private Function ShowPath_Read() As Boolean
  
  Return $bShowPath
  
End

Private Sub ShowPath_Write(Value As Boolean)
  
  $bShowPath = Value
  Me.Refresh
  
End

Private Function Path_Read() As String
  
  Return $sPath
  
End

Private Sub Path_Write(Value As String)
  
  SetPath(Value)
  
End

Private Function Highlight_Read() As Boolean
  
  Return $bCanHighlight
  
End

Private Sub Highlight_Write(Value As Boolean)
  
  $bCanHighlight = Value
  $hDrawingArea.Mouse = If(Value, Mouse.Pointing, Mouse.Default)
  
End

Private Function Info_Read() As CProjectInfo
  
  Return $hProjectInfo
  
End

Public Sub DrawingArea_MouseDown()
  
  If Mouse.Left Then 
    $iPressed = $iInside
    $hDrawingArea.Refresh
  Endif
  
End

Public Sub DrawingArea_MouseUp()
  
  If Mouse.Left And If $iInside = $iPressed Then 
    If $iInside = BUTTON_OPEN Then
      Raise ButtonClick
    Else If $iInside = BUTTON_REMOVE Then
      Raise RemoveClick
      Stop Event
    Else
      Raise Click
    Endif
    $hDrawingArea.Refresh
  Endif
  $iPressed = BUTTON_NONE
  
End

Public Sub DrawingArea_DblClick()
  
  'If Not Object.IsValid(Me) Then Return
  If Mouse.Left Then Raise DblClick
  
End

Private Function ShowAuthors_Read() As Boolean
  
  Return $bShowAuthors
  
End

Private Sub ShowAuthors_Write(Value As Boolean)
  
  $bShowAuthors = Value
  $hDrawingArea.Refresh
  
End

Public Sub Match(sFilter As String) As Boolean
  
  If Not sFilter Then Return True
  With $hProjectInfo
    If .Name Like sFilter Then Return True
    If String.LCase(.GetTranslatedTitle()) Like sFilter Then Return True
    If .Version Like sFilter Then Return True
    If .Branch Like sFilter Then Return True
    If $bShowAuthors And If String.LCase(.Authors.Join(" ")) Like sFilter Then Return True
    If String.LCase(Group) Like sFilter Then Return True
    If String.LCase(.GetTranslatedDescription()) Like sFilter Then Return True
    If .Components.Exist(sFilter) Then Return True
  End With
  
End

Private Function Selected_Read() As Boolean
  
  Return $bSelected
  
End

Private Sub Selected_Write(Value As Boolean)
  
  $bSelected = Value
  $hDrawingArea.Refresh
  
End

Private Function Deleted_Read() As Boolean
  
  Return $hProjectInfo.Deleted
  
End

Public Sub DrawingArea_Menu()

  Dim hMenu As Menu
  
  $hPopup = New Menu(Me.Window, True) As "Popup"
  
  If ShowButton Then
    hMenu = New Menu($hPopup) As "mnuOpenAnother"
    hMenu.Text = ("Open in another window") & "..."
    hMenu.Picture = Picture["icon:/small/open-link"]
  Endif
  
  hMenu = New Menu($hPopup) As "mnuOpenFolder"
  hMenu.Text = ("Open project folder") & "..."
  hMenu.Picture = Picture["icon:/small/directory"]
  
  If ShowRemove Then
    hMenu = New Menu($hPopup) As "mnuRemove"
    hMenu.Text = ("Remove")
    hMenu.Picture = Picture["icon:/small/remove"]
  Endif
  
  hMenu = New Menu($hPopup)
  
  hMenu = New Menu($hPopup)
  hMenu.Text = ("Cancel")
  hMenu.Picture = Picture["icon:/small/close"]
  
  $hPopup.Popup()
  
End

Public Sub Popup_Close()
  
  $hPopup.Delete
  $hPopup = Null
  
End

Public Sub mnuOpenAnother_Click()
  
  Raise ButtonClick
  
End

Public Sub mnuRemove_Click()
  
  Raise RemoveClick
  
End

Public Sub mnuOpenFolder_Click()
  
  Desktop.Open($hProjectInfo.Path)
  
End

Private Function Border_Read() As Boolean

  Return $bBorder

End

Private Sub Border_Write(Value As Boolean)

  $bBorder = Value
  $hDrawingArea.Refresh

End
