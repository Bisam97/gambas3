' Gambas module file

Property Read Enabled As Boolean
Property Read Output As String

Private $hVC As CVersionControl

Private $bEnd As Boolean
Private $hEditor As TextEditor
Private $bOutput As Boolean
Private $sOutput As String
Private $dOutput As Date
Private $bIdent As Boolean

Public (User) As String
Public Password As String
'Public UseTerminal As Boolean

Public LANG_ENV As String[] = ["LC_ALL=C.UTF-8", "LANG=C.UTF-8", "LANGUAGE=C.UTF-8"]

Public Sub Refresh()

  If CVersionControlSubversion.Check() Then
    $hVC = CVersionControlSubversion
  Else If CVersionControlGit.Check() Then
    $hVC = CVersionControlGit
  Else
    $hVC = CVersionControl
  Endif

End

Public Sub Insert(sText As String)

  If $hEditor Then
    $hEditor.Print(DConv(sText))
  Else
    If Not Settings["/QuietExternalCommands", False] Then FOutput.Insert(sText)
  Endif

End

Public Sub Run(aCmd As String[], Optional bIdent As Boolean, Optional bOutput As Boolean, Optional aEnv As String[]) As Integer

  Dim sPassword As String
  Dim hProcess As Process
  Dim sCmd As String
  
  $bEnd = False
  $bIdent = bIdent
  $sOutput = ""
  $bOutput = bOutput
  $dOutput = Now
  
  If bIdent Then
    'aCmd.Add("--non-interactive")
    If User Then
      aCmd.Add("--username")
      aCmd.Add(User)
      If Password Then
        sPassword = " --password " & Password
        aCmd.Add("--password")
        aCmd.Add(Password)
      Endif
    Endif
  Endif
  
  hProcess = Exec aCmd With aEnv For Input Output As "Process" 
  
  sCmd = aCmd.Join(" ")
  If sPassword Then sCmd = Replace(sCmd, sPassword, "")

  Insert(sCmd & "\n")

  Do
    Wait
    
    If $bEnd Then Break
    
    If DateDiff($dOutput, Now, gb.Second) >= 30 Then
      Close #hProcess
      hProcess.Kill
      Insert("** " & ("command timeout") & " **\n")
    Endif
    
    Sleep 0.1
  Loop
    
  Return Process.LastValue

End

Public Sub Process_Error(({Error}) As String)
  
  Insert({Error})
  
End


Public Sub Process_Read()

  Dim sData As String
  Dim iPos As Integer
  Dim sLine As String

  sData = Read #Last, -256
  $sOutput &= sData
  If Not $bOutput Then Insert(sData)
  'Insert(sData)
  $dOutput = Now
  
  iPos = RInStr($sOutput, "\n")
  If iPos = 0 Then
    sLine = $sOutput
  Else
    sLine = Mid$($sOutput, iPos + 1)
  Endif
  
  If $bIdent Then
    If Right(RTrim(sLine)) = ":" And If InStr(sLine, "username", 1, gb.IgnoreCase) Then 
      If $bOutput Then Insert(sLine)
      Print #Last, User
      Insert(User & "\n")
      $sOutput = ""
    Else If Right(RTrim(sLine)) = ":" And If InStr(sLine, "password", 1, gb.IgnoreCase) Then 
      If $bOutput Then Insert(sLine)
      Print #Last, Password
      Insert(String$(String.Len(Password), "*") & "\n")
      $sOutput = ""
    Endif
  Endif

End

Public Sub Process_Kill()

  $bEnd = True

End

Public Sub AddFile(sPath As String, Optional bForce As Boolean)

  $hVC.AddFile(sPath, bForce)

  ' If $bCVS Then
  '   'NB: For CVS file must already exist
  '   Run(["cvs", "add", sPath])
  ' Endif

End

Public Sub AddDir(sPath As String)

  $hVC.AddDir(sPath)

  ' If $bCVS Then
  '   'NB: For CVS, directory must already exist
  '   Run(["cvs", "add", sPath])
  ' Endif

End

' Must be called *after* the file has been deleted

Public Sub RemoveFile(sPath As String, Optional (bForce) As Boolean)

  $hVC.RemoveFile(sPath, bForce)
  ' If $bCVS Then
  '   'NB: For CVS do 'cvs remove file' first then delete file
  '   Run(["cvs", "remove", sPath])
  ' Endif
  $hVC.UpdatePath([sPath])

End

' Must be called *after* the directory has been deleted
' The directory must be empty

Public Sub RemoveDir(sPath As String)

  $hVC.RemoveDir(sPath)
  ' If $bCVS Then
  '   'NB: For CVS do 'cvs remove dirname' first then delete dirname
  '   Run(["cvs", "remove", sPath])
  ' Endif
  $hVC.UpdatePath([sPath])

End

' Must be called *after* the file has been moved

Public Sub MoveFile(sOld As String, sNew As String)

  $hVC.MoveFile(sOld, sNew)

  ' If $bCVS Then
  '   'NB: make sure the file is added BEFORE
  '   AddFile(sNew)
  '   'NB: make sure the file deleted AFTER
  '   RemoveFile(sOld)
  ' Endif
  $hVC.UpdatePath([sOld, sNew])

End

Public Sub CheckPaths()

  Project.LockedPaths = New Collection
  Project.AddedPaths = New Collection
  Project.ConflictPaths = New Collection

  $hVC.CheckPaths()

End

Public Sub MoveDir(sOld As String, sNew As String) As Boolean

  $hVC.MoveDir(sOld, sNew)
  $hVC.UpdatePath([sOld, sNew])

End

Public Sub Status(Optional sPath As String) As String

  Return $hVC.Status(sPath)

End

Public Sub Commit(sChange As String) As Boolean

  Return $hVC.Commit(sChange)

End

Public Sub Update() As Boolean

  Return $hVC.Update()

End

Public Sub Revert(Optional sPath As String) As Boolean

  Return $hVC.Revert(sPath)

End

Public Sub CheckoutSVN(sPath As String, sDir As String, hEditor As TextEditor)

  $hEditor = hEditor
  CVersionControlSubversion.checkout(sPath, sDir)
  $hEditor = Null

End

Public Sub InConflict(sPath As String) As Boolean

  Return $hVC.InConflict(sPath)

End

Public Sub Resolve(sPath As String, Optional sAccept As String) As Boolean

  Return $hVC.Resolve(sPath, sAccept)

End

Public Sub HasConflict() As Boolean

  Return $hVC.HasConflict()

End

Public Sub GetVersion(sDir As String) As String

  Return $hVC.GetVersion(sDir)

End

' Private Sub RemoveFirstLines(sStr As String, iCount As Integer) As String
' 
'   Dim iPos As Integer
' 
'   While iCount
'     iPos = InStr(sStr, "\n", iPos + 1)
'     If iPos = 0 Then Return
'     Dec iCount
'   Wend
' 
'   Return Mid$(sStr, iPos + 1)
' 
' End

Public Sub Diff(sPath As String) As String

  Return $hVC.Diff(sPath)

End

Public Sub CanControlProject() As Boolean

  Return False

  ' Dim sDir As String
  ' 
  ' If $hVC <> CVersionControl Then Return
  ' 
  ' If $bSvn17 Then
  '   sDir = $sRealDir
  '   Do
  '     sDir = File.Dir(sDir)
  '     If Exist(sDir &/ ".svn") Then Return True
  '     If sDir = "/" Then Return False
  '   Loop
  ' Else
  '   If Exist($sRealDir &/ "../.svn") Then Return True
  ' Endif
  ' 
  ' If Exist($sRealDir &/ "../CVS") Or Exist($sRealDir &/ "../CVSROOT") Then Return True

End

Public Sub ControlProject()

  ' If CanControlProject() Then
  '   Project.CleanUp
  '   Try Kill Project.Dir &/ ".settings"
  '   Run(["svn", "add", "--parents", SvnPath$($sRealDir)])
  '   Project.Config.Save
  '   Refresh
  '   Project.Refresh
  ' Endif

End

Public Sub Info(bRemote As Boolean) As Collection

  Return $hVC.Info(bRemote)
  
End

Public Sub CleanUp(sPath As String)

  $hVC.CleanUp(sPath)
  
End

Private Function Enabled_Read() As Boolean

  Return $hVC

End

Private Function Output_Read() As String

  Return $sOutput

End
