' Gambas class file

Public Sub Run()

  Me.ShowModal()

End

Private Sub GetChanges() As String

  Dim sChange As String
  Dim iPos As Integer
  
  sChange = Trim(edtJournal.Text)
  iPos = InStr(sChange, "- " & VersionControl.DELIM_CHANGE & " -")
  If iPos Then
    iPos = RInStr(sChange, "\n", iPos)
    If iPos Then
      sChange = Left(sChange, iPos - 1)
    Else
      sChange = ""
    Endif
  Endif

  Return sChange  
  
End

Private Sub DoCommit()
  
  Dim sChange As String
  Dim bCommit As Boolean
  Dim bPush As Boolean

  If Last = btnCommit Or If Last = btnCommitPush Then bCommit = True
  If Last = btnCommitPush Or If Last = btnPush Then bPush = True

  If bPush And If Not bCommit Then
    
    Me.Close
    VersionControl.Commit("", False)
    
  Else
  
    sChange = GetChanges()
    
    If Not Trim(sChange) Then
      tabVersionControl.Index = 0
      edtJournal.Goto(0, 0)
      edtJournal.SetFocus
      Message.Warning(("Please enter the journal."))
      Return
    Endif
    
    Me.Close
    VersionControl.Commit(sChange, Not bPush)

  Endif  
  
End


Public Sub btnCommit_Click()

  DoCommit

End

Public Sub btnCancel_Click()

  Me.Close

End


Public Sub Form_Open()

  Dim DS As Integer
  
  Me.Title = ("Version control") & " (" & VersionControl.Name & ")"
  
  edtJournal.ReadConfig
  edtDiff.ReadConfig
  edtHistory.ReadConfig
  edtHistory.ShowModified = False
  edtHistory.Wrap = False
  Project.SetEditorFont(trmShell)

  edtJournal.Text = RTrim(Project.Config["/FCommit/LastCommit"]) & "\n\n" & VersionControl.GetDefaultJournal()
  edtJournal.Goto(0, 0)
  
  LoadDiff
  
  tabVersionControl_Click
  
  btnCommit.Visible = edtDiff.Visible
  If VersionControl.DoNotPush And VersionControl.HasRemote() Then
    btnCommitPush.Visible = edtDiff.Visible
    btnPush.Visible = Not edtDiff.Visible
  Else
    btnCommitPush.Hide
    btnPush.Hide
  Endif
  
  gvwVcInfo.Rows.Count = 0
  
  'chkDoNotPush.Visible = VersionControl.DoNotPush And VersionControl.HasRemote()
  
  DS = Desktop.Scale
  Me.Resize(FMain.W - DS * 16, FMain.H - DS * 16)
  
End

Public Sub Form_Close()
  
  Project.Config["/FCommit/LastCommit"] = RTrim(GetChanges())
  
  Try trmShell.Kill
  edtHistory.StopFillWithHistory
  
End

Private Sub LoadDiff()

  Dim sDiff As String
  Dim aDiff As String[]
  Dim sLine As String
  Dim bHide As Boolean
  
  If edtDiff.IsVoid() Then
    Inc Application.Busy
    
    sDiff = VersionControl.Diff()
    
    If chkHideTrans.Value Then
      
      aDiff = New String[]
      For Each sLine In Split(sDiff, "\n")
        If sLine Begins "diff " Then
          bHide = InStr(sLine, "/.lang/") > 0
          aDiff.Add(sLine)
        Else If Not bHide Then
          aDiff.Add(sLine)
        Endif
      Next
      sDiff = aDiff.Join("\n")
      
    Endif
    
    If sDiff Then
      edtDiff.Text = sDiff
      edtDiff.Show
      'panNothing.Hide
    Else
      edtDiff.Text = "-"
      edtDiff.Hide
      'panNothing.Show
    Endif
    
    tabVersionControl[0].Visible = edtDiff.Visible
    tabVersionControl[1].Visible = edtDiff.Visible
  
    Dec Application.Busy
    
  Endif

End

Public Sub tabVersionControl_Click()

  Select Case tabVersionControl.Index
    
    Case 0
      edtJournal.SetFocus
      
    Case 1
      Try edtDiff.SetFocus
      
    Case 2
      If edtHistory.IsVoid() Then edtHistory.FillWithHistory(Project.Dir, spnChange)
      
    Case 3
      UpdateInfo
      Try trmShell.Exec(["bash"], ["PWD=" & Project.Dir])
      trmShell.SetFocus
      
  End Select
  
  chkHideTrans.Visible = tabVersionControl.Index = 1 And edtDiff.Visible
  panChange.Visible = tabVersionControl.Index = 2

End

Public Sub edtHistory_Highlight(Text As String)

  VersionControl.HighlightHistory(Text)

End

Public Sub btnPush_Click()

  DoCommit

End

Public Sub btnCommitPush_Click()

  DoCommit

End


Public Sub chkHideTrans_Click()

  edtDiff.Clear
  LoadDiff

End

Public Sub chkShowHistoryChanges_Click()

  edtHistory.FillWithHistory(Project.Dir, spnChange,, chkShowHistoryChanges.Value)

End

Private Sub UpdateInfo()

  Dim cInfo As Collection
  Dim sValue As String
  Dim iRow As Integer
  Dim I As Integer
  
  If Not VersionControl.Enabled Then Return
  If gvwVcInfo.Rows.Count Then Return
  
  Inc Application.Busy
  
  If VersionControl.HasIdentity Then
    panIdentity.Show
    sepIdentity.Show
    VersionControl.GetIdentity(ByRef txtVcName.Text, ByRef txtVcMail.Text)
  Else 
    panIdentity.Hide
    sepIdentity.Hide
  Endif
    
  cInfo = VersionControl.Info()

  gvwVcInfo.Columns.Count = 2
  gvwVcInfo.Rows.Count = cInfo.Count
  
  For Each sValue In cInfo
    gvwVcInfo[iRow, 0].Text = cInfo.Key
    gvwVcInfo[iRow, 0].Alignment = Align.TopNormal
    'gvwVcInfo[iRow, 0].Foreground = Color.Merge(Color.TextBackground, Color.TextForeground, 0.7)
    gvwVcInfo[iRow, 1].Text = sValue
    Inc iRow
  Next
  
  gvwVcInfo.Columns[0].W = -1
  gvwVcInfo.Columns[0].W += Desktop.Scale * 2
  
  For I = 0 To gvwVcInfo.Rows.Count - 1
    gvwVcInfo.Rows[I].H = -1
  Next

Finally
  
  Dec Application.Busy
  
End

Public Sub btnUpdateIdentity_Click()

  Dim sVcName As String
  Dim sVcMail As String

  sVcName = Trim(txtVcName.Text)
  If sVcName Begins "-" Then Goto INVALID_VC_NAME
  
  sVcMail = Trim(txtVcMail.Text)
  If sVcMail Begins "-" Then Goto INVALID_VC_MAIL
  If Not String.IsEmail(sVcMail) Then Goto INVALID_VC_MAIL
  
  VersionControl.SetIdentity(sVcName, sVcMail)
  Return

INVALID_VC_NAME:

  Message.Warning(("Invalid user name."))
  txtVcName.SetFocus
  Return

INVALID_VC_MAIL:

  Message.Warning(("Invalid e-mail address."))
  txtVcMail.SetFocus
  Return

End
