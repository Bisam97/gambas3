' Gambas class file

Inherits CVersionControl
Create Static

Private $sRealDir As String
Private $bHasSVN As Boolean
Private $bCheckSVN As Boolean
Private $sSvnVersion As String
Private $bSvn17 As Boolean

Private Sub SvnPath$(sPath As String) As String

  If InStr(sPath, "@") Then sPath &= "@"
  If sPath Begins Project.Dir Then sPath = $sRealDir &/ Mid$(sPath, Len(Project.Dir) + 1)
  Return sPath

End

Public Sub Check() As Boolean
  
  Dim sResult As String
  
  Shell "readlink -f " & Shell$(Project.Dir) To $sRealDir
  $sRealDir = Trim($sRealDir)

  If Not $bCheckSVN Then
    $bHasSVN = System.Exist("svn")
    $bCheckSVN = True
  Endif
  
  If $bHasSVN Then

    If Not $sSvnVersion Then 
      Exec ["svn", "--version", "--quiet"] To $sSvnVersion
      $sSvnVersion = Trim($sSvnVersion)
      $bSvn17 = Comp($sSvnVersion, "1.7", gb.Natural) >= 0
    Endif
  
    If $bSvn17 Then
      Shell "svn status " & Shell$(SvnPath$($sRealDir) &/ ".project") & " 2>&1" To sResult
      If Process.LastValue = 0 And If sResult Not Like "svn:*W155007*:*" And If sResult Not Like "svn:*W155010*:*" Then Return True
    Else
      Return Exist($sRealDir &/ ".svn")
    Endif
    
  Endif

End

Public Sub AddFile(sPath As String, Optional bForce As Boolean)

  Dim aCmd As String[]

  aCmd = ["svn", "add", SvnPath$(sPath)]
  If bForce Then aCmd.Add("--force", 2)
  VersionControl.Run(aCmd)
  
End

Public Sub AddDir(sPath As String)
  
  VersionControl.Run(["svn", "add", SvnPath$(sPath)])
  
End

Public Sub RemoveFile(sPath As String, Optional (bForce) As Boolean)

  Dim aCmd As String[]

  aCmd = ["svn", "remove", SvnPath$(sPath), "--force"]
  'If bForce Then aCmd.Add("--force", 2)
  VersionControl.Run(aCmd)

End

Public Sub RemoveDir(sPath As String)

  RemoveFile(sPath, True)

End

Public Sub MoveFile(sOld As String, sNew As String)

  AddFile(sNew)
  RemoveFile(sOld, True)

End

Public Sub MoveDir(sOld As String, sNew As String) As Boolean

  VersionControl.Run(["svn", "move", "--force", SvnPath$(sOld), SvnPath$(sNew)])

End

Private Sub UpdatePathFromStatus(sStatus As String)

  Dim sFile As String
  Dim sExt As String
  Dim sPath As String

  For Each sStatus In Split(sStatus, "\n")

    sFile = Mid$(sStatus, 9)
    sPath = Project.Dir &/ sFile

    If Left(sStatus) = "D" Then
      Project.LockedPaths[sPath] = True
    Else If Left(sStatus) = "C" Then
      Project.ConflictPaths[sPath] = True
    Else If Left(sStatus) = "?" Then
      If Left(File.Name(sFile)) = "." Then Continue
      If sFile Begins ".lang/" Then Continue
      If sFile Begins ".gambas/" Then Continue
      If sFile = Project.Name & ".gambas" Then Continue
      sExt = File.Ext(sFile)
      If Left(sExt) = "r" And IsDigit(Mid$(sExt, 2)) And If Exist(Project.Dir &/ File.Dir(sFile) &/ File.BaseName(sFile)) Then Continue
      Project.AddedPaths[sPath] = True

      ' If Project.IsSourcePath(sPath) And If sExt = "class" Then
      '   For Each sForm In Dir(Project.Dir &/ File.Dir(sFile), File.BaseName(sFile) & ".*")
      '     Project.AddedPaths[Project.Dir &/ File.Dir(sFile) &/ sForm] = True
      '   Next
      ' Endif

    Endif

  Next

End

Public Sub UpdatePath(aPath As String[])

  Dim sStatus As String
  Dim sCmd As String
  Dim sPath As String

  ' svn status is automatically recursive!
  sCmd = "cd " & Shell$($sRealDir) & "; svn status --no-ignore"
  For Each sPath In aPath
    sCmd &= " " & Mid$(sPath, Len(Project.Dir) + 2)
    Project.LockedPaths.Remove(sPath)
    Project.AddedPaths.Remove(sPath)
    Project.ConflictPaths.Remove(sPath)
  Next

  Shell sCmd To sStatus

  UpdatePathFromStatus(sStatus)

End

Public Sub CheckPaths()

  Dim sStatus As String

  Shell "cd " & Shell$($sRealDir) & "; svn status --no-ignore" To sStatus
  UpdatePathFromStatus(sStatus)

End

Public Sub Status(Optional sPath As String) As String

  Dim sStatus As String
  Dim sCmd As String

  sCmd = "cd " & Shell$($sRealDir) & "; svn status -q" 
  If sPath Then sCmd &= " " & Shell$(SvnPath$(sPath))

  Shell sCmd To sStatus
  Return sStatus
  
End


Public Sub Commit(sChange As String) As Boolean

  Dim hFile As File

  hFile = Open Temp$("commit") For Create
  Print #hFile, sChange;
  Close #hFile
  
  VersionControl.Run(["svn", "commit", "--file", Temp$("commit"), SvnPath$($sRealDir)], True, False, VersionControl.LANG_ENV)
  Return Process.LastValue

End

Public Sub Update() As Boolean

  Dim bResult As Integer
  Dim sFile As String
  Dim sPath As String
  
  bResult = VersionControl.Run(["svn", "update", SvnPath$($sRealDir), "--accept", "postpone"], True)
  For Each sFile In [".project", ".startup", ".component", ".info"]
    sPath = $sRealDir &/ sFile
    If Exist(sPath) And If InConflict(sPath) Then Resolve(sPath, "theirs-full")
  Next
  For Each sFile In [".settings"]
    sPath = $sRealDir &/ sFile
    If Exist(sPath) And If InConflict(sPath) Then Resolve(sPath, "mine-full")
  Next
  Return bResult

End

Public Sub Revert(Optional sPath As String) As Boolean

  If sPath Then
    VersionControl.Run(["svn", "revert", SvnPath$(sPath)])
  Else
    VersionControl.Run(["svn", "-R", "revert", SvnPath$($sRealDir)])
  Endif
  Return Process.LastValue

End



Public Sub InConflict(sPath As String) As Boolean

  If Not Exist(sPath) Then
    Debug sPath; ": does not exist"
    Return False
  Endif
  If Dir(File.Dir(sPath), File.Name(sPath) & ".r*").Count Then Return True

End

Public Sub Resolve(sPath As String, Optional sAccept As String) As Boolean

  Dim aArg As String[]
  
  If sAccept Then 
    aArg = ["svn", "resolve", SvnPath$(sPath), "--accept", sAccept]
  Else
    aArg = ["svn", "resolved", SvnPath$(sPath)]
  Endif
  VersionControl.Run(aArg)
  Return Process.LastValue

End

Public Sub Checkout(sPath As String, sDir As String) As Boolean

  VersionControl.Run(["svn", "checkout", SvnPath$(sPath), SvnPath$(sDir)], True)
  
End

Public Sub HasConflict() As Boolean

  ' FIXME: must be recursive!
  If Dir(Project.Dir, "*.module.r*").Count Then Return True
  If Dir(Project.Dir, "*.class.r*").Count Then Return True
  If Dir(Project.Dir, "*.form.r*").Count Then Return True

End

Public Sub GetVersion(sDir As String) As String

  Dim sRes As String

  If Exist(sDir &/ ".svn") Then
    Shell "cd " & Shell$(sDir) & "; " & VersionControl.LANG_ENV.Join(" ") & " svn info" To sRes
    Try sRes = Scan(sRes, "*\nRevision: *\n*")[1]
    If Error Then 
      Return "?"
    Else
      Return "r" & sRes
    Endif
  Endif

End

Public Sub Diff(sPath As String) As String

  Dim sDiff As String

  Shell "svn diff " & Shell$(SvnPath$(sPath)) To sDiff
  Return sDiff

End

Private Sub FormatSvnDate(sDate As String) As String

  Dim aDate As String[]
  
  aDate = Split(sDate, "*-*-* *:*:* *")
  Try Return Format(Date(CInt(aDate[0]), CInt(aDate[1]), CInt(aDate[2]), CInt(aDate[3]), CInt(aDate[4]), CInt(aDate[5])), gb.GeneralDate)
  If Error Then Return sDate & " ?"

End

Public Sub Info(bRemote As Boolean) As Collection

  Dim sLine As String
  Dim aLine As String[]
  Dim sUrl As String
  Dim cInfo As New Collection
  Dim cData As New Collection
  
  If VersionControl.Run(["svn", "info", SvnPath$($sRealDir)], False, True, VersionControl.LANG_ENV) = 0 Then
  
    cData.Clear
    For Each sLine In Split(VersionControl.Output, "\n", "", True)
      aLine = Scan(sLine, "*: *")
      If aLine[0] = "Repository Root" Then sUrl = Trim(aLine[1])
      cData[Trim(aLine[0])] = Trim(aLine[1])
    Next
    
    cInfo["revision"] = cData["Revision"]
    cInfo["author"] = cData["Last Changed Author"]
    cInfo["date"] = FormatSvnDate(cData["Last Changed Date"])
    cInfo["url"] = sUrl
    cInfo["path"] = cData["Working Copy Root Path"]
    
  Endif
  
  If bRemote And If sUrl Then
  
    If VersionControl.Run(["svn", "info", SvnPath$(sUrl)], True, True, VersionControl.LANG_ENV) = 0 Then
    
      cData.Clear
      For Each sLine In Split(VersionControl.Output, "\n", "", True)
        aLine = Scan(sLine, "*: *")
        cData[Trim(aLine[0])] = Trim(aLine[1])
      Next
      
      cInfo["remote.revision"] = cData["Revision"]
      cInfo["remote.author"] = cData["Last Changed Author"]
      cInfo["remote.date"] = FormatSvnDate(cData["Last Changed Date"])
      
    Endif
    
  Endif
  
  Return cInfo
  
End


Public Sub CleanUp(sPath As String)

  VersionControl.Run(["svn", "cleanup", SvnPath$(sPath)])
  
End

