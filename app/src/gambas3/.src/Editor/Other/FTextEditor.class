' Gambas class file

'
' Copyright (C) Beno√Æt Minisini
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 2 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor, 
' Boston, MA  02110-1301  USA
'

Public Path As String
Public Editor As Editor
Public Age As Integer

Property Read ReadOnly As Boolean

Static Private $aExt As String[] = ["htm", "html", "xml", "svg", "css", "webpage", "js", "c", "h", "cpp"]

Private $bNoHighlight As Boolean
Private $bModify As Boolean

Private $iViewMode As Integer
Private Const VIEWMODE_NORMAL As Integer = 0 
Private Const VIEWMODE_HORIZONTAL As Integer = 1
Private Const VIEWMODE_VERTICAL As Integer = 2

Private $hEditor1 As Editor
Private $hEditor2 As Editor
Private $hInsertColor As CInsertColor

Public Sub _new(sPath As String, Optional bModule As Boolean)

  Path = sPath
  Editor = edtEditor
  
  If bModule Then
    btnShowCode.Visible = True
    Me.Name = File.BaseName(Path)
  Else
    btnShowCode.Visible = False
    Me.Name = File.Name(Path)
  Endif
  
  'edtEditor.Flags[Editor.ShowCursorPosition] = True
  
End

Public Sub LoadFile() As Boolean
  
  Dim sExt As String = LCase(File.Ext(Path))
  Dim bShowCompress As Boolean
  
  With edtEditor
    .Clear
    .Flags[Editor.HighlightBraces] = True
  End With
  
  If $aExt.Exist(sExt) Then

    Select Case sExt
      Case "css"
        edtEditor.Highlight = Highlight.CSS
        bShowCompress = Not Project.IsHiddenPath(Path)
      Case "webpage"
        edtEditor.Highlight = Highlight.WebPage
      Case "js"
        edtEditor.Highlight = Highlight.JavaScript
        bShowCompress = Not Project.IsHiddenPath(Path)
      Case "c"
        edtEditor.Highlight = Highlight.C
      Case "cpp", "h"
        edtEditor.Highlight = Highlight.CPlusPlus
      Case Else 
        edtEditor.Highlight = Highlight.HTML
    End Select 
    $bNoHighlight = False
  Else
    $bNoHighlight = True
  Endif

  Action[".compress,.uncompress", Me].Visible = bShowCompress

  $hInsertColor = New CInsertColor(btnInsertColor, Editor)

  ReadConfig

  Project.InitMove(Me)

  SetReadOnly
  Reload

  $bModify = False
  edtEditor.SetFocus

  DrawTitle
  
End

Public Sub Form_Arrange()
  
  Dim iToolbarOffset As Integer
  
  'If we add the ability to hide the toolbar then uncomment this code 
  'IF $bToolbar THEN
  '  panToolBar.Move(0, 0, ME.CLientW)
  '  iToolbarOffset = panToolBar.H
  'ELSE
  '  iToolbarOffset = 0
  'ENDIF
  
  iToolbarOffset = panToolBar.H
  
  Select Case $iViewMode
    Case 0
      edtEditor.Move(0, iToolbarOffset, Me.ClientW, Me.ClientH - iToolbarOffset)
    Case 1
      splHorizontal.Move(0, iToolbarOffset, Me.ClientW, Me.ClientH - iToolbarOffset)
    Case 2
      splVertical.Move(0, iToolbarOffset, Me.ClientW, Me.ClientH - iToolbarOffset)
  End Select 

End

Public Sub ReadConfig()

  edtEditor.ReadConfig
  If $hEditor1 Then $hEditor1.ReadConfig
  If $hEditor2 Then $hEditor2.ReadConfig

End

Public Function Save() As Boolean

  'Project.Config.WriteString("/Window" &/ Name &/ "Pos",
  '  CStr(ME.X) & "," & CStr(ME.Y) & "," & CStr(ME.Width) & "," & CStr(ME.Height))

  If Not $bModify Then Return

  Save.Begin(Path)

  File.Save(Path, Editor.Text)
  Editor.Reset
  $bModify = False
  DrawTitle

  Save.End()

Catch

  Return Save.Error()

End

Private Sub DrawTitle()

  Project.DrawTitle(Me)

End

Public Sub Modify(Optional bReset As Boolean)

  If Project.ReadOnly Then Return
  
  If bReset Then
    
    If Not $bModify Then Return
    $bModify = False
    
  Else

    $bModify = True
    Inc Project.TimeStamp
    Inc Age
    FSearch.OnFileChange(Me.Path)
    
  Endif

  DrawTitle
  
End


Public Function IsModified() As Boolean

  Return $bModify

End


Public Sub Editors_Change()

  Modify

End


Public Sub Editors_KeyPress()
  
  If Key.Code = Key.Escape Then 
    Action["find"].Value = False
  Endif
  
  If Key.Code = Key.Insert Then

    If Key.Shift Then
      If Not Editor.ReadOnly Then
        Editor.Paste
      Endif 
    Else If Key.Control Then
      Editor.Copy
    Endif 
    
  Else If Key.Code = Key.Delete Then

    If Key.Shift Then
      If Not Editor.ReadOnly Then
        Editor.Cut
      Endif 
    Endif 
    
  Else If Key.Code = Key.Return Then 
      
    If Key.Control Then
      
      If Key.Shift Then 
        If Editor.Lines[Editor.Line].Expanded Then
          Editor.CollapseAll
        Else
          Editor.ExpandAll
        Endif
      Else
        Editor.Lines[Editor.Line].Expanded = Not Editor.Lines[Editor.Line].Expanded
      Endif
      Stop Event
      
    Endif
    
  Endif 

End



'PUBLIC SUB Form_KeyPress(Ascii AS String, Code AS Integer, State AS Integer)
'
'  IF Code = Asc("S") AND State = Mouse.Control THEN
'    ME.Save
'  ENDIF
'
'END



Public Sub Form_GotFocus()
  
  Editor.SetFocus
  
End

Public Sub Goto(iLine As Integer, Optional iColumn As Integer = -1)

  'DEC iLine
  If iColumn < 0 Then iColumn = Editor.Column
  Editor.Goto(iLine, iColumn, True)

End


Public Sub GotoCenter(iLine As Integer, Optional iColumn As Integer = -1)

  Goto(iLine, iColumn)

End


Public Sub Editors_Menu()

  mnuEditor.Popup

End

Public Sub Editors_GotFocus()
  
  Editor = Last 
  $hInsertColor.SetEditor(Editor)
  Project.SetCurrentPopup(mnuEditor)
  
End

Public Sub mnuSave_Click()

  Save

End


' PUBLIC SUB mnuFind_Click()
'
'   DIM sSel AS String
'   DIM iPos AS Integer
'
'   sSel = Left$(Trim(edtEditor.Selection.Text), 64)
'   iPos = Instr(sSel, gb.NewLine)
'   IF iPos THEN sSel = Left$(sSel, iPos - 1)
'
'   Project.FindForm.Find(sSel)
'
' END
'
'
' PUBLIC SUB mnuFindNext_Click()
'
'   Project.FindForm.FindNext
'
' END
'
'
' PUBLIC SUB mnuFindPrevious_Click()
'
'   Project.FindForm.FindPrevious
'
' END


Public Sub Rename(sNewName As String, sNewPath As String)

  Me.Name = sNewName
  Path = sNewPath 'File.Dir(Path) &/ sNewName & "." & File.Ext(Path)
  DrawTitle

End


Public Sub mnuCut_Click()

  Editor.Cut

End

Public Sub mnuCopy_Click()

  Editor.Copy

End

Public Sub mnuPaste_Click()

  Editor.Paste

End

Public Sub mnuUndo_Click()

  Editor.Undo

End

Public Sub mnuRedo_Click()

  Editor.Redo

End


Public Sub mnuGotoLine_Click()

  Dim iLine As Integer

  iLine = FGotoLine.Run(Editor.Line + 1)
  If iLine <= 0 Then Return
  GotoCenter(iLine - 1)

End


' PUBLIC SUB mnuWordWrap_Click()
'
'   edtEditor.Wrap = NOT edtEditor.Wrap
'   mnuWordWrap.Checked = edtEditor.Wrap
'
' END


Public Sub mnuSelectAll_Click()

  Editor.SelectAll()

End


Private Sub SetReadOnly()

  edtEditor.ReadOnly = False
  If Project.ReadOnly Or If Project.Running Or If Not Exist(Path) Or If Stat(Path).Type = gb.Link Then
    edtEditor.ReadOnly = True
  Endif

  If $hEditor1 Then $hEditor1.ReadOnly = edtEditor.ReadOnly
  If $hEditor2 Then $hEditor2.ReadOnly = edtEditor.ReadOnly

End

Public Sub OnProjectDebug()

  SetReadOnly

End

Public Sub OnShowString(sStr As String, bIgnoreCase As Boolean)
  
  edtEditor.ShowString(sStr, bIgnoreCase)
  If $hEditor1 Then $hEditor1.ShowString(sStr, bIgnoreCase)
  If $hEditor2 Then $hEditor2.ShowString(sStr, bIgnoreCase)
  
End

Private Sub AnalyzeCode(sText As String) As String
  
  Dim iInd As Integer
  Dim iPos As Integer
  Dim iLen As Integer
  
  If Not sText Then Return
  
  Highlight.Analyze(sText, True)
  
  iPos = 0
  For iInd = 0 To Highlight.Symbols.Max
    
    If iPos < Highlight.Positions[iInd] Then 
      Highlight.Add(Highlight.Normal, Highlight.Positions[iInd] - iPos)
      iPos = Highlight.Positions[iInd]
    Endif
    
    iLen = String.Len(Highlight.Symbols[iInd])
    Highlight.Add(Highlight.Types[iInd], iLen)
    iPos += iLen
    
  Next

  If iPos < String.Len(Highlight.TextAfter) Then 
    Highlight.Add(Highlight.Normal, String.Len(Highlight.TextAfter) - iPos)
  Endif
  
  Return Highlight.TextAfter

End


Public Sub Form_Activate()

  Editor.SetFocus

End

Private Function ReadOnly_Read() As Boolean

  Return edtEditor.ReadOnly  

End

Public Sub Reload()

  Dim sText As String
  sText = File.Load(Path)
  
  If $bNoHighlight Then
    If LTrim(sText) Like "<!DOCTYPE*" Or If LTrim(sText) Like "<html*" Then
      edtEditor.Highlight = Highlight.HTML
    Else
      edtEditor.Highlight = Highlight.None
    Endif
  Endif
  
  edtEditor.Text = sText
  Editor.SetFocus
  Modify(True)

End

Public Sub mnuReload_Click()

  If IsModified() Then
    If Message.Warning(("The file has been modified.\n\nAll your changes will be lost."), ("Reload"), ("Cancel")) <> 1 Then Return
  Endif

  Reload

End

Public Sub GetState() As String
  
  Return CStr(Editor.Line) & "." & CStr(Editor.Column)
  
End

Public Sub SetState(sState As String)
  
  Dim aState As String[] = Split(sState, ".")
  
  Editor.Goto(CInt(aState[0]), CInt(aState[1]))
  
End

Private Sub InitEditor(hEditor As Editor)
  
  With hEditor
    .Border = False
    .View = edtEditor
    .Highlight = edtEditor.Highlight
    '.Flags[Editor.HighlightImmediately] = edtEditor.Flags[Editor.HighlightImmediately]
    .Flags[Editor.HighlightBraces] = edtEditor.Flags[Editor.HighlightBraces]
    '.Flags[Editor.ShowCursorPosition] = edtEditor.Flags[Editor.ShowCursorPosition]
    .ReadOnly = edtEditor.ReadOnly
    .TabSize = edtEditor.TabSize
  End With 
  hEditor.ReadConfig
  
End

Private Sub SetViewMode(iViewMode As Integer)
  
  If $iViewMode = iViewMode Then Return 
  $iViewMode = iViewMode

  If $iViewMode <> VIEWMODE_NORMAL And If Not $hEditor1 Then 
    $hEditor1 = New Editor(Me) As "Editors"
    InitEditor($hEditor1)
    $hEditor2 = New Editor(Me) As "Editors"
    InitEditor($hEditor2)
    FSearch.OnNewForm(Me)
  Endif
  
  Select Case $iViewMode
  
    Case VIEWMODE_NORMAL
      edtEditor.Show
      splHorizontal.Hide
      splVertical.Hide
      edtEditor.Goto(Editor.Line, Editor.Column, True)
      Editor = edtEditor  
      
    Case VIEWMODE_HORIZONTAL
      $hEditor1.Reparent(splHorizontal)
      $hEditor2.Reparent(splHorizontal)
      edtEditor.Hide
      splHorizontal.Show
      splVertical.Hide
      $hEditor1.Goto(Editor.Line, Editor.Column, True)
      $hEditor2.Goto(Editor.Line, Editor.Column, True)
      Editor = $hEditor1
  
    Case VIEWMODE_VERTICAL
      $hEditor1.Reparent(splVertical)
      $hEditor2.Reparent(splVertical)
      edtEditor.Hide
      splHorizontal.Hide
      splVertical.Show
      $hEditor1.Goto(Editor.Line, Editor.Column, True)
      $hEditor2.Goto(Editor.Line, Editor.Column, True)
      Editor = $hEditor1
  
  End Select   
  
  $hInsertColor.SetEditor(Editor)
  Editor.SetFocus
  Form_Arrange
  
End

Public Sub mnuNoSplit_Click()
  
  SetViewMode(VIEWMODE_NORMAL)

End

Public Sub mnuHorizontalSplit_Click()

  SetViewMode(VIEWMODE_HORIZONTAL)

End

Public Sub mnuVerticalSplit_Click()

  SetViewMode(VIEWMODE_VERTICAL)

End

Public Sub mnuShowCode_Click()

  Project.OpenFile(Me.Name)

End

Public Sub GetText() As String
  
  Return Editor.Text
  
End

Public Sub GetPosition() As Integer
  
  Return Editor.GetPosition()

End

Public Sub SetPosition(hResult As CFindResult, Optional bJustCheck As Boolean) As Boolean
  
  Return Editor.SetPosition(hResult, bJustCheck)
  
End

Public Sub Replace(sReplace As String)
  
  Editor.Replace(sReplace)
  
End

Public Sub GetSelection() As String
  
  Return Editor.GetSelection()
  
End

Public Sub mnuInsertColor_Click()

  $hInsertColor.Insert

End

Private Sub SetText(sText As String)
  
  Editor.Begin
  Editor.SelectAll
  Editor.Insert(sText)
  Editor.End
  
End

Private Sub GetUncompressPath() As String
  
  Return Project.Dir &/ ".hidden/Uncompressed" &/ Mid$(Path, Len(Project.Dir) + 1)
  
End


Public Sub mnuCompress_Click()
  
  Dim sText As String
  Dim iLen As Integer
  Dim fGain As Float
  Dim sPath As String
  
  If Project.IsHiddenPath(Path) Then Return
  
  Inc Application.Busy
  Me.Save
  sText = Editor.Text
  iLen = Len(sText)
  Select Case Editor.Highlight 
    Case Highlight.JavaScript
      sText = MCompressFile.Javascript(sText)
    Case Highlight.CSS
      sText = MCompressFile.Css(sText)
  End Select
  
  fGain = Len(sText) / iLen
  Dec Application.Busy
  
  If fGain < 0.95 Then
    sPath = GetUncompressPath()
    If Not Exist(File.Dir(sPath)) Then Project.InsertDirectory(File.Dir(sPath))
    If Not Exist(sPath) Then 
      Project.InsertFile(File.Name(sPath), File.Dir(sPath), Path, True)
    Else
      File.Save(sPath, Editor.Text)
    Endif
    SetText(sText)
    Message.Info("<b>" & Subst(("The file has been compressed from &1 to &2 bytes (&3)."), Str(iLen), Str(Len(sText)), Format(fGain, "#.##%")) & "</b><p>" & ("Original file has been saved in the <b>Project</b> folder."))
  Endif
  
Catch
  
  Dec Application.Busy
  Message.Error("<b>" & ("Unable to compress file.") & "</b><p>" & Error.Text)
  
End

Public Sub mnuUncompress_Click()
  
  Dim sPath As String
  
  If Project.IsHiddenPath(Path) Then Return
  
  sPath = GetUncompressPath()
  If Not Exist(sPath) Then Return
  SetText(File.Load(sPath))
  
End

Public Sub Editors_Cursor()

  lblInfo.Text = CStr(Editor.Column + 1) & ":" & CStr(Editor.Line + 1)

End

Public Sub mnuLowerCase_Click()
  
  If Editor.ReadOnly Then Return
  If Not Editor.Selected Then Return
  
  Editor.StoreSelection
  Editor.Begin
  Editor.Insert(String.LCase(Editor.Selection.Text))
  Editor.End
  Editor.RecallSelection
  
End

Public Sub mnuUpperCase_Click()
  
  If Editor.ReadOnly Then Return
  If Not Editor.Selected Then Return
  
  Editor.StoreSelection
  Editor.Begin
  Editor.Insert(String.UCase(Editor.Selection.Text))
  Editor.End
  Editor.RecallSelection
  
End
