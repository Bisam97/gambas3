' Gambas class file

Private $sType As String

Static Private $iMagicNumber As Integer = 314159265

Static Public Sub __Get(sType As String) As Variant
  
  Dim vVal As Variant
  
  Inc $iMagicNumber
  
  Select Case sType
    
    Case "b"
      vVal = True
    Case "c"
      vVal = CByte($iMagicNumber)
    Case "d"
      vVal = Now
    Case "f"
      vVal = Pi
    Case "i"
      vVal = $iMagicNumber
    Case "l"
      vVal = CLong($iMagicNumber)
    Case "o"
      vVal = New CDatatype("o")
    Case "p"
      vVal = CPointer($iMagicNumber)
    Case "h"
      vVal = CShort($iMagicNumber)
    Case "g"
      vVal = CSingle($iMagicNumber)
    Case "s"
      vVal = "Gambas"
    Case "v"
      vVal = New CDatatype("v")
    Case Else
      vVal = New CDatatype(sType)
    
  End Select

  Return vVal
  
End

Static Public Sub __TypeOf(vVal As Variant) As String

  Dim hType As CDatatype
  
  Try hType = vVal
  
  If Error Then 
    Select TypeOf(vVal)
      Case gb.Boolean
        Return "b"
      Case gb.Byte
        Return "c"
      Case gb.Date
        Return "d"
      Case gb.Float
        Return "f"
      Case gb.Integer
        Return "i"
      Case gb.Long
        Return "l"
      Case gb.Object
        Return "o"
      Case gb.Pointer
        Return "p"
      Case gb.Short
        Return "h"
      Case gb.Single
        Return "g"
      Case gb.String
        Return "s"
      Case gb.Variant
        Return "v"
    End Select
  Else
    Return hType.__GetType()
  Endif
  
End

Static Public Sub __MakeArray(hArray As Object) As CDatatype

  Dim sType As String
  Dim I As Integer
  Dim sEltType As String
  
  If hArray Is Array Then 
    
    For I = 0 To hArray.Max
      
      sEltType = __TypeOf(hArray[I])
      If Not sType Then 
        sType = sEltType
      Else 
        If sEltType <> sType Then
          sType = "v"
          Break
        Endif
      Endif
      
    Next
    
    If Len(sType) = 1 Then sType = CSymbolInfo.GetType(sType)
    sType &= "[]"
    
  Else
    
    sType = Object.Type(hArray)
    
  Endif
  
  Return New CDatatype(sType)
  
End

Static Public Sub __MinMax(...) As Variant

  Dim sType As String
  Dim I As Integer
  Dim sEltType As String
  Dim iPos As Integer
  Dim iPos2 As Integer
  
  For I = 0 To Param.Max
    
    sEltType = __TypeOf(Param[I])

    If Not sType Then 
      sType = sEltType
    Else 
      If sEltType <> sType Then
        If Len(sEltType) = 1 And If Len(sType) = 1 Then
          iPos = InStr("chilf", sEltType)
          iPos2 = InStr("chilf", sType)
          If iPos And If iPos2 Then 
            sType = Mid$("chilf", Max(iPos, iPos2), 1)
            Continue
          Endif
        Endif
        sType = "v"
        Break
      Endif
    Endif
    
  Next
  
  Return CDatatype.__Get(sType)
  
End

Public Sub _new(sType As String)
  
  $sType = sType
  
End

Public Sub _get(...) As Variant

  Dim hSymbol As CSymbolInfo  
  
  If $sType = "o" Or If $sType = "v" Then Return __Get("v")
  
  Try hSymbol = Project.Documentation.GetClassSymbols($sType)["_get"]
  If hSymbol Then Return __Get(hSymbol.Type)
  
End

Public Sub _put((vVal) As Variant, ...)
  
End

Public Sub _property() As Boolean
  
  Dim hSymbol As CSymbolInfo  

  Try hSymbol = Project.Documentation.GetClassSymbols($sType)[Param.Name]
  If hSymbol Then Return hSymbol.IsProperty
  
End

Public Sub _unknown(...) As Variant
  
  Dim hSymbol As CSymbolInfo  

  Try hSymbol = Project.Documentation.GetClassSymbols($sType)[Param.Name]
  If hSymbol Then Return __Get(hSymbol.Type)
  
End

Public Sub __GetType() As String
  
  Return $sType
  
End

