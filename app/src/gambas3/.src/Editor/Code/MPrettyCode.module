' Gambas module file

Private $cOpen As New Collection
Private $cClose As New Collection

Private $iLine As Integer
Private $iLevel As Integer
Private $bLastNewLine As Boolean
Private $bNeedNewLine As Boolean
Private $iLastDim As Integer
Private $iLastSelect As Integer

Private $bIndentDim As Boolean
Private $bRemoveSpace As Boolean
Private $bKeepVoidLine As Boolean

Public Sub _init()
  
  Dim sStr As String
  
  For Each sStr In ["DO", "FOR", "ELSE", "SELECT", "CASE", "DEFAULT", "WHILE", "REPEAT", "WITH", "CATCH", "FINALLY"]
    $cOpen[sStr] = True
  Next
  For Each sStr In ["LOOP", "NEXT", "ENDIF", "END IF", "ELSE", "CASE", "DEFAULT", "WEND", "UNTIL", "END WITH", "CATCH", "FINALLY"]
    $cClose[sStr] = True
  Next
  ' IF and END SELECT are special
  
End

Public Sub Run(sText As String, Optional iLevel As Integer) As String
  
  Dim aLine As String[] = Split(sText, "\n")
  Dim sLine As String
  Dim iLine As Integer
  
  $bIndentDim = Settings["/FormatCode/IndentLocal", 1]
  $bRemoveSpace = Settings["/FormatCode/RemoveSpaces", 0]
  $bKeepVoidLine = Settings["/FormatCode/KeepVoidLines", 0]
  
  $iLevel = iLevel
  $bLastNewLine = True
  $iLastDim = -1
  $iLastSelect = -1
  
  While iLine < aLine.Count
    
    $iLine = iLine
    aLine[iLine] = IndentLine(aLine[iLine])
    If $bRemoveSpace Then aLine[iLine] = RTrim(aLine[iLine])
    
    If Not $bKeepVoidLine And If iLine > 0 And If Not Trim(aLine[iLine]) And If Not Trim$(aLine[iLine - 1]) Then
      aLine.Remove(iLine)
    Else
      Inc iLine
    Endif
    
  Wend
  
  Return aLine.Join("\n")
  
End

Private Sub IsStruct() As Boolean
  
  Dim aSym As String[] = Highlight.Symbols
  Dim iInd As Integer
  
  If aSym.Count >= 3 Then
    If aSym[iInd] = "PUBLIC" Then Inc iInd
    Return aSym[iInd] = "STRUCT"
  Endif
  
End

Private Sub IsEndStruct() As Boolean
  
  Dim aSym As String[] = Highlight.Symbols
  
  If aSym.Count = 2 And If aSym[0] = "END" And If aSym[1] = "STRUCT" Then Return True
  
End

Private Sub IndentLine(sLine As String) As String
  
  Dim aSym As String[]
  Dim sAdd As String
  Dim iNextLevel As Integer
  Dim sSym As String
  Dim iPos As Integer
  Dim iType As Integer
  
  sLine = LTrim(sLine)
  
  If sLine Then
    
    If Left(sLine) = "'" Then
      Return Space$(Project.TabSize * $iLevel) & sLine
    Endif
    
    aSym = Highlight.Analyze(Highlight.Purge(Trim(sLine)))
    While aSym.Count
      iType = Highlight.Types[aSym.Max]
      If iType <> Highlight.Comment And If iType <> Highlight.Help Then Break
      aSym.Remove(aSym.Max)
    Wend
    
    If aSym.Count Then
      
      If $bNeedNewLine Then
        If Not $bLastNewLine Then sAdd = "\n"
        $bNeedNewLine = False
      Endif
      
      If aSym.Count = 2 And If aSym[1] = ":" Then
        iNextLevel = $iLevel
        Dec $iLevel
      Else If FEditor.IsCurrentProc() Then
        $iLevel = 0
        iNextLevel = 1
        $bNeedNewLine = True
        If Not $bLastNewLine Then sAdd = "\n"
      Else If FEditor.IsCurrentEndProc() Then
        $iLevel = 0
        iNextLevel = 0
        $bNeedNewLine = True
        If Not $bLastNewLine Then sAdd = "\n"
      Else If IsStruct() Then
        $iLevel = 0
        iNextLevel = 1
        If Not $bLastNewLine Then sAdd = "\n"
      Else If IsEndStruct() Then
        $iLevel = 0
        iNextLevel = 0
        $bNeedNewLine = True
      Else
        sSym = aSym[0]
        If sSym = "END" And If aSym.Count >= 2 Then sSym &= " " & aSym[1]
        
        If sSym = "DIM" Then
          
          $iLastDim = $iLine
          If Not $bIndentDim Then $iLevel = 0
          iNextLevel = 1
        
        Else
        
          If $iLastDim = ($iLine - 1) Then
            If Not $bLastNewLine Then sAdd = "\n"
          Endif
        
          If sSym = "END SELECT" Then
            $iLevel -= 2
            iNextLevel = $iLevel
          Else If Right(aSym[0]) = ":" Then
            iNextLevel = $iLevel
            $iLevel = 0
          Else If sSym = "IF" Then
            iNextLevel = $iLevel
            iPos = aSym.Find("THEN")
            If iPos < 0 Or If iPos = aSym.Max Then Inc iNextLevel
          Else If sSym = "SELECT" Then
            $iLastSelect = $iLine
            iNextLevel = $iLevel + 2
          Else
            If $cClose.Exist(sSym) Then Dec $iLevel
            iNextLevel = $iLevel
            If $cOpen.Exist(sSym) Then Inc iNextLevel
          Endif
          
        Endif
        
      Endif
      
      $bLastNewLine = False 
      
      $iLevel = Max(0, $iLevel)
      iNextLevel = Max(0, iNextLevel)
      
      sLine = sAdd & Space$(Project.TabSize * $iLevel) & sLine
      $iLevel = iNextLevel
      
      Return sLine
      
    Endif
    
  Endif
  
  $bLastNewLine = True
  sLine = Space$(Project.TabSize * $iLevel)
  Return sLine
  
End
