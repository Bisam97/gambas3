' Gambas class file

Static Private $aPositions As New CPosition[]
Static Private $iCurrent As Integer
Static Private $iDisable As Integer
Static Private $hLast As CPosition

Private Const MAX_POS As Integer = 40

Public Path As String
Public Method As String
Public (Line) As Integer
Public Column As Integer

Static Public Sub Clear()
  
  $aPositions.Clear
  $iCurrent = -1
  $iDisable = 0
  $hLast = Null
  UpdatePosition
  
End

Static Private Sub UpdatePosition()
  
  FMain.UpdatePosition($iCurrent > 0, $iCurrent < $aPositions.Max)
  
End

Static Private Sub AddPosition(hPos As CPosition)

  If $iCurrent >= 1 Then
  
    If hPos.IsEqual($aPositions[$iCurrent]) Then Return
  
    'If hPos.IsNear($aPositions[$iCurrent]) And If $aPositions[$iCurrent - 1].IsNear($aPositions[$iCurrent]) Then
    If hPos.IsNear($hLast) Then
      $aPositions[$iCurrent] = hPos
      $hLast = hPos
      Return
    Endif
    
  Endif
  
  If $iCurrent >= MAX_POS Then
    $aPositions.Remove(0)
    Dec $iCurrent
  Endif

  Inc $iCurrent
  $aPositions.Resize($iCurrent)
  $aPositions.Add(hPos)
  $hLast = hPos
  
End

Static Private Sub MakePos(hForm As Object) As CPosition

  Dim hPos As CPosition
  Dim hEditor As TextEditor
  
  If Not hForm Then Return
  
  hPos = New CPosition
  hPos.Path = hForm.Path

  Try hEditor = hForm.GetEditor()
  If hEditor Then
    hPos.Line = hEditor.Line
    hPos.Column = hEditor.Column
    Try hPos.Method = hForm.GetProcAt(hPos.Line)
  Else 
    hPos.Line = -1
    hPos.Column = -1
  Endif
  
  Return hPos
  
End

Static Public Sub SaveCurrent(hForm As Object, Optional (bForce) As Boolean)

  Dim hEditor As TextEditor
  Dim hPos As CPosition

  If $iDisable Then Return
  If Not hForm Then Return
  If hForm <> Project.ActiveForm Then Return
  If Not Object.IsValid(hForm) Then Return

  hPos = New CPosition
  With hForm
    hPos.Path = .Path
    Try hEditor = hForm.GetEditor()
    If hEditor Then
      
      hPos.Line = hEditor.Line
      hPos.Column = hEditor.Column
      Try hPos.Method = hForm.GetProcAt(hPos.Line)
      AddPosition(hPos)
      
    Else
      
      hPos.Line = -1
      hPos.Column = -1
      AddPosition(hPos)
      
    Endif
    
  End With
  
  UpdatePosition
  
End

Static Public Sub MovePrevious()
  
  Dim hCurrent As CPosition
  
  If $iCurrent < 0 Then Return

  hCurrent = MakePos(Project.ActiveForm)
  If hCurrent And If Not hCurrent.IsEqual($aPositions[$iCurrent]) Then
    $aPositions[$iCurrent].Move()
    Return
  Endif
  
  If $iCurrent = 0 Then Return
  
  Dec $iCurrent
  $aPositions[$iCurrent].Move()
  UpdatePosition
  
End

Static Public Sub MoveNext()
  
  If $iCurrent >= $aPositions.Max Then Return
  
  Inc $iCurrent
  $aPositions[$iCurrent].Move
  UpdatePosition
  
End

Public Sub IsEqual(hPos As CPosition) As Boolean
  
  If Path = hPos.Path And If {Line} = hPos.Line Then Return True 'And If Column = hPos.Column Then Return True
  
End

Public Sub IsNear(hPos As CPosition) As Boolean
  
  If Path <> hPos.Path Then Return
  If Method <> hPos.Method Then Return
  Return Abs({Line} - hPos.Line) <= 1
  
End

Public Sub Move()
  
  Dim hForm As Object
  
  Inc $iDisable
  Wait
  Try hForm = Project.OpenFile(Path)
  If hForm Then
    If {Line} >= 0 Then hForm.Goto({Line}, Column)
  Endif
  Dec $iDisable
  
  $hLast = Me
  
End

Static Public Sub Disable()
  
  Inc $iDisable
  
End

Static Public Sub Enable()
  
  If $iDisable <= 0 Then Return
  Dec $iDisable
  
End

Public Sub GetDesc() As String
  
  Dim sDesc As String
  
  sDesc = File.BaseName(Path)
  If Method Then sDesc &= "." & Method
  If {Line} >= 0 Then sDesc &= "." & CStr({Line} + 1)
  
  Return sDesc
  
End


Static Public Sub FillMenu(mnuParent As Menu)
  
  Dim I As Integer
  Dim hMenu As Menu
  
  mnuParent.Children.Clear
  
  For I = $aPositions.Max DownTo 0
    hMenu = New Menu(mnuParent) As "mnuBackward"
    With $aPositions[I]
      hMenu.Text = .GetDesc()
      hMenu.Picture = Project.GetFileIcon(.Path)
      hMenu.Tag = I
      If I = $iCurrent Then hMenu.Checked = True
    End With
  Next
  
End

Static Public Sub mnuBackward_Click()
  
  Dim I As Integer = Last.Tag
  
  $aPositions[I].Move
  $iCurrent = I
  UpdatePosition
  
End

Public Sub Copy() As CPosition

  Dim hPos As CPosition
  
  hPos = New CPosition
  With hPos
    .Path = Path
    .Method = Method
    .Line = {Line}
    .Column = Column
  End With
  
  Return hPos
  
End
