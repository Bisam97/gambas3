' Gambas class file

Static Private $aIconSize As Integer[] = [16, 22, 32, 48, 64, 96, 128, 192, 256]

Private $bProjectHasChanged As Boolean = True
Private $bCut As Boolean

Private $iIconSizePreview As Integer
Private $iIconSizeNormal As Integer

Public Sub Form_Open()

  Settings.Read(fvwProject)
  $iIconSizeNormal = Settings["FProjectBrowser/IconSize", 3] 
  $iIconSizePreview = Settings["FProjectBrowser/PreviewIconSize", 3]

  ReadConfig
  sldIconSize_Change
  fvwProject.SetFocus
  
End

Private Sub SetDir(sDir As String)
  
  fvwProject.Dir = sDir
  UpdateMenu
  
End


Private Sub Reload()

  If $bProjectHasChanged Then 
    SetDir(Project.Dir)
    $bProjectHasChanged = False
  Endif

End

Public Sub OnProjectChange()
  
  $bProjectHasChanged = True
  If Me.Visible Then Reload
  
End

Public Sub ReadConfig()
  
  Project.SetNormalFont(fvwProject)
  
End

Public Sub btnClose_Click()

  FMain.CloseProjectEditor

End

Public Sub btnZoomOut_Click()

  Dec sldIconSize.Value

End

Public Sub btnZoomIn_Click()

  Inc sldIconSize.Value

End

Public Sub sldIconSize_Change()

  fvwProject.IconSize = $aIconSize[sldIconSize.Value]
  sldIconSize.Tooltip = fvwProject.IconSize
  If fvwProject.ShowPreview Then
    $iIconSizePreview = sldIconSize.Value
  Else
    $iIconSizeNormal = sldIconSize.Value
  Endif

End

Public Sub Form_Show()

  Reload

End

Private Sub UpdateMenu()

  Action[".up", Me].Enabled = Len(fvwProject.Dir) > Len(Project.Dir)
  Action[".icon-size,.zoom-in,.zoom-out", Me].Visible = Not fvwProject.ShowDetailed
  Action[".cut,.copy,.delete", Me].Enabled = fvwProject.Selection.Count > 0

End

Public Sub tlbProject_Configure()

  UpdateMenu

End

Public Sub fvwProject_Activate()

  If IsDir(fvwProject.Path) Then
    SetDir(fvwProject.Path)
  Else 
    Project.OpenFile(fvwProject.Path)
    Stop Event
  Endif

End

Public Sub btnPreview_Click()

  Dim iIconSize As Integer
  
  fvwProject.ShowPreview = btnPreview.Value
  'mnuShowPreview.Checked = btnPreview.Value

  If fvwProject.ShowPreview Then
    iIconSize = $iIconSizePreview
  Else 
    iIconSize = $iIconSizeNormal
  Endif
  sldIconSize.Value = iIconSize

End

Public Sub mnuShowDetailed_Click()

  fvwProject.ShowDetailed = Not fvwProject.ShowDetailed
  'mnuShowDetailed.Checked = fvwProject.ShowDetailed
  Object.Lock(btnDetail)
  btnDetail.Value = fvwProject.ShowDetailed
  Object.Unlock(btnDetail)
  UpdateMenu
  
End

Public Sub btnParent_Click()

  SetDir(File.Dir(fvwProject.Dir))

End

Public Sub btnReload_Click()

  fvwProject.Reload

End

Public Sub mnuProperty_Click()
  
  FFileProperty.Run(fvwProject.Path)
  
End

Private Sub GetPaths() As String[]

  Dim sFile As String
  Dim aPath As New String[]

  For Each sFile In fvwProject.Selection
    aPath.Add(fvwProject.Dir &/ sFile)
  Next

  Return aPath

End

Private Sub CopyCut(bCut As Boolean)
  
  Dim aPath As String[]

  aPath = GetPaths()
  If aPath.Count = 0 Then Return
  
  $bCut = bCut
  Clipboard.CopyPaths(aPath)
  
End

Public Sub btnCopy_Click()

  CopyCut(False)

End

Public Sub btnCut_Click()

  CopyCut(True)

End

Public Sub btnPaste_Click()
  
  
  
End


Public Sub fvwProject_Select()

  UpdateMenu
  Project.UpdateStatus(True)

End

Public Sub Form_Close()

  Settings.Write(fvwProject)
  Settings["FProjectBrowser/IconSize"] = $iIconSizeNormal
  Settings["FProjectBrowser/PreviewIconSize"] = $iIconSizePreview

End

Public Sub PaintStatus()
  
  Dim sText As String
  Dim aSel As String[]
  Dim sFile As String
  Dim hStat As Stat
  Dim nFile As Integer
  Dim nDir As Integer
  Dim iSize As Long
  Dim sDir As String
  
  If fvwProject.FileCount = 0 And If fvwProject.DirCount = 0 Then Return
  
  aSel = fvwProject.Selection
  
  If aSel.Count = 0 Then
  
    If fvwProject.FileCount = 0 Then 
      sText = ("No files")
    Else If fvwProject.FileCount = 1 Then
      sText &= ("One file")
    Else
      sText &= Subst(("&1 files"), fvwProject.FileCount)
    Endif
    
    sText &= "   "
    
    If fvwProject.DirCount = 0 Then 
        sText &= ("No directories")
    Else If fvwProject.DirCount = 1 Then
      sText &= ("One directory")
    Else
      sText &= Subst(("&1 directories"), fvwProject.DirCount)
    Endif
    
    If fvwProject.FileCount Then sText &= "   " & File.FormatSize(fvwProject.TotalSize)
    
  Else 
    
    sDir = fvwProject.Dir
    For Each sFile In aSel
      Try hStat = Stat(sDir &/ sFile)
      If Error Then Continue
      If hStat.Type = gb.Directory Then
        Inc nDir
      Else 
        Inc nFile
        iSize += hStat.Size
      Endif
    Next
    
    If nFile = 1 Then
      sText &= ("One selected file")
    Else If nFile > 1 Then
      sText &= Subst(("&1 selected files"), nFile)
    Endif
    
    sText &= "   "
    
    If nDir = 1 Then
      sText &= ("One selected directory")
    Else If nDir > 1 Then
      sText &= Subst(("&1 selected directories"), nDir)
    Endif
    
    If nFile Then sText &= "   " & File.FormatSize(iSize)
    
    sText = Trim(sText)
    
  Endif
  
  Paint.DrawText(sText, Paint.X, Paint.Y, Paint.W - Desktop.Scale, Paint.H, Align.Right)
  
End

Public Sub fvwProject_Refresh()
  
  Project.UpdateStatus(True)
  
End

Public Sub fvwProject_Menu()

  mnuPopup.Popup

End

Public Sub mnuPopup_Show()
  
  Dim sMime As String
  Dim hProgList As DesktopFile[]
  Dim bLink As Boolean
  Dim sPath As String
  Dim bIsDir As Boolean

  sPath = fvwProject.Path
  If Not sPath Then
    sPath = fvwProject.Dir
    mnuCopy.Hide
  Else 
    mnuCopy.Show
  Endif
  
  bIsDir = IsDir(sPath)
  Try bLink = Stat(sPath).Type = gb.Link
  If Error Then Return
  
  mnuOpen.Visible = Not bIsDir
  mnuCut.Visible = mnuCopy.Visible
  mnuPaste.Enabled = Clipboard.Format = MMime.FILE
  
  mnuOpenWith.Visible = False
  If mnuOpen.Visible Then
    sMime = MMime.GetMime(sPath)
    If sMime Then
      hProgList = DesktopFile.FromMime(sMime)
      If hProgList And If hProgList.Count Then
        mnuOpenWith.Visible = sMime
        mnuOpenWith.Tag = hProgList
      Endif
    Endif
  Endif
  
  mnuCopyPath.Visible = mnuCopy.Visible
  
  mnuClone.Visible = mnuCopy.Visible
  mnuClone.Enabled = mnuCopy.Enabled
  
  mnuOpenInProject.Hide
  mnuOpenWithFileManager.Show
  If bIsDir Then
  Else
    If bLink Then
      sPath = Project.GetAbsoluteLink(sPath, Stat(sPath).Link)
      If Project.FindProjectPath(sPath) Then 
        mnuOpenInProject.Show
        mnuOpenInProject.Tag = sPath
      Endif
    Endif
  Endif
    
  mnuInfoVC.Visible = VersionControl.Enabled
   
End

Public Sub mnuNewFile_Click()
  
  FCreateFile.Run(fvwProject.Path, fvwProject.Dir, Last.Tag)
  
End

Public Sub mnuImport_Click()
  
  FImportFile.Run(fvwProject.Path, fvwProject.Dir)
  
End


Public Sub mnuSelectAll_Click()

  fvwProject.SelectAll()

End

Public Sub fvwProject_GotFocus()

  Project.SetCurrentPopup(mnuPopup)

End
