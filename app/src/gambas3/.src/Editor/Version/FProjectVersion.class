' Gambas class file

Private $iTimeStamp As Integer
Private $bInitStatus As Boolean
Private $bInitTerminal As Boolean
Private $bInitChanges As Boolean
Private $bInitHistory As Boolean
Private $iSaveIndex As Integer
Private $sOldCommit As String

Public Sub _new()
  
  tabVersion.AddButton(btnSpace, Align.Left)
  tabVersion.AddButton(btnWorkspace, Align.Left)
  tabVersion.ShowButton(btnSpace, False)
  tabVersion.ShowButton(btnWorkspace, True)
  
  gvwHistory.Columns.Count = 1
  gvwHistory.Selectable = True
  
End

Public Sub Form_Open()
  
  ReadConfig
  
End

Public Sub Reload(Optional bForce As Boolean)
  
  If Project.TimeStamp = $iTimeStamp And If Not bForce Then Return
  
  $iTimeStamp = Project.TimeStamp
  
  $bInitChanges = False
  edtDiff.Clear()

  $bInitHistory = False
  
  $bInitStatus = False

  $bInitTerminal = False
  Try trmVersionControl.Kill()

  tlbRepository_Configure

  tabVersion_Click
  
End

Public Sub ReadConfig()
  
  tabVersion.TextFont = Project.GetSmallFont()
  Project.SetSmallFont(tlbCommit)
  Project.SetSmallFont(tlbChange)
  Project.SetSmallFont(tlbRepository)
  Project.SetSmallFont(tlbHistory)
  
  Project.SetConsoleFont(trmVersionControl)
  MTheme.InitControl(trmVersionControl)
  
End

Public Sub UpdateWorkspaceButtons(bShowSpace As Boolean)
  
  tabVersion.ShowButton(btnSpace, bShowSpace)
  
End

Private Sub SaveLastCommitLog()
  
  If $bInitChanges Then Project.Config["/FProjectVersion/LastCommit"] = RTrim(GetChanges())
  
End

Public Sub btnWorkspace_Click()
  
  SaveLastCommitLog()
  gvwHistory.Stop()
  FMain.CloseCurrentWorkspace
  
End

Public Sub OnProjectChange()
  
  If Project.Dir <> Project.PreviousDir Then
    Reload(True)
    trmVersionControl.Clear()
  Endif
  
End

Public Sub OnProjectClose()
  
  Try trmVersionControl.Kill
  
End

Public Sub InsertVersionControl(sText As String)
  
  trmVersionControl.Print(Replace(sText, "\n", "\r\n"))
  
End

Private Sub InitEditor(hEditor As TextEditor)
  
  hEditor.ReadConfig()
  hEditor.ShowLineNumber = False
  hEditor.TabSize = 8
  If hEditor.ReadOnly Then hEditor.ShowModified = False
  
End

Public Sub tabVersion_Click()

  Select Case tabVersion.Text
    
    Case ("Changes")
      
      If Not $bInitChanges Then
        
        InitEditor(edtJournal)
        InitEditor(edtDiff)
        panNothing.Background = edtJournal.Background
        
        $sOldCommit = RTrim(Project.Config["/FProjectVersion/LastCommit"])
        edtJournal.Text = $sOldCommit & "\n\n" & VersionControl.GetDefaultJournal()
        edtJournal.Goto(0, 0)
        
        LoadDiff
        
        btnCommit.Visible = panDiff.Visible
        If VersionControl.DoNotPush And VersionControl.HasRemote() Then
          btnCommitPush.Visible = panDiff.Visible
          btnPush.Visible = Not panDiff.Visible
        Else
          btnCommitPush.Hide
          btnPush.Hide
        Endif
        
        $bInitChanges = True
      Endif
      
      edtJournal.SetFocus()
      
    Case ("Repository")
      
      If Not $bInitStatus Then
        UpdateInfo
        InitEditor(edtStatus)
        edtStatus.ShowPosition = False
        edtStatus.ShowCurrent = False
        edtStatus.Text = VersionControl.Status(VersionControl.GetRoot())
        edtStatus.H = edtStatus.ScrollH
        svwStatus.Background = edtStatus.Background
        svwStatus.Foreground = edtStatus.Foreground
        $bInitStatus = True
      Endif
      
    Case ("History")
      
      If Not $bInitHistory Then
        VersionControl.FillBranchCombo(cmbBranch)
        RefreshHistory
        $bInitHistory = True
      Endif
    
    Case ("Terminal")
      
      If Not $bInitTerminal Then
        Try trmVersionControl.Exec(["bash"], ["PWD=" & VersionControl.GetRoot()])
        $bInitTerminal = True
      Endif
    
      trmVersionControl.SetFocus
      
  End Select

End

Private Sub UpdateInfo()

  Dim cInfo As Collection
  Dim sValue As String
  Dim iRow As Integer
  Dim I As Integer
  
  If Not VersionControl.Enabled Then Return
  If gvwVcInfo.Rows.Count Then Return
  
  Inc Application.Busy
  
  If VersionControl.HasIdentity Then
    panIdentity.Show
    sepIdentity.Show
    VersionControl.GetIdentity(ByRef txtVcName.Text, ByRef txtVcMail.Text)
  Else 
    panIdentity.Hide
    sepIdentity.Hide
  Endif
    
  cInfo = VersionControl.Info()

  gvwVcInfo.Columns.Count = 2
  gvwVcInfo.Rows.Count = cInfo.Count
  
  For Each sValue In cInfo
    gvwVcInfo[iRow, 0].Text = cInfo.Key
    gvwVcInfo[iRow, 0].Alignment = Align.TopNormal
    'gvwVcInfo[iRow, 0].Foreground = Color.Merge(Color.TextBackground, Color.TextForeground, 0.7)
    gvwVcInfo[iRow, 1].Text = sValue
    Inc iRow
  Next
  
  gvwVcInfo.Columns[0].W = -1
  gvwVcInfo.Columns[0].W += Desktop.Scale * 2
  
  For I = 0 To gvwVcInfo.Rows.Count - 1
    gvwVcInfo.Rows[I].H = -1
  Next
  
  gvwVcInfo.H = gvwVcInfo.ScrollH

Finally
  
  Dec Application.Busy
  
End

Public Sub btnUpdateIdentity_Click()

  Dim sVcName As String
  Dim sVcMail As String

  sVcName = Trim(txtVcName.Text)
  If sVcName Begins "-" Then Goto INVALID_VC_NAME
  
  sVcMail = Trim(txtVcMail.Text)
  If sVcMail Begins "-" Then Goto INVALID_VC_MAIL
  If Not String.IsEmail(sVcMail) Then Goto INVALID_VC_MAIL
  
  VersionControl.SetIdentity(sVcName, sVcMail)
  Return

INVALID_VC_NAME:

  Message.Warning(("Invalid user name."))
  txtVcName.SetFocus
  Return

INVALID_VC_MAIL:

  Message.Warning(("Invalid e-mail address."))
  txtVcMail.SetFocus
  Return

End

Private Sub RefreshHistory()

  gvwHistory.Fill(Project.Dir,, btnShowHistoryChanges.Value, cmbBranch.Text, Trim(txtSearchHistory.Text))
  txtSearchHistory.SetFocus

End

Public Sub btnShowHistoryChanges_Click()

  RefreshHistory

End

Private Sub LoadDiff()

  Dim sDiff As String
  Dim aDiff As String[]
  Dim sLine As String
  Dim bHide As Boolean
  
  If edtDiff.IsVoid() Then
    Inc Application.Busy
    
    sDiff = VersionControl.Diff(,, btnHideSpace.Value)
    
    If btnHideTrans.Value Then
      
      aDiff = New String[]
      For Each sLine In Split(sDiff, "\n")
        If sLine Begins "diff " Then
          bHide = InStr(sLine, "/.lang/") > 0
          aDiff.Add(sLine)
        Else If Not bHide Then
          aDiff.Add(sLine)
        Endif
      Next
      sDiff = aDiff.Join("\n")
      
    Endif
    
    If sDiff Then
      edtDiff.Text = sDiff
      panDiff.Show
      panNothing.Hide
      btnRevert.Show
      edtDiff.Show
    Else
      edtDiff.Text = "-"
      panDiff.Hide
      panNothing.Show
      btnRevert.Hide
      edtDiff.Hide
    Endif
    
    edtJournal.ReadOnly = Not panDiff.Visible
    edtJournal.ShowCurrent = panDiff.Visible
    edtJournal.ShowCursor = panDiff.Visible
    
    Dec Application.Busy
    
  Endif

End

Private Sub GetChanges() As String

  Dim sChange As String
  Dim iPos As Integer
  
  sChange = Trim(edtJournal.Text)
  iPos = InStr(sChange, "- " & VersionControl.DELIM_CHANGE & " -")
  If iPos Then
    iPos = RInStr(sChange, "\n", iPos)
    If iPos Then
      sChange = Left(sChange, iPos - 1)
    Else
      sChange = ""
    Endif
  Endif

  Return sChange  
  
End

Public Sub btnHideTrans_Click()

  edtDiff.Clear
  LoadDiff

End

Public Sub btnHideSpace_Click()

  edtDiff.Clear
  LoadDiff

End

Private Sub ShowTerminal(bShow As Boolean)

  If bShow Then
    $iSaveIndex = tabVersion.Index
    tabVersion.Index = 3
  Else
    tabVersion.Index = $iSaveIndex
  Endif

End

Private Sub DoCommit()
  
  Dim sChange As String
  Dim bCommit As Boolean
  Dim bPush As Boolean
  
  SaveLastCommitLog()
  
  If Last = btnCommit Or If Last = btnCommitPush Then bCommit = True
  If Last = btnCommitPush Or If Last = btnPush Then bPush = True
  
  If bPush And If Not bCommit Then
    
    tabVersion.Index = 3
    VersionControl.Commit("", False)
    tabVersion.Index = 1
    
  Else
    
    sChange = GetChanges()
    
    If Not Trim(sChange) Then
      edtJournal.Goto(0, 0)
      edtJournal.SetFocus
      Message.Warning(("Please write a commit log."))
      Return
    Endif
    
    If Trim(sChange) = Trim($sOldCommit) Then
      edtJournal.Goto(0, 0)
      edtJournal.SetFocus
      Message.Warning(("Please write a new commit log."))
      Return
    Endif
    
    ShowTerminal(True)
    VersionControl.Commit(sChange, Not bPush)
    ShowTerminal(False)
    
  Endif 
  
  Reload(True)
  
End

Public Sub btnCommit_Click()
  
  DoCommit
  
End

Public Sub btnUpdate_Click()

  If Message.Question(("Do you really want to synchronize the repository?"), ("Synchronize"), ("Cancel")) = 2 Then Return

  ShowTerminal(True)
  VersionControl.Update
  ShowTerminal(False)

End

Public Sub btnAddAll_Click()

  FMain.mnuAddVersionAll_Click()

End

Public Sub btnAddBranch_Click()

  VersionControl.AddBranch()

End

Public Sub btnLocateChange_Click()

  Dim sPath As String
  Dim iLine As Integer

  If edtDiff.LocateChange(ByRef sPath, ByRef iLine) Then Return
  Project.OpenFile(sPath, iLine)

End

Public Sub btnBrowse_Click()

  Desktop.Open(VersionControl.GetRoot())

End

Public Sub btnRevert_Click()

  ShowTerminal(True)
  VersionControl.Revert()
  ShowTerminal(False)

End

Public Sub edtDiff_GotFocus()

  edtJournal.SetFocus()

End

Public Sub txtSearchHistory_Filter()

  RefreshHistory

End

Public Sub cmbBranch_Click()

  RefreshHistory

End

Public Sub btnDefaultBranch_Click()

  cmbBranch.Text = VersionControl.GetCurrentBranch()

End

Public Sub tlbRepository_Configure()

  btnAddBranch.Visible = VersionControl.CanCreateBranch

End
