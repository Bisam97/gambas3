' Gambas class file

Static Public List As String[] = ["form", "report", "webpage"]
Static Public All As New Collection(gb.IgnoreCase)
Static Private $cCtrlFromIcon As New Collection

Public Const Name As String = ""
Public Const DropImageClass As String = ""
Public Const DropImageProperty As String = ""
Public Background As Integer = Color.Background

Private $hTimer As Timer
Private $hCurrentIcon As Control

Private Const ICON_SIZE As Integer = 15

Static Public Sub Get(sFamily As String) As CFamily
  
  Dim hFamily As CFamily
  
  hFamily = All[sFamily]
  If Not hFamily Then 
    Try hFamily = Object.New("CFamily" & sFamily)
    If Not hFamily Then 
      Debug "Family "; sFamily; " not implemented: "; Error.Where; ": "; Error.Text
      Return Get("Form")
    Endif
    All[sFamily] = hFamily
  Endif
  Return hFamily
  
End

Static Public Sub Exit()
  
  All = Null
  $cCtrlFromIcon.Clear
  
End

Public Sub _new()
  
  $hTimer = New Timer As "Timer"
  
End


'' If a control must be drawn with a painted DrawingArea
Public Sub IsPainted(hCtrl As CControl) As Boolean
  
End

'' If a control must be drawn with a transparent DrawingArea
Public Sub IsTransparent(hCtrl As CControl) As Boolean
  
End

'' Draw event implementation of a specific control
'' Return TRUE if the control is not managed: then a default frame with the control icon and the control name will be drawn.
Public Sub DrawControl(hCtrl As CControl) As Boolean

  Return True

End

Public Sub DeleteIcon(hCCtrl As CControl)
  
  Dim hIcon As Control = hCCtrl["#icon"]
  
  If Not hIcon Then Return
  
  hCCtrl["#icon"] = Null
  $cCtrlFromIcon[Str(hIcon)] = Null
  hIcon.Delete
  
End

Private Sub GetContainerSize(hCont As Container) As Integer[]
  
  Dim W, H As Integer
  Dim aSize As Integer[]
  
  W = hCont.Width
  H = hCont.Height

  If hCont.Parent Then
  
    aSize = GetContainerSize(hCont.Parent)
    
    If (W > (aSize[0] - hCont.X)) Then W = aSize[0] - hCont.X
    If (H > (aSize[1] - hCont.Y)) Then H = aSize[1] - hCont.Y
  
  Endif
  
  Return [W, H]
  
End

Private Sub IsInside(hCtrl As Control) As Boolean
  
  Dim aSize As Integer[]
  Dim X, Y As Integer
  Dim XC, YC, WC, HC As Integer
  
  X = Mouse.ScreenX
  Y = Mouse.ScreenY
  
  XC = hCtrl.ScreenX
  YC = hCtrl.ScreenY
  
  If hCtrl Is Container Then
    aSize = GetContainerSize(hCtrl)
    WC = aSize[0]
    HC = aSize[1]
  Else
    WC = hCtrl.W
    HC = hCtrl.H
  Endif
  
  If hCtrl.X < 0 Then
    XC -= hCtrl.X
    WC += hCtrl.X
  Endif
  
  If hCtrl.Y < 0 Then
    XC -= hCtrl.Y
    WC += hCtrl.Y
  Endif
  
  If X >= XC And If X < (XC + WC) And If Y >= YC And If Y < (YC + HC) Then Return True
  
End


Private Sub CheckIcon(hCCtrl As CControl)
  
  Dim hCtrl As Control = hCCtrl.Control
  Dim hIcon As Control = hCCtrl["#icon"]
  Dim X, Y As Integer
  Dim aSize As Integer[]
  
  If Not hIcon Then Return
  
  If IsInside(hCtrl) Then Return
  
  DeleteIcon(hCCtrl)
  
End

Public Sub EnterControl(hCont As Container, hCCtrl As CControl)
  
  DrawIcon(hCont, hCCtrl, "")  
  
End

Public Sub LeaveControl(hCont As Container, hCCtrl As CControl)
  
  'Dim hIcon As Control
  
  CheckIcon(hCCtrl)
  'hIcon = hCCtrl["#icon"]
  'If hIcon And If IsInside(hIcon) Then Return
  'DeleteIcon(hCCtrl)
  
End

Public Sub DrawIcon(hCont As Container, hCCtrl As CControl, sImage As String)
  
  Dim hCtrl As Control = hCCtrl.Control
  Dim hPict As Picture
  Dim hImage As Image
  Dim hIcon As PictureBox
  Dim hComp As Control
  Dim iWidth As Integer
  Dim X, Y As Integer
  Dim XI, YI, XC, YC As Integer

  If Not sImage Then
  
    sImage = LCase(hCCtrl["Arrangement"])
    If sImage = "none" Then sImage = ""
    
  Endif
  
  If Not sImage Then Return
  
  hIcon = hCCtrl["#icon"]
  
  If hIcon Then 
    ' If it was explicitely hidden, then do not show it again
    If Not hIcon.Visible Then Return
    'DeleteIcon(hCCtrl)
  Endif
  
  X = hCtrl.ScreenX + hCtrl.Width - ICON_SIZE
  Y = hCtrl.ScreenY
  If hCtrl = hCont And If hCtrl.Window.Menus.Visible Then Y += hCont.ClientY
  'hIcon.Move(,, hPict.Width, hPict.Height)
  
  If hCCtrl.Parent And If hCCtrl.Parent["#icon"] Then
    hComp = hCCtrl.Parent["#icon"]
    XI = X + ICON_SIZE / 2
    YI = Y + ICON_SIZE / 2
    XC = hComp.ScreenX + hComp.Width / 2
    YC = hComp.ScreenY + hComp.Height / 2
    If Abs(XI - XC) < (ICON_SIZE + 1) And Abs(YI - YC) < (ICON_SIZE + 1) Then
      If hCtrl.Parent.Width > hCtrl.Parent.Height Then
        X = hComp.ScreenX - ICON_SIZE - 1
      Else
        Y = hComp.ScreenY + ICON_SIZE + 1
      Endif
    Endif
  Endif
  
  If Not hIcon Then
  
    hPict = Picture["$arr-" & sImage]
    If Not hPict Then
      hImage = New Image(ICON_SIZE, ICON_SIZE, Color.RGB(0, 0, 0, 96))
      hImage.Draw(Image.Load("img/family" &/ sImage & ".png"), 0, 0)
      hPict = hImage.Picture
      Picture["$arr-" & sImage] = hPict
    Endif
    
    hIcon = New PictureBox(hCont) As "Icon"
    hCCtrl["#icon"] = hIcon
    hIcon.Ignore = True
    'hIcon.Background = Color.Black
    hIcon.Picture = hPict
    'hIcon.Raise
    $cCtrlFromIcon[Str(hIcon)] = hCCtrl
  
  Endif
  
  If Not hCont Then hCont = hIcon.Parent
  
  hIcon.Move(X - hCont.ScreenX - hCont.ClientX, Y - hCont.ScreenY - hCont.ClientY, ICON_SIZE, ICON_SIZE)
  
End

Public Sub Icon_MouseDown()
  
  Last.Hide
  
End

Public Sub Icon_Enter()
  
  $hCurrentIcon = Last
  
End


Public Sub Icon_Leave()
  
  If $hCurrentIcon = Last Then $hCurrentIcon = Null
  CheckIcon($cCtrlFromIcon[Str(Last)])
  
End
