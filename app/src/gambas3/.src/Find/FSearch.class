' Gambas class file

Public CaseSensitive As Boolean
Public RegularExpression As Boolean
Public IgnoreStrings As Boolean
Public IgnoreComments As Boolean
Public WordOnly As Boolean
Public CurrentProcedure As Boolean
Public CurrentProcedureName As String
Public SearchString As String
Public ReplaceString As String

Private $hCurrent As Object
Private $sGrep As String
Private $bReplace As Boolean
Private $aBrowse As New CFindResult[]
Private $hFont As Font
Private $aExt As String[] = ["JPG", "JPEG", "BMP", "GIF", "PNG", "ICO", "XPM", "GAMBAS"]

Private Const GO_FORWARD As Integer = 0
Private Const GO_BACKWARD As Integer = 1
Private Const DO_REPLACE As Integer = 2
Private Const DO_ALL As Integer = 4

Public Sub _new()
  
  With tvwFind
    .Columns.Count = 4  
    .Columns[0].Width = Desktop.Scale * 16
    .Columns[0].Text = ("File")
    .Columns[1].Width = Desktop.Scale * 6
    .Columns[1].Text = ("Line")
    .Columns[2].Width = Desktop.Scale * 6
    .Columns[2].Text = ("Col.")
    .Columns[3].Width = 1024
    .Columns[3].Text = ("Text")    
  End With
  
End

Public Sub Form_Open()

  Settings.Read(Me)
  
  chkCaseSensitive.Value = Settings["/FSearch/CaseSensitive", False]
  chkCurrentProcedure.Value = Settings["/FSearch/CurrentProcedure", False]
  chkHighlight.Value = Settings["/FSearch/Highlight", False]
  chkIgnoreComments.Value = Settings["/FSearch/IgnoreComments", False]
  chkIgnoreStrings.Value = Settings["/FSearch/IgnoreStrings", False]
  chkRegularExpression.Value = Settings["/FSearch/RegularExpression", False]
  chkWordOnly.Value = Settings["/FSearch/WordOnly", False]
  
  ReadConfig

End

Public Sub Form_Close()

  Settings.Write(Me)

  Settings["/FSearch/CaseSensitive"] = CBool(chkCaseSensitive.Value)
  Settings["/FSearch/CurrentProcedure"] = CBool(chkCurrentProcedure.Value)
  Settings["/FSearch/Highlight"] = CBool(chkHighlight.Value)
  Settings["/FSearch/IgnoreComments"] = CBool(chkIgnoreComments.Value)
  Settings["/FSearch/IgnoreStrings"] = CBool(chkIgnoreStrings.Value)
  Settings["/FSearch/RegularExpression"] = CBool(chkRegularExpression.Value)
  Settings["/FSearch/WordOnly"] = CBool(chkWordOnly.Value)

End

Public Sub ReadConfig()
  
  tvwFind.Font.Grade = - Settings["/GlobalFont", 0]
  $hFont = Font[Settings["/Editor/Font", Project.DEFAULT_FONT]]
  tvwFind.Refresh

End

Private Sub UpdateTitle()

  Dim sWhere As String

  If $hCurrent Is FOutput Then
    sWhere = ("Console")
  Else If $hCurrent Then
    sWhere = $hCurrent.Title
  Else
    sWhere = ("Project")
  Endif
  
  Me.Title = ("Search & Replace") & " - " & sWhere
  
End


Public Sub Update(Optional bForce As Boolean)
  
  Dim hCtrl As Control
  Dim bCode As Boolean
  Dim hWindow As Window
  Dim bAllProject As Boolean
  
  If Not Me.Visible And If Not bForce Then Return
  
  Try hWindow = Application.ActiveControl.Window
  If hWindow = Me Then Return
  $hCurrent = hWindow
  
  If $hCurrent Is FOutput Then
  Else 
    $hCurrent = Project.ActiveForm
    If $hCurrent Then
      If $hCurrent Is FEditor Or If $hCurrent Is FTextEditor Then
        bCode = $hCurrent.Editor.Highlight <> Highlight.None
      Endif
    Else
      bAllProject = True
    Endif
  Endif
    
  'chkIgnoreStrings.Enabled = bCode Or bAllProject
  'chkIgnoreComments.Enabled = bCode Or bAllProject
  chkCurrentProcedure.Enabled = bCode
  
  btnNext.Visible = Not bAllProject
  btnPrevious.Visible = Not bAllProject
  btnReplace.Visible = Not bAllProject
  btnReplaceAll.Visible = Not bAllProject
  'btnBrowse2.Visible = bAllProject
  
  UpdateTitle
  
End

Public Sub Form_Show()

  Update()

End

Public Sub Form_Activate()

  Update()

End


Public Sub cmbSearch_Activate()

  btnNext.Value = True

End

Public Sub cmbReplace_Activate()

  btnReplace.Value = True

End

Private Sub ShowMessage(sMsg As String, hCtrl As control)
  
  If Me.Visible Then
    Balloon.Info(sMsg, hCtrl)
  Else 
    Project.SetMessage(sMsg)
  Endif
  
End

' Private Sub GetCurrentPosition()
'   
'   Dim hFirst As Object
'   
'   If $hCurrent Then
'     $hPosition = $hCurrent.GetFindPosition()
'   Else
'     hFirst = Project.Get
'   Endif
'   
' End

Public Sub Grep_Read()
  
  Dim sData As String
  
  sData = Read #Last, Lof(Last)
  $sGrep &= sData
  
End

' Private Sub MakeResult(sResult As String) As CFindResult
'   
'   Dim aResult As String[]
'   Dim hResult As New CFindResult
'   
'   aResult = Split(sResult, ":")
'   
'   iLine = CInt(aResult[1]) - 1
'   If iLine < hPos.Line Then Continue
'   
'   iCol = 0
'   iPos = CInt(aResult[2])
'   While iPos > 0
'     If Mid$(sText, iPos, 1) = "\n" Then Break
'     Dec iPos
'     Inc iCol
'   Wend
'   
'   hResult = New CFindResult
'   hResult.Line = 
'   
' End

Private Sub GrepFile(hFile As Object) As CFindResult[]
  
  Dim sText As String
  Dim hProcess As Process
  Dim aGrep As String[]
  Dim aResult As New CFindResult[]
  Dim sFind As String
  Dim aFind As String[]
  Dim hResult As CFindResult
  
  Try sText = hFile.GetText()
  If Error Then Return aResult
  
  'grep -nR -F -I -i -w "Date" -ob --exclude=*~ --exclude-dir=.svn -s * .src
  
  aGrep = ["grep", "-nobs"]
  If Not CaseSensitive Then aGrep.Add("-i")
  If RegularExpression Then 
    aGrep.Add("-E")
  Else
    aGrep.Add("-F")
  Endif
  If WordOnly Then aGrep.Add("-w")
  aGrep.Add(SearchString)
  
  $sGrep = ""
  hProcess = Exec aGrep For Read Write As "Grep"
  Print #hProcess, sText;
  Close #hProcess
  While hProcess.State = Process.Running
    Wait
  Wend

  For Each sFind In Split($sGrep, "\n", "", True)
    aFind = Split(sFind, ":")
    hResult = New CFindResult
    hResult.Path = hFile.Path
    hResult.File = hFile.Name
    hResult.Line = CInt(aFind[0])
    hResult.Pos = CInt(aFind[1])
    hResult.Bytes = Len(aFind[2])
    hResult.Length = String.Len(aFind[2])
    aResult.Add(hResult)
  Next
  
  Return aResult
  
End

Private Sub InitSearch() As Boolean
  
  SearchString = cmbSearch.Text
  ReplaceString = cmbReplace.Text
  
  Project.StoreCombo(cmbSearch)
  Project.StoreCombo(cmbReplace)
  
  CaseSensitive = chkCaseSensitive.Value
  IgnoreStrings = chkIgnoreStrings.Value
  IgnoreComments = chkIgnoreComments.Value
  RegularExpression = chkRegularExpression.Value
  WordOnly = chkWordOnly.Value
  CurrentProcedure = chkCurrentProcedure.Value
  
  If Not SearchString Then Return True
  
End

Private Sub DoReplace(aResult As CFindResult[], iInd As Integer, sReplace As String)

  Dim iAdd As Integer
  
  iAdd = Len(sReplace) - aResult[iInd].Bytes

  aResult.Remove(iInd)
  While iInd < aResult.Count
    aResult[iInd].Pos += iAdd
    Inc iInd
  Wend
  
End


Private Sub Run(iAction As Integer)
  
  Dim sResult As String
  Dim aResult As CFindResult[]
  Dim aFind As String[]
  Dim iLine As Integer
  Dim iCol As Integer
  Dim iCurrentPos, iPos, iInd As Integer
  Dim iTry As Integer
  Dim nReplace As Integer
  Dim hEditor As FEditor
  Dim sProc As String
  
  If InitSearch() Then Return
  
  If CurrentProcedure Then
    If $hCurrent Is FEditor Then
      hEditor = $hCurrent
      CurrentProcedureName = hEditor.GetProcAt(hEditor.Editor.Line)
    Endif
  Endif
  
  aResult = GrepFile($hCurrent)

DO_IT_AGAIN:
  
  iCurrentPos = $hCurrent.GetPosition()

  If aResult.Count Then
  
    For iTry = 1 To aResult.Count
    
      If iAction And GO_BACKWARD Then
      
        For iInd = aResult.Max To 0 Step -1
          iPos = aResult[iInd].Pos
          If iPos < iCurrentPos Then Break
        Next
        
        If iPos >= iCurrentPos Then 
          iInd = aResult.Max
          iPos = aResult[iInd].Pos
        Endif
    
      Else
      
        For iInd = 0 To aResult.Max
          iPos = aResult[iInd].Pos
          If iPos > iCurrentPos Then Break
        Next
        
        If iPos <= iCurrentPos Then 
          iInd = 0
          iPos = aResult[iInd].Pos
        Endif
        
      Endif
    
      If Not $hCurrent.SetPosition(aResult[iInd], False) Then 
        If iAction And DO_REPLACE Then 
          $hCurrent.Replace(ReplaceString)
          DoReplace(aResult, iInd, ReplaceString)
        Endif
        Inc nReplace
        If (iAction And DO_ALL) = 0 Then Return
        Goto DO_IT_AGAIN
      Endif
      
      iCurrentPos = iPos
      
    Next
    
  Endif
  
  If iAction And DO_REPLACE And If iAction And DO_ALL Then
    If nReplace = 0 Then
      ShowMessage(("Search string cannot be found."), cmbReplace)
    Else If nReplace = 1 Then
      ShowMessage(("Search string replaced once."), cmbReplace)
    Else
      ShowMessage(Subst(("Search string replaced &1 times."), nReplace), cmbReplace)
    Endif
  Else
    ShowMessage(("Search string cannot be found."), cmbSearch)
  Endif
  
End

Public Sub AddFound(hResult As CFindResult)
  
  Dim iInd As Integer
  
  $aBrowse.Add(hResult)
  If $aBrowse.Count > 1 Then 
    If hResult.File = $aBrowse[$aBrowse.Max - 1].File Then
      hResult.Dark = $aBrowse[$aBrowse.Max - 1].Dark
    Else
      hResult.Dark = Not $aBrowse[$aBrowse.Max - 1].Dark
    Endif
  Endif
  tvwFind.Rows.Count = $aBrowse.Count
  
  iInd = $aBrowse.Max
  While iInd > 0
    If $aBrowse[iInd - 1].File <> hResult.File Then Break
    Dec iInd
  Wend
  tvwFind[iInd, 0].RowSpan = $aBrowse.Max - iInd + 1
  
  iInd = $aBrowse.Max
  While iInd > 0
    If $aBrowse[iInd - 1].File <> hResult.File Then Break
    If $aBrowse[iInd - 1].Line <> hResult.Line Then Break
    Dec iInd
  Wend
  tvwFind[iInd, 1].RowSpan = $aBrowse.Max - iInd + 1
  
End

Private Sub Browse()
  
  Dim sFile As String
  Dim sPath As String
  Dim iPos As Integer
  Dim iLen As Integer
  Dim aResult As CFindResult[]
  Dim hFile As Object
  Dim iInd As Integer
  Dim aFind As String[]
  Dim hResult As CFindResult
  Dim sName As String
  Dim sExt As String
  
  If InitSearch() Then Return
  
  CurrentProcedure = False
  
  tabSearch.Index = 1

  tvwFind.Show
  lblNotFound.Hide
  lblBrowse.Text = ""
  lblBrowse.Show
  lblBrowse.Raise
  
  Inc Application.Busy
  Me.Enabled = False
  
  tvwFind.Rows.Count = 0
  tvwFind.Clear
  $aBrowse.Clear
  
  For Each sFile In RDir(Project.Dir)
  
    If Left(sFile) = "." And If Not (sFile Begins ".src/") Then Continue
    If Right(sFile) = "~" Then Continue
      
    sPath = Project.Dir &/ sFile
  
    If IsDir(sPath) Then Continue
    If InStr(sPath, "/.svn/") Then Continue
    
    sExt = UCase(File.Ext(sFile))
    If $aExt.Exist(sExt) Then Continue
    
    sName = File.Name(sPath)
    If sName Begins "core." Then Continue
    
    If sFile Begins ".src/" Then
      lblBrowse.Text = sName
    Else
      lblBrowse.Text = sFile
    Endif
    'Debug sName
    Wait
    
    Try hFile = Project.LoadFile(sPath)
    If Not hFile Then Continue
    
    aResult = GrepFile(hFile)
    For iInd = 0 To aResult.Max
      hResult = aResult[iInd]
      If Not hFile.SetPosition(hResult, True) Then 
        hResult.Path = sPath
        AddFound(hResult)
      Endif
    Next
  
  Next
  
Finally
  
  If tvwFind.Rows.Count = 0 Then
    tvwFind.Hide
    lblNotFound.Show
  Endif

  lblBrowse.Hide
  Me.Enabled = True
  Dec Application.Busy

End



Public Sub btnNext_Click()

  Run(GO_FORWARD)

End

Public Sub btnPrevious_Click()

  Run(GO_BACKWARD)

End

Public Sub btnClose_Click()

  Me.Close

End

Public Sub FindNext()
  
  Update(True)
  Run(GO_FORWARD)
  
End

Public Sub FindPrevious()
  
  Update(True)
  Run(GO_BACKWARD)
  
End

Public Sub FindProject(sText As String)
  
  WakeUp(False)
  cmbSearch.Text = sText
  Browse
  
End


' Public Sub UpdateSearchString(sText As String)
'   
'   If sText <> cmbSearch.Text Then cmbSearch.Text = sText
'   
' End

Private Sub ShowString(Optional bHide As Boolean)

  Dim hForm As Object
  Dim bIgnoreCase As Boolean = chkCaseSensitive.Value = False
  Dim sStr As String
  
  If chkHighlight.Value And If Not bHide Then sStr = cmbSearch.Text
  
  For Each hForm In Project.Files
    Try hForm.OnShowString(sStr, bIgnoreCase)
  Next
  
End

Public Sub cmbSearch_Change()

  'If Not cmbSearch.Text Then Stop
  'FMain.UpdateSearchString(cmbSearch.Text)
  ShowString
  
End


Public Sub OnNewForm(hForm As Object)
  
  Try hForm.OnShowString(If(chkHighlight.Value, cmbSearch.Text, ""), chkCaseSensitive.Value = False)
  
End

Public Sub chkCaseSensitive_Click()

  ShowString

End

Public Sub chkHighlight_Click()

  ShowString

End


Public Sub btnReplace_Click()

  Run(GO_FORWARD + DO_REPLACE)

End

Public Sub btnReplaceAll_Click()

  Run(GO_FORWARD + DO_REPLACE + DO_ALL)

End

Public Sub WakeUp(bReplace As Boolean)
  
  Dim sFind As String

  $bReplace = bReplace
  Me.Show
  tabSearch.Index = 0

  Update()
  
  Try sFind = $hCurrent.GetSelection()

  If $bReplace And If sFind Then
    cmbReplace.SelectAll
    cmbReplace.SetFocus
  Else
    cmbSearch.SelectAll
    cmbSearch.SetFocus
  Endif
  
  If sFind Then cmbSearch.Text = sFind
  
End

Public Sub Form_Hide()

  ShowString(True)

End

Public Sub btnBrowse_Click()

  Browse

End

Public Sub tvwFind_Data(Row As Integer, Column As Integer)

   With tvwFind.Data
    
    If Column = 3 Then .Font = $hFont 
    
    Select Case Column
      Case 0
        .Text = $aBrowse[Row].File
        .Alignment = Align.TopNormal
      Case 1
        .Text = $aBrowse[Row].Line
        .Alignment = Align.TopRight
      Case 2
        .Text = $aBrowse[Row].Column
        .Alignment = Align.TopRight
      Case 3
        .RichText = $aBrowse[Row].Text
        .Alignment = Align.TopNormal
    End Select

    ' If Row Then
    '   If Column = 0 Then 
    '     If $aBrowse[Row - 1][0] = .Text Then 
    '       .Text = ""
    '     Endif
    '   Else If Column = 1 Then
    '     If $aBrowse[Row - 1][0] = $aBrowse[Row][0] And $aBrowse[Row - 1][1] = $aBrowse[Row][1] Then 
    '       .Text = "-"
    '     Endif
    '   Endif
    ' Endif 
    
    .Background = If($aBrowse[Row].Dark, Color.LightBackground, Color.TextBackground)
    
  End With 

End

Public Sub panBrowse_Arrange()

  lblBrowse.Move((panBrowse.W - lblBrowse.W) \ 2, (panBrowse.H - lblBrowse.H) \ 2)

End


Public Sub tvwFind_Select()

  Dim hFind As CFindResult
  Dim sPath As String
  Dim hForm As Object

  If $aBrowse.Count = 0 Then Return
  
  hFind = $aBrowse[tvwFind.Row]
  
  Try hForm = Project.OpenFile(hFind.Path)
  If Not hForm Then Return
  
  hForm.SetPosition(hFind, False)

End

Public Sub Form_KeyPress()

  If Key.Code = Key.Esc Then Me.Close

End
