' Gambas class file

Export

Private $iStartLine As Integer
Private $iEndLine As Integer



Public Sub GetPosition() As Integer
  
  Dim iLine, iColumn, iInd, iPos As Integer
  
  If Me.Selected Then 
    iLine = Me.Selection.StartLine
    iColumn = Me.Selection.StartColumn
  Else
    iLine = Me.Line
    iColumn = Me.Column
  Endif
  
  For iInd = 0 To iLine - 1
    iPos += Len(Me.Lines[iInd].Text) + 1
  Next
  iPos += Len(String.Left(Me.Lines[iLine].Text, iColumn))
  
  Return iPos
  
End

Public Sub SetPosition(hFindResult As CFindResult, bJustCheck As Boolean) As Boolean
  
  Dim iLine, iColumn As Integer
  Dim iLen As Integer
  Dim sLine As String
  Dim iPos As Integer
  
  ' If hFindResult.Line Or If hFindResult.Column Then
  ' 
  '   iLine = hFindResult.Line
  '   iColumn = hFindResult.Column
  '   sLine = Me.Lines[iLine].Text
  ' 
  ' Else
  
    iPos = hFindResult.Pos
    While iLine < Me.Lines.Count
    
      iLen = Len(Me.Lines[iLine].Text)
      If iPos <= iLen Then Break
      iPos -= iLen + 1
      Inc iLine
      
    Wend
  
    sLine = Me.Lines[iLine].Text
    iColumn = String.Len(Left$(sLine, iPos))
    
  'Endif
  
  If Me.Highlight <> Highlight.None Then
    If InStr(String.Mid$(Me.Lines[iLine].Purge(Not FSearch.IgnoreComments, Not FSearch.IgnoreStrings, Chr$(1)), iColumn + 1, hFindResult.Length), Chr$(1)) Then Return True
  Endif
  
  hFindResult.Line = iLine
  hFindResult.Column = iColumn
  
  If bJustCheck Then 
    If iColumn >= 40 And If Me.Lines[iLine].Length > 80 Then
      sLine = "â€¦" & Html(String.Mid$(sLine, iColumn - 31, 32)) & "<u>" & Html(String.Mid$(sLine, iColumn + 1, hFindResult.Length)) & "</u>" & Html(String.Mid$(sLine, iColumn + hFindResult.Length + 1, 160))
    Else
      sLine = Html(String.Left(sLine, iColumn)) & "<u>" & Html(String.Mid$(sLine, iColumn + 1, hFindResult.Length)) & "</u>" & Html(String.Mid$(sLine, iColumn + hFindResult.Length + 1, 160))
    Endif
    sLine = Replace(sLine, " ", "&nbsp;")
    hFindResult.Text = "<nobr>" & sLine
  Else
    Me.Goto(iLine, iColumn, True)
    Me.Select(iLine, iColumn, iLine, iColumn + hFindResult.Length)
  Endif
  
End

Public Sub Replace(sReplace As String)
  
  Dim iLine, iColumn As Integer
  
  If Not Me.Selected Then Return
  
  iLine = Me.Selection.StartLine
  iColumn = Me.Selection.StartColumn
  Me.Begin
  Me.Insert(sReplace)
  Me.Select(iLine, iColumn, iLine, iColumn + String.Len(sReplace))
  Me.End  
  
End

Public Sub GetSelection() As String
  
  If Me.Selected And If Me.Selection.StartLine = Me.Selection.EndLine Then
    Return Me.Selection.Text
  Endif
  
End

Static Public Sub GetIndent(sLine As String) As Integer
  
  Return Len(sLine) - Len(LTrim(sLine))
  
End


Public Sub ReadConfig()

  Dim iLimit As Integer
  
  Project.SetEditorFont(Me)

  MTheme.InitEditor(Me)

  iLimit = Settings["/Editor/ProcedureLimit", 2]
  Me.Flags[Editor.ShowLimits] = iLimit > 0 And iLimit < 3
  Me.Flags[Editor.BlendedLimits] = iLimit = 2
  Me.Flags[Editor.BackgroundLimits] = iLimit = 3
  Me.Flags[Editor.ShowModifiedLines] = Settings["/Editor/ShowChange", True]
  Me.Flags[Editor.ShowLineNumbers] = Settings["/Editor/ShowLineNumbers", False]
  Me.Flags[Editor.ShowCurrentLine] = Settings["/Editor/ShowCurrent", True]
  Me.Flags[Editor.ShowDots] = Settings["/Editor/ShowDots", True]
  Me.Flags[Editor.HighlightBraces] = True
  
End

Public Sub StoreSelection()

  With Me
    $iStartLine = .Selection.StartLine
    $iEndLine = .Selection.EndLine
    If .Selection.EndColumn > 0 Or Not .Selected Then Inc $iEndLine
  End With
  
  RecallSelection

End

Public Sub RecallSelection()

  Me.Select($iStartLine, 0, $iEndLine, 0)

End

