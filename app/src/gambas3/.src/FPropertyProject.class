' Gambas class file

Static Private $bShowUsed As Boolean
Static Private $bShowBeta As Boolean

Private $cCheckBox As New Collection

Private $hCheck As Picture
Private $hUncheck As Picture

Private $sLibName As String

'PRIVATE $hProcess AS Process
Private $sTemp As String
Private $sIcon As String

Private $bCanInitLibrary As Boolean
'PRIVATE $bLibModify AS Boolean

' Component
Private $aNeed As String[]
Private $aRequire As String[]
Private $aImplement As String[]
Private $iRow As Integer
Private $iCol As Integer

Private $aArg As String[]
Private $aEnv As String[]

Private $cComp As New Collection
Private $hLastComp As CComponentBox
Private $bLockComp As Boolean

Private Const LIBRARY_TAB As Integer = 2
Private Const VERSION_TAB As Integer = 4
Private Const COMPONENT_TAB As Integer = 5

Static Public Function Run() As Boolean

  Return FPropertyProject.ShowModal()

End

Public Sub Form_Open()

  Dim sClass As String
  Dim sLib As String
  Dim sLang As String

  Me.Title = ("Project properties") & " - " & Project.Name

  ' lblName.Text = Project.Name
  ' lblPath.Text = File.Dir(Project.Dir)
  ' lblPath.Tooltip = File.Dir(Project.Dir)
  txtName.Text = "<font size=\"+2\"><b>" & Project.Name & "</b></font><br>" & File.Dir(Project.Dir)

  'cmbStackSize.List = [("(Default)"), "1 K", "2 K", "4 K", "8 K", "16 K", "32 K", "64 K"]
  
  cmbComponent_Click

  With Project

    txtTitle.Text = .Title
    txtDesc.Text = .Description
    txtAuthor.Text = .Authors
    cmbControlPublic.Index = If(.ControlPublic, 0, 1)
    cmbModulePublic.Index = If(.ModulePublic, 0, 1)
    txtMajor.Value = .MajorVersion
    txtMinor.Value = .MinorVersion
    txtRelease.Value = .ReleaseVersion
    cmbTranslate.Index = If(.Localize, 0, 1)
    cmbComponent.Index = If(.CreateComponent, 0, 1)
    cmbComponentState.Index = .ComponentState
    $sIcon = .Icon
    UpdateIcon
    txtTabSize.Value = .TabSize
    'cmbStackSize.Index = 0
    'If .Stack Then cmbStackSize.Text = .Stack & " K"
    cmbStackTrace.Index = If(.StackTrace, 0, 1)
    txtVersionProg.Text = .VersionProgram
    'chkVersion.Value = NOT IsNull(.VersionProgram)
    cmbTerminal.Index = If(.UseTerminal, 0, 1)

  End With

  $hCheck = Picture["img/16/checked.png"]
  $hUncheck = Picture["img/16/unchecked.png"]

  chkShowUsed.Value = $bShowUsed
  chkShowBeta.Value = $bShowBeta
  $bCanInitLibrary = True

  tabProject[VERSION_TAB].Visible = VersionControl.Enabled()
  tabProject.Index = 0

  InitLibrary
  InitEnvironment

  btnOK.Enabled = Not Project.ReadOnly And Not Project.Running
  tabProject[VERSION_TAB].Enabled = btnOK.Enabled

  cmbDefaultLanguage.Clear
  cmbDefaultLanguage.Add(("Not translatable"))
  For Each sLang In Language.GetAll()
    cmbDefaultLanguage.Add(Language.ToName(sLang))
  Next
  
  cmbTranslate_Click
  
End

Private Sub InitEnvironment()
  
  $aArg = Project.Arguments.Copy()
  $aEnv = Project.Environment.Copy()

  tvwArg.Rows.Count = $aArg.Count
  tvwArg.Rows.Resizable = False
  tvwArg.Columns.Count = 1
  tvwArg.Columns.Resizable = True
  'tvwArg.Columns[0].Text = ("Argument")
    
  tvwEnv.Rows.Count = $aEnv.Count
  tvwEnv.Rows.Resizable = False
  tvwEnv.Columns.Count = 2
  tvwEnv.Columns[0].Text = ("Variable")
  tvwEnv.Columns[1].Text = ("Value")
  
End

Private Sub SaveEnvironment()
  
  Dim iInd As Integer
  
  tvwArg.Save
  tvwEnv.Save
  
  While iInd < $aEnv.Count
    If Not Trim(Scan($aEnv[iInd], "*=*")[0]) Then 
      $aEnv.Remove(iInd)
    Else 
      Inc iInd
    Endif
  Wend

  Project.Arguments = $aArg
  Project.Environment = $aEnv
  
End

Public Sub btnCancel_Click()

  Me.Close(True)

End


Private Function DoApply() As Boolean

  Dim bCheck As Boolean
  Dim vVal As Variant
  Dim bRefreshForm As Boolean
  Dim bRefreshEditor As Boolean
  Dim hFile As Object

'   IF chkSnap.Value THEN
'
'     vVal = Val(txtGrid.Text)
'     IF NOT IsInteger(vVal) THEN vVal = 0
'     IF vVal < 2 OR vVal > 64 THEN
'       txtGrid.SetFocus
'       GOTO BAD_GRID
'     ENDIF
'
'   ENDIF

  If CheckComponentConfig() Then Return True

  With Project

    .Title = Trim(txtTitle.Text)
    .Description = Trim(txtDesc.Text)
    .Authors = Trim(txtAuthor.Text)
    .Icon = $sIcon
    'If cmbStackSize.Index = 0 Then 
    '  .Stack = 0
    'Else
    '  .Stack = Val(Left(cmbStackSize.Text, -1))
    'Endif
    .StackTrace = cmbStackTrace.Index = 0
    .UseTerminal = cmbTerminal.Index = 0

    If .ControlPublic <> (cmbControlPublic.Index = 0) Or If .ModulePublic <> (cmbModulePublic.Index = 0) Then
      Project.ResetScan
      Project.DeleteCompiledFiles
    Endif

    .ControlPublic = cmbControlPublic.Index = 0
    .ModulePublic = cmbModulePublic.Index = 0
    .MajorVersion = txtMajor.Value
    .MinorVersion = txtMinor.Value
    .ReleaseVersion = txtRelease.Value
    If Trim(txtVersionProg.Text) Then
      .VersionProgram = Trim(txtVersionProg.Text)
    Else 
      .VersionProgram = ""
    Endif
    '.SnapToGrid = chkSnap.Value

    'IF chkShowGrid.Value <> .ShowGrid OR .Snap <> txtGrid.Value THEN
    '  bRefreshForm = TRUE
    'ENDIF

    '.ShowGrid = chkShowGrid.Value
    '.Snap = txtGrid.Value
    If cmbTranslate.Index = 0 And Not .Localize Then
      Project.DeleteCompiledFiles()
    Endif
    .Localize = cmbTranslate.Index = 0
    If .Localize Then
      .Language = Language.FromName(cmbDefaultLanguage.Text)
    Else 
      .Language = ""
    Endif
    .CreateComponent = cmbComponent.Index = 0
    .ComponentState = cmbComponentState.Index

    If .TabSize <> txtTabSize.Value Then
      bRefreshEditor = True
    Endif

    .TabSize = txtTabSize.Value

  End With

  SaveLibrary
  SaveEnvironment

  Project.WriteProject
  Project.MakeDirectoryIcon
  Project.Compile

  Project.RefreshRoot
  If bRefreshForm Then Project.RefreshForm
  If bRefreshEditor Then Project.RefreshEditor
  
  Project.SetMessage(("OK"))

  Return

BAD_GRID:

  Message.Error(("Snapping value is incorrect."))
  Return True

End


Public Sub btnOK_Click()

  If DoApply() Then Return
  
  If cmbComponent.Index = 0 Then
    If WriteComponent() Then Return 
  Endif

  Me.Close(True)

End


Private Sub SaveLibrary()

  Dim sLib As String
  Dim bCheck As Boolean
  Dim hComp As CComponent

  Project.Libraries.Clear

  For Each hComp In CComponent.All

    sLib = CComponent.All.Key
    bCheck = False

    Try bCheck = $cComp[sLib].Value

    If bCheck Then
      If sLib <> "gb" Then Project.Libraries.Add(sLib)
    Endif

  Next

  Project.Libraries.Sort

  Project.RefreshLibrary

End


' PRIVATE FUNCTION CountChr(sStr AS String, sChr AS String) AS Integer
'
'   DIM iPos AS Integer
'   DIM iCpt AS Integer
'
'   DO
'
'     iPos = Instr(sStr, sChr, iPos + 1)
'     IF iPos = 0 THEN RETURN iCpt
'
'     iCpt = iCpt + 1
'
'   LOOP
'
' END


Private Sub InitLibrary()

  Dim sLib As String
  Dim hComp As CComponent
  Dim hSep As Label
  Dim aRemove As New String[]
  Dim sParent As String
  Dim hCompBox As CComponentBox
  Dim aComp As New String[]
  Dim bDark As Boolean
  Dim hOld As ListContainer
  Dim iUser As Integer
  Dim bUser As Boolean

  'If Not $bCanInitLibrary Then Return

  lstComponent.Clear
  
  $cComp.Clear
  $hLastComp = Null
  
  For Each hComp In CComponent.All
    aComp.Add(hComp.Key)
    If hComp.User Then bUser = True
  Next 
  aComp.Sort
  
  lstComponent.Lock
  CComponentBox.Reset

  For iUser = 0 To 1

    If bUser Then
      hSep = New Label(lstComponent)
      If iUser Then
        hSep.Text = ("User components")
      Else
        hSep.Text = ("Standard components")
      Endif
      hSep.Font = Font["Bold,Underline,-1"]
      hSep.Padding = 4
      hSep.Height = hSep.Font.Height() + 8
    Endif

    For Each sLib In aComp
      hComp = CComponent.All[sLib]
      If iUser = 0 Then
        If hComp.User Then Continue
      Else
        If Not hComp.User Then Continue
      Endif
      If $bShowUsed Then
        If sLib <> "gb" And If Not Project.Libraries.Exist(hComp.Key) Then Continue
      Endif
      hCompBox = New CComponentBox(hComp, bDark, lstComponent)
      bDark = Not bDark
      $cComp[hComp.Key] = hCompBox 
      hCompBox.Locked = sLib = "gb" Or $bShowUsed
    Next
    
    If Not bUser Then Break
    
  Next
  
  For Each sLib In Project.Libraries
    $cComp[sLib].Value = True
  Next
  $cComp["gb"].Value = True
  
  CComponentBox.ResizeNames(lstComponent)
  
  lstComponent.Unlock

  'IF hOld THEN hOld.Delete

End


Private Function IsChecked(sKey As String) As Boolean
  
  Return $cComp[sKey].Value
  
End

Private Sub CheckComponentConfig() As Boolean
  
  Dim aComp As New String[]
  Dim hComp As CComponent
  Dim sComp As String
  Dim aExclude As String[]
  Dim aNeed As String[]
  Dim sImpl As String
  Dim sExcl As String
  Dim sNeed As String
  Dim bFound As Boolean

  If $bShowUsed Then Return
  
  ' Makes the list of all checked components
  
  For Each hComp In CComponent.All
    If IsChecked(hComp.Key) Then aComp.Add(hComp.Key)
  Next
  
  For Each sComp In aComp
  
    aNeed = New String[]
    aExclude = New String[]

    For Each sImpl In CComponent.All[sComp].Implement
    
      For Each hComp In CComponent.All
      
        If hComp.Key = sComp Then Continue
        If hComp.Implement.Find(sImpl) >= 0 Then
          If Not aComp.Exist(hComp.Key) Then Continue
          If aExclude.Find(hComp.Key) < 0 Then aExclude.Add(hComp.Key)
        Endif
      
      Next
    
    Next

    For Each sExcl In CComponent.All[sComp].Exclude
      If Not aComp.Find(sExcl) Then Continue
      If Not aExclude.Exist(sExcl) Then aExclude.Add(sExcl)
    Next
    
    ' IF aExclude.Count = 1 THEN
    '   Message.Warning(Subst(("The &2 component is incompatible with the &1 component."), "<b>" & sComp & "</b>", "<b>" & aExclude[0] & "</b>"))
    '   RETURN TRUE
    ' ELSE IF aExclude.Count > 1 THEN
    '   Message.Warning(Subst(("These components are incompatible with the &1 component:\n&2"), "<b>" & sComp & "</b>", "<b>" & aExclude.Join("</b>, <b>") & "</b>"))
    '   RETURN TRUE
    ' ENDIF

    If aExclude.Count Then
      Message.Warning(Subst(("These components are incompatible:<br>&1."), "<b>" & sComp & "</b>, <b>" & aExclude.Join("</b>, <b>") & "</b>"))
      Return True
    Endif

    For Each sNeed In CComponent.All[sComp].Need
      bFound = False
      For Each hComp In CComponent.All
        If hComp.Implement.Exist(sNeed) Then
          aNeed.Add(hComp.Key)
          If aComp.Exist(hComp.Key) Then bFound = True
        Endif
      Next
      If Not bFound Then
        Message.Warning(Subst(("The &1 component needs one of the following components:<br>&2."), "<b>" & sComp & "</b>", "<b>" & aNeed.Join("</b>, <b>") & "</b>"))
        Return True
      Endif 
    Next
      
    For Each sNeed In CComponent.All[sComp].Require
      If Not aComp.Exist(sNeed) Then 
        Message.Warning(Subst(("The &1 component needs the &2 component."), "<b>" & sComp & "</b>", "<b>" & sNeed & "</b>"))
        Return True
      Endif
    Next
  
  Next  
  
End


Private Function CheckComponent(sKey As String, bCheck As Boolean) As Boolean

  Dim bBefore As Boolean

  bBefore = IsChecked(sKey)
  If bBefore = bCheck Then Return 

  $cComp[sKey].Value = bCheck
  
End

' PRIVATE FUNCTION CheckComponent(sKey AS String, bCheck AS Boolean) AS Boolean
' 
'   DIM hComp AS CComponent
'   DIM sComp AS String
'   DIM aExclude AS NEW String[]
'   DIM aNeed AS NEW String[]
'   DIM sImpl AS String
'   DIM sNeed AS String
'   DIM bFound AS Boolean
' 
'   WITH cvwComponent
' 
'     IF NOT .Available THEN RETURN
' 
'     IF bCheck THEN
' 
'       FOR EACH sImpl IN CComponent.All[sKey].Implement
'       
'         FOR EACH hComp IN CComponent.All
'         
'           IF hComp.Key = sKey THEN CONTINUE
'           IF hComp.Implement.Find(sImpl) >= 0 THEN
'             IF NOT IsChecked(hComp.Key) THEN CONTINUE
'             IF aExclude.Find(hComp.Key) < 0 THEN aExclude.Add(hComp.Key)
'           ENDIF
'         
'         NEXT
'       
'       NEXT
' 
'       FOR EACH sComp IN CComponent.All[sKey].Exclude
'         IF NOT IsChecked(sComp) THEN CONTINUE
'         IF aExclude.Find(sComp) < 0 THEN aExclude.Add(sComp)
'       NEXT
'       
'       IF aExclude.Count = 1 THEN
'         IF Message.Warning(Subst(("The &2 component is incompatible with &1 component.\nIt will be disabled."), sKey, aExclude[0]), ("Continue"), ("Cancel")) = 2 THEN RETURN TRUE
'       ELSE IF aExclude.Count > 1 THEN
'         IF Message.Warning(Subst(("These components are incompatible with &1 component:\n&2\n\nThey will be disabled."), sKey, aExclude.Join(", ")), ("Continue"), ("Cancel")) = 2 THEN RETURN TRUE
'       ENDIF
' 
'       FOR EACH sNeed IN CComponent.All[sKey].Need
'         bFound = FALSE
'         FOR EACH hComp IN CComponent.All
'           IF hComp.Implement.Find(sNeed) >= 0 THEN
'             aNeed.Add(hComp.Key)
'             IF IsChecked(hComp.Key) THEN bFound = TRUE
'           ENDIF
'         NEXT
'         IF NOT bFound THEN
'           Message.Warning(Subst(("The &1 component needs one of the following components:\n&2."), sKey, aNeed.Join(", ")))
'           RETURN TRUE
'         ENDIF 
'       NEXT
'       
'       FOR EACH sComp IN aExclude
'         IF CheckComponent(sComp, FALSE) THEN RETURN TRUE
'       NEXT
' 
'       FOR EACH sComp IN CComponent.All[sKey].Require
'         IF CheckComponent(sComp, TRUE) THEN RETURN TRUE
'       NEXT
' 
'       .MoveTo(sKey)
'       .Item.Picture = $hCheck
' 
'     ELSE
' 
'       .MoveTo(sKey)
'       .Item.Picture = $hUncheck
' 
'       FOR EACH hComp IN CComponent.All
'         IF hComp.Require.Find(sKey) < 0 THEN CONTINUE
'         CheckComponent(hComp.Key, FALSE)
'       NEXT
' 
'     ENDIF
' 
'   END WITH
' 
' END


Public Sub chkShowUsed_Click()

  $bShowUsed = chkShowUsed.Value
  InitLibrary

End


' PRIVATE SUB FillLibrary(sLib AS String)
' 
'   DIM sText AS String
' 
'   WITH CComponent.All[sLib]
' 
'     sText = "<h2>" & sLib & "</h2>" & .Name & "<p>"
' 
'     IF .Alpha THEN
'       sText = sText & "<table bgcolor=#43C7FF cellspacing=0 cellpadding=2><tr><td><img src=\"img/32/warning.png\"></td><td>" & ("WARNING! This component is in BETA version.") & " " &
'         ("It is under development and may change without notice.") & "</td></tr></table><br>"
'     ELSE
'       'sText = sText & "<p>"
'     ENDIF
' 
'     sText = sText & "<b>" & ("Authors:") & "</b> " & .Authors.Join(", ")
' 
'     IF .Controls THEN
'       IF .Controls.Count THEN
'         sText = sText & "<p><b>" & ("Controls:") & "</b> " & .Controls.Join(", ")
'       ENDIF
'     ENDIF
' 
'     txtComponent.Text = sText
' 
'   END WITH
' 
' END

' PUBLIC SUB clvLibrary_Select()
' 
'   FillLibrary(clvLibrary.Key)
'   'lblLibrary.Visible = TRUE
'   'clvLibrary.Height = 200
'   'clvLibrary.Current.EnsureVisible
' 
' END


Public Sub btnIcon_Click()

  Dim sIcon As String
  Dim hImage As Image
  Dim hBackground As Image

  sIcon = FSelectIcon.Run($sIcon, True)
  If Not sIcon Then Return

  $sIcon = sIcon
  UpdateIcon
  
End

Public Sub chkShowBeta_Click()

  $bShowBeta = chkShowBeta.Value
  InitLibrary

End


Public Sub btnHelp_Click()

  Dim hCompBox As CComponentBox
  Dim sKey As String
  
  hCompBox = CComponentBox(lstComponent.Current)
  Try sKey = hCompBox.Key
  If Not sKey Then Return 
  MHelp.GotoComponent(sKey)

End


Public Sub cmbComponent_Click()

  Dim bComp As Boolean = cmbComponent.Index = 0

  If bComp Then InitComponent

  tabProject[COMPONENT_TAB].Visible = bComp
  tabProject[COMPONENT_TAB + 1].Visible = bComp
  cmbComponentState.Enabled = bComp

End


Private Sub GetParent(sPath As String) As String
  
  Dim hFile As File
  Dim sLine As String
  Dim sParent As String
  
  hFile = Open sPath
  While Not Eof(hFile)
    Line Input #hFile, sLine
    sLine = Trim(sLine)
    If Not sLine Then Continue
    If Left(sLine) = "'" Then Continue
    If sLine Like "INHERITS *" Then 
      Try sParent = Trim(Scan(sLine, "INHERITS *")[0])
      Return sParent
    Endif
    If sLine Like "EXPORT" Then Continue
    If sLine Like "CREATE" Then Continue
    If sLine Like "EXPORT *" Then Continue
    If sLine Like "CREATE *" Then Continue
    Break
  Wend 
  
End



Private Sub ReadComponent()
  
  Dim sPath As String = Project.Dir &/ ".component"
  Dim hFile As File
  Dim sLine As String
  Dim sGroup As String
  Dim iPos As Integer
  Dim sKey As String
  
  $aNeed = New String[]
  $aRequire = New String[]
  $aImplement = New String[]
  
  If Not Exist(sPath) Then Return
  
  hFile = Open sPath
  
  Line Input #hFile, sLine
  If Trim(sLine) <> "[Component]" Then Return
  
  While Not Eof(hFile)
    
    Line Input #hFile, sLine
    sLine = Trim(sLine)
    If Not sLine Then Continue 
    If Left(sLine) = ";" Then Continue
    
    If Left(sLine) = "[" Then 
      If sLine = "[Component]" Then Break 
      sGroup = Mid$(sLine, 2, -1)
    Endif 
    
    iPos = InStr(sLine, "=")
    If iPos = 0 Then Continue
    sKey = LCase(Left(sLine, iPos - 1))
    sLine = Mid$(sLine, iPos + 1)
    
    Select Case sKey
      Case "need", "needs"
        $aNeed = Split(sLine, ",")
      Case "require", "requires"
        $aRequire = Split(sLine, ",")
      Case "implement", "implements"
        $aImplement = Split(sLine, ",")
      Case "control", "controls"
        For Each sKey In Split(sLine, ",")
          If CExportInfo.All.Exist(sKey) Then
            CExportInfo.All[sKey].Control = True
            CExportInfo.All[sKey].Group = sGroup
          Else 
            Debug "Control="; sKey; "?"
          Endif
        Next
      Case "virtual"
        For Each sKey In Split(sLine, ",")
          If CExportInfo.All.Exist(sKey) Then
            CExportInfo.All[sKey].Virtual = True
          Else 
            Debug "Virtual="; sKey; "?"
          Endif 
        Next
      Case "container"
        For Each sKey In Split(sLine, ",")
          If CExportInfo.All.Exist(sKey) Then
            CExportInfo.All[sKey].Container = True
          Else 
            Debug "Container="; sKey; "?"
          Endif
        Next
      Case "multicontainer"
        For Each sKey In Split(sLine, ",")
          If CExportInfo.All.Exist(sKey) Then
            CExportInfo.All[sKey].MultiContainer = True
          Else 
            Debug "MultiContainer="; sKey; "?"
          Endif
        Next
      Case "type"
        Try CExportInfo.All[sLine].Form = True
        
    End Select 
    
  Wend
  
Catch 

  Debug Error.Text;; Error.Where
  
End


Private Sub WriteComponent() As Boolean

  Dim sPath As String = Project.Dir &/ ".component"
  Dim hFile As File
  Dim cGroup As New Collection
  Dim sGroup As String
  Dim hExportInfo As CExportInfo
  Dim sClass As String
  Dim aControl As String[]
  Dim aVirtual As String[]
  Dim aContainer As String[]
  Dim aMultiContainer As String[]

  HideEditor
  WriteFeatures(panNeed, $aNeed)

  hFile = Open Temp$("component") For Create 
  
  Print #hFile, "[Component]"
  Print #hFile, "Key="; Project.Name
  Print #hFile, "Version="; Project.MajorVersion; "."; Project.MinorVersion; "."; Project.ReleaseVersion
  If cmbComponentState.Index Then Print #hFile, "State="; cmbComponentState.Index
  If Project.Authors Then Print #hFile, "Authors="; Replace(Project.Authors, "\n", ",")
  If GetForm() Then Print #hFile, "Type="; GetForm()
  If $aImplement.Count Then Print #hFile, "Implements="; $aImplement.Join(",")
  If $aNeed.Count Then Print #hFile, "Needs="; $aNeed.Join(",")
  If $aRequire.Count Then Print #hFile, "Requires="; $aRequire.Join(",")
  Print #hFile
  
  For Each sGroup In GetGroups()
    cGroup[sGroup] = New String[]
    
    Print #hFile, "["; sGroup; "]"
    
    aControl = New String[]
    aVirtual = New String[]
    aContainer = New String[]
    aMultiContainer = New String[]
    
    For Each sClass In CExportInfo.List
      hExportInfo = CExportInfo.All[sClass]
      If hExportInfo.Group <> sGroup Then Continue
      If hExportInfo.Control Then aControl.Add(sClass)
      If hExportInfo.Virtual Then aVirtual.Add(sClass)
      If hExportInfo.Container Then aContainer.Add(sClass)
      If hExportInfo.MultiContainer Then aMultiContainer.Add(sClass)
    Next
    
    If aControl.Count Then Print #hFile, "Control="; aControl.Join(",")
    If aContainer.Count Then Print #hFile, "Container="; aContainer.Join(",")
    If aMultiContainer.Count Then Print #hFile, "MultiContainer="; aMultiContainer.Join(",")
    If aVirtual.Count Then Print #hFile, "Virtual="; aVirtual.Join(",")
    Print #hFile
    
  Next
  
  Close #hFile    
  
  Try Kill sPath
  Copy Temp$("component") To sPath
  
Catch 

  Message.Error(("Cannot write component description file.") & "\n\n" & Error.Text & "\n" & Error.Where)
  Return True
  
End


Public Sub InitComponent()

  Dim sPath As String
  Dim sClass As String
  Dim hComp As CComponent
  Dim aComp As New String[]
  Dim sComp As String
  Dim hExportInfo As CExportInfo

  tvwControl.Columns.Count = 4
  tvwControl.Columns[0].Text = ("Class")
  tvwControl.Columns[0].Width = Desktop.Scale * 36
  tvwControl.Columns[1].Text = ("Type")
  tvwControl.Columns[1].Width = Desktop.Scale * 24
  tvwControl.Columns[2].Text = ("Group")

  CExportInfo.Reset

  For Each sPath In Project.GetClasses(True)
    If Project.IsExported(sPath) Then 
      sClass = File.BaseName(sPath)
      If Not IsLetter(Left(sClass)) Then Continue
      CExportInfo.List.Add(sClass)
      hExportInfo = New CExportInfo(sClass)
      hExportInfo.Parent = GetParent(sPath)
    Endif 
  Next 
  
  CExportInfo.Sort
  
  tvwControl.Rows.Count = CExportInfo.List.Count
  tvwControl.Rows.Height = Desktop.Scale * 5

  ReadComponent
  
  For Each hComp In CComponent.All
    If hComp.Key = Project.Name Then Continue 
    If hComp.Key = "gb" Then Continue
    aComp.Add(hComp.Key)
  Next
  aComp.Sort
  cmbRequire.List = aComp
 
  lstRequire.List = $aRequire
  
  ReadFeatures(panNeed, $aNeed)
  ReadFeatures(panImplement, $aImplement)
  
  'txtImplement.Text = GetForm()

End

Public Sub tvwControl_Data(Row As Integer, Column As Integer)

  Dim hExportInfo As CExportInfo = CExportInfo.All[CExportInfo.List[Row]]
  Dim hPict As Picture

  Select Case Column
    Case 0
      tvwControl.Data.Text = hExportInfo.Name
      If hExportInfo.Control Then 
        Try hPict = Project.GetPicture("control" &/ LCase(hExportInfo.Name) & ".png")
        If Not hPict Then hPict = Picture["img/control/unknown.png"]
        hPict = hPict.Image.Stretch(24, 24).Picture
      Else
        hPict = hExportInfo.Icon
      Endif
      tvwControl.Data.Picture = hPict
    Case 1
      tvwControl.Data.Text = hExportInfo.Type
    Case 2
      tvwControl.Data.Text = hExportInfo.Group
  End Select 
  
  tvwControl.Data.Background = If(Row And 1, Color.LightBackground, Color.TextBackground)

End

Private Sub MoveEditor()
  
  With tvwControl.Current
    cmbControl.Move(tvwControl.X + .Left, tvwControl.Y + .Top, .W, .H)
  End With
  
End

Private Sub HideEditor()

  If Not cmbControl.Visible Then Return 
  SaveEditor  
  cmbControl.Hide
  
End

Private Sub GetGroups() As String[]
  
  Dim aGroup As New String[]
  Dim hOther As CExportInfo

  'aGroup.Add(("(None)"))

  For Each hOther In CExportInfo.All
    If Not hOther.Group Then Continue
    If aGroup.Find(hOther.Group) >= 0 Then Continue
    aGroup.Add(hOther.Group)
  Next
  
  Return aGroup
  
End

Private Sub SaveEditor()
  
  Dim hExportInfo As CExportInfo
  
  If Not cmbControl.Visible Then Return
  
  hExportInfo = CExportInfo.All[CExportInfo.List[$iRow]]
  
  Select Case $iCol
  
    Case 1
      hExportInfo.Type = cmbControl.Text
    
    Case 2
      hExportInfo.Group = cmbControl.Text
  
  End Select 
  
  tvwControl.Rows[$iRow].Refresh
  
End

Private Sub GetForm() As String
  
  Dim hExportInfo As CExportInfo
  
  For Each hExportInfo In CExportInfo.All
    If hExportInfo.Form Then Return hExportInfo.Name
  Next
  
End



Private Sub ShowEditor()
  
  Dim hExportInfo As CExportInfo = CExportInfo.All[CExportInfo.List[tvwControl.Row]]  
  Dim aList As String[]
  Dim sIcon As String
  
  HideEditor
  
  Select Case tvwControl.Column
  
    Case 0
      Return 
      
    Case 1
      aList = ["Class", "Control", "Virtual", "Container", "MultiContainer"]
      If Not GetForm() Or GetForm() = hExportInfo.Name Then aList.Add("Form")
      cmbControl.List = aList
      cmbControl.ReadOnly = True
      cmbControl.Text = hExportInfo.Type
      
    ' CASE 2
    '   IF hExportInfo.Control THEN
    '     sIcon = FSelectIcon.Run(hExportInfo.ControlIcon, TRUE)
    '     IF sIcon THEN hExportInfo.ControlIcon = sIcon
    '     tvwControl.Current.Refresh
    '   ENDIF
    '   RETURN
      
    Case 2
      If Not hExportInfo.Control Then Return
      cmbControl.ReadOnly = False
      cmbControl.List = GetGroups()
      cmbControl.Text = hExportInfo.Group
  
  End Select
  
  $iRow = tvwControl.Row
  $iCol = tvwControl.Column
  
  MoveEditor
  cmbControl.Show
  cmbControl.SetFocus
  
End


Public Sub tvwControl_MouseUp()

  ShowEditor

End

Public Sub tvwControl_Scroll()

  HideEditor

End

Public Sub cmbControl_Click()

  SaveEditor

End

Private Sub ReadFeatures(hCont As Container, aFeature As String[])
  
  Dim hCtrl As CheckBox
  
  For Each hCtrl In hCont.Children
    hCtrl.Value = aFeature.Find(hCtrl.Tag, gb.Text) >= 0
  Next
  
End

Private Sub WriteFeatures(hCont As Container, aFeature As String[])
  
  Dim hCtrl As CheckBox
  
  aFeature.Clear
  For Each hCtrl In hCont.Children
    If hCtrl.Value Then aFeature.Add(hCtrl.Tag)
  Next
  
End

Private Sub AddRequire(sComp As String)

  If sComp = Project.Name Then Return  
  If $aRequire.Find(sComp) >= 0 Then Return 
  $aRequire.Add(sComp)
  lstRequire.Add(sComp)
  
End


Public Sub btnAdd_Click()

  Dim sComp As String
  
  sComp = Trim(LCase(cmbRequire.Text))
  AddRequire(sComp)

End

Public Sub btnRemove_Click()

  If lstRequire.Index < 0 Then Return 
  $aRequire.Remove($aRequire.Find(lstRequire.Text))
  lstRequire.Remove(lstRequire.Index)

End

Public Sub btnRemoveAll_Click()

  lstRequire.Clear
  $aRequire.Clear

End

' PUBLIC SUB cmbRequire_Click()
' 
'   btnAdd_Click
' 
' END


Public Sub Form_Close()

  CExportInfo.Reset  

End

' PUBLIC SUB chkVersion_Click()
' 
'   txtVersionProg.Enabled = chkVersion.Value
'   TRY txtVersionProg.SetFocus  
' 
' END
' 
Public Sub tabProject_Click()

  If tabProject.Index = VERSION_TAB Then 
    If VersionControl.Enabled() Then 
      Inc Application.Busy
      panVersioning.Show
      txtVerCtrlChange.Text = VersionControl.Status()
      btnCommit.Enabled = txtVerCtrlChange.Length
      btnRevert.Enabled = btnCommit.Enabled
      Dec Application.Busy
    Else 
      panVersioning.Hide
    Endif
  'ELSE IF tabProject.Index = LIBRARY_TAB THEN 
  '  IF NOT lstComponent THEN InitLibrary
  Endif   

End

Public Sub btnCommit_Click()

  If FCommit.Run(txtVerCtrlChange.Text) Then Return
  tabProject_Click
  
End

Public Sub btnUpdate_Click()

  Inc Application.Busy
  VersionControl.Update  
  Project.Refresh
  Dec Application.Busy
  tabProject_Click
    
End

Public Sub btnRevert_Click()

  If Message.Warning(("You are going to cancel your changes!"), ("Continue"), ("Cancel")) = 2 Then Return

  Inc Application.Busy
  
  VersionControl.Revert
  Project.Refresh
  Project.ReloadAll
  
  Dec Application.Busy
  tabProject_Click  

End

' PUBLIC SUB btnSwap_Click()
' 
'   IF IsChecked("gb.qt") THEN 
'     cvwComponent["gb.qt"].Picture = $hUncheck
'     cvwComponent["gb.gtk"].Picture = $hCheck
'   ELSE IF IsChecked("gb.gtk") THEN 
'     cvwComponent["gb.gtk"].Picture = $hUncheck
'     cvwComponent["gb.qt"].Picture = $hCheck
'   ENDIF
' 
' END

Public Sub btnUndo_Click()

  InitLibrary

End

Public Sub tvwArg_Data(Row As Integer, Column As Integer)

  tvwArg.Data.Text = $aArg[Row]  

End

Public Sub btnInsertArg_Click()

  If $aArg.Count >= 255 Then Return
  $aArg.Add("")
  Inc tvwArg.Rows.Count
  tvwArg.MoveTo($aArg.Max, 0)
  tvwArg.Edit  

End

Public Sub btnRemoveArg_Click()
  
  If $aArg.Count = 0 Then Return
  If tvwArg.Row < 0 Then Return
  tvwArg.Save
  $aArg.Remove(tvwArg.Row)
  Dec tvwArg.Rows.Count
  tvwArg.Refresh
  tvwArg.Edit
  
End


Public Sub tvwArg_Save(Row As Integer, Column As Integer, Value As String)

  $aArg[Row] = Value  

End

Public Sub tvwArg_Insert()
  
  btnInsertArg_Click
  
End


Public Sub tvwArg_Click()

  tvwArg.Edit  

End

Public Sub btnMoveUpArg_Click()

  If tvwArg.Row <= 0 Then Return 
  tvwArg.Save
  Swap $aArg[tvwArg.Row], $aArg[tvwArg.Row - 1]
  tvwArg.Refresh
  Dec tvwArg.Row
  tvwArg.Edit  

End

Public Sub btnMoveDownArg_Click()

  If tvwArg.Row >= (tvwArg.Rows.Count - 1) Then Return 
  tvwArg.Save
  Swap $aArg[tvwArg.Row], $aArg[tvwArg.Row + 1]
  tvwArg.Refresh
  Inc tvwArg.Row
  tvwArg.Edit

End

Public Sub tvwEnv_Click()

  tvwEnv.Edit

End

Public Sub tvwEnv_Data(Row As Integer, Column As Integer)

  Dim aEnv As String[] = Scan($aEnv[Row], "*=*")
  
  Try tvwEnv.Data.Text = aEnv[Column]
  
Catch

End

Public Sub tvwEnv_Save(Row As Integer, Column As Integer, Value As String)

  Dim aEnv As String[] = Scan($aEnv[Row], "*=*")
  
  If Column = 0 Then 
    $aEnv[Row] = Trim(Value) & "=" & aEnv[1]
  Else 
    $aEnv[Row] = aEnv[0] & "=" & Value
  Endif
  
End

Public Sub tvwEnv_Insert()
  
  If Key.Normal Then
    btnOK.Value = True
  Else If Key.Control Then 
    btnInsertEnv_Click
  Endif
  
End

Public Sub btnInsertEnv_Click()

  If $aEnv.Count >= 255 Then Return
  $aEnv.Add("=")
  Inc tvwEnv.Rows.Count
  tvwEnv.MoveTo($aEnv.Max, 0)
  tvwEnv.Edit      

End

Public Sub btnRemoveEnv_Click()
  
  If $aEnv.Count = 0 Then Return
  If tvwEnv.Row < 0 Then Return
  tvwEnv.Save
  $aEnv.Remove(tvwEnv.Row)
  Dec tvwEnv.Rows.Count
  tvwEnv.Refresh
  
End


Public Sub cvwComponent_Collapse()

  Last.Item.Expanded = True

End


' Public Sub lstComponent_Click()
' 
'   Dim hCurrent As CComponentBox = lstComponent.Current
'   If $hLastComp Then $hLastComp.Expanded = False
'   $hLastComp = hCurrent
'   
'   If $hLastComp.Find(Mouse.ScreenX - $hLastComp.ScreenX, Mouse.ScreenY - $hLastComp.ScreenY) Is PictureBox Then Return
'   
'   $hLastComp.Expanded = True
'     
' End

Public Sub lstComponent_Activate()

  Dim hCurrent As CComponentBox = lstComponent.Current
  
  If hCurrent.Find(Mouse.ScreenX - hCurrent.ScreenX, Mouse.ScreenY - hCurrent.ScreenY) Is PictureBox Then Return
  'lstComponent.Lock
  hCurrent.Expanded = Not hCurrent.Expanded
  'lstComponent.Unlock
  lstComponent.EnsureVisible
    
End

Public Sub cmbTranslate_Click()

  If cmbTranslate.Index = 0 Then 
    cmbDefaultLanguage.Enabled = True
    cmbDefaultLanguage.Text = Language.ToName(System.Language)
    Try cmbDefaultLanguage.Text = Language.ToName(Project.Language)
  Else 
    cmbDefaultLanguage.Index = 0
    cmbDefaultLanguage.Enabled = False
  Endif

End

Private Sub UpdateIcon()
  
  btnIcon.Picture = Project.StretchIcon(Project.Dir &/ $sIcon, btnIcon.Width - 16).Picture
  btnIcon.ToolTip = $sIcon
  
End
