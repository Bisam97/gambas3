' Gambas class file

Private $bReplace As Boolean

Private $bProc As Boolean
Private $bCase As Boolean
Private $bWord As Boolean
Private $bComment As Boolean
Private $bString As Boolean
Private $sFind As String
Private $bProject As Boolean
Private $bList As Boolean

Private $sReplace As String
Private $iNbrReplace As Integer
Private $bReplaceAll As Boolean

Private $iLastTimeStamp As Integer
Private $sLastSearch As String
Private $bStop As Boolean
Private $bCanceled As Boolean
'Private $iWait As Integer

Public Sub Find(Optional bReplace As Boolean)

  cmbFind.Text = ""
  cmbReplace.Text = ""
  $bReplace = bReplace
  
  If Me.Visible Then 
    Form_Show
  Else 
    Me.Show
  Endif 

End


Private Sub Store(hCombo As ComboBox)
  
  Dim sText As String = hCombo.Text
  Dim iInd As Integer

  If Not sText Then Return 
  
  iInd = hCombo.Find(sText)
  If iInd >= 0 Then hCombo.Remove(iInd)
  hCombo.Add(sText)
  hCombo.Text = sText
  
End



Public Sub FindNext()

  If Not cmbFind.Text Then Return
  Store(cmbFind)

  Search(False, False)

End


Public Sub FindPrevious()

  If Not cmbFind.Text Then Return
  Store(cmbFind)

  Search(True, False)

End

Public Sub FindAll()

  If Not cmbFind.Text Then Return
  Store(cmbFind)

  $bList = True
  
  If Not FFindList.Visible And If $iLastTimeStamp = Project.TimeStamp And If $sLastSearch = cmbFind.Text Then
    FFindList.Show
  Else
    FFindList.Show
    FFindList.Start
    Search(False, False)
    FFindList.Stop
    If Not $bCanceled Then
      $iLastTimeStamp = Project.TimeStamp
      $sLastSearch = cmbFind.Text
    Endif
  Endif
  
  $bList = False
  
  'Action["find-in-project"].Value = TRUE

End

Public Sub Replace()
  
  If Not cmbFind.Text Then Return
  Store(cmbReplace)

  Search(False, True)
  
End


Public Sub ReplaceAll()

  If Not cmbFind.Text Then Return

  If Message.Warning(("Are you sure to want to replace all?"), ("Replace"), ("Cancel")) = 2 Then Return
  
  Store(cmbReplace)

  $bReplaceAll = True
  Search(False, True)
  $bReplaceAll = False
  
End


Public Sub Form_Arrange()

  Me.Height = panFind.Y + panFind.H

End

Public Sub ReadConfig()
  
  Try Action["find-in-" & LCase(Project.Config["/FFind/SearchIn", "Module"])].Value = True
  Action["find-case"].Value = Project.Config["/FFind/CaseSensitive", False]
  Action["find-word"].Value = Project.Config["/FFind/SearchWord", False]
  Action["find-comment"].Value = Project.Config["/FFind/SearchComment", False]
  Action["find-string"].Value = Project.Config["/FFind/SearchString", True]  
  
End


Public Sub WriteConfig()
  
  If Action["find-in-sub"].Value Then
    Project.Config["/FFind/SearchIn"] = "Sub"
  Else If Action["find-in-module"].Value Then 
    Project.Config["/FFind/SearchIn"] = "Module"
  Else If Action["find-in-project"].Value Then 
    Project.Config["/FFind/SearchIn"] = "Project"
  Endif
  Project.Config["/FFind/CaseSensitive"] = Action["find-case"].Value
  Project.Config["/FFind/SearchWord"] = Action["find-word"].Value
  Project.Config["/FFind/SearchComment"] = Action["find-comment"].Value
  Project.Config["/FFind/SearchString"] = Action["find-string"].Value    
  
End


Public Sub Form_Show()

  Dim bVisible As Boolean
  Dim hEdit As Editor
  Dim sSel As String

  'Action["find-action,find-option"].Visible = True
  
  OnProjectActivate
  
  Try hEdit = Project.ActiveForm.Editor
  If hEdit Then 
    If hEdit.Selected Then  
      If hEdit.Selection.StartLine = hEdit.Selection.EndLine Then 
        cmbFind.Text = hEdit.Selection.Text
      Endif 
    Endif
  Endif

  If $bReplace And If cmbFind.Text Then 
    cmbReplace.SetFocus
  Else
    cmbFind.SetFocus
  Endif

End

Public Sub Form_Hide()

  'Action["find-action,find-in,find-option"].Visible = False
  'FFindList.ClearFound

  FFindList.Hide
  FMain.ActivateCurrentWindow  

End

Public Sub cmbFind_Activate()

  If Action["find-next"].Visible Then 
    FindNext
  Else  
    FindAll
  Endif 

End

Public Sub cmbReplace_Activate()

  If Action["replace"].Visible Then 
    {Replace}
  Else 
    ReplaceAll
  Endif

End

' Public Sub cmbFind_KeyPress()
' 
'   If Key.Code = Key.Escape Then Me.Hide
'   If Key.Code = Key["F"] And Key.Control Then Me.Hide
' 
' End
' 
' Public Sub cmbReplace_KeyPress()
' 
'   cmbFind_KeyPress
' 
' End

Private Sub GetOptions(hForm As Object)

  $sFind = cmbFind.Text
  $bProc = Action["find-in-sub"].Value 
  $bProject = Action["find-in-project"].Value 
  $bCase = Action["find-case"].Value
  $bWord = Action["find-word"].Value
  $bComment = Action["find-comment"].Value
  $bString = Action["find-string"].Value
  
  If $bList Then 'NOT Action["find-in"].Visible THEN 
    $bProject = True
    $bProc = False
  Endif
  
  If Not $bCase Then $sFind = String.Upper($sFind)
  
  If Object.Type(hForm) <> "FEditor" Then 
    $bComment = True
    $bString = True
    $bProc = False
    $bProject = False
  Endif 
  
  $sReplace = cmbReplace.Text
  $iNbrReplace = 0
  
  'IF $bList THEN 
  '  $bProc = FALSE
  '  $bProject = TRUE
  'ENDIF
  
  'IF $bProject THEN Project.ClearFound

End

Private Sub Search(bBack As Boolean, bReplace As Boolean) As Boolean
  
  Dim bRes As Boolean
  
  Inc Application.Busy
  bRes = DoSearch(bBack, bReplace)
  Dec Application.Busy
  Return bRes
  
End

Private Sub ShowMessage(sMsg As String, hCtrl As control)
  
  If Me.Visible Then
    Balloon.Info(sMsg, hCtrl)
  Else 
    Project.SetMessage(sMsg)
  Endif
  
End


Private Sub DoSearch(bBack As Boolean, bReplace As Boolean) As Boolean
  
  Dim hForm As Object
  Dim hEdit As Editor
  Dim iLine, iCol As Integer
  Dim hFormStop As Object
  Dim iLineStop, iColStop As Integer
  Dim sLine As String
  Dim iPos As Integer
  Dim sNext As String
  Dim eLast As Float

  eLast = Timer
  $bStop = False
  $bCanceled = False
  
  hForm = Project.ActiveForm
  Try hEdit = hForm.Editor
  If Not hEdit Or If $bList And Not hForm Is FEditor Then 
    sNext = Project.GetNextEditor("")
    hForm = Project.LoadFile(sNext)
    Try hEdit = hForm.Editor
    If Not hEdit Then Return  
    hEdit.Goto(0, 0)
  Endif
  
  GetOptions(hForm)

  If $bList And If Not $bProc Then hEdit.Goto(0, 0)
  
  Try hForm.SavePosition()
  
  With hEdit
    If .Selected Then
    
      If bReplace And Not hEdit.ReadOnly Then
        If $bCase Then
          If .Selection.Text = $sFind Then
            .Insert($sReplace)
            Inc $iNbrReplace
          Endif
        Else
          If String.UCase(.Selection.Text) = $sFind Then
            .Insert($sReplace)
            Inc $iNbrReplace
          Endif
        Endif
      Endif

      If .Selected Then
        If bBack Then
          .Goto(.Selection.StartLine, .Selection.StartColumn)
        Else 
          .Goto(.Selection.EndLine, .Selection.EndColumn)
        Endif 
      Endif
      
    Endif
  End With 
  
  iLine = hEdit.Line
  iCol = hEdit.Column
  
  hFormStop = hForm
  iLineStop = iLine
  iColStop = iCol
  
  Do

    'sLine = hEdit.Lines[iLine]
    sLine = Highlight.Purge(hEdit.Lines[iLine].Text, $bComment, $bString)
    iPos = SearchString(sLine, iCol, bBack)
    
    If iPos Then

      If Not $bList Then hEdit.Select(iLine, iPos - 1, iLine, iPos + String.Len($sFind) - 1)

      If bReplace And $bReplaceAll And Not hEdit.ReadOnly Then
 
        hEdit.Insert($sReplace)
        iCol = iPos + String.Len($sReplace) - 1
        Inc $iNbrReplace
        Continue
        
      Else If $bList Then 
        
        FFindList.AddFound(hForm.Name, iLine, iPos, String.Len($sFind), hEdit.Lines[iLine].Text)
        iCol = iPos + String.Len($sFind) - 1
        'WAIT
        Continue
        
      Endif

      Project.ShowFile(hForm)
      'Project.SelectFound(hForm.Name, iLine, iPos, String.Len($sFind))
      Balloon.Hide
      Return

    Endif
    
    If $bStop Then 
      If $bReplaceAll Then 
        If $iNbrReplace = 0 Then
          ShowMessage(("Search string cannot be found."), cmbReplace)
        Else If $iNbrReplace = 1 Then
          ShowMessage(("Search string replaced once."), cmbReplace)
        Else
          ShowMessage(Subst(("Search string replaced &1 times."), $iNbrReplace), cmbReplace)
        Endif
      Else If Not $bList Then
        ShowMessage(("Search string cannot be found."), cmbFind)
      Endif
      Return True
    Endif

    If bBack Then 

      iCol = -1

      If $bProc Then
      
        If iLine <= 0 Or If FEditor.IsProc(hEdit.Lines[iLine].Text) Then
  
          Inc iLine
          While iLine < hEdit.Lines.Count
  
            sLine = hEdit.Lines[iLine].Text
            If FEditor.IsProc(sLine) Then Break
            Inc iLine
  
          Wend
  
        Endif
      
        Dec iLine
        
      Else 

        Dec iLine
        If iLine < 0 Then
  
          If $bProject Then
  
            sNext = Project.GetPreviousEditor(hForm.Path)
  
            Project.LoadFile(sNext)
  
            hForm = Project.Files[sNext]
            hEdit = hForm.Editor
  
          Endif
  
          iLine = hEdit.Lines.Count - 1
  
        Endif
        
      Endif 

    Else 

      Inc iLine
      iCol = 0

      If $bProc Then
        
        If iLine >= hEdit.Lines.Count Or If FEditor.IsProc(hEdit.Lines[iLine].Text) Then
  
          While iLine > 0
  
            Dec iLine
            sLine = hEdit.Lines[iLine].Text
            If FEditor.IsProc(sLine) Then Break
  
          Wend
  
        Endif
          
      Else
  
        If iLine >= hEdit.Lines.Count Then
  
          If $bProject Then
  
            sNext = Project.GetNextEditor(hForm.Path)
  
            Project.LoadFile(sNext)
  
            hForm = Project.Files[sNext]
            hEdit = hForm.Editor
            
            If $bList Then Wait
  
          Endif
  
          iLine = 0
  
        Endif
  
      Endif
  
    Endif 

    If hForm = hFormStop Then
      If iLine = iLineStop Then
        $bStop = True
      Endif
    Endif
    
    If $bList Then 
      If (Timer - eLast) > 0.1 Then 
        eLast += 0.1
        Wait 0.01
      Endif
      'Inc $iWait
      'If ($iWait And 255) = 0 Then Wait 0.01
    Endif

  Loop
    
End

Private Function GetCharType(sChar As String) As Integer

  If Asc(sChar) <= 32 Then Return 0
  If InStr("ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_$", UCase(sChar)) Then Return 1
  If Asc(sChar) >= 128 Then Return 1
  Return 2

End



Private Function SearchString(sLine As String, iPos As Integer, Optional bBack As Boolean) As Integer

  Dim iPosC As Integer

  If bBack And iPos = 0 Then Return

  ' IF NOT $bComment THEN
  '   iPosC = InStr(sLine, "'")
  '   IF iPosC THEN sLine = Left$(sLine, iPosC - 1)
  ' ENDIF

  If Not $bCase Then sLine = String.UCase(sLine)

  'iPos = String.Pos(sLine, iPos)

  Do

    If bBack Then
      iPos = String.RInStr(sLine, $sFind, iPos - 1)
    Else
      iPos = String.InStr(sLine, $sFind, iPos + 1)
    Endif

    If iPos = 0 Then Break

    If $bWord Then

      If iPos > 1 Then
        If GetCharType(String.Mid$(sLine, iPos, 1)) = GetCharType(String.Mid$(sLine, iPos - 1, 1)) Then Continue
      Endif

      If (iPos + String.Len($sFind)) <= String.Len(sLine) Then
        If GetCharType(String.Mid$(sLine, iPos + String.Len($sFind) - 1, 1)) = GetCharType(String.Mid$(sLine, iPos + String.Len($sFind), 1)) Then Continue
      Endif

    Endif

    Break

  Loop

  'IF iPos THEN iPos = String.Index(sLine, iPos)

  Return iPos

End

Public Sub Action_Activate(Key As String) As Boolean
  
  If Key = "find-comment" Or If Key = "find-case" Or If Key = "find-word" Or If Key = "find-string" Or If Key Like "find-in-*" Then $iLastTimeStamp = 0
  
  Return True
  
End

Public Sub btnClose_Click()

  Me.Hide  

End

Public Sub Cancel()
  
  $bStop = True
  $bCanceled = True
  
End

Public Sub HandleEscape() As Boolean

  If Application.ActiveControl = cmbFind Or If Application.ActiveControl = cmbReplace Then
    Me.Hide
    Return True
  Endif

End

Public Sub OnProjectActivate()
  
  Dim sType As String
  Dim bEditor As Boolean
  Dim bTextEditor As Boolean
  
  Try sType = Object.Type(Project.ActiveForm)
  
  bEditor = sType = "FEditor"
  bTextEditor = sType = "FTextEditor"
  
  Action["find-comment"].Visible = Not bTextEditor
  Action["find-string"].Visible = Not bTextEditor
  Action["find-in-*"].Visible = bEditor
  sepIn.Visible = bEditor
  Action["find-previous"].Visible = bEditor Or bTextEditor
  Action["find-next"].Visible = bEditor Or bTextEditor
  Action["replace"].Visible = bEditor Or bTextEditor
  
End
