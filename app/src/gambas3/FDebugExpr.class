' Gambas class file

Const YW_DUMMY_INFO As String = "@"
Const YW_NOT_AVAILABLE As String = ("not available")

Static Private $cAll As New Collection
Static Private $sYWindow As String
Static Private $sLastExpr As String

Private $sExpr As String
Private $sKey As String
Private $sInfo As String
Private $sLastGood As String
Private $aSym As String[]
Private $cVal As New Collection
Private $cOldVal As New Collection

Private $iRowStatic As Integer
Private $iRowDynamic As Integer

Private $sClass As String
Private $sRealClass As String
Private $bArray As Boolean
Private $bCollection As Boolean

Static Public Sub Add(sExpr As String, sInfo As String)

  Dim hWin As FDebugExpr

  If NOT sInfo Then Return

  If NOT $cAll.Exist(sExpr) Then
    $cAll[sExpr] = New FDebugExpr(sExpr, sInfo)
    $cAll[sExpr].Show
  Else 
    hWin = $cAll[sExpr]
    hWin.RefreshInfo(sInfo) 
  Endif 
  
End

Static Public Sub AddResult(sWindow As String, sValue As String)
  
  Dim iPos As Integer
  Dim hWin As FDebugExpr
  
  iPos = RInStr(sWindow, "#")
    
  hWin = $cAll[Left(sWindow, iPos - 1)]
  hWin.SetValue(CInt(Mid(sWindow, iPos + 1)), sValue)
  
End

Static Public Sub Clear()
  
  Dim hWin As FDebugExpr
  
  For Each hWin In $cAll
    Try hWin.Close
  Next
  
  $cAll.Clear
  
End

Public Sub _new(sExpr As String, sInfo As String)
  
  Dim aGeom As Integer[]
  
  $sExpr = sExpr
  $sKey = Replace(sExpr, "/", "|")
  $sInfo = sInfo
  
  'Project.Config.Read(ME, $sKey)
  aGeom = Project.Config["DebugWindow" &/ $sKey &/ "Geometry"]
  If aGeom Then Try Me.Move(aGeom[0], aGeom[1], aGeom[2], aGeom[3])
  btnHidden.Value = Project.Config["DebugWindow" &/ $sKey &/ "ShowHidden", False]
  
  If sInfo = YW_DUMMY_INFO Then
    Me.Enabled = False
    Me.Title = sExpr & " (" & YW_NOT_AVAILABLE & ")"
  Else 
    Init(sInfo, True)
  Endif 
  
  $sLastGood = sExpr
  txtExpr.Text = sExpr

  If $sLastExpr Then 
    If $cAll.Exist($sLastExpr) Then 
      With $cAll[$sLastExpr]
        Me.Move(.X + Desktop.Scale * 2, .Y + Desktop.Scale * 2, .W, .H)
      End With 
    Endif 
    $sLastExpr = ""
  Endif
  
  gvwExpr.SetFocus

End 

Public Sub gvwExpr_Data(Row As Integer, Column As Integer)

  Dim sSym As String
  Dim sVal As String

  If $bArray Then 
  
    If Column = 0 Then 
      gvwExpr.Data.Text = Row
    Else 
      sVal = $cVal[Row]
      If sVal Then 
        gvwExpr.Data.Text = sVal
        '$cVal.Remove(Row)
      Else  
        Design.Command("?X" & $sExpr & "#" & CStr(Row) & "\t" & $sExpr & "[" & Row & "]")
      Endif
    Endif
    
  Else If $bCollection Then
  
    sSym = Chr$(34) & $aSym[Row] & Chr$(34)

    If Column = 0 Then 
      gvwExpr.Data.Text = sSym
    Else 
      sVal = $cVal[Row]
      If sVal Then 
        gvwExpr.Data.Text = sVal
        '$cVal.Remove(Row)
      Else  
        Design.Command("?X" & $sExpr & "#" & CStr(Row) & "\t" & $sExpr & "[" & sSym & "]")
      Endif
    Endif
    
  Else

    sSym = $aSym[Row]
    
    If Right(sSym) = ":" Then 
      gvwExpr.Data.Background = Color.ButtonBackground
      Return 
    Endif
    
    If Column = 0 Then
      gvwExpr.Data.Text = sSym
      If $iRowStatic >= 0 Then 
        If $iRowDynamic < 0 OR If Row < $iRowDynamic Then gvwExpr.Data.Font.Bold = True
      Endif
    Else
      sVal = $cVal[Row]
      If sVal Then 
        gvwExpr.Data.Text = sVal
      Else 
        If Left($sClass) = "." OR If NOT $sRealClass Then
          Design.Command("?X" & $sExpr & "#" & CStr(Row) & "\t" & $sExpr & "." & sSym)
        Else 
          Design.Command("?X" & $sExpr & "#" & CStr(Row) & "\t" & $sRealClass & "(" & $sExpr & ")." & sSym)
        Endif
      Endif
        
    Endif
    
  Endif

  If Column <> 0 Then 
    If Left(gvwExpr.Data.Text) <> "!" Then

      If $cVal.Exist(Row) AND If $cOldVal.Exist(Row) AND If gvwExpr.Data.Text <> $cOldVal[Row] Then 
        gvwExpr.Data.Background = Color.Yellow
        gvwExpr.Data.Font.Bold = True
      Endif
      
    Else   
      gvwExpr.Data.Text = Mid$(gvwExpr.Data.Text, 2)
      gvwExpr.Data.Background = Color.Lighter(Color.Red)
    Endif 

  ' ELSE  
  '   
  '   IF NOT $cOldVal.Exist(Row) AND $cOldVal.count > 0 THEN 
  '     gvwExpr.Data.Background = Color.Yellow
  '   ENDIF 

  Endif 

End

Public Sub SetValue(iRow As Integer, sVal As String)
  
  Dim vVal As Variant
  Dim sHex As String

  vVal = Val(sVal)
  
  Select Case TypeOf(vVal)
    Case gb.Integer
      sHex = Hex$(vVal, 8)
    Case gb.Long
      sHex = Hex$(vVal, 16)
  End Select 
  
  If sHex Then 
    While Left(sHex) = "0"
      sHex = Mid$(sHex, 2)
    Wend
    If sHex Then sVal &= " / &H" & sHex
  Endif
  
  $cVal[iRow] = sVal
  gvwExpr[iRow, 1].Refresh
  
End

Private Sub OpenExpr(sExpr As String, Optional sRealExpr As String)
  
  $sYWindow = $sExpr
  $sLastExpr = $sExpr
  If NOT sRealExpr Then sRealExpr = sExpr
  Design.Command("#X" & sExpr & "\t" & sRealExpr)   
  
End


Public Sub gvwExpr_Activate()

  Dim sText As String
  Dim sVal As String
  Dim sExpr As String
  
  If gvwExpr.Row >= 0 Then
  
    sText = gvwExpr[gvwExpr.Row, 0].Text    
    If NOT sText OR Right(sText) = ":" Then Return
    sVal = gvwExpr[gvwExpr.Row, 1].Text
    If Left(sVal) <> "(" Then Return 

    If $bArray OR $bCollection
      sText = $sExpr & "[" & sText & "]"
    Else 
      If Left($sClass) = "." OR If NOT $sRealClass Then
        sText = $sExpr & "." & sText
      Else 
        'sText = $sExpr & "." & sText
        sText = $sRealClass & "(" & $sExpr & ")." & sText
      Endif
    Endif 
    
    With gvwExpr[gvwExpr.Row, 1]
      Design.SetBalloon(gvwExpr, .X + .W / 2, .Y + .H / 2)
    End With
    OpenExpr(sText)
    
  Endif

End

Private Sub Init(sInfo As String, bNew As Boolean)

  Dim aStatic As New String[]
  Dim aDynamic As New String[]
  Dim sSym As String
  Dim sType As String
  Dim iCol As Integer
  Dim nRow As Integer
  Dim nRowAsArray As Integer = -1
  Dim bShowHidden As Boolean = btnHidden.Value
  Dim bHasHidden As Boolean

  $aSym = Split(sInfo, " ", Chr$(34))

  $sClass = $aSym[0]
  $sRealClass = $aSym[1]
  
  $aSym.Remove(0, 2) ' Remove the class names

  $bArray = Right($sClass, 2) = "[]"
  'aInfoReturn.Add(bInfoArray)
  $bCollection = $sClass = "Collection"
  'aInfoReturn.Add(bInfoCollection)

  $iRowStatic = -1
  $iRowDynamic = -1
    
  If $bArray Then 
  
    nRow = Val($aSym[0])
    $aSym = Null

  Else If $bCollection Then  

    nRow = Val($aSym[0])  
    $aSym.Remove(0) ' Remove the count 

  Else 

    ' Sort symbols
    
    For Each sSym In $aSym
      If Right(sSym) = ":" Then   
        sType = UCase(sSym)
      Else
        If Left(sSym) = "_" Then 
          bHasHidden = True
          If NOT bShowHidden Then Continue
        Endif
        If Left(sSym) = "[" Then
          nRowAsArray = CInt(Mid$(sSym, 2, -1))
          Continue
        Endif
        If sType = "S:" Then 
          aStatic.Add(sSym)
        Else 
          aDynamic.Add(sSym)
        Endif
      Endif
    Next
    
    If aDynamic.Count Then 
      If aStatic.Count Then
        bHasHidden = True
        If NOT bShowHidden Then aStatic.Clear
      Endif
    Endif
    
    aStatic.Sort
    aDynamic.Sort
    
    $aSym.Clear
    
    If aStatic.Count Then
      $iRowStatic = $aSym.Count 
      'IF aDynamic.Count THEN $aSym.Add("S:")
      $aSym.Insert(aStatic)
    Endif
    
    If aDynamic.Count Then 
      $iRowDynamic = $aSym.Count 
      If aStatic.Count Then $aSym.Add("D:")
      $aSym.Insert(aDynamic)
    Endif
    
    nRow = $aSym.Count
    
    If aStatic.Count = 1 AND If aDynamic.Count = 0 AND If aStatic[0] = "Count" AND If nRowAsArray >= 0 Then 
      nRow = nRowAsArray
      $bArray = True
      $aSym = Null
    Else If aDynamic.Count = 1 AND If aStatic.Count = 0 AND If aDynamic[0] = "Count" AND If nRowAsArray >= 0 Then 
      nRow = nRowAsArray
      $bArray = True
      $aSym = Null
    Endif
    
  Endif

  If Left$($sClass) = "." OR If NOT $sRealClass Then
    Me.Title = $sExpr & " (" & $sClass & ")"
  Else 
    Me.Title = $sExpr & " (" & $sRealClass & ")"
  Endif

  ' iCol = 0 
  ' FOR nI = 2 TO aInfo.Count STEP 2
  '   gvwExpr.Columns[iCol].Text = aInfo[3][nI]
  '   IF bIsNewYW AND aInfo[3][nI + 1] <> NULL THEN 
  '     gvwExpr.Columns[iCol].Width = aInfo[3][nI + 1]
  ' 
  '   ENDIF 
  ' 
  '   INC iCol
  ' 
  ' NEXT

  With gvwExpr
  
    .Columns.Count = 2
    .Rows.Count = nRow
  
    If $bArray Then 
    
      .Columns[0].Text = ("Index")
      '.Columns[0].Width = Max(80, .Font.Width(CStr(nRow)) + 16)
      .Columns[1].Text = ("Value")
  
    Else If $bCollection Then  
    
      .Columns[0].Text = ("Key")
      '.Columns[0].Width = .Font.Width("Key") + 16
      .Columns[1].Text = ("Value")
  
    Else 
  
      .Columns[0].Text = ("Symbol")
      '.Columns[0].Width = .Font.Width("Symbol") + 16
      .Columns[1].Text = ("Value")
  
    Endif
    
  End With

  'IF $iRowStatic >= 0 THEN gvwExpr.Rows[$iRowStatic].Height = 4
  gvwExpr.Rows.Height = -1
  If $iRowDynamic >= 0 AND If $iRowStatic >= 0 Then gvwExpr.Rows[$iRowDynamic].Height = 4
  
  If NOT bNew Then Try gvwExpr.Columns[0].Width = -1

  btnHidden.Visible = bHasHidden

End

Public Sub RefreshInfo(sInfo As String)

  Dim xStr As String

    $sInfo = sInfo
    Me.Enabled = True

    For Each xStr In $cVal
      $cOldVal.Add(xStr, $cVal.Key)
    Next 

    $cVal.Clear
    Init(sInfo, False) 

End

Public Sub Form_Close()

  WriteSetting
  $cAll.Remove($sExpr)

Catch

End

Static Public Sub RefreshAll()

  Dim xObj As Object

  For Each xObj In $cAll
    Design.Command("#X" & $cAll.Key & "\t" & $cAll.Key)
  Next 

End

' STATIC PUBLIC FUNCTION IsSender() AS Form
' 
'   DIM sKey AS String
'   
'   IF $sYWindow THEN 
'     sKey = $sYWindow
'     $sYWindow = ""
'     RETURN $cAll[sKey]
'   ELSE 
'     RETURN NULL  
'   ENDIF 
' 
' END

Static Public Function Exist(sExpr As String) As Boolean
  
  If NOT sExpr Then Return
  Return $cAll.Exist(sExpr)

End

Static Public Sub Disable(sExpr As String, sError As String)

  Dim hWin As FDebugExpr
  
  If NOT sError Then Return 
  
  hWin = $cAll[sExpr]
  hWin.Enabled = False
  hWin.Title = sExpr & " (" & YW_NOT_AVAILABLE & ")"

End

' PUBLIC SUB mnuCloseAll_Click()
' 
'   Clear()
' 
' END
' 
' PUBLIC SUB mnuClose_Click()
' 
'   ME.Close
' 
' END
' 
' PUBLIC SUB mnuSetSize_Click()
' 
'   Project.Config.Write(ME, "DebugWindow/DefaultSize")
' '  Design.$DebugConfig[ME.Name &/ "YWindowDefaultSize/gvwExpr.Columns[0].Width"] = gvwExpr.Columns[0].Width 
' 
' END

Public Sub WriteSetting()
  
  Project.Config.Clear("DebugWindow" &/ $sKey)
  If btnHidden.Value Then Project.Config["DebugWindow" &/ $sKey &/ "ShowHidden"] = True  
  Project.Config["DebugWindow" &/ $sKey &/ "Geometry"] = [Me.X, Me.Y, Me.W, Me.H]  
  
End


Static Public Sub WriteSettings()

  Dim iInd As Integer
  Dim sFlag As String
  Dim hExpr As FDebugExpr

  sFlag = "/DebugWindow"
  iInd = 0
  Project.Config.Clear(sFlag)

  Project.Config[sFlag &/ "Count"] = $cAll.Count  

  For Each hExpr In $cAll
    Inc iInd
    Project.Config[sFlag &/ "DebugWindow[" & CStr(iInd) & "]"] = $cAll.Key
    hExpr.WriteSetting
  Next 
  
End

Static Public Sub ReadSettings()

  Dim iCount As Integer
  Dim iInd As Integer
  Dim sString As String
  Dim sArg As String[]
  Dim sFlag As String
  
  sFlag = "/DebugWindow"
  iInd = 0
  iCount = Project.Config[sFlag &/ "Count", "0"]
  For iInd = 1 To iCount
    sString = Project.Config[sFlag &/ "DebugWindow[" & CStr(iInd) & "]"]
    If sString Then 
      If NOT $cAll.Exist(sString) Then
        Add(sString, YW_DUMMY_INFO) 
      Endif 
    Endif 
  Next
End


' PUBLIC SUB txtExpr_Change()
' 
'   DIM sExpr AS String
' 
'   IF NOT $sLastGood THEN 
'     $sLastGood = txtExpr.Text
'   ELSE IF NOT (txtExpr.Text LIKE ($sExpr & "*")) THEN 
'     sExpr = $sLastGood
'     $sLastGood = ""
'     txtExpr.Text = sExpr
'   ENDIF  
' 
' END

Public Sub txtExpr_Activate()

  Dim sExpr As String = Trim(txtExpr.Text)
  
  If sExpr Then 
    Design.SetBalloon(txtExpr)
    OpenExpr(sExpr)
    gvwExpr.SetFocus
  Endif

End

Public Sub txtExpr_LostFocus()
  
  txtExpr.Text = $sExpr
  
End


Public Sub txtExpr_KeyPress()

  If Key.Code = Key.Escape Then txtExpr.Text = $sExpr

End


Public Sub Form_Open()

  Try gvwExpr.Columns[0].Width = -1

End

Public Sub btnHidden_Click()

  $cVal.Clear
  Init($sInfo, False)

End
