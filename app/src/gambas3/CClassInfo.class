' Gambas class file

Public Name As String
Public Parent As String
Public Symbols As Collection
Public Creatable As Boolean
Public AutoCreatable As Boolean
Public Component As String
Public ParentComponent As String
Public DefaultEvent As String
Public Events As String[]
Public PropertyList As String[]
Public Properties As Collection
Public VirtualControl As Boolean
Public DrawWith As String
Public Container As Boolean
Public Form As Boolean
Public MultiContainer As Boolean
Public DefaultWidth As Short
Public DefaultHeight As Short

Public Sub _new(sName As String, Optional sParent As String)

  Dim hSym As CSymbolInfo

  Name = sName
  {Parent} = sParent
  Symbols = New Collection(gb.Text)

  If {Parent} Then
    'IF Parent = "GridView" THEN STOP
    ParentComponent = CComponent.Classes[sParent].Component
    'IF ERROR THEN
    '  STOP
    '  Error.Raise(Error.Text)
    'ENDIF
    For Each hSym In CComponent.Classes[sParent].Symbols
      Symbols[hSym.Name] = hSym
    Next
  Endif

End



Public Sub InitControl(hWin As Form)

  Dim aProp As String[]
  Dim sProp As String
  Dim sStr As String
  Dim sParent As String
  Dim hProp As CPropertyInfo
  Dim hSym As CSymbolInfo
  'DIM hCtrl AS Object
  Dim sDefVal As String
  Dim iPos As Integer
  Dim iPos2 As Integer
  Dim hClass As CClassInfo
  Dim bRemove As Boolean
  Dim aCont As String[]
  Dim sKind As String

  'DEBUG Component;; Name

  'IF NOT Symbols.Exist("_Properties") THEN RETURN

  ' IF CComponent.All[Component].Type = "Form" THEN
  '   IF Name = "Form" OR Name = "Control" THEN
  '     hCtrl = hWin
  '   ENDIF
  ' ENDIF

  'IF NOT hCtrl THEN

    VirtualControl = CComponent.All[Component].Virtuals.Find(Name) >= 0

    'IF Component LIKE "gb.qt*" THEN

    '   hClass = ME
    '   DO
    '     'hSym = hClass.Symbols["_new"]
    '     'PRINT Name; " -> "; hSym.Signature
    '     'IF Len(hSym.Signature) And Left$(hSym.Signature) <> "[" THEN
    '     'IF hClass.Name = "Connection" THEN STOP
    '     IF VirtualControl THEN
    '       TRY hCtrl = NEW (hClass.Name)
    '     ELSE
    '       TRY hCtrl = NEW (hClass.Name, hWin)
    '     ENDIF
    ' 
    '     IF hCtrl THEN BREAK
    ' 
    '     TRY hClass = CComponent.Classes[hClass.ParentComponent &/ hClass.Parent]
    '     IF ERROR THEN BREAK
    '   LOOP
    '   
    ' 'ENDIF
    ' 
    ' IF NOT hCtrl THEN hCtrl = NEW Frame(hWin)

  'ENDIF

  aCont = CComponent.All[Component].Containers
  Container = aCont.Find(Name) >= 0 OR Name = "Form" OR Name = "Menu"
  Form = Name = "Form"

  MultiContainer = CComponent.All[Component].MultiContainers.Find(Name) >= 0 OR Name = "TabStrip"

  hSym = Symbols["_Properties"]
  If hSym Then
    If hSym.Class = Name AND If hSym.Component = Component Then
      sProp = hSym.Value
    Else 
      sProp = "*"
    Endif
  Endif

  sParent = ParentComponent &/ Parent
  While Left$(sProp) = "*"
    sProp = Mid$(sProp, 3)
    sStr = ""
    Try sStr = CComponent.Classes[sParent].Symbols["_Properties"].Value 
    If sStr Then 
      If sProp Then
        sProp = sStr & "," & sProp
      Else 
        sProp = sStr
      Endif 
    Endif
    sParent = CComponent.Classes[sParent].ParentComponent &/ CComponent.Classes[sParent].Parent
  Wend

'   IF Left$(sProp) = "*" THEN
'     sProp = Mid$(sProp, 3)
'     sParent = CComponent.Classes[Parent].Symbols["_Properties"].Value
'     IF Left(sParent, Len(CPropertyInfo.EVENT_NAME)) = CPropertyInfo.EVENT_NAME THEN
'       sParent = Mid$(sParent, Len(CPropertyInfo.EVENT_NAME) + 2)
'     ENDIF
'     IF sParent THEN
'       IF sProp THEN sProp = "," & sProp
'       sProp = sParent & sProp
'     ENDIF
'   ENDIF

  Properties = New Collection
  For Each sProp In Split(sProp)

    ' Name can be "Name{Kind}=Default"
    iPos = InStr(sProp, "{")
    If iPos Then
      iPos2 = InStr(sProp, "}", iPos + 1)
      If iPos2 = 0 Then iPos2 = Len(sProp)
      sKind = Mid$(sProp, iPos + 1, iPos2 - iPos - 1)
      sProp = Left$(sProp, iPos - 1) & Mid$(sProp, iPos2 + 1)
    Else 
      sKind = ""
    Endif
    iPos = InStr(sProp, "=")
    If iPos Then
      sDefVal = Mid$(sProp, iPos + 1)
      sProp = Left$(sProp, iPos - 1)
    Else
      sDefVal = ""
    Endif

    bRemove = Left(sProp) = "-"
    If bRemove Then sProp = Mid$(sProp, 2)

    ' IF sProp = "Action" AND Name = "ToolBar" THEN 
    '   DEBUG CComponent.Classes.Count;; Component;; CComponent.Classes[Component &/ Name].Symbols[sProp]
    '   STOP
    ' ENDIF

    If bRemove Then
      Properties[sProp] = Null
    Else

      If Component Then
        'PRINT "? "; Component; ": "; Name; "."; sProp
        If NOT CComponent.Classes[Component &/ Name].Symbols[sProp] Then
          Error Component; ": "; Name; "."; sProp; " declared but not implemented"
          Continue
        Endif
      Endif

      hProp = New CPropertyInfo(Component, Name, sProp, sKind, Null, False, VirtualControl, sDefVal)
      Properties[sProp] = hProp
    Endif

  Next

  Try DefaultEvent = Symbols["_DefaultEvent"].Value

  Events = New String[]
  For Each hSym In Symbols
    If hSym.Kind = ":" Then
      If Left$(hSym.Name) = ":" Then
        Events.Add(Mid$(hSym.Name, 2))
      Else
        Events.Add(hSym.Name)
      Endif
    Endif
  Next
  Events.Sort

  ' Taille par défaut
  
  'IF Name = "Button" THEN STOP
  Try sStr = Symbols["_DefaultSize"].Value 
  If sStr Then 
    aCont = Split(sStr)
    Try DefaultWidth = Val(aCont[0]) * Desktop.Scale
    Try DefaultHeight = Val(aCont[1]) * Desktop.Scale
  Endif
  
  ' Modification des propriétés

  PropertyList = New String[]

  For Each hProp In Properties
    PropertyList.Add(hProp.Name)
  Next

  If VirtualControl Then

    Properties["Y"] = New CPropertyInfo("", Name, "Y", "", hWin, True)
    PropertyList.Add("Y", 0)
    Properties["X"] = New CPropertyInfo("", Name, "X", "", hWin, True)
    PropertyList.Add("X", 0)

  Endif

  If {Form} Then 
    Properties[CPropertyInfo.SCALE_NAME] = New CPropertyInfo(Component, Name, CPropertyInfo.SCALE_NAME, "", Null)
    PropertyList.Add(CPropertyInfo.SCALE_NAME, 0)
  Endif

  Properties[CPropertyInfo.EVENT_NAME] = New CPropertyInfo(Component, Name, CPropertyInfo.EVENT_NAME, "", Null)
  PropertyList.Add(CPropertyInfo.EVENT_NAME, 0)

  'IF Name = "Timer" THEN
  Try DrawWith = Symbols["_DrawWith"].Value
  'IF DrawWith THEN ?Me. <= CRASH!
  '  PRINT ME.Name;; "->";; DrawWith
  'ENDIF

  ' IF hCtrl <> hWin THEN
  '   TRY hCtrl.Delete
  ' ENDIF
End


Public Function GetProperties() As Collection

  If Properties Then
    If Properties.Count Then
      Return Properties
    Endif
  Endif

  If {Parent} Then
    Return CComponent.Classes[ParentComponent &/ {Parent}].GetProperties()
  Endif

End


Public Function Inherits(sClass As String) As Boolean

  If {Parent} = sClass Then Return True
  If NOT Parent Then Return False
  Return CComponent.Classes[ParentComponent &/ Parent].Inherits(sClass)

End


' PRIVATE FUNCTION IsContainer(hCtrl AS Control) AS Boolean
' 
'   DIM hCont AS Container
'   DIM hUser AS UserControl
' 
'   TRY hUser = hCtrl
'   IF NOT ERROR THEN RETURN FALSE
' 
'   TRY hCont = hCtrl
'   IF NOT ERROR THEN RETURN TRUE
' 
'   IF Name = "Menu" THEN RETURN TRUE
' 
'   RETURN FALSE
' 
' END
