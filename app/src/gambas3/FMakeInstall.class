' Gambas class file

Private $sMenuSystem As String
Private $sGroupSystem As String
Private $cCatCache As New Collection
Private $sLastCat As String

Private Sub MakeChangeLog() As String

  Dim aLine As String[]
  Dim sLine As String
  Dim sChangeLog As String
 
  aLine = Split(txtChange.Text, "\n")
  For Each sLine In aLine
    sLine = Trim(sLine)
    If Not sLine Then Continue
    If Left(sLine) <> "-" Then sLine = "- " & sLine
    sChangeLog &= sLine & "\n"
  Next

  sChangeLog = "* " & Package.GetChangeDate() & "\n" & sChangeLog & "\n"

  sChangeLog &= txtChangeLog.Text
  Return sChangeLog
  
End

Public Sub Form_Open()
  
  If Project.Maintainer Then
    txtName.Text = Project.Maintainer
  Else 
    txtName.Text = System.User.Name
  Endif
  
  txtName.SelectAll
  txtName.SetFocus
  
  If Project.Address Then
    txtMail.Text = Project.Address
  Else 
    txtMail.Text = System.User.Name & "@" & System.Host
  Endif
  
  txtVendor.Text = Project.Vendor
  
  If Project.License Then
    txtLicense.Text = Project.License
  Else 
    txtLicense.Text = "General Public Licence"
  Endif
  
  txtDescribe.Text = Project.Description

  Try txtChangeLog.Text = File.Load(Project.Dir &/ "CHANGELOG")
  Try txtTests.Text = File.Load(Project.Dir &/ ".extratest")

  chkPrefix.Value = Project.Prefix
  chkUseRelease.Value = Project.UseRelease

  'InitSystemControls
  InitSystems

  UpdatePackageName

  cmbCategories.List = Split(File.Load("install/categories"), "\n", "", True)

  txtLicense.List = ["General Public Licence", "Freeware", "Public Domain", "Lesser General Public Licence", "Other Licence(s)", "Non-Free Licence"]
  
  If Project.CreateComponent Then 
    chkPrefix.Value = True
    chkPrefix.Enabled = False
  Endif 

  chkCreateDir.Value = Project.CreateEachDirectory

End

Public Sub wizInstall_Cancel()

  Me.Close  

End

Private Sub UpdatePackageName()
  
  Dim sVendor As String
  Dim sText As String

  If Project.CreateComponent Then

    sVendor = String.LCase(Trim(txtVendor.Text))
    If Not sVendor Then sVendor = "gb"
    If LCase(Project.Name) Like sVendor & ".*" Then 
      sVendor = ""
    Else 
      sVendor &= "-"
    Endif
    sText = "gambas" & System.Version & "-" & sVendor & Replace(LCase(Project.Name), ".", "-")
  
  Else

    If chkPrefix.Value Then
      sVendor = String.LCase(Trim(txtVendor.Text))
      If Not sVendor Then sVendor = "gambas"
      sText = sVendor & "-" & LCase(Project.Name)
    Else
      sText = LCase(Project.Name)
    Endif
    
  Endif
  
  sText &= Subst("-&1.&2", Project.MajorVersion, Project.MinorVersion)
  If chkUseRelease.Value Then sText &= "." & Project.ReleaseVersion
  
  txtPackage.Text = sText
  
End


Public Sub chkPrefix_Click()

  UpdatePackageName

End

Private Sub GetSystemControls() As Control[]
  
  Dim aObject As New Control[]
  Dim hCtrl As Control
  Dim hCont As Container
  Dim hCheck As CheckBox

  For Each hCont In panSystem.Children
    For Each hCtrl In hCont.Children
      If hCtrl Is CheckBox Then
        aObject.Add(hCtrl)
      Endif
    Next
  Next
  
  Return aObject  
  
End

Private Sub InitSystemControls()
  
  Dim hCtrl As Control
  Dim hCont As Container
  Dim sMsg As String
  Dim hPanel As Panel
  Dim hPict As PictureBox
  Dim hLabel As TextLabel
  Dim hTool As ToolButton
  Dim hCheckBox As CheckBox

  Inc Application.Busy
  
  Package.CheckProgram
  
  For Each hCont In panSystem.Children
  
    sMsg = Package.CheckSystem(hCont.Tag)
    
    hPanel = Null
    For Each hCtrl In hCont.Children
      If hCtrl Is ToolButton Then
        hTool = hCtrl
      Else If hCtrl Is CheckBox Then 
        hCheckBox = hCtrl
      Else If hCtrl Is Panel Then 
        hPanel = hCtrl
      Endif 
    Next
    
    If Not hPanel Then 
    
      hPanel = New Panel(hCont)
      hPanel.Border = Border.Plain
      hPanel.Background = &HFFFFDF& ' Light Yellow
      hPanel.Arrangement = Arrange.Horizontal
      hPanel.Spacing = 8
      hPanel.Padding = 4
      hPanel.Expand = True
      
      hPict = New PictureBox(hPanel)
      hPict.Picture = Picture["icon:/32/warning"]
      hPict.Width = 32
      
      hLabel = New TextLabel(hPanel)
      hLabel.Text = sMsg
      hLabel.Expand = True

    Endif

    hCheckBox.Enabled = Not sMsg
    If Not hCheckBox.Enabled Then hCheckBox.Value = False

    hTool.Design = True
    hTool.Enabled = hCheckBox.Value
    hTool.Picture = hTool.Picture.Image.Stretch(hTool.Width - 2, hTool.Height - 2, True).Picture
    
    hPanel.Visible = sMsg

  Next
  
  Dec Application.Busy
  
End


Private Sub InitSystems()

  Dim hCtrl As CheckBox
  Dim hCont As Container
  Dim hCheck As CheckBox

  For Each hCtrl In GetSystemControls()
    hCtrl.Value = hCtrl.Enabled And Project.Systems.Find(hCtrl.Parent.Tag) >= 0
  Next

End

Public Sub wizInstall_Close()

  Project.WriteProject
  
  If Package.Make() Then Return
  
  If Message.Warning(("The packages have been successfully created."), ("Close"), ("Retry")) = 2 Then Return
  
  Me.Close

End

Private Function CheckSys(cCol As Collection) As Boolean

  Dim sSys As String

  For Each sSys In Project.Systems
    If sSys = "autotools" Then Continue
    If Not cCol.Exist(sSys) Then Return True
  Next

End


Public Sub wizInstall_BeforeChange()

  Dim sName As String
  Dim sDir As String
  Dim iSize As Integer

  Select Case wizInstall.Index

    Case 0
      Project.Maintainer = Trim(txtName.Text)
      Project.Address = Trim(txtMail.Text)
      Project.Vendor = Trim(txtVendor.Text)
      Project.License = Trim(txtLicense.Text)

      If Not Project.Maintainer Then
        Message.Warning(("Please enter your name."))
        Stop Event
        Return
      Endif
      If Not Project.Address Then
        Message.Warning(("Please enter your e-mail address."))
        Stop Event
        Return
      Endif

      Project.Description = txtDescribe.Text
      Project.Prefix = chkPrefix.Value
      Project.UseRelease = chkUseRelease.Value

    Case 1
      If Not Trim(txtChange.Text) Then 
        If Message.Warning(("There is no CHANGELOG entry for this release."), ("Continue"), ("Cancel")) = 2 Then 
          Stop Event
          Return 
        Endif
      Endif
      Package.ChangeLog = MakeChangeLog()
      If Not Package.ChangeLog Then
        Message.Warning(("Please enter the first CHANGELOG entry."))
        Stop Event
        Return
      Endif

      InitSystemControls      

    Case 2
      Project.Systems = GetSystems()
      If Project.Systems.Count = 0 Then
        Message.Warning(("Please choose at least one target distribution."))
        Stop Event
        Return
      Endif
      If Project.Systems.Count = 1 And If Project.Systems[0] = "autotools" Then 
        wizInstall[3].Enabled = False
        wizInstall[4].Enabled = False
      Else
        wizInstall[3].Enabled = True
        wizInstall[4].Enabled = True
      Endif
     If Project.Systems.Count = 1 And If Project.Systems[0] <> "autotools" Then 
        wizInstall[5].Enabled = True
     Endif
     If Project.CreateComponent
        wizInstall[4].Enabled = False
      Endif

    Case 3
      If CheckSys(Project.Groups) Then
        If cmbGroup.Count > 1 Then
          Message.Warning(("Please choose the package group for each target distribution."))
        Else 
          Message.Warning(("Please choose a package group."))
        Endif
        Stop Event
        Return
      Endif

    Case 4
      If CheckSys(Project.Menus) Then
        If cmbMenu.Count > 1 Then
          Message.Warning(("Please choose the menu location for each target distribution."))
        Else 
          Message.Warning(("Please choose a menu location."))          
        Endif 
        Stop Event
        Return
      Endif
      
      ' IF CheckSys(Project.Categories) THEN
      '   IF cmbMenu.Count > 1 THEN
      '     Message.Warning(("Please choose at least one category for each target distribution."))
      '   ELSE 
      '     Message.Warning(("Please choose at least one category."))          
      '   ENDIF 
      '   STOP EVENT
      '   RETURN
      ' ENDIF
    
    Case 5
      Package.ExtraTest = txtTests.Text
    
    Case 6
      Package.Path = dchInstall.SelectedPath
      If Package.Path = Project.Dir Or If Package.Path Like Project.Dir &/ "/*" Then 
        Message.Warning(("The package cannot be stored inside the project directory."))
        Stop Event 
        Return 
      Endif

  End Select
  
End 

Public Sub wizInstall_Change()

  Select Case wizInstall.Index

    Case 1
      lblChangeDate.Text = Package.GetChangeDate()
      If Not txtChangeLog.Text Then txtChange.Text = ("Initial release")
      txtChange.SetFocus
      
    Case 3
      InitGroupTree
      cmbGroup.Visible = cmbGroup.Count > 1
      
    Case 4
      InitMenuTree
      cmbMenu.Visible = cmbMenu.Count > 1

  End Select

End

Private Function GetSystems() As String[]

  Dim hCtrl As CheckBox
  Dim aSys As New String[]

  For Each hCtrl In GetSystemControls()
    If hCtrl.Value Then aSys.Add(hCtrl.Parent.Tag)
  Next

  Return aSys

End


Private Function GetSystemNames(Optional bRemoveSystemWithoutMenu As Boolean) As String[]

  Dim hCtrl As CheckBox
  Dim aSys As New String[]

  For Each hCtrl In GetSystemControls()
    If bRemoveSystemWithoutMenu And If hCtrl.Parent.Tag = "autotools" Then Continue
    If hCtrl.Value Then aSys.Add(hCtrl.Text)
  Next

  Return aSys

End



Private Function GetSystemFromName(sName As String) As String

  Dim hCtrl As CheckBox

  For Each hCtrl In GetSystemControls()
    If hCtrl.Text = sName Then Return hCtrl.Parent.Tag
  Next

End


Public Function GetSystemName(sTag As String) As String

  Dim hCtrl As CheckBox

  For Each hCtrl In GetSystemControls()
    If hCtrl.Parent.Tag = sTag Then Return hCtrl.Text
  Next

End



Public Sub AddLog(sText As String, Optional bNoNewLine As Boolean)

  txtLog.Insert(sText)
  If Not bNoNewLine Then txtLog.Insert("\n")
  Wait

End

Private Sub FillComboWithSystems(hCombo As ComboBox)

  Dim sSys As String

  hCombo.Clear

  For Each sSys In GetSystemNames(True)
    hCombo.Add(sSys)
  Next

  hCombo.Index = 0

End


Private Sub InitMenuTree()

  FillComboWithSystems(cmbMenu)

End


Private Sub InitGroupTree()

  FillComboWithSystems(cmbGroup)

End

Private Sub FindCategoriesFromMenu(sMenu As String) As String
  
  Dim sCat As String
  Dim aCat As New String[]
  
  sMenu = Replace(sMenu, " ", "")
  
  For Each sCat In Split(sMenu, "/")
    If cmbCategories.Find(sCat) >= 0 Then aCat.Add(sCat)
  Next
  
  Return aCat.Join(";")
  
End


Private Sub FillTreeWith(hTree As TreeView, sTitle As String, sIcon As String, sFile As String, hTextBox As TextBox, sSelect As String, Optional bCat As Boolean)

  Dim hFile As File
  Dim sLig As String
  Dim iLevel As Integer
  Dim iNewLevel As Integer
  Dim sParent As String
  Dim sKey As String
  Dim iPos As Integer
  Dim sCat As String
  Dim sAdd As String
  Dim sElt As String
  
  hTree.Clear
  hTree.Add("/", sTitle, Picture[sIcon]).Expanded = True
  sParent = "/"
  
  If bCat Then
    $cCatCache.Clear
    $sLastCat = ""
  Endif

  Open sFile As #hFile

  While Not Eof(hFile)

    Line Input #hFile, sLig
    sLig = RTrim(sLig)
    If Not sLig Then Continue

    If bCat Then
      iPos = InStr(sLig, "#")
      If iPos Then 
        sCat = Trim(Mid(sLig, iPos + 1))
        sLig = RTrim(Left(sLig, iPos - 1))
      Else 
        sCat = ""
      Endif  
    Endif

    If InStr(sLig, "/") Then 
    
      sKey = "/"
      sParent = "/"
      
      For Each sElt In Split(Trim(sLig), "/")
        sKey &/= sElt
        If Not hTree.Exist(sKey) Then
          hTree.Add(sKey, File.Name(sKey),, sParent).Expanded = True
          hTree[sParent].Expanded = True
        Endif
        sParent = sKey
      Next
      
      sParent = File.Dir(sLig)
      If sParent = "" Then sParent = "/"
      sLig = File.Name(sLig)
    
    Else

      iNewLevel = Len(sLig) - Len(LTrim(sLig))
  
      If iNewLevel > iLevel Then
        sParent = sKey
      Else If iNewLevel < iLevel Then
        While iLevel > iNewLevel
          hTree.MoveTo(sParent)
          If hTree.MoveParent() Then
            sParent = ""
          Else
            sParent = hTree.Item.Key
          Endif
          Dec iLevel
        Wend
      Endif
  
      iLevel = iNewLevel

      If sParent = "" Then sParent = "/"
      sKey = sParent &/ Trim(sLig)
  
      hTree.Add(sKey, Trim(sLig),, sParent)
      hTree[sParent].Expanded = True
      'DEBUG sKey
    
    Endif
    
    If bCat Then
      sAdd = FindCategoriesFromMenu(sKey)
      If sAdd And If sCat Then sCat &= ";"
      $cCatCache[sKey] = sCat & sAdd
    Endif 
    
  Wend

  Close #hFile

  sSelect = "/" &/ sSelect
  hTextBox.Clear
  If sSelect Then
    Try hTree[sSelect].Selected = True
    Try hTree[sSelect].EnsureVisible
  Endif

End



Public Sub cmbMenu_Click()

  $sMenuSystem = GetSystemFromName(cmbMenu.Text)

  cmbCategories.Text = Project.Categories[$sMenuSystem]
  FillTreeWith(tvwMenu, ("Menus"), "img/16/menu.png", "install/menu" &/ $sMenuSystem, txtMenu, Project.Menus[$sMenuSystem], True)

End

Private Sub AddCategory(sAdd As String)
  
  Dim sAll As String = cmbCategories.Text & ";" & sAdd
  Dim aCat As New String[]
  Dim sCat As String
  
  For Each sCat In Split(sAll, ";").Sort()
    If Not sCat Then Continue 
    If aCat.Exist(sCat) Then Continue 
    aCat.Add(sCat)
  Next
  
  cmbCategories.Text = aCat.Join(";")
  
End

Private Sub RemoveCategory(sAdd As String)
  
  Dim aRemove As String[] = Split(sAdd, ";")
  Dim aCat As New String[]
  Dim sCat As String
  
  For Each sCat In Split(cmbCategories.Text, ";").Sort()
    If Not sCat Then Continue 
    If aRemove.Exist(sCat) Then Continue 
    aCat.Add(sCat)
  Next
  
  cmbCategories.Text = aCat.Join(";")
  
End



Public Sub tvwMenu_Select()

  Dim sMenu As String

  If tvwMenu.Item.Children Then Return

  RemoveCategory($sLastCat)
  $sLastCat = $cCatCache[tvwMenu.Key]
  AddCategory($sLastCat)

  tvwMenu.MoveCurrent
  While tvwMenu.Item.Key <> "/"
    sMenu = tvwMenu.Item.Text &/ sMenu
    tvwMenu.MoveParent
  Wend

  txtMenu.Text = sMenu
  
  'sSys = GetSystemFromName(cmbMenu.Text)
  
  Project.Menus[$sMenuSystem] = sMenu
  Project.Categories[$sMenuSystem] = cmbCategories.Text
  
End

Public Sub cmbGroup_Click()

  $sGroupSystem = GetSystemFromName(cmbGroup.Text)

  txtGroup.Clear
  FillTreeWith(tvwGroup, ("Groups"), "icon:/small/package", "install/group" &/ $sGroupSystem, txtMenu, Project.Groups[$sGroupSystem])

End

Public Sub tvwGroup_Select()

  Dim sGroup As String

  tvwGroup.MoveCurrent
  While tvwGroup.Item.Key <> "/"
    sGroup = tvwGroup.Item.Text &/ sGroup
    tvwGroup.MoveParent
  Wend

  txtGroup.Text = sGroup
  Project.Groups[GetSystemFromName(cmbGroup.Text)] = sGroup

End

Public Sub cmbCategories_LostFocus()

  AddCategory("")
  Project.Categories[$sMenuSystem] = cmbCategories.Text  

End

Public Sub cmbCategories_Click()

  Dim sCat As String = cmbCategories[cmbCategories.Index].Text
  
  cmbCategories.Text = Project.Categories[$sMenuSystem]
  AddCategory(sCat)  
  Project.Categories[$sMenuSystem] = cmbCategories.Text  

End

Public Sub tvwMenu_Collapse()

  tvwMenu.Item.Expanded = True  

End

Public Sub tvwGroup_Collapse()

  tvwGroup.Item.Expanded = True    

End

Public Sub chkDistro_Click()

  Dim hCheckBox As CheckBox = Last
  Dim hButton As ToolButton = hCheckBox.Previous
  
  hButton.Enabled = hCheckBox.Value
  
End

Public Sub txtVendor_Change()

  UpdatePackageName  

End

Public Sub chkUseRelease_Click()

  UpdatePackageName

End

Public Sub chkCreateDir_Click()

  Project.CreateEachDirectory = chkCreateDir.Value

End
