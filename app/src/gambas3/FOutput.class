' Gambas class file

'PUBLIC Shown AS Boolean

Private $iCol As Integer
Private $iLine As Integer
Private $bWelcome As Boolean
Private $bOpened As Boolean

Public Sub _new()

  'Config.LoadWindow(ME, "/FOutput")
  Settings.Read(Me)
  ReadConfig
  
  chkCharset.Visible = System.Charset <> Desktop.Charset
  sepCharset.Visible = chkCharset.Visible
  btnUndock.Value = Settings["/FOutput/Undock"]
  btnAbove.Value = Settings["/FOutput/KeepAbove"]
  OnProjectDebug

End


Public Sub Clear()

  edtOutput.Clear
  $iLine = 0

  If Not $bWelcome Then

    edtOutput.Insert(("Welcome to the Gambas console.\nTo evaluate any expression, type '?' followed by\nthe expression, then hit return.\n\n"))
    $iCol = edtOutput.Column
    $iLine = edtOutput.Line

    $bWelcome = True

  Endif

End


Public Sub Insert(sText As String, Optional bCurrent As Boolean)

  If chkCharset.Value Then  
    Try sText = DConv$(sText)
  Endif

  If Not bCurrent Then 
    'edtOutput.Line = edtOutput.Lines.Count
    'edtOutput.Goto(edtOutput.Lines.Count, 10000)
  Endif
  
  edtOutput.Print(sText)
  
  $iLine = edtOutput.Line
  $iCol = edtOutput.Column

  If Not Action["console"].Value Then Action["console"].Value = True

End

Public Sub ReadConfig()

  edtOutput.Font = Font[Settings["/Editor/Font", Project.DEFAULT_FONT]]
  MTheme.InitEditor(edtOutput)

End

Public Sub edtOutput_KeyPress()

  Dim sText As String
  Dim iPos As Integer
  Dim sVal As String

  If Key.Code = Key.Enter Or Key.Code = Key.Return Then

    'TRY sText = SConv$(edtOutput.Text)

    'iPos = RInStr(sText, "\n", edtOutput.Pos)
    'sText = Mid$(sText, iPos + 1, edtOutput.Pos - iPos)
    
    sText = edtOutput.Lines[edtOutput.Line].Text
    If chkCharset.Value Then
      Try sText = SConv$(sText)
    Endif

    If Design.IsRunning() Then

      'IF $iPos > iPos THEN sText = Mid$(sText, $iPos - iPos + 1)
      
      If $iLine = edtOutput.Line Then
        sText = Mid$(sText, $iCol + 1)
      Endif

      edtOutput.Insert("\n")
      Design.Send(sText & "\n")
      'Key.Cancel = TRUE
      Stop Event

    Else If Left$(sText) = "?" Then

      sText = Mid$(sText, 2)
      If Not sText Then Return

      If Project.Running Then

        edtOutput.Insert("\n")
        Design.Command("!\t" & sText)
        Stop Event

      Else

        Try sVal = Str(Eval(sText & "\n"))
        If Error Then sVal = Error.Text
        Insert("\n" & DConv$(sVal) & "\n")
        'Key.Cancel = TRUE
        Stop Event

      Endif

    Endif

  Else If Key.Code = Key.Escape Then 
  
    Action["console"].Value = False

  Else If Key.Control Then

    If Key.Code = Key["L"] Then
      Clear
    'ELSE IF Code = Key["C"] THEN
    '  Project.DebugForm.Stop
    '  RETURN FALSE
    Endif

  Endif

End

Public Sub Form_Close()

  If Not Me.Parent Then 
    'DEBUG "Write: "; ME.X;; ME.Y
    Settings.Write(Me)
  Endif
  'Action["console"].Value = FALSE
  'Settings.Write(ME)

End

Public Sub Form_Show()

  'Action["console"].Value = TRUE

End

Public Sub Form_GotFocus()

  edtOutput.SetFocus

End

Public Sub btnClear_Click()

  Clear
  edtOutput.SetFocus

End

Public Sub btnCut_Click()

  edtOutput.Cut

End

Public Sub btnCopy_Click()

  edtOutput.Copy

End

Public Sub btnPaste_Click()

  edtOutput.Paste

End

Public Sub Form_Activate()

  'edtOutput.SetFocus

End

Public Sub btnUndock_Click()

  Settings["/FOutput/Undock"] = btnUndock.Value
  OnProjectDebug
  FDebugInfo.UpdateView

End

' PUBLIC SUB Toggle(bShow AS Boolean)
'   
'   IF NOT btnUndock.Value THEN
'     'IF NOT Project.Running THEN 
'       FMain.ShowDebug(bShow)
'     'ENDIF 
'   ELSE 
'     ME.Visible = bShow
'   ENDIF
'   
' END

Public Sub OnProjectDebug()
  
  btnAbove.Visible = Project.Running And btnUndock.Value
  Me.Stacking = If(Project.Running And btnAbove.Value, Window.Above, Window.Normal)
  
End


Public Sub btnAbove_Click()

  Settings["/FOutput/KeepAbove"] = btnAbove.Value
  OnProjectDebug
  
End

Public Sub Form_Open()

  If Not Me.Parent Then 
    Settings.Read(Me)
    'DEBUG "Read: "; ME.X;; ME.Y
  Endif
  
End

Private Sub Search(bBack As Boolean)

  Dim sFind As String = txtFind.Text
  Dim iLine, iCol As Integer
  Dim sLine As String
  Dim iPos As Integer
  Dim iStart As Integer
  Dim bCase As Boolean = Not btnCase.Value
  Dim bLoop As Boolean
  
  If Not sFind Then Return
  
  If edtOutput.Selected Then
    If bBack Then
      edtOutput.Goto(edtOutput.Selection.StartLine, edtOutput.Selection.StartColumn)
    Else
      edtOutput.Goto(edtOutput.Selection.EndLine, edtOutput.Selection.EndColumn)
    Endif
  Endif
  
  iLine = edtOutput.Line
  iStart = iLine
  iCol = edtOutput.Column
  
  If bCase Then sFind = String.UCase(sFind)
  
  If bBack Then
  
    Do
      If iCol Then
        sLine = edtOutput.Lines[iLine].Text
        If bCase Then sLine = String.UCase(sLine)
        iPos = String.RInStr(sLine, sFind, iCol)
        If iPos Then
          Dec iPos
          edtOutput.Select(iLine, iPos, iLine, iPos + String.Len(sFind))
          Return
        Endif
      Endif
      If iLine = iStart And If bLoop Then Return
      Dec iLine
      If iLine < 0 Then iLine = edtOutput.Lines.Count - 1
      iCol = edtOutput.Lines[iLine].Length
      bLoop = True
    Loop

  Else
  
    Do
      sLine = edtOutput.Lines[iLine].Text
      If bCase Then sLine = String.UCase(sLine)
      iPos = String.InStr(sLine, sFind, iCol + 1)
      If iPos Then
        Dec iPos
        edtOutput.Select(iLine, iPos, iLine, iPos + String.Len(sFind))
        Return
      Endif
      If iLine = iStart And If bLoop Then Return
      Inc iLine
      If iLine >= edtOutput.Lines.Count Then iLine = 0
      iCol = 0
      bLoop = True
    Loop
    
  Endif
  
End

Public Sub txtFind_Activate()

  btnNext_Click

End

Public Sub btnNext_Click()

  Search(False)

End

Public Sub btnPrev_Click()

  Search(True)

End

Public Sub btnFind_Click()

  sepFind.Visible = btnFind.Value
  txtFind.Visible = btnFind.Value
  btnNext.Visible = btnFind.Value
  btnPrev.Visible = btnFind.Value
  btnCase.Visible = btnFind.Value
  txtFind.Font = Font["0"]
  If btnFind.Value Then txtFind.SetFocus

End
