' Gambas module file

Private Root As String

Private $hConn As Connection
Private $iUser As Integer

Private Sub PrintError(sErr As String)

  Response.ContentType = "text/plain;charset=utf-8"
  Response.Begin
  Print sErr
  Response.End

End

Private Sub PrintOK()

  Response.ContentType = "text/plain;charset=utf-8"
  Response.Begin
  Print "10 OK"
  Response.End

End

Public Sub Main()

  Dim sErr As String
  ' Dim sField As String
  
  Root = User.Home &/ "farm"
  
  Select Case Request.Path
    
    Case "/register" ' register a new account
    
      RegisterUser
    
    Case "/confirm" ' confirm registration
    
      ConfirmRegistration
    
    Case "/publish" ' publish software
      
      PublishSoftware
      
    Case "/get" ' get info about software
      
      GetSoftware
      
    Case "/download" ' download software
      
      DownloadSoftware
      
    Case "/vote" ' vote or remove a vote for a software
      
      VoteSoftware
    
    Case "/search" ' search for software
      
      SearchSoftware
      
    Case "/tags" ' search for tag
      
      GetTags
      
    ' Case "/test"
    '   
    '   Response.ContentType = "text/plain;charset=utf-8"
    '   Response.Begin
    '   Print "99 This is a test!"
    '   For Each sField In Request.Fields
    '     Print sField; ": "; Request[sField]
    '   Next
    '   Response.End
    
    Case Else
      
      PrintError("11 Unknown command")
    
  End Select
  
Catch
  
  sErr = "12 Unexpected error\n\n" & Error.Text & "\n\n" & Error.Backtrace.Join("\n")
  PrintError(sErr)

End

Private Sub OpenDatabase()
  
  If $hConn Then Return
  
  $hConn = New Connection
  $hConn.Type = "postgresql"
  $hConn.Name = "gambas3_farm"
  $hConn.Open
  
End


Private Sub RegisterUser()

  Dim sLogin As String
  Dim sPassword As String
  Dim sName As String
  Dim rUser As Result
  Dim I As Integer
  Dim sKey As String
  Dim hSmtpClient As SmtpClient
  Dim sErr As String
  Dim sEmail As String
  
  OpenDatabase
  
  sLogin = Request["login"]
  sPassword = Request["password"]
  sName = Request["name"]
  If Not sName Then sName = sLogin
  sEmail = Request["email"]
  
  If Not sLogin Then
    PrintError("13 Bad request\nMissing login")
    Return
  Endif
  
  If Not sPassword Then
    PrintError("13 Bad request\nMissing password")
    Return
  Endif
  
  If Not sEmail Then
    PrintError("13 Bad request\nMissing e-mail")
    Return
  Endif
  
  For I = 1 To 6
    sKey &= Hex$(Int(Rnd(65536)), 4)
  Next

  rUser = DB.Create("user")
  rUser!login = sLogin
  rUser!password = sPassword
  rUser!name = sName
  rUser!confirm = sKey
  Try rUser.Update
  
  If Error Then
    PrintError("14 Login already in use")
    Return
  Endif
  
  hSmtpClient = New SmtpClient
  hSmtpClient.From = "noreply@gambaswiki.org"
  hSmtpClient.To.Add(sName & " <" & sEmail & ">")
  hSmtpClient.Host = "smtp.free.fr" '"smtp.hosting.blueleader.net"
  hSmtpClient.Subject = "Gambas farm registration confirmation"
  hSmtpClient.Body = "Hi,\n\n"
    "You have requested a Gambas farm account.\n"
    "Please click on the following link to confirm your registration:\n\n"
    "http://" & Application.Host &/ Application.Root &/ "confirm?key=" & URL.Encode(sKey) & "&login=" & URL.Encode(sLogin) & "\n\n"
  
  Try hSmtpClient.Send
  If Error Then
    sErr = Error.Text
    Try DB.Delete("user", "login = &1", sLogin)
    PrintError("15 Cannot send confirmation mail\n\n" & sErr)
    Return
  Endif

  PrintOK
  
End


Private Sub ConfirmRegistration()

  Dim sLogin As String
  Dim sKey As String
  Dim rUser As Result
  
  OpenDatabase
  
  sLogin = Request["login"]
  sKey = Request["key"]
  
  rUser = DB.Edit("user", "login = &1", sLogin)
  If Not rUser.Available Then
    PrintError("16 Unknown user")
    Return
  Endif
  
  If rUser!confirm <> sKey Then
    PrintError("17 Confirmation failed")
    Return
  Endif

  rUser!confirm = ""
  rUser.Update
  
  Response.ContentType = "text/html;charset=utf-8"
  Response.Begin
  Print "<h1>Welcome "; Html(rUser!name); "!</h1><h2>Your account has been successfully activated.</h2>"
  Response.End

End

Private Sub CheckUser(Optional bIgnoreFail As Boolean) As Boolean

  Dim sLogin As String
  Dim sPassword As String
  Dim rUser As Result

  OpenDatabase
  
  sLogin = Request["login"]
  sPassword = Request["password"]
  
  rUser = DB.Find("user", "login = &1", sLogin)
  If Not rUser.Available Then Goto FAILED
  If rUser!password <> sPassword Then Goto FAILED
  If rUser!confirm Then Goto FAILED
  
  $iUser = rUser!id
  Return

FAILED:

  If Not bIgnoreFail Then PrintError("18 Authentication failed")
  Return True
  
End

Private Sub CheckVersion(sVersion As String) As Boolean

  Dim aVersion As String[]
  Dim I As Integer

  aVersion = Split(sVersion, ".")
  If aVersion.Count > 3 Then Return True
  For I = 0 To aVersion.Max
    If Not IsDigit(aVersion[I]) Then Return True
  Next

End

Private Sub CopySoftwareFile($iId As Integer, sDest As String, sSource As String)

  sDest = Root &/ CStr($iId) &/ sDest
  Try Kill sDest
  Copy sSource To sDest

End

Private Sub GetCheckSum(sPath As String) As String
  
  Dim sChecksum As String
  Dim iPos As Integer
  
  Exec ["sha256sum", sPath] To sChecksum
  iPos = InStr(sChecksum, " ")
  sChecksum = Left(sChecksum, iPos - 1)
  Return sChecksum
  
Catch
  
  Error.Raise("Unable to compute checksum")
  
End

Private Sub PublishSoftware()

  Dim sName As String
  Dim sVersion As String
  Dim sDesc As String
  Dim sGambas As String
  Dim sChecksum As String
  Dim sSource As String
  Dim rSoftware As Result
  Dim sIcon As String
  Dim sScreenshot As String
  Dim aVersion As String[]
  Dim sMyChecksum As String
  Dim sURL As String
  Dim aTag As String[]
  Dim aDep As String[]
  Dim sTag As String
  Dim rTag As Result
  Dim iTag As Integer
  
  If CheckUser() Then Return

  sName = Request["name"]
  sVersion = Request["version"]
  sDesc = Request["desc"]
  sGambas = Request["gambas"]
  sChecksum = Request["checksum"]
  sSource = Request["source"]
  sIcon = Request["icon"]
  sScreenshot = Request["screenshot"]
  sURL = Request["url"]
  aTag = Split(Request["tags"])
  aDep = Split(Request["dependencies"])
  
  If Not sName Then
    PrintError("13 Bad request\nName missing")
    Return
  Endif
  
  If Not sVersion Then
    PrintError("13 Bad request\nVersion missing.")
    Return
  Endif
  
  If Not sChecksum Then
    PrintError("13 Bad request\nChecksum missing")
    Return
  Endif
  
  If Not sIcon Then
    PrintError("13 Bad request\nIcon missing")
    Return
  Endif
  
  If Not sSource Or If Not Request.Files["source"] Then
    PrintError("13 Bad request\nSource archive missing")
    Return
  Endif
  
  If CheckVersion(sVersion) Then
    PrintError("19 Incorrect version")
    Return
  Endif
  
  If CheckVersion(sGambas) Then
    PrintError("20 Incorrect Gambas version")
    Return
  Endif
  
  If sSource Not Ends ".tar.gz" And If sSource Not Ends ".tar.bz2" Then
    PrintError("21 Unsupported source archive format")
    Return
  Endif
  
  If sIcon Not Ends ".png" Then
    PrintError("22 Unsupported icon format")
    Return
  Endif
  
  sMyChecksum = GetCheckSum(Request.Files["source"])
  If sMyChecksum <> sChecksum Then 
    PrintError("23 Bad checksum")
    Return
  Endif
  
  aVersion = Split(sVersion, ".")
  sName &= "_" & aVersion[0]
  
  DB.Begin
  
  rSoftware = DB.Edit("software", "name = &1", sName)
  If rSoftware.Available Then
    If rSoftware!owner <> $iUser Then
      PrintError("24 Software already exists")
      Return
    Endif
  Else
    rSoftware = DB.Create("software")
    rSoftware!name = sName
    rSoftware!owner = $iUser
  Endif
  
  rSoftware!version = sVersion
  rSoftware!description = sDesc
  rSoftware!gambas = sGambas
  rSoftware!checksum = sChecksum
  rSoftware!url = sURL
  rSoftware!date = Now
  rSoftware.Update
  
  rSoftware = DB.Find("software", "name = &1", sName)
  
  Try Mkdir Root
  Try Mkdir Root &/ CStr(rSoftware!id)
  
  CopySoftwareFile(rSoftware!id, "source.tar." & File.Ext(sSource), Request.Files["source"])
  CopySoftwareFile(rSoftware!id, "icon.png", Request.Files["icon"])
  If sScreenshot Then
    CopySoftwareFile(rSoftware!id, "screenshot." & File.Ext(sScreenshot), Request.Files["screenshot"])
  Endif
  
  DB.Delete("tag", "software = &1", rSoftware!id)
  
  For Each sTag In aTag
    
    rTag = DB.Find("name", "cname = &1", Lower(sTag))
    If Not rTag.Available Then
      rTag = DB.Create("name")
      rTag!name = sTag
      rTag!cname = Lower(sTag)
      rTag.Update
      rTag = DB.Find("name", "cname = &1", Lower(sTag))
    Endif
    iTag = rTag!id
    
    rTag = DB.Create("tag")
    rTag!software = rSoftware!id
    rTag!tag = iTag
    rTag.Update
    
  Next
  
  DB.Commit
  
  PrintOK
  
End

Private Sub FindSoftware() As Result

  Dim sId As String
  Dim iId As Integer
  Dim rSoftware As Result

  sId = Request["id"]
  
  If Not sId Then
    PrintError("13 Bad request\nId missing")
    Return
  Endif

  Try iId = CInt(sId)
  If iId Then
    rSoftware = DB.Find("software", "id = &1", iId)
  Else
    rSoftware = DB.Find("software", "checksum = &1", sId)
  Endif
  
  If rSoftware.Count <> 1 Then
    PrintError("25 Unknown software")
    Return
  Endif
  
  Return rSoftware

End

Private Sub GetSoftware()

  Dim rSoftware As Result
  Dim sPath As String
  Dim rUser As Result
  Dim sOwner As String
  Dim rVote As Result
  
  OpenDatabase
  
  CheckUser(True)

  rSoftware = FindSoftware()
  If Not rSoftware Then Return

  If Request.Exist("icon") Then
    
    Response.SendFile(Root &/ CStr(rSoftware!id) &/ "icon.png")
      
  Else If Request.Exist("screenshot") Then
      
    Try sPath = Dir(Root &/ CStr(rSoftware!id), "screenshot.*")[0]
    If Error Then
      PrintError("26 No screenshot")
    Else
      Response.SendFile(Root &/ CStr(rSoftware!id) &/ sPath)
    Endif
  
  Else
    
    Response.ContentType = "text/plain;charset=utf-8"
    Response.Begin
    
    rUser = DB.Find("user", "id = &1", rSoftware!owner)
    If rUser.Available Then sOwner = rUser!name
    If Not sOwner Then sOwner = "?"
    
    Print "10 OK"
    Print "Id="; rSoftware!id
    Print "Name="; Quote(rSoftware!name)
    Print "Version="; Quote(rSoftware!version)
    Print "UploadDate="; Format(rSoftware!date, "yyyymmddhhnnss")
    Print "Description="; Quote(rSoftware!description)
    Print "URL="; Quote(rSoftware!url)
    Print "RequiredGambasVersion="; Quote(rSoftware!gambas)
    Print "Checksum="; Quote(rSoftware!checksum)
    Print "DownloadCount="; rSoftware!download
    Print "VoteCount="; rSoftware!vote
    Print "Owner="; Quote(sOwner)
    
    If $iUser Then
      rVote = DB.Find("vote", "software = &1 AND \"user\" = &2", rSoftware!id, $iUser)
      If rVote.Available Then
        Print "YourVote=1"
      Else
        Print "YourVote=0"
      Endif
    Endif
    
    Response.End
    
  Endif

End

Private Sub DownloadSoftware()

  Dim rSoftware As Result
  Dim sPath As String
  
  OpenDatabase

  rSoftware = FindSoftware()
  If Not rSoftware Then Return

  Try sPath = Dir(Root &/ CStr(rSoftware!id), "source.*")[0]
  If Error Then
    PrintError("27 No source")
  Else
    
    Response.AddHeader("Content-Disposition", "attachment; filename=\"" & Left(rSoftware!name, -2) & "-" & rSoftware!version & "." & File.Ext(sPath) & "\"")
    Response.SendFile(Root &/ CStr(rSoftware!id) &/ sPath)
    
    rSoftware = DB.Edit("software", "id = &1", rSoftware!id)
    Inc rSoftware!download
    rSoftware.Update
    
  Endif
      
End

Private Sub VoteSoftware()

  Dim rSoftware As Result
  Dim rVote As Result
  
  OpenDatabase
  
  If CheckUser() Then Return

  rSoftware = FindSoftware()
  If Not rSoftware Then Return

  If Request.Exist("clear") Then
    Try DB.Delete("vote", "software = &1 AND user = &2", rSoftware!id, $iUser)
  Else
    rVote = DB.Create("vote")
    rVote!software = rSoftware!id
    rVote!user = $iUser
    Try rVote.Update
  Endif

  PrintOK

End

Private Sub SearchSoftware()

  Dim sFilter As String
  Dim sSort As String
  Dim sFrom As String
  Dim aFrom As String[]
  Dim iFromId As Integer
  Dim dDate As Date
  Dim sReq As String
  Dim rSoftware As Result
  Dim aSoftware As String[]
  
  OpenDatabase
  
  sFilter = Request["filter"]
  sSort = Request["sort"]
  sFrom = Request["from"]
  
  If Not sSort Then
    PrintError("28 No sort criteria")
    Return
  Endif
  
  If sFrom Then
    aFrom = Split(sFrom)
    If aFrom.Count = 2 Then 
      sFrom = aFrom[0]
      If Not IsDigit(sFrom) Then
      Endif
      iFromId = CInt(aFrom[1])
    Else
      sFrom = ""
    Endif
  Endif
  
  Select Case sSort
    Case "date"
      If sFrom Then
        dDate = Date(CInt(Left$(sFrom, 4)), CInt(Mid$(sFrom, 5, 2)), CInt(Mid$(sFrom, 7, 2)), CInt(Mid$(sFrom, 9, 2)), CInt(Mid$(sFrom, 11, 2)), CInt(Mid$(sFrom, 13, 2)), CInt(Mid$(sFrom, 15, 3)))
        sReq = DB.Subst("(date = &1 AND id > &2) OR (date > &1)", dDate, iFromId)
      Endif
    Case "vote"
      If sFrom Then sReq = DB.Subst("(vote = &1 AND id > &2) OR (vote > &1)", CInt(sFrom), iFromId)
    Case "download"
      If sFrom Then sReq = DB.Subst("(download = &1 AND id > &2) OR (download > &1)", CInt(sFrom), iFromId)
    Case Else
      PrintError("29 Unknown sort criteria")
      Return
  End Select
  
  rSoftware = DB.Limit(50).Exec("SELECT * FROM software" & sReq & " ORDER BY " & sSort & ",id")
  
  Response.ContentType = "text/plain;charset=utf-8"
  Response.Begin
  Print "10 OK"

  If rSoftware.Count Then
    
    aSoftware = New String[]
    While rSoftware.Available
      aSoftware.Add(rSoftware!id)
      rSoftware.MoveNext
    Wend
    
    Print "Result="; aSoftware.Join(",")
    
    rSoftware.MoveLast
    
    Print "From=";
    If sSort = "date" Then
      Print Format(rSoftware!date, "yyyymmddhhnnssuuu");
    Else
      Print rSoftware[sSort];
    Endif
    Print ","; rSoftware!id
    
  Else
    
    Print
    Print
    
  Endif
  
  Response.End

End

Private Sub GetTags()

  Dim sTag As String
  Dim rTag As Result
  
  OpenDatabase
  
  sTag = Lower(Request["name"])
  If sTag Then
    rTag = DB.Limit(32).Find("name", "cname LIKE &1 ORDER BY cname", sTag & "%")
  Else
    rTag = DB.Limit(32).Find("name", "ORDER BY cname")
  Endif
  
  Response.ContentType = "text/plain;charset=utf-8"
  Response.Begin
  Print "10 OK"
  For Each rTag
    Print rTag!name
  Next
  Response.End

End
